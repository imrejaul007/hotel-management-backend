This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.env.example
.gitignore
package.json
public/css/admin.css
public/css/style.css
public/forgot-password.html
public/js/admin.js
public/js/main.js
public/js/maintenance.js
README.md
scripts/create-admin.js
server.js
src/app.js
src/config/db.js
src/config/env.js
src/config/index.js
src/config/passport.js
src/config/swagger.js
src/controllers/admin.controller.js
src/controllers/admin.loyalty.controller.js
src/controllers/admin.rewards.controller.js
src/controllers/admin.tier.controller.js
src/controllers/admin/analytics.controller.js
src/controllers/admin/booking.controller.js
src/controllers/admin/calendar.controller.js
src/controllers/admin/channel-manager.controller.js
src/controllers/admin/check-in-out.controller.js
src/controllers/admin/digital-checkin.controller.js
src/controllers/admin/guest-analytics.controller.js
src/controllers/admin/guest.controller.js
src/controllers/admin/housekeeping.controller.js
src/controllers/admin/inventory.controller.js
src/controllers/admin/loyalty.controller.js
src/controllers/admin/payment.controller.js
src/controllers/admin/room-status.controller.js
src/controllers/admin/settings.controller.js
src/controllers/auth.controller.js
src/controllers/booking.controller.js
src/controllers/channel-manager.controller.js
src/controllers/check-in-out.controller.js
src/controllers/checkInOut.controller.js
src/controllers/corporate.controller.js
src/controllers/financial.controller.js
src/controllers/group.controller.js
src/controllers/guest-profile.controller.js
src/controllers/guest.controller.js
src/controllers/home.controller.js
src/controllers/hotel.controller.js
src/controllers/housekeeping.controller.js
src/controllers/inventory.controller.js
src/controllers/loyalty.controller.js
src/controllers/ota.controller.js
src/controllers/redemption.controller.js
src/controllers/referral.controller.js
src/controllers/user.controller.js
src/helpers/check-in-out-helpers.js
src/helpers/handlebars-helpers.js
src/helpers/hbs.helper.js
src/middleware/asyncHandler.js
src/middleware/auth.js
src/middleware/auth.middleware.js
src/middlewares/auth.middleware.js
src/middlewares/error.middleware.js
src/models/AmenityRequest.js
src/models/Booking.js
src/models/Category.js
src/models/category.model.js
src/models/CheckInOut.js
src/models/CorporateAccount.js
src/models/DigitalKey.js
src/models/EmailCampaign.js
src/models/Group.js
src/models/GroupBooking.js
src/models/Guest.js
src/models/Hotel.js
src/models/HousekeepingTask.js
src/models/inventory-adjustment.model.js
src/models/inventory-item.model.js
src/models/Inventory.js
src/models/InventoryItem.js
src/models/Invoice.js
src/models/Loyalty.js
src/models/LoyaltyProgram.js
src/models/Maintenance.js
src/models/MaintenanceRequest.js
src/models/Notification.js
src/models/Order.js
src/models/OTABooking.js
src/models/OTAChannel.js
src/models/Payment.js
src/models/PaymentSettings.js
src/models/Permission.js
src/models/Promotion.js
src/models/RateManager.js
src/models/Redemption.js
src/models/Referral.js
src/models/Refund.js
src/models/Review.js
src/models/Reward.js
src/models/Role.js
src/models/Room.js
src/models/Supplier.js
src/models/supplier.model.js
src/models/SystemSettings.js
src/models/Task.js
src/models/Tier.js
src/models/Transaction.js
src/models/User.js
src/public/css/style.css
src/public/js/websocket.js
src/routes/admin.routes.js
src/routes/admin/rewards.routes.js
src/routes/api/check-in-out.routes.js
src/routes/api/financial.routes.js
src/routes/api/guest-profile.routes.js
src/routes/api/housekeeping.routes.js
src/routes/api/inventory.routes.js
src/routes/auth.routes.js
src/routes/billing.routes.js
src/routes/booking.routes.js
src/routes/channel-manager.routes.js
src/routes/checkInOut.routes.js
src/routes/corporate.routes.js
src/routes/forgotPassword.routes.js
src/routes/group.routes.js
src/routes/guest-portal.routes.js
src/routes/guest.routes.js
src/routes/home.routes.js
src/routes/hotel.routes.js
src/routes/housekeeping.routes.js
src/routes/index.routes.js
src/routes/inventory.routes.js
src/routes/loyalty.routes.js
src/routes/maintenance.routes.js
src/routes/marketing.routes.js
src/routes/notifications.routes.js
src/routes/ota.routes.js
src/routes/redemption.routes.js
src/routes/referral.routes.js
src/routes/reviews.routes.js
src/routes/tier.routes.js
src/routes/user.routes.js
src/routes/view.routes.js
src/scripts/create-admin.js
src/scripts/create-hotels.js
src/scripts/create-test-data.js
src/scripts/createAdmin.js
src/scripts/seed-inventory.js
src/scripts/setup-admin.js
src/seeders/admin.seeder.js
src/seeders/index.js
src/services/auth.service.js
src/services/booking.service.js
src/services/cache.service.js
src/services/channel-manager.service.js
src/services/email.service.js
src/services/hotel.service.js
src/services/integration.service.js
src/services/notification.service.js
src/services/ota.service.js
src/services/ota/airbnb.service.js
src/services/ota/booking.com.service.js
src/services/ota/expedia.service.js
src/services/rate-manager.service.js
src/services/recommendation.service.js
src/services/user.service.js
src/utils/email.js
src/utils/errorResponse.js
src/utils/errors.js
src/utils/format.utils.js
src/utils/handlebars-helpers.js
src/utils/housekeeping-metrics.js
src/utils/loyalty.utils.js
src/utils/ml.utils.js
src/utils/response.util.js
src/validators/housekeeping.validator.js
src/validators/inventory.validator.js
src/views/admin/billing/invoice-details.hbs
src/views/admin/billing/invoices.hbs
src/views/admin/bookings.hbs
src/views/admin/bookings/calendar.hbs
src/views/admin/bookings/create.hbs
src/views/admin/bookings/current.hbs
src/views/admin/bookings/edit.hbs
src/views/admin/bookings/list.hbs
src/views/admin/bookings/new.hbs
src/views/admin/bookings/past.hbs
src/views/admin/bookings/upcoming.hbs
src/views/admin/channel-manager/dashboard.hbs
src/views/admin/check-in-out/dashboard.hbs
src/views/admin/check-in-out/modals.hbs
src/views/admin/corporate/list.hbs
src/views/admin/current-bookings.hbs
src/views/admin/dashboard.ejs
src/views/admin/dashboard.hbs
src/views/admin/financial/dashboard.hbs
src/views/admin/group-bookings/list.hbs
src/views/admin/guests.hbs
src/views/admin/guests/analytics.hbs
src/views/admin/guests/dashboard.hbs
src/views/admin/guests/list.hbs
src/views/admin/guests/profile.hbs
src/views/admin/hotels.hbs
src/views/admin/housekeeping/dashboard.hbs
src/views/admin/inventory/adjustments.ejs
src/views/admin/inventory/categories.ejs
src/views/admin/inventory/dashboard.hbs
src/views/admin/inventory/index.ejs
src/views/admin/inventory/list.hbs
src/views/admin/inventory/order-details.ejs
src/views/admin/inventory/orders.ejs
src/views/admin/inventory/reports.ejs
src/views/admin/inventory/reports.hbs
src/views/admin/inventory/supplier-details.ejs
src/views/admin/inventory/suppliers.ejs
src/views/admin/loyalty/dashboard.hbs
src/views/admin/loyalty/index.ejs
src/views/admin/loyalty/referrals.ejs
src/views/admin/loyalty/rewards.ejs
src/views/admin/maintenance-details.hbs
src/views/admin/maintenance-edit.hbs
src/views/admin/maintenance-report.hbs
src/views/admin/maintenance.hbs
src/views/admin/maintenance/dashboard.hbs
src/views/admin/maintenance/list.hbs
src/views/admin/ota/list.hbs
src/views/admin/payments/list.hbs
src/views/admin/reports/financial.hbs
src/views/admin/reports/guest.hbs
src/views/admin/reports/occupancy.hbs
src/views/admin/reports/staff.hbs
src/views/admin/rooms/edit.hbs
src/views/admin/rooms/list.hbs
src/views/admin/rooms/status-dashboard.hbs
src/views/admin/settings/hotel.hbs
src/views/admin/settings/roles.hbs
src/views/admin/settings/system.hbs
src/views/admin/settings/users.hbs
src/views/admin/upcoming-bookings.hbs
src/views/admin/user-details.hbs
src/views/admin/users.hbs
src/views/auth/forgot-password.hbs
src/views/auth/login.hbs
src/views/auth/register.hbs
src/views/auth/reset-password.hbs
src/views/bookings/create.hbs
src/views/bookings/details.hbs
src/views/bookings/list.hbs
src/views/emails/loyalty-points.hbs
src/views/emails/loyalty-tier-upgrade.hbs
src/views/emails/loyalty-welcome.hbs
src/views/error.hbs
src/views/guest/amenities.hbs
src/views/guest/bookings.hbs
src/views/guest/dashboard.hbs
src/views/guest/profile.hbs
src/views/hotels/add.hbs
src/views/hotels/edit.hbs
src/views/hotels/list.hbs
src/views/hotels/view.hbs
src/views/index.hbs
src/views/layouts/admin.hbs
src/views/layouts/auth.hbs
src/views/layouts/main.hbs
src/views/maintenance/my-requests.hbs
src/views/partials/admin-nav.ejs
src/views/partials/admin/footer.hbs
src/views/partials/admin/header.hbs
src/views/partials/admin/pagination.hbs
src/views/partials/admin/sidebar.hbs
src/views/partials/footer.ejs
src/views/partials/footer.hbs
src/views/partials/guest/header.hbs
src/views/partials/guest/nav.hbs
src/views/partials/header.ejs
src/views/partials/header.hbs
src/views/partials/navbar.hbs
views/admin/dashboard.hbs
views/admin/housekeeping/tasks.hbs
views/admin/loyalty/dashboard.hbs
views/admin/loyalty/member-details.hbs
views/admin/loyalty/members.hbs
views/admin/loyalty/referrals.hbs
views/admin/loyalty/rewards.hbs
views/admin/loyalty/tiers.hbs
views/admin/marketing/campaigns.hbs
views/admin/marketing/promotions.hbs
views/admin/partials/sidebar.hbs
views/auth/login.hbs
views/check-in-out/check-in.hbs
views/check-in-out/check-out.hbs
views/emails/checkout.hbs
views/emails/housekeeping.hbs
views/emails/loyalty-new-reward.hbs
views/emails/loyalty-redemption-cancelled.hbs
views/emails/loyalty-redemption.hbs
views/emails/loyalty-referral-expired.hbs
views/emails/loyalty-referral-used.hbs
views/emails/loyalty-referral.hbs
views/emails/loyalty-reward.hbs
views/emails/loyalty-tier-upgrade.hbs
views/emails/loyalty-welcome.hbs
views/emails/welcome.hbs
views/loyalty/dashboard.hbs
views/loyalty/preferences.hbs
views/loyalty/redemptions.hbs
views/loyalty/referrals.hbs
views/loyalty/rewards.hbs

================================================================
Files
================================================================

================
File: .env.example
================
# Server Configuration
PORT=3000
NODE_ENV=development

# Database Configuration
MONGODB_URI=mongodb://localhost:27017/hotel-booking

# Authentication
JWT_SECRET=your_jwt_secret_key_here

# Frontend URL (for CORS)
FRONTEND_URL=http://localhost:3000

# Email Configuration
EMAIL_USER=your_email@gmail.com
EMAIL_PASSWORD=your_app_specific_password
EMAIL_FROM=Hotel Management <your_email@gmail.com>

# Loyalty Program Configuration
POINTS_PER_DOLLAR=10
REFERRAL_BONUS_POINTS=1000
MIN_POINTS_SILVER=10000
MIN_POINTS_GOLD=25000
MIN_POINTS_PLATINUM=50000

================
File: .gitignore
================
node_modules/
.env
.DS_Store
npm-debug.log*

================
File: package.json
================
{
  "name": "hotel-management-backend",
  "version": "1.0.0",
  "description": "Hotel Management System Backend",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "seed": "node src/seeders/index.js"
  },
  "dependencies": {
    "@fullcalendar/resource-timeline": "^6.1.15",
    "@paypal/checkout-server-sdk": "^1.0.3",
    "axios": "^1.6.2",
    "bcryptjs": "^2.4.3",
    "chart.js": "^4.4.8",
    "connect-flash": "^0.1.1",
    "cookie-parser": "^1.4.7",
    "cors": "^2.8.5",
    "crypto-js": "^4.2.0",
    "dotenv": "^16.3.1",
    "exceljs": "^4.4.0",
    "express": "^4.18.2",
    "express-handlebars": "^8.0.1",
    "express-session": "^1.18.1",
    "fullcalendar": "^6.1.15",
    "json2csv": "^6.0.0-alpha.2",
    "jsonwebtoken": "^9.0.2",
    "moment": "^2.30.1",
    "mongoose": "^8.0.1",
    "nodemailer": "^6.9.7",
    "nodemailer-express-handlebars": "^7.0.0",
    "oauth": "^0.10.0",
    "passport": "^0.6.0",
    "passport-google-oauth20": "^2.0.0",
    "passport-jwt": "^4.0.1",
    "passport-local": "^1.0.0",
    "pdfkit": "^0.16.0",
    "razorpay": "^2.9.2",
    "redis": "^4.7.0",
    "stripe": "^14.5.0",
    "swagger-jsdoc": "^6.2.8",
    "swagger-ui-express": "^5.0.0",
    "ws": "^8.14.2"
  },
  "devDependencies": {
    "nodemon": "^3.0.1"
  }
}

================
File: public/css/admin.css
================
/* Admin Dashboard Styles */
body {
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
    background-color: #f8f9fa;
}

/* Wrapper */
.wrapper {
    display: flex;
    width: 100%;
    align-items: stretch;
}

/* Sidebar */
.sidebar {
    min-width: 250px;
    max-width: 250px;
    background: #2c3e50;
    color: #fff;
    transition: all 0.3s;
}

.sidebar .sidebar-header {
    padding: 20px;
    background: #1a2634;
}

.sidebar ul.components {
    padding: 20px 0;
    border-bottom: 1px solid #47748b;
}

.sidebar ul p {
    color: #fff;
    padding: 10px;
}

.sidebar ul li a {
    padding: 10px 20px;
    font-size: 1.1em;
    display: block;
    color: #fff;
    text-decoration: none;
    transition: all 0.3s;
}

.sidebar ul li a:hover {
    background: #34495e;
}

.sidebar ul li.active > a {
    background: #3498db;
}

/* Content */
#content {
    width: 100%;
    min-height: 100vh;
    transition: all 0.3s;
    background-color: #f8f9fa;
}

/* Cards */
.card {
    border: none;
    border-radius: 10px;
    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    margin-bottom: 1.5rem;
}

.card-header {
    background-color: #fff;
    border-bottom: 1px solid #eee;
    padding: 1rem 1.25rem;
}

/* Tables */
.table {
    margin-bottom: 0;
}

.table thead th {
    border-top: none;
    border-bottom-width: 1px;
    font-weight: 500;
    text-transform: uppercase;
    font-size: 0.875rem;
    color: #6c757d;
}

.table td {
    vertical-align: middle;
}

/* Buttons */
.btn {
    border-radius: 5px;
    padding: 0.5rem 1rem;
}

.btn-icon {
    padding: 0.25rem 0.5rem;
}

/* Forms */
.form-control {
    border-radius: 5px;
    border: 1px solid #ced4da;
}

.form-control:focus {
    border-color: #3498db;
    box-shadow: 0 0 0 0.2rem rgba(52, 152, 219, 0.25);
}

/* Badges */
.badge {
    padding: 0.5em 0.75em;
    font-weight: 500;
}

/* Timeline */
.timeline {
    position: relative;
    padding: 20px 0;
}

.timeline-item {
    position: relative;
    padding-left: 40px;
    margin-bottom: 20px;
}

.timeline-item::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    bottom: -20px;
    width: 2px;
    background-color: #e9ecef;
}

.timeline-item::after {
    content: '';
    position: absolute;
    left: -4px;
    top: 0;
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background-color: #007bff;
}

.timeline-date {
    font-size: 0.875rem;
    color: #6c757d;
    margin-bottom: 5px;
}

.timeline-content {
    background-color: #f8f9fa;
    padding: 15px;
    border-radius: 4px;
}

/* Stats Cards */
.stats-card {
    border-radius: 10px;
    padding: 1.5rem;
    margin-bottom: 1rem;
    background: linear-gradient(45deg, #3498db, #2980b9);
    color: white;
}

.stats-card h3 {
    font-size: 2rem;
    margin-bottom: 0.5rem;
}

.stats-card p {
    margin-bottom: 0;
    opacity: 0.8;
}

/* Charts */
.chart-container {
    position: relative;
    height: 300px;
}

/* Responsive */
@media (max-width: 768px) {
    .sidebar {
        margin-left: -250px;
    }
    
    .sidebar.active {
        margin-left: 0;
    }
    
    #content {
        width: 100%;
    }
    
    #sidebarCollapse span {
        display: none;
    }
    
    .stats-card {
        margin-bottom: 1rem;
    }
}

/* Custom Scrollbar */
::-webkit-scrollbar {
    width: 5px;
}

::-webkit-scrollbar-track {
    background: #f1f1f1;
}

::-webkit-scrollbar-thumb {
    background: #888;
    border-radius: 5px;
}

::-webkit-scrollbar-thumb:hover {
    background: #555;
}

================
File: public/css/style.css
================
/* Global Styles */
body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    line-height: 1.6;
    color: #333;
}

/* Navbar Styles */
.navbar {
    padding: 1rem 0;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.navbar-brand {
    font-size: 1.5rem;
    font-weight: bold;
    color: #fff;
}

/* Card Styles */
.card {
    border: none;
    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    transition: transform 0.3s ease;
}

.card:hover {
    transform: translateY(-5px);
}

.card-img-top {
    height: 200px;
    object-fit: cover;
}

/* Form Styles */
.form-control:focus {
    border-color: #007bff;
    box-shadow: 0 0 0 0.2rem rgba(0,123,255,0.25);
}

.btn-primary {
    padding: 0.5rem 1.5rem;
}

/* Feature Icons */
.fas {
    color: #007bff;
}

/* Footer Styles */
.footer {
    background-color: #343a40;
    color: #fff;
    padding: 2rem 0;
}

/* Responsive Styles */
@media (max-width: 768px) {
    .navbar-brand {
        font-size: 1.2rem;
    }

    .card-img-top {
        height: 150px;
    }
}

/* Hotel Search Form */
.search-form {
    background-color: #f8f9fa;
    padding: 2rem;
    border-radius: 10px;
}

/* Featured Hotels Section */
.featured-hotels {
    padding: 4rem 0;
    background-color: #f8f9fa;
}

/* Newsletter Section */
.newsletter {
    background-color: #e9ecef;
    padding: 3rem 0;
}

/* Why Choose Us Section */
.why-choose-us {
    padding: 4rem 0;
}

.why-choose-us .icon-box {
    padding: 2rem;
    text-align: center;
}

/* Hotel Details Page */
.hotel-details {
    padding: 2rem 0;
}

.hotel-details .gallery img {
    width: 100%;
    height: 300px;
    object-fit: cover;
    margin-bottom: 1rem;
}

.hotel-details .amenities {
    list-style: none;
    padding: 0;
}

.hotel-details .amenities li {
    margin-bottom: 0.5rem;
}

/* Room Types */
.room-type {
    margin-bottom: 2rem;
}

.room-type img {
    width: 100%;
    height: 200px;
    object-fit: cover;
    border-radius: 5px;
}

/* Booking Form */
.booking-form {
    background-color: #fff;
    padding: 2rem;
    border-radius: 10px;
    box-shadow: 0 0 20px rgba(0,0,0,0.1);
}

/* User Dashboard */
.dashboard-stats {
    padding: 1rem;
    background-color: #fff;
    border-radius: 5px;
    margin-bottom: 1rem;
}

.dashboard-stats h3 {
    color: #007bff;
    margin-bottom: 0.5rem;
}

/* Loading Spinner */
.spinner {
    width: 40px;
    height: 40px;
    border: 4px solid #f3f3f3;
    border-top: 4px solid #007bff;
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Alert Messages */
.alert {
    margin-bottom: 1rem;
    border-radius: 5px;
}

/* Pagination */
.pagination {
    margin-top: 2rem;
}

.page-link {
    color: #007bff;
}

.page-item.active .page-link {
    background-color: #007bff;
    border-color: #007bff;
}

/* Custom Scrollbar */
::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #f1f1f1;
}

::-webkit-scrollbar-thumb {
    background: #888;
    border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
    background: #555;
}

================
File: public/forgot-password.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Forgot Password - Hotel Management</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #f5f5f5;
            font-family: 'Arial', sans-serif;
        }
        .forgot-password-container {
            max-width: 400px;
            margin: 100px auto;
            padding: 30px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .logo {
            text-align: center;
            margin-bottom: 30px;
        }
        .form-control:focus {
            border-color: #80bdff;
            box-shadow: 0 0 0 0.2rem rgba(0,123,255,.25);
        }
        .btn-primary {
            background-color: #007bff;
            border-color: #007bff;
            padding: 10px 20px;
        }
        .btn-primary:hover {
            background-color: #0056b3;
            border-color: #0056b3;
        }
        .alert {
            display: none;
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="forgot-password-container">
            <div class="logo">
                <h2>Forgot Password</h2>
                <p class="text-muted">Enter your email to reset your password</p>
            </div>
            
            <div id="successMessage" class="alert alert-success" role="alert">
                Password reset link has been sent to your email!
            </div>
            
            <div id="errorMessage" class="alert alert-danger" role="alert"></div>

            <form id="forgotPasswordForm">
                <div class="mb-3">
                    <label for="email" class="form-label">Email address</label>
                    <input 
                        type="email" 
                        class="form-control" 
                        id="email" 
                        name="email" 
                        placeholder="Enter your email"
                        required
                    >
                </div>
                
                <div class="d-grid gap-2">
                    <button type="submit" class="btn btn-primary" id="submitBtn">
                        Send Reset Link
                    </button>
                    <a href="/auth/login" class="btn btn-outline-secondary">
                        Back to Login
                    </a>
                </div>
            </form>
        </div>
    </div>

    <script>
        document.getElementById('forgotPasswordForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const submitBtn = document.getElementById('submitBtn');
            const successMessage = document.getElementById('successMessage');
            const errorMessage = document.getElementById('errorMessage');
            const email = document.getElementById('email').value;

            // Reset messages
            successMessage.style.display = 'none';
            errorMessage.style.display = 'none';

            // Disable button and show loading state
            submitBtn.disabled = true;
            submitBtn.innerHTML = 'Sending...';

            try {
                const response = await fetch('/auth/forgot-password', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ email })
                });

                const data = await response.json();

                if (data.success) {
                    successMessage.style.display = 'block';
                    document.getElementById('forgotPasswordForm').reset();
                } else {
                    throw new Error(data.message || 'Failed to send reset link');
                }
            } catch (error) {
                errorMessage.textContent = error.message;
                errorMessage.style.display = 'block';
            } finally {
                // Reset button state
                submitBtn.disabled = false;
                submitBtn.innerHTML = 'Send Reset Link';
            }
        });
    </script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>

================
File: public/js/admin.js
================
// Admin Dashboard JavaScript

// Initialize tooltips
var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
    return new bootstrap.Tooltip(tooltipTriggerEl);
});

// Initialize popovers
var popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
var popoverList = popoverTriggerList.map(function (popoverTriggerEl) {
    return new bootstrap.Popover(popoverTriggerEl);
});

// Sidebar Toggle
document.addEventListener('DOMContentLoaded', function() {
    const sidebarToggle = document.getElementById('sidebarCollapse');
    if (sidebarToggle) {
        sidebarToggle.addEventListener('click', function() {
            document.getElementById('sidebar').classList.toggle('active');
        });
    }
});

// Table Search Function
function tableSearch(inputId, tableId) {
    const input = document.getElementById(inputId);
    const table = document.getElementById(tableId);
    
    if (input && table) {
        input.addEventListener('keyup', function() {
            const filter = input.value.toLowerCase();
            const rows = table.getElementsByTagName('tr');
            
            for (let i = 1; i < rows.length; i++) {
                const row = rows[i];
                const cells = row.getElementsByTagName('td');
                let found = false;
                
                for (let j = 0; j < cells.length; j++) {
                    const cell = cells[j];
                    if (cell) {
                        const text = cell.textContent || cell.innerText;
                        if (text.toLowerCase().indexOf(filter) > -1) {
                            found = true;
                            break;
                        }
                    }
                }
                
                row.style.display = found ? '' : 'none';
            }
        });
    }
}

// Date Range Picker Initialization
function initializeDateRangePicker(startDate, endDate) {
    if (typeof flatpickr !== 'undefined') {
        flatpickr("#startDate", {
            dateFormat: "Y-m-d",
            defaultDate: startDate,
            onChange: function(selectedDates, dateStr, instance) {
                endDatePicker.set('minDate', dateStr);
            }
        });

        const endDatePicker = flatpickr("#endDate", {
            dateFormat: "Y-m-d",
            defaultDate: endDate,
            minDate: startDate
        });
    }
}

// Form Validation
function validateForm(formId) {
    const form = document.getElementById(formId);
    if (!form) return true;

    let isValid = true;
    const requiredFields = form.querySelectorAll('[required]');
    
    requiredFields.forEach(field => {
        if (!field.value.trim()) {
            field.classList.add('is-invalid');
            isValid = false;
        } else {
            field.classList.remove('is-invalid');
        }
    });

    return isValid;
}

// Show/Hide Password Toggle
function togglePassword(inputId, toggleId) {
    const input = document.getElementById(inputId);
    const toggle = document.getElementById(toggleId);
    
    if (input && toggle) {
        toggle.addEventListener('click', function() {
            const type = input.getAttribute('type') === 'password' ? 'text' : 'password';
            input.setAttribute('type', type);
            toggle.querySelector('i').classList.toggle('fa-eye');
            toggle.querySelector('i').classList.toggle('fa-eye-slash');
        });
    }
}

// Format Currency
function formatCurrency(amount, currency = 'USD') {
    return new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: currency
    }).format(amount);
}

// Format Date
function formatDate(date, format = 'long') {
    const d = new Date(date);
    if (format === 'long') {
        return d.toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
    }
    return d.toLocaleDateString('en-US');
}

// Show Toast Notification
function showToast(message, type = 'success') {
    const toastContainer = document.getElementById('toastContainer');
    if (!toastContainer) {
        const container = document.createElement('div');
        container.id = 'toastContainer';
        container.style.position = 'fixed';
        container.style.top = '20px';
        container.style.right = '20px';
        container.style.zIndex = '1050';
        document.body.appendChild(container);
    }

    const toast = document.createElement('div');
    toast.className = `toast align-items-center text-white bg-${type} border-0`;
    toast.setAttribute('role', 'alert');
    toast.setAttribute('aria-live', 'assertive');
    toast.setAttribute('aria-atomic', 'true');

    toast.innerHTML = `
        <div class="d-flex">
            <div class="toast-body">
                ${message}
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    `;

    document.getElementById('toastContainer').appendChild(toast);
    const bsToast = new bootstrap.Toast(toast);
    bsToast.show();

    toast.addEventListener('hidden.bs.toast', function () {
        toast.remove();
    });
}

// Handle AJAX Form Submission
function handleAjaxForm(formId, successCallback, errorCallback) {
    const form = document.getElementById(formId);
    if (!form) return;

    form.addEventListener('submit', function(e) {
        e.preventDefault();

        if (!validateForm(formId)) {
            showToast('Please fill in all required fields', 'danger');
            return;
        }

        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());

        fetch(form.action, {
            method: form.method,
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
        .then(response => response.json())
        .then(data => {
            if (successCallback) successCallback(data);
        })
        .catch(error => {
            if (errorCallback) errorCallback(error);
            else showToast('An error occurred. Please try again.', 'danger');
        });
    });
}

// Export functions
window.tableSearch = tableSearch;
window.initializeDateRangePicker = initializeDateRangePicker;
window.validateForm = validateForm;
window.togglePassword = togglePassword;
window.formatCurrency = formatCurrency;
window.formatDate = formatDate;
window.showToast = showToast;
window.handleAjaxForm = handleAjaxForm;

================
File: public/js/main.js
================
// Form validation
document.addEventListener('DOMContentLoaded', function() {
    const forms = document.querySelectorAll('.needs-validation');
    forms.forEach(form => {
        form.addEventListener('submit', function(event) {
            if (!form.checkValidity()) {
                event.preventDefault();
                event.stopPropagation();
            }
            form.classList.add('was-validated');
        });
    });
});

// Date input validation
const checkInDate = document.querySelector('input[name="checkIn"]');
const checkOutDate = document.querySelector('input[name="checkOut"]');

if (checkInDate && checkOutDate) {
    // Set minimum check-in date to today
    const today = new Date().toISOString().split('T')[0];
    checkInDate.setAttribute('min', today);

    // Update check-out date minimum when check-in date changes
    checkInDate.addEventListener('change', function() {
        checkOutDate.setAttribute('min', this.value);
        if (checkOutDate.value && checkOutDate.value < this.value) {
            checkOutDate.value = this.value;
        }
    });
}

// Newsletter form submission
const newsletterForm = document.getElementById('newsletterForm');
if (newsletterForm) {
    newsletterForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        const emailInput = this.querySelector('input[type="email"]');
        const email = emailInput.value;

        try {
            const response = await fetch('/api/newsletter/subscribe', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ email })
            });

            if (response.ok) {
                showAlert('success', 'Successfully subscribed to newsletter!');
                emailInput.value = '';
            } else {
                const data = await response.json();
                showAlert('danger', data.message || 'Failed to subscribe. Please try again.');
            }
        } catch (error) {
            console.error('Newsletter subscription error:', error);
            showAlert('danger', 'An error occurred. Please try again later.');
        }
    });
}

// Alert helper function
function showAlert(type, message) {
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
    alertDiv.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;

    const container = document.querySelector('.container');
    container.insertBefore(alertDiv, container.firstChild);

    // Auto dismiss after 5 seconds
    setTimeout(() => {
        alertDiv.remove();
    }, 5000);
}

// Room booking form handler
const bookingForm = document.getElementById('bookingForm');
if (bookingForm) {
    bookingForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        const formData = new FormData(this);
        const bookingData = Object.fromEntries(formData.entries());

        try {
            const response = await fetch('/api/bookings', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                },
                body: JSON.stringify(bookingData)
            });

            if (response.ok) {
                const data = await response.json();
                window.location.href = `/bookings/${data.bookingId}`;
            } else {
                const data = await response.json();
                showAlert('danger', data.message || 'Failed to create booking. Please try again.');
            }
        } catch (error) {
            console.error('Booking error:', error);
            showAlert('danger', 'An error occurred. Please try again later.');
        }
    });
}

// Search form handler
const searchForm = document.querySelector('form[action="/search"]');
if (searchForm) {
    searchForm.addEventListener('submit', function(e) {
        const checkIn = this.querySelector('input[name="checkIn"]').value;
        const checkOut = this.querySelector('input[name="checkOut"]').value;

        if (new Date(checkIn) >= new Date(checkOut)) {
            e.preventDefault();
            showAlert('danger', 'Check-out date must be after check-in date.');
        }
    });
}

// Image error handler
document.addEventListener('error', function(e) {
    if (e.target.tagName.toLowerCase() === 'img') {
        e.target.src = '/images/hotel-placeholder.jpg';
    }
}, true);

// Scroll to top button
const scrollButton = document.createElement('button');
scrollButton.className = 'btn btn-primary scroll-top';
scrollButton.innerHTML = '<i class="fas fa-arrow-up"></i>';
scrollButton.style.cssText = `
    position: fixed;
    bottom: 20px;
    right: 20px;
    display: none;
    z-index: 1000;
`;

document.body.appendChild(scrollButton);

window.addEventListener('scroll', function() {
    if (window.pageYOffset > 300) {
        scrollButton.style.display = 'block';
    } else {
        scrollButton.style.display = 'none';
    }
});

scrollButton.addEventListener('click', function() {
    window.scrollTo({ top: 0, behavior: 'smooth' });
});

================
File: public/js/maintenance.js
================
let currentRequestId = null;
let selectedHotelId = null;

// Initialize components when the document is ready
document.addEventListener('DOMContentLoaded', function() {
    const requestTypeSelect = document.querySelector('select[name="requestType"]');
    const locationTypeSelect = document.querySelector('select[name="locationType"]');
    const scheduleTypeSelect = document.querySelector('select[name="scheduleType"]');
    const hotelSelect = document.querySelector('select[name="hotel"]');
    
    if (requestTypeSelect) {
        requestTypeSelect.addEventListener('change', updateFormFields);
    }
    
    if (locationTypeSelect) {
        locationTypeSelect.addEventListener('change', updateLocationFields);
    }
    
    if (scheduleTypeSelect) {
        scheduleTypeSelect.addEventListener('change', updateScheduleFields);
    }
    
    if (hotelSelect) {
        hotelSelect.addEventListener('change', function() {
            selectedHotelId = this.value;
            updateRoomsList();
        });
    }
    
    // Initialize form fields
    updateFormFields();
    updateLocationFields();
    updateScheduleFields();
});

function updateFormFields() {
    const requestType = document.querySelector('select[name="requestType"]').value;
    const priorityField = document.getElementById('priorityField');
    const serviceTypeField = document.getElementById('serviceTypeField');
    
    if (requestType === 'maintenance') {
        priorityField.style.display = 'block';
        serviceTypeField.style.display = 'block';
    } else {
        priorityField.style.display = 'none';
        serviceTypeField.style.display = 'none';
    }
}

function updateLocationFields() {
    const locationType = document.querySelector('select[name="locationType"]').value;
    const roomField = document.getElementById('roomField');
    const publicAreaField = document.getElementById('publicAreaField');
    const facilityField = document.getElementById('facilityField');
    
    roomField.style.display = locationType === 'room' ? 'block' : 'none';
    publicAreaField.style.display = locationType === 'public-area' ? 'block' : 'none';
    facilityField.style.display = locationType === 'facility' ? 'block' : 'none';
    
    if (locationType === 'room' && selectedHotelId) {
        updateRoomsList();
    }
}

function updateScheduleFields() {
    const scheduleType = document.querySelector('select[name="scheduleType"]').value;
    const oneTimeSchedule = document.getElementById('oneTimeSchedule');
    const recurringSchedule = document.getElementById('recurringSchedule');
    
    oneTimeSchedule.style.display = scheduleType === 'one-time' ? 'block' : 'none';
    recurringSchedule.style.display = scheduleType === 'recurring' ? 'block' : 'none';
}

async function updateRoomsList() {
    if (!selectedHotelId) return;
    
    try {
        const response = await fetch(`/admin/api/hotels/${selectedHotelId}/rooms`);
        const data = await response.json();
        
        if (data.success) {
            const roomSelect = document.querySelector('select[name="room"]');
            roomSelect.innerHTML = '';
            
            data.data.forEach(room => {
                const option = document.createElement('option');
                option.value = room._id;
                option.textContent = `Room ${room.number}`;
                roomSelect.appendChild(option);
            });
        }
    } catch (error) {
        console.error('Error fetching rooms:', error);
    }
}

async function addRequest() {
    const form = document.getElementById('addRequestForm');
    const formData = new FormData(form);
    const requestData = Object.fromEntries(formData.entries());
    
    try {
        const response = await fetch('/admin/maintenance', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(requestData)
        });
        
        if (response.ok) {
            // Close modal and refresh page
            const modal = bootstrap.Modal.getInstance(document.getElementById('addRequestModal'));
            modal.hide();
            window.location.reload();
        } else {
            const data = await response.json();
            alert(data.message || 'Error creating maintenance request');
        }
    } catch (error) {
        console.error('Error creating maintenance request:', error);
        alert('Error creating maintenance request');
    }
}

async function updateStatus(status) {
    if (!currentRequestId) return;
    
    try {
        const response = await fetch(`/admin/maintenance/${currentRequestId}`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ status })
        });
        
        if (response.ok) {
            // Close modal and refresh page
            const modal = bootstrap.Modal.getInstance(document.getElementById('viewRequestModal'));
            modal.hide();
            window.location.reload();
        } else {
            const data = await response.json();
            alert(data.message || 'Error updating maintenance request');
        }
    } catch (error) {
        console.error('Error updating maintenance request:', error);
        alert('Error updating maintenance request');
    }
}

async function viewRequest(id) {
    try {
        currentRequestId = id;
        const response = await fetch(`/admin/maintenance/${id}`);
        const data = await response.json();
        
        if (data.success) {
            const request = data.data;
            
            // Update modal content
            document.getElementById('viewRequestId').textContent = request._id;
            document.getElementById('viewRequestType').textContent = request.requestType;
            document.getElementById('viewLocation').textContent = getLocationString(request);
            document.getElementById('viewDescription').textContent = request.description;
            document.getElementById('viewStatus').textContent = request.status;
            document.getElementById('viewCreatedAt').textContent = new Date(request.createdAt).toLocaleString();
            
            if (request.requestType === 'maintenance') {
                document.getElementById('viewPriority').textContent = request.priority;
                document.getElementById('viewServiceType').textContent = request.serviceType;
                document.getElementById('viewPriorityRow').style.display = 'table-row';
                document.getElementById('viewServiceTypeRow').style.display = 'table-row';
            } else {
                document.getElementById('viewPriorityRow').style.display = 'none';
                document.getElementById('viewServiceTypeRow').style.display = 'none';
            }
            
            // Show modal
            const modal = new bootstrap.Modal(document.getElementById('viewRequestModal'));
            modal.show();
        }
    } catch (error) {
        console.error('Error fetching maintenance request:', error);
        alert('Error fetching maintenance request details');
    }
}

function getLocationString(request) {
    switch (request.locationType) {
        case 'room':
            return `Room ${request.room.number}`;
        case 'public-area':
            return request.publicArea;
        case 'facility':
            return request.facility;
        default:
            return 'Unknown location';
    }
}

================
File: README.md
================
# Hotel Booking Application

A Node.js Express application for hotel booking management with admin interface.

## Features

- User Authentication (Login/Register)
- Role-based Access Control (Admin/User)
- Hotel Management
  - Add/Edit/Delete Hotels
  - Manage Rooms
  - Toggle Hotel Status
- User Management (Admin)
  - View All Users
  - Toggle User Status
  - Manage Admin Roles
- Booking System
- Responsive UI with Bootstrap

## Tech Stack

- **Backend**: Node.js, Express.js
- **Database**: MongoDB
- **View Engine**: Handlebars
- **Authentication**: JWT, Passport
- **UI Framework**: Bootstrap 5
- **Icons**: Font Awesome

## Prerequisites

- Node.js (v14 or higher)
- MongoDB
- Git

## Setup

1. Clone the repository:
```bash
git clone <repository-url>
cd hotel-booking
```

2. Install dependencies:
```bash
npm install
```

3. Set up environment variables:
```bash
cp .env.example .env
```
Then edit `.env` with your configuration.

4. Start the server:
```bash
# For production
npm start

# For development with auto-reload
npm run dev
```

The server will run on http://localhost:3000 by default.

## Environment Variables

Copy `.env.example` to `.env` and update the values:

- `PORT`: Server port (default: 3000)
- `MONGODB_URI`: MongoDB connection string
- `JWT_SECRET`: Secret key for JWT tokens
- `NODE_ENV`: Environment (development/production)
- `FRONTEND_URL`: Frontend URL for CORS

## API Documentation

API documentation is available at `/api-docs` when the server is running.

## Project Structure

```
src/
├── config/         # Configuration files
├── controllers/    # Route controllers
├── middlewares/    # Custom middlewares
├── models/         # Database models
├── routes/         # Route definitions
├── utils/          # Utility functions
└── views/          # Handlebars templates
```

## Contributing

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/AmazingFeature`)
3. Commit your changes (`git commit -m 'Add some AmazingFeature'`)
4. Push to the branch (`git push origin feature/AmazingFeature`)
5. Open a Pull Request

## License

This project is licensed under the MIT License.

================
File: scripts/create-admin.js
================
require('dotenv').config();
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const User = require('../src/models/User');

async function createAdmin() {
    try {
        // Connect to MongoDB
        await mongoose.connect(process.env.MONGODB_URI);
        console.log('Connected to MongoDB');

        // Check if admin exists
        const adminExists = await User.findOne({ role: 'admin' });
        if (adminExists) {
            console.log('Admin account already exists');
            process.exit(0);
        }

        // Create admin user
        const salt = await bcrypt.genSalt(10);
        const hashedPassword = await bcrypt.hash('admin123', salt);

        const admin = await User.create({
            name: 'Admin',
            email: 'admin@hotel.com',
            password: hashedPassword,
            role: 'admin',
            isAdmin: true,
            isActive: true,
            isEmailVerified: true
        });

        console.log('Admin account created successfully:');
        console.log('Email:', admin.email);
        console.log('Password: admin123');
        
        process.exit(0);
    } catch (error) {
        console.error('Error creating admin:', error);
        process.exit(1);
    }
}

createAdmin();

================
File: server.js
================
const express = require('express');
const mongoose = require('mongoose');
const exphbs = require('express-handlebars');
const path = require('path');
const dotenv = require('dotenv');
const cookieParser = require('cookie-parser');
const session = require('express-session');
const passport = require('passport');

// Load env vars
dotenv.config();

const app = express();

// Body parser
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(cookieParser());

// Session middleware
app.use(session({
    secret: process.env.SESSION_SECRET || 'your-secret-key-123',
    resave: false,
    saveUninitialized: false,
    cookie: {
        secure: process.env.NODE_ENV === 'production',
        httpOnly: true,
        maxAge: 24 * 60 * 60 * 1000 // 24 hours
    }
}));

// Initialize Passport
app.use(passport.initialize());
app.use(passport.session());

// Set static folder
app.use(express.static(path.join(__dirname, 'public')));

// Store for layout blocks
const blocks = {};

// Set up handlebars
const hbs = exphbs.create({
    extname: '.hbs',
    helpers: {
        extend: function(name, context) {
            let block = blocks[name];
            if (!block) {
                block = blocks[name] = [];
            }
            block.push(context.fn(this));
        },
        block: function(name) {
            let val = (blocks[name] || []).join('\n');
            // clear the block
            blocks[name] = [];
            return val;
        },
        eq: (a, b) => a === b,
        gt: (a, b) => a > b,
        lt: (a, b) => a < b,
        gte: (a, b) => a >= b,
        lte: (a, b) => a <= b,
        and: (a, b) => a && b,
        or: (a, b) => a || b,
        not: (a) => !a,
        add: (a, b) => a + b,
        subtract: (a, b) => a - b,
        multiply: (a, b) => a * b,
        divide: (a, b) => a / b,
        abs: (a) => Math.abs(a),
        json: (context) => JSON.stringify(context),
        formatNumber: (number) => {
            return new Intl.NumberFormat('en-US', {
                style: 'currency',
                currency: 'USD'
            }).format(number);
        },
        formatDate: (date) => {
            if (!date) return '';
            return new Date(date).toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
        },
        formatDateInput: (date) => {
            if (!date) return '';
            return new Date(date).toISOString().split('T')[0];
        },
        formatServiceType: (type) => {
            switch (type) {
                case 'guest-request': return 'Guest Request';
                case 'regular-service': return 'Regular Service';
                case 'emergency': return 'Emergency';
                default: return type;
            }
        },
        serviceTypeColor: (type) => {
            switch (type) {
                case 'guest-request': return 'primary';
                case 'regular-service': return 'success';
                case 'emergency': return 'danger';
                default: return 'secondary';
            }
        },
        priorityColor: (priority) => {
            switch (priority) {
                case 'low': return 'success';
                case 'medium': return 'warning';
                case 'high': return 'danger';
                case 'urgent': return 'dark';
                default: return 'secondary';
            }
        },
        statusColor: (status) => {
            switch (status) {
                case 'pending': return 'warning';
                case 'in-progress': return 'info';
                case 'completed': return 'success';
                case 'cancelled': return 'danger';
                default: return 'secondary';
            }
        },
        getPaginationUrl: (page, req) => {
            const currentUrl = new URL(`http://localhost${req.originalUrl}`);
            currentUrl.searchParams.set('page', page);
            return `${currentUrl.pathname}${currentUrl.search}`;
        }
    },
    defaultLayout: 'main',
    layoutsDir: path.join(__dirname, 'src/views/layouts'),
    partialsDir: path.join(__dirname, 'src/views/partials')
});

app.engine('hbs', hbs.engine);
app.set('view engine', 'hbs');
app.set('views', path.join(__dirname, 'src/views'));

// Import routes
const authRoutes = require('./src/routes/auth.routes');
const adminRoutes = require('./src/routes/admin.routes');
const loyaltyRoutes = require('./src/routes/loyalty.routes');
const maintenanceRoutes = require('./src/routes/maintenance.routes');
const otaRoutes = require('./src/routes/ota.routes');
const indexRoutes = require('./src/routes/index.routes');
const checkInOutRoutes = require('./src/routes/checkInOut.routes');
const corporateRoutes = require('./src/routes/corporate.routes');
const groupRoutes = require('./src/routes/group.routes');

// Mount routes
app.get('/login', (req, res) => res.redirect('/auth/login'));
app.use('/auth', authRoutes);
app.use('/admin', adminRoutes);
app.use('/api/loyalty', loyaltyRoutes);
app.use('/api/maintenance', maintenanceRoutes);
app.use('/api/ota', otaRoutes);
app.use('/', indexRoutes);
app.use('/api/check-in-out', checkInOutRoutes);
app.use('/api/corporate', corporateRoutes);
app.use('/api/group-bookings', groupRoutes);

// Error handling middleware
app.use((err, req, res, next) => {
    console.error('Error:', err);
    res.status(500).render('error', {
        message: 'Internal Server Error',
        error: process.env.NODE_ENV === 'development' ? err : {}
    });
});

// 404 handler
app.use((req, res) => {
    res.status(404).render('error', {
        message: 'Page Not Found',
        error: { status: 404 }
    });
});

const PORT = process.env.PORT || 3000;

// Connect to MongoDB
mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/hotel-management')
    .then(() => {
        console.log('MongoDB Connected');
        app.listen(PORT, () => {
            console.log(`Server running in ${process.env.NODE_ENV} mode on port ${PORT}`);
        });
    })
    .catch(err => {
        console.error('MongoDB Connection Error:', err);
    });

module.exports = app;

================
File: src/app.js
================
const express = require('express');
const path = require('path');
const cors = require('cors');
const session = require('express-session');
const flash = require('connect-flash');
const cookieParser = require('cookie-parser');
const { engine } = require('express-handlebars');
const swaggerUI = require('swagger-ui-express');
const swaggerSpecs = require('./config/swagger');
const handlebarsHelpers = require('./utils/handlebars-helpers');
const config = require('./config/env');
const http = require('http');
const notificationService = require('./services/notification.service');
const recommendationService = require('./services/recommendation.service');
const integrationService = require('./services/integration.service');

// Import routes
const homeRouter = require('./routes/home.routes');
const authRoutes = require('./routes/auth.routes');
const adminRoutes = require('./routes/admin.routes');
const bookingRoutes = require('./routes/booking.routes');
const guestRoutes = require('./routes/guest.routes');

const app = express();
const server = http.createServer(app);

// Initialize WebSocket service
notificationService.initialize(server);

// Configure handlebars
app.engine('hbs', engine({
    extname: '.hbs',
    helpers: handlebarsHelpers,
    defaultLayout: 'admin',
    layoutsDir: path.join(__dirname, 'views/layouts'),
    partialsDir: path.join(__dirname, 'views/partials')
}));
app.set('view engine', 'hbs');
app.set('views', path.join(__dirname, 'views'));

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(cookieParser());
app.use(session({
    secret: config.sessionSecret || 'your-secret-key-123',
    resave: false,
    saveUninitialized: false,
    cookie: {
        secure: process.env.NODE_ENV === 'production',
        httpOnly: true,
        maxAge: 24 * 60 * 60 * 1000 // 24 hours
    }
}));
app.use(flash());

// Static files
app.use(express.static(path.join(__dirname, 'public')));

// API documentation
app.use('/api-docs', swaggerUI.serve, swaggerUI.setup(swaggerSpecs));

// Routes
app.use('/', homeRouter);
app.use('/auth', authRoutes);
app.use('/admin', adminRoutes);
app.use('/api/bookings', bookingRoutes);
app.use('/api/guests', guestRoutes);

// Error handling middleware
app.use((err, req, res, next) => {
    console.error(err.stack);
    
    // Check if it's an API route
    const isApiRoute = req.originalUrl.startsWith('/api/');
    
    if (isApiRoute) {
        res.status(500).json({
            success: false,
            message: 'Something went wrong!',
            error: process.env.NODE_ENV === 'development' ? err.message : undefined
        });
    } else {
        res.status(500).render('error', {
            message: 'Something went wrong!',
            error: process.env.NODE_ENV === 'development' ? err : {}
        });
    }
});

// Connect to MongoDB
const mongoose = require('mongoose');
mongoose.connect(config.mongoURI)
    .then(() => console.log('Connected to MongoDB'))
    .catch(err => console.error('MongoDB connection error:', err));

// Start server
const PORT = config.port;
server.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
    
    // Start background tasks
    setInterval(() => {
        integrationService.syncBookings();
        integrationService.syncReviews();
    }, 30 * 60 * 1000); // Every 30 minutes
});

================
File: src/config/db.js
================
const mongoose = require('mongoose');

const connectDB = async () => {
    try {
        const conn = await mongoose.connect(process.env.MONGODB_URI, {
            serverSelectionTimeoutMS: 5000,
            socketTimeoutMS: 45000,
            family: 4,
            maxPoolSize: 10,
            serverApi: {
                version: '1',
                strict: true,
                deprecationErrors: true
            }
        });
        console.log(`MongoDB Connected: ${conn.connection.host}`);
    } catch (error) {
        console.error(`MongoDB Connection Error: ${error.message}`);
        // Log more details about the error
        if (error.name === 'MongoServerSelectionError') {
            console.error('Failed to connect to MongoDB. Please check:');
            console.error('1. Your network connection');
            console.error('2. MongoDB Atlas IP whitelist settings');
            console.error('3. MongoDB Atlas username and password');
            console.error('4. DNS resolution for MongoDB Atlas domain');
        }
        process.exit(1);
    }
};

module.exports = connectDB;

================
File: src/config/env.js
================
require('dotenv').config();

module.exports = {
    // Server Configuration
    port: process.env.PORT || 3000,
    mongoURI: process.env.MONGODB_URI || 'mongodb://localhost:27017/hotel-management',
    jwtSecret: process.env.JWT_SECRET || 'your-secret-key',
    jwtExpiration: process.env.JWT_EXPIRATION || '24h',
    
    // Email configuration
    email: {
        host: process.env.EMAIL_HOST || 'smtp.gmail.com',
        port: process.env.EMAIL_PORT || 587,
        secure: process.env.EMAIL_SECURE === 'true',
        auth: {
            user: process.env.EMAIL_USER,
            pass: process.env.EMAIL_PASSWORD
        }
    },

    // Payment gateway configurations
    stripe: {
        secretKey: process.env.STRIPE_SECRET_KEY,
        publicKey: process.env.STRIPE_PUBLIC_KEY,
        webhookSecret: process.env.STRIPE_WEBHOOK_SECRET
    },
    razorpay: {
        keyId: process.env.RAZORPAY_KEY_ID,
        keySecret: process.env.RAZORPAY_KEY_SECRET,
        webhookSecret: process.env.RAZORPAY_WEBHOOK_SECRET
    },

    // Social media configurations
    facebook: {
        appId: process.env.FACEBOOK_APP_ID,
        appSecret: process.env.FACEBOOK_APP_SECRET,
        callbackURL: process.env.FACEBOOK_CALLBACK_URL || 'http://localhost:3000/auth/facebook/callback'
    },
    twitter: {
        apiKey: process.env.TWITTER_API_KEY,
        apiSecret: process.env.TWITTER_API_SECRET,
        bearerToken: process.env.TWITTER_BEARER_TOKEN,
        callbackURL: process.env.TWITTER_CALLBACK_URL || 'http://localhost:3000/auth/twitter/callback'
    },
    instagram: {
        clientId: process.env.INSTAGRAM_CLIENT_ID,
        clientSecret: process.env.INSTAGRAM_CLIENT_SECRET,
        callbackURL: process.env.INSTAGRAM_CALLBACK_URL || 'http://localhost:3000/auth/instagram/callback'
    },

    // Booking APIs
    bookingAPI: {
        baseURL: process.env.BOOKING_API_URL || 'https://api.booking.com',
        token: process.env.BOOKING_API_TOKEN,
        partnerId: process.env.BOOKING_PARTNER_ID
    },
    expediaAPI: {
        baseURL: process.env.EXPEDIA_API_URL || 'https://api.expedia.com',
        token: process.env.EXPEDIA_API_TOKEN,
        apiKey: process.env.EXPEDIA_API_KEY
    },
    airbnbAPI: {
        baseURL: process.env.AIRBNB_API_URL || 'https://api.airbnb.com',
        token: process.env.AIRBNB_API_TOKEN,
        apiKey: process.env.AIRBNB_API_KEY
    },

    // Redis configuration for caching and session management
    redis: {
        host: process.env.REDIS_HOST || 'localhost',
        port: process.env.REDIS_PORT || 6379,
        password: process.env.REDIS_PASSWORD,
        db: process.env.REDIS_DB || 0,
        prefix: process.env.REDIS_PREFIX || 'hotel:'
    },

    // Session configuration
    session: {
        secret: process.env.SESSION_SECRET || 'session-secret-key',
        name: 'sessionId',
        resave: false,
        saveUninitialized: false,
        cookie: {
            secure: process.env.NODE_ENV === 'production',
            httpOnly: true,
            maxAge: 24 * 60 * 60 * 1000 // 24 hours
        }
    }
};

================
File: src/config/index.js
================
require('dotenv').config();

module.exports = {
    port: process.env.PORT || 3000,
    mongoURI: process.env.MONGODB_URI || 'mongodb://localhost:27017/hotel-management',
    jwtSecret: process.env.JWT_SECRET || 'your-secret-key',
    jwtExpiration: process.env.JWT_EXPIRATION || '24h',
    
    // Email configuration
    email: {
        host: process.env.EMAIL_HOST,
        port: process.env.EMAIL_PORT,
        secure: process.env.EMAIL_SECURE === 'true',
        auth: {
            user: process.env.EMAIL_USER,
            pass: process.env.EMAIL_PASSWORD
        }
    },

    // Payment gateway configurations
    stripe: {
        secretKey: process.env.STRIPE_SECRET_KEY,
        publicKey: process.env.STRIPE_PUBLIC_KEY
    },
    paypal: {
        clientId: process.env.PAYPAL_CLIENT_ID,
        clientSecret: process.env.PAYPAL_CLIENT_SECRET,
        mode: process.env.PAYPAL_MODE || 'sandbox'
    },
    razorpay: {
        keyId: process.env.RAZORPAY_KEY_ID,
        keySecret: process.env.RAZORPAY_KEY_SECRET
    },

    // Social media configurations
    facebook: {
        appId: process.env.FACEBOOK_APP_ID,
        appSecret: process.env.FACEBOOK_APP_SECRET
    },
    twitter: {
        apiKey: process.env.TWITTER_API_KEY,
        apiSecret: process.env.TWITTER_API_SECRET
    },
    google: {
        clientId: process.env.GOOGLE_CLIENT_ID,
        clientSecret: process.env.GOOGLE_CLIENT_SECRET
    },

    // Booking APIs
    bookingAPI: {
        baseURL: process.env.BOOKING_API_URL,
        token: process.env.BOOKING_API_TOKEN
    },
    expediaAPI: {
        baseURL: process.env.EXPEDIA_API_URL,
        token: process.env.EXPEDIA_API_TOKEN
    },
    airbnbAPI: {
        baseURL: process.env.AIRBNB_API_URL,
        token: process.env.AIRBNB_API_TOKEN
    },

    // Redis configuration
    redis: {
        host: process.env.REDIS_HOST || 'localhost',
        port: process.env.REDIS_PORT || 6379,
        password: process.env.REDIS_PASSWORD
    }
};

================
File: src/config/passport.js
================
const passport = require('passport');
const User = require('../models/User');

// Serialize user for the session
passport.serializeUser((user, done) => {
    done(null, user.id);
});

// Deserialize user from the session
passport.deserializeUser(async (id, done) => {
    try {
        const user = await User.findById(id);
        done(null, user);
    } catch (error) {
        done(error, null);
    }
});

module.exports = passport;

================
File: src/config/swagger.js
================
const swaggerJsdoc = require('swagger-jsdoc');

const options = {
    definition: {
        openapi: '3.0.0',
        info: {
            title: 'Hotel Booking API Documentation',
            version: '1.0.0',
            description: 'API documentation for Hotel Booking System with OAuth2 Authentication',
            contact: {
                name: 'API Support',
                email: 'support@example.com'
            }
        },
        servers: [
            {
                url: 'http://localhost:3000',
                description: 'Development server',
            },
        ],
        components: {
            schemas: {
                User: {
                    type: 'object',
                    properties: {
                        _id: {
                            type: 'string',
                            description: 'User ID'
                        },
                        name: {
                            type: 'string',
                            description: 'User full name'
                        },
                        email: {
                            type: 'string',
                            format: 'email',
                            description: 'User email address'
                        },
                        role: {
                            type: 'string',
                            enum: ['user', 'admin'],
                            description: 'User role'
                        },
                        googleId: {
                            type: 'string',
                            description: 'Google OAuth2 ID'
                        },
                        picture: {
                            type: 'string',
                            description: 'Profile picture URL'
                        },
                        isEmailVerified: {
                            type: 'boolean',
                            description: 'Email verification status'
                        }
                    }
                },
                AuthResponse: {
                    type: 'object',
                    properties: {
                        success: {
                            type: 'boolean',
                            description: 'Operation success status'
                        },
                        message: {
                            type: 'string',
                            description: 'Response message'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                token: {
                                    type: 'string',
                                    description: 'JWT authentication token'
                                },
                                user: {
                                    $ref: '#/components/schemas/User'
                                }
                            }
                        }
                    }
                },
                Error: {
                    type: 'object',
                    properties: {
                        success: {
                            type: 'boolean',
                            description: 'Operation success status'
                        },
                        message: {
                            type: 'string',
                            description: 'Error message'
                        }
                    }
                }
            },
            securitySchemes: {
                bearerAuth: {
                    type: 'http',
                    scheme: 'bearer',
                    bearerFormat: 'JWT',
                },
                googleOAuth: {
                    type: 'oauth2',
                    flows: {
                        authorizationCode: {
                            authorizationUrl: 'https://accounts.google.com/o/oauth2/v2/auth',
                            tokenUrl: 'https://oauth2.googleapis.com/token',
                            scopes: {
                                'profile': 'View your basic profile info',
                                'email': 'View your email address'
                            }
                        }
                    }
                }
            }
        },
        tags: [
            {
                name: 'Authentication',
                description: 'Authentication endpoints including local and Google OAuth2'
            },
            {
                name: 'Users',
                description: 'User management endpoints'
            }
        ]
    },
    apis: [
        './src/routes/*.js',
        './src/models/*.js',
    ],
};

const specs = swaggerJsdoc(options);
module.exports = specs;

================
File: src/controllers/admin.controller.js
================
const User = require('../models/User');
const Room = require('../models/Room');
const Booking = require('../models/Booking');
const HousekeepingTask = require('../models/HousekeepingTask');
const MaintenanceRequest = require('../models/Maintenance');
const LoyaltyProgram = require('../models/LoyaltyProgram');
const Payment = require('../models/Payment');

// Helper function to get date range
const getDateRange = (period) => {
    const now = new Date();
    const start = new Date(now);
    const end = new Date(now);

    switch (period) {
        case 'daily':
            start.setDate(start.getDate() - 7);
            break;
        case 'weekly':
            start.setDate(start.getDate() - 30);
            break;
        case 'monthly':
            start.setDate(start.getDate() - 365);
            break;
        default:
            start.setDate(start.getDate() - 7);
    }

    return { start, end };
};

// Helper function to get status badge HTML
const getStatusBadge = (status) => {
    let color;
    switch (status) {
        case 'pending':
            color = 'warning';
            break;
        case 'in-progress':
            color = 'info';
            break;
        case 'completed':
            color = 'success';
            break;
        case 'cancelled':
            color = 'danger';
            break;
        default:
            color = 'secondary';
    }
    return `<span class="badge bg-${color}">${status}</span>`;
};

// Helper function to get priority badge HTML
const getPriorityBadge = (priority) => {
    let color;
    switch (priority) {
        case 'low':
            color = 'success';
            break;
        case 'medium':
            color = 'warning';
            break;
        case 'high':
            color = 'danger';
            break;
        case 'urgent':
            color = 'dark';
            break;
        default:
            color = 'secondary';
    }
    return `<span class="badge bg-${color}">${priority}</span>`;
};

// Get dashboard data
exports.getDashboard = async (req, res) => {
    try {
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        const tomorrow = new Date(today);
        tomorrow.setDate(tomorrow.getDate() + 1);

        // Get occupancy data
        const rooms = await Room.find();
        const occupiedRooms = await Room.countDocuments({ status: 'occupied' });
        const availableRooms = await Room.countDocuments({ status: 'available' });
        const maintenanceRooms = await Room.countDocuments({ status: 'maintenance' });
        const outOfOrderRooms = await Room.countDocuments({ status: 'out_of_order' });
        const totalRooms = rooms.length;
        const occupancyRate = Math.round((occupiedRooms / totalRooms) * 100);

        // Get today's bookings
        const todayBookings = await Booking.countDocuments({
            checkInDate: { $gte: today, $lt: tomorrow }
        });

        // Get check-ins and check-outs
        const todayCheckIns = await Booking.find({
            checkInDate: { $gte: today, $lt: tomorrow }
        }).populate('guest').populate('room').limit(5);

        const todayCheckOuts = await Booking.find({
            checkOutDate: { $gte: today, $lt: tomorrow }
        }).populate('guest').populate('room').limit(5);

        // Get revenue data
        const todayRevenue = await Payment.aggregate([
            {
                $match: {
                    createdAt: { $gte: today, $lt: tomorrow },
                    status: 'completed'
                }
            },
            {
                $group: {
                    _id: null,
                    total: { $sum: '$amount' }
                }
            }
        ]);

        const yesterdayRevenue = await Payment.aggregate([
            {
                $match: {
                    createdAt: {
                        $gte: new Date(today.getTime() - 24 * 60 * 60 * 1000),
                        $lt: today
                    },
                    status: 'completed'
                }
            },
            {
                $group: {
                    _id: null,
                    total: { $sum: '$amount' }
                }
            }
        ]);

        // Get active guests
        const activeGuests = await Booking.countDocuments({
            checkInDate: { $lte: today },
            checkOutDate: { $gt: today }
        });

        // Get VIP guests
        const vipGuests = await Booking.countDocuments({
            checkInDate: { $lte: today },
            checkOutDate: { $gt: today },
            'guest.isVIP': true
        });

        // Get housekeeping tasks
        const housekeepingTasks = await HousekeepingTask.find({
            status: { $in: ['pending', 'in_progress'] }
        }).populate('room').populate('assignedTo').limit(5);

        // Get maintenance requests
        const maintenanceRequests = await MaintenanceRequest.find({
            status: { $in: ['pending', 'in_progress'] }
        }).populate('room').limit(5);

        // Get revenue data for chart
        const { start, end } = getDateRange(req.query.period || 'daily');
        const revenueData = await Payment.aggregate([
            {
                $match: {
                    createdAt: { $gte: start, $lte: end },
                    status: 'completed'
                }
            },
            {
                $group: {
                    _id: { $dateToString: { format: '%Y-%m-%d', date: '$createdAt' } },
                    total: { $sum: '$amount' }
                }
            },
            {
                $sort: { '_id': 1 }
            }
        ]);

        // Format data for handlebars
        const formattedCheckIns = todayCheckIns.map(booking => ({
            _id: booking._id,
            guestName: booking.guest.name,
            roomNumber: booking.room.number,
            checkInTime: booking.checkInDate.toLocaleTimeString(),
            statusBadge: getStatusBadge(booking.status)
        }));

        const formattedCheckOuts = todayCheckOuts.map(booking => ({
            _id: booking._id,
            guestName: booking.guest.name,
            roomNumber: booking.room.number,
            checkOutTime: booking.checkOutDate.toLocaleTimeString(),
            statusBadge: getStatusBadge(booking.status)
        }));

        const formattedHousekeepingTasks = housekeepingTasks.map(task => ({
            _id: task._id,
            roomNumber: task.room.number,
            assignedTo: task.assignedTo.name,
            description: task.description,
            statusBadge: getStatusBadge(task.status),
            priorityBadge: getPriorityBadge(task.priority)
        }));

        const formattedMaintenanceRequests = maintenanceRequests.map(request => ({
            _id: request._id,
            roomNumber: request.location.room.number,
            description: request.description,
            statusBadge: getStatusBadge(request.status),
            priorityBadge: getPriorityBadge(request.priority)
        }));

        // Render dashboard
        res.render('admin/dashboard', {
            title: 'Admin Dashboard',
            occupancyData: {
                totalRooms,
                occupiedRooms,
                availableRooms,
                maintenanceRooms,
                outOfOrderRooms,
                occupancyRate
            },
            bookingData: {
                todayBookings,
                checkIns: formattedCheckIns,
                checkOuts: formattedCheckOuts
            },
            revenueData: {
                today: todayRevenue[0]?.total || 0,
                yesterday: yesterdayRevenue[0]?.total || 0,
                chartData: revenueData
            },
            guestData: {
                activeGuests,
                vipGuests
            },
            housekeepingTasks: formattedHousekeepingTasks,
            maintenanceRequests: formattedMaintenanceRequests
        });
    } catch (error) {
        console.error('Error loading admin dashboard:', error);
        res.status(500).render('error', {
            message: 'Error loading admin dashboard',
            error: process.env.NODE_ENV === 'development' ? error : {}
        });
    }
};

================
File: src/controllers/admin.loyalty.controller.js
================
const LoyaltyProgram = require('../models/LoyaltyProgram');
const User = require('../models/User');
const { sendEmail } = require('../utils/email');
const json2csv = require('json2csv').parse;

// Get loyalty program dashboard
exports.getDashboard = async (req, res) => {
    try {
        // Get total members
        const totalMembers = await LoyaltyProgram.countDocuments();
        
        // Get new members this month
        const startOfMonth = new Date();
        startOfMonth.setDate(1);
        startOfMonth.setHours(0, 0, 0, 0);
        const newMembersThisMonth = await LoyaltyProgram.countDocuments({
            createdAt: { $gte: startOfMonth }
        });

        // Get points statistics
        const pointsStats = await LoyaltyProgram.aggregate([
            {
                $facet: {
                    totalPoints: [
                        {
                            $group: {
                                _id: null,
                                total: { $sum: '$points' },
                                totalLifetime: { $sum: '$lifetimePoints' }
                            }
                        }
                    ],
                    monthlyPoints: [
                        {
                            $unwind: '$pointsHistory'
                        },
                        {
                            $match: {
                                'pointsHistory.date': { $gte: startOfMonth }
                            }
                        },
                        {
                            $group: {
                                _id: null,
                                issued: {
                                    $sum: {
                                        $cond: [
                                            { $eq: ['$pointsHistory.type', 'earned'] },
                                            '$pointsHistory.points',
                                            0
                                        ]
                                    }
                                },
                                redeemed: {
                                    $sum: {
                                        $cond: [
                                            { $eq: ['$pointsHistory.type', 'redeemed'] },
                                            '$pointsHistory.points',
                                            0
                                        ]
                                    }
                                }
                            }
                        }
                    ],
                    tierDistribution: [
                        {
                            $group: {
                                _id: '$membershipTier',
                                count: { $sum: 1 }
                            }
                        }
                    ]
                }
            }
        ]);

        // Get active rewards count
        const activeRewards = await LoyaltyProgram.aggregate([
            { $unwind: '$rewards' },
            {
                $match: {
                    'rewards.status': 'available',
                    'rewards.expiryDate': { $gt: new Date() }
                }
            },
            { $count: 'total' }
        ]);

        // Get recent activity
        const recentActivity = await LoyaltyProgram.aggregate([
            { $unwind: '$pointsHistory' },
            { $sort: { 'pointsHistory.date': -1 } },
            { $limit: 10 },
            {
                $lookup: {
                    from: 'users',
                    localField: 'userId',
                    foreignField: '_id',
                    as: 'user'
                }
            },
            {
                $project: {
                    description: {
                        $concat: [
                            { $arrayElemAt: ['$user.name', 0] },
                            ' ',
                            {
                                $switch: {
                                    branches: [
                                        { case: { $eq: ['$pointsHistory.type', 'earned'] }, then: 'earned' },
                                        { case: { $eq: ['$pointsHistory.type', 'redeemed'] }, then: 'redeemed' }
                                    ],
                                    default: 'adjusted'
                                }
                            },
                            ' ',
                            { $toString: '$pointsHistory.points' },
                            ' points'
                        ]
                    },
                    date: '$pointsHistory.date',
                    icon: {
                        $switch: {
                            branches: [
                                { case: { $eq: ['$pointsHistory.type', 'earned'] }, then: 'ni-money-coins' },
                                { case: { $eq: ['$pointsHistory.type', 'redeemed'] }, then: 'ni-cart' }
                            ],
                            default: 'ni-settings'
                        }
                    },
                    color: {
                        $switch: {
                            branches: [
                                { case: { $eq: ['$pointsHistory.type', 'earned'] }, then: 'success' },
                                { case: { $eq: ['$pointsHistory.type', 'redeemed'] }, then: 'warning' }
                            ],
                            default: 'info'
                        }
                    }
                }
            }
        ]);

        const stats = {
            totalMembers,
            newMembersThisMonth,
            totalPointsIssued: pointsStats[0].totalPoints[0]?.total || 0,
            totalPointsRedeemed: pointsStats[0].monthlyPoints[0]?.redeemed || 0,
            pointsIssuedThisMonth: pointsStats[0].monthlyPoints[0]?.issued || 0,
            pointsRedeemedThisMonth: pointsStats[0].monthlyPoints[0]?.redeemed || 0,
            activeRewards: activeRewards[0]?.total || 0,
            tierDistribution: {
                bronze: pointsStats[0].tierDistribution.find(t => t._id === 'Bronze')?.count || 0,
                silver: pointsStats[0].tierDistribution.find(t => t._id === 'Silver')?.count || 0,
                gold: pointsStats[0].tierDistribution.find(t => t._id === 'Gold')?.count || 0,
                platinum: pointsStats[0].tierDistribution.find(t => t._id === 'Platinum')?.count || 0
            }
        };

        // Get member list
        const members = await LoyaltyProgram.find()
            .populate('userId', 'name email profileImage')
            .sort('-points')
            .limit(50);

        res.render('admin/loyalty/dashboard', {
            stats,
            recentActivity,
            members: members.map(m => ({
                _id: m._id,
                name: m.userId.name,
                email: m.userId.email,
                profileImage: m.userId.profileImage,
                membershipTier: m.membershipTier,
                points: m.points,
                lifetimePoints: m.lifetimePoints,
                memberSince: m.memberSince
            }))
        });
    } catch (error) {
        console.error('Error getting loyalty dashboard:', error);
        res.status(500).render('error', {
            message: 'Error loading loyalty dashboard'
        });
    }
};

// Get all loyalty program members
exports.getMembers = async (req, res) => {
    try {
        const page = parseInt(req.query.page) || 1;
        const limit = parseInt(req.query.limit) || 10;
        const search = req.query.search || '';
        const tier = req.query.tier || '';
        const sort = req.query.sort || '-points';

        // Build query
        let query = {};
        if (search) {
            query.$or = [
                { 'userId.name': { $regex: search, $options: 'i' } },
                { 'userId.email': { $regex: search, $options: 'i' } }
            ];
        }
        if (tier) {
            query.membershipTier = tier;
        }

        // Get members with pagination
        const [members, total] = await Promise.all([
            LoyaltyProgram.find(query)
                .populate('userId', 'name email profileImage')
                .sort(sort)
                .skip((page - 1) * limit)
                .limit(limit),
            LoyaltyProgram.countDocuments(query)
        ]);

        res.render('admin/loyalty/members', {
            members,
            pagination: {
                page,
                pageCount: Math.ceil(total / limit),
                limit
            },
            filters: { search, tier, sort }
        });
    } catch (error) {
        console.error('Error getting loyalty members:', error);
        res.status(500).render('error', {
            message: 'Error loading loyalty members'
        });
    }
};

// Get loyalty program tiers
exports.getTiers = async (req, res) => {
    try {
        const tiers = [
            {
                name: 'Bronze',
                pointsRequired: 0,
                benefits: ['Basic member benefits', 'Points on stays', 'Member-only rates'],
                icon: 'ni-medal',
                color: 'bronze'
            },
            {
                name: 'Silver',
                pointsRequired: 10000,
                benefits: ['10% bonus points', 'Early check-in', 'Late check-out', 'Room upgrades'],
                icon: 'ni-medal',
                color: 'silver'
            },
            {
                name: 'Gold',
                pointsRequired: 25000,
                benefits: ['20% bonus points', 'Guaranteed room availability', 'Executive lounge access', 'Welcome amenities'],
                icon: 'ni-medal',
                color: 'gold'
            },
            {
                name: 'Platinum',
                pointsRequired: 50000,
                benefits: ['30% bonus points', 'Suite upgrades', '24/7 concierge service', 'Exclusive events'],
                icon: 'ni-crown',
                color: 'platinum'
            }
        ];

        // Get member distribution
        const memberDistribution = await LoyaltyProgram.aggregate([
            {
                $group: {
                    _id: '$membershipTier',
                    count: { $sum: 1 },
                    avgPoints: { $avg: '$points' }
                }
            }
        ]);

        res.render('admin/loyalty/tiers', {
            tiers: tiers.map(tier => ({
                ...tier,
                members: memberDistribution.find(m => m._id === tier.name)?.count || 0,
                avgPoints: Math.round(memberDistribution.find(m => m._id === tier.name)?.avgPoints || 0)
            }))
        });
    } catch (error) {
        console.error('Error getting loyalty tiers:', error);
        res.status(500).render('error', {
            message: 'Error loading loyalty tiers'
        });
    }
};

// Get loyalty program referrals
exports.getReferrals = async (req, res) => {
    try {
        const page = parseInt(req.query.page) || 1;
        const limit = parseInt(req.query.limit) || 10;

        // Get referral stats
        const stats = await LoyaltyProgram.aggregate([
            { $unwind: '$referrals' },
            {
                $group: {
                    _id: null,
                    totalReferrals: { $sum: 1 },
                    successfulReferrals: {
                        $sum: { $cond: [{ $eq: ['$referrals.status', 'completed'] }, 1, 0] }
                    },
                    totalBonusPoints: {
                        $sum: { $cond: [{ $eq: ['$referrals.status', 'completed'] }, '$referrals.bonusPoints', 0] }
                    }
                }
            }
        ]);

        // Get top referrers
        const topReferrers = await LoyaltyProgram.aggregate([
            { $unwind: '$referrals' },
            {
                $match: {
                    'referrals.status': 'completed'
                }
            },
            {
                $group: {
                    _id: '$userId',
                    totalReferrals: { $sum: 1 },
                    totalBonusPoints: { $sum: '$referrals.bonusPoints' }
                }
            },
            {
                $lookup: {
                    from: 'users',
                    localField: '_id',
                    foreignField: '_id',
                    as: 'user'
                }
            },
            { $sort: { totalReferrals: -1 } },
            { $limit: 5 }
        ]);

        // Get recent referrals
        const [referrals, total] = await Promise.all([
            LoyaltyProgram.find()
                .populate('userId', 'name email')
                .populate('referrals.referredUser', 'name email')
                .sort('-referrals.date')
                .skip((page - 1) * limit)
                .limit(limit),
            LoyaltyProgram.countDocuments({ 'referrals.0': { $exists: true } })
        ]);

        res.render('admin/loyalty/referrals', {
            stats: stats[0] || { totalReferrals: 0, successfulReferrals: 0, totalBonusPoints: 0 },
            topReferrers: topReferrers.map(r => ({
                name: r.user[0]?.name,
                email: r.user[0]?.email,
                totalReferrals: r.totalReferrals,
                totalBonusPoints: r.totalBonusPoints
            })),
            referrals,
            pagination: {
                page,
                pageCount: Math.ceil(total / limit),
                limit
            }
        });
    } catch (error) {
        console.error('Error getting referrals:', error);
        res.status(500).render('error', {
            message: 'Error loading referrals'
        });
    }
};

// Helper functions
exports.adjustPoints = async (req, res) => {
    try {
        const { memberId, points, reason } = req.body;
        const member = await LoyaltyProgram.findById(memberId);

        if (!member) {
            return res.status(404).json({ message: 'Member not found' });
        }

        member.points += parseInt(points);
        member.pointsHistory.push({
            type: points > 0 ? 'earned' : 'deducted',
            points: Math.abs(points),
            description: reason,
            date: new Date()
        });

        await member.save();
        res.json({ success: true, message: 'Points adjusted successfully' });
    } catch (error) {
        console.error('Error adjusting points:', error);
        res.status(500).json({ message: 'Error adjusting points' });
    }
};

exports.exportMemberData = async (req, res) => {
    try {
        const members = await LoyaltyProgram.find()
            .populate('userId', 'name email')
            .lean();

        const fields = ['_id', 'userId.name', 'userId.email', 'membershipTier', 'points', 'lifetimePoints', 'memberSince'];
        const csv = json2csv(members, { fields });

        res.header('Content-Type', 'text/csv');
        res.attachment('loyalty-members.csv');
        res.send(csv);
    } catch (error) {
        console.error('Error exporting member data:', error);
        res.status(500).json({ message: 'Error exporting member data' });
    }
};

exports.exportMemberHistory = async (req, res) => {
    try {
        const { memberId } = req.params;
        const member = await LoyaltyProgram.findById(memberId)
            .populate('userId', 'name email')
            .lean();

        if (!member) {
            return res.status(404).json({ message: 'Member not found' });
        }

        const fields = ['date', 'type', 'points', 'description'];
        const csv = json2csv(member.pointsHistory, { fields });

        res.header('Content-Type', 'text/csv');
        res.attachment(`member-${memberId}-history.csv`);
        res.send(csv);
    } catch (error) {
        console.error('Error exporting member history:', error);
        res.status(500).json({ message: 'Error exporting member history' });
    }
};

exports.sendWelcomeEmail = async (memberId) => {
    try {
        const member = await LoyaltyProgram.findById(memberId)
            .populate('userId', 'name email');

        if (!member) {
            throw new Error('Member not found');
        }

        await sendEmail({
            to: member.userId.email,
            subject: 'Welcome to Our Loyalty Program!',
            template: 'loyalty-welcome',
            context: {
                name: member.userId.name,
                membershipTier: member.membershipTier,
                points: member.points,
                benefits: getTierBenefits(member.membershipTier)
            }
        });

        return true;
    } catch (error) {
        console.error('Error sending welcome email:', error);
        return false;
    }
};

function getTierBenefits(tier) {
    const benefits = {
        Bronze: ['Basic member benefits', 'Points on stays', 'Member-only rates'],
        Silver: ['10% bonus points', 'Early check-in', 'Late check-out', 'Room upgrades'],
        Gold: ['20% bonus points', 'Guaranteed room availability', 'Executive lounge access', 'Welcome amenities'],
        Platinum: ['30% bonus points', 'Suite upgrades', '24/7 concierge service', 'Exclusive events']
    };
    return benefits[tier] || benefits.Bronze;
}

================
File: src/controllers/admin.rewards.controller.js
================
const LoyaltyProgram = require('../models/LoyaltyProgram');
const Reward = require('../models/Reward');
const { sendEmail } = require('../utils/email');
const json2csv = require('json2csv').parse;

// Get rewards dashboard
exports.getRewards = async (req, res) => {
    try {
        const startOfMonth = new Date();
        startOfMonth.setDate(1);
        startOfMonth.setHours(0, 0, 0, 0);

        // Get rewards statistics
        const stats = await Reward.aggregate([
            {
                $facet: {
                    activeRewards: [
                        {
                            $match: {
                                isActive: true,
                                $or: [
                                    { limitedQuantity: false },
                                    { limitedQuantity: true, remainingQuantity: { $gt: 0 } }
                                ]
                            }
                        },
                        { $count: 'count' }
                    ],
                    redemptionStats: [
                        {
                            $lookup: {
                                from: 'redemptions',
                                localField: '_id',
                                foreignField: 'rewardId',
                                as: 'redemptions'
                            }
                        },
                        {
                            $unwind: '$redemptions'
                        },
                        {
                            $group: {
                                _id: null,
                                totalRedemptions: { $sum: 1 },
                                totalPoints: { $sum: '$pointsRequired' },
                                monthlyRedemptions: {
                                    $sum: {
                                        $cond: [
                                            { $gte: ['$redemptions.date', startOfMonth] },
                                            1,
                                            0
                                        ]
                                    }
                                },
                                monthlyPoints: {
                                    $sum: {
                                        $cond: [
                                            { $gte: ['$redemptions.date', startOfMonth] },
                                            '$pointsRequired',
                                            0
                                        ]
                                    }
                                }
                            }
                        }
                    ],
                    satisfaction: [
                        {
                            $lookup: {
                                from: 'redemptions',
                                localField: '_id',
                                foreignField: 'rewardId',
                                as: 'redemptions'
                            }
                        },
                        {
                            $unwind: '$redemptions'
                        },
                        {
                            $match: {
                                'redemptions.rating': { $exists: true }
                            }
                        },
                        {
                            $group: {
                                _id: null,
                                averageRating: { $avg: '$redemptions.rating' },
                                currentMonthRating: {
                                    $avg: {
                                        $cond: [
                                            { $gte: ['$redemptions.date', startOfMonth] },
                                            '$redemptions.rating',
                                            null
                                        ]
                                    }
                                },
                                lastMonthRating: {
                                    $avg: {
                                        $cond: [
                                            {
                                                $and: [
                                                    { $lt: ['$redemptions.date', startOfMonth] },
                                                    { $gte: ['$redemptions.date', new Date(startOfMonth.getTime() - 30 * 24 * 60 * 60 * 1000)] }
                                                ]
                                            },
                                            '$redemptions.rating',
                                            null
                                        ]
                                    }
                                }
                            }
                        }
                    ]
                }
            }
        ]);

        // Format statistics
        const activeRewards = stats[0].activeRewards[0]?.count || 0;
        const redemptionStats = stats[0].redemptionStats[0] || {
            totalRedemptions: 0,
            totalPoints: 0,
            monthlyRedemptions: 0,
            monthlyPoints: 0
        };
        const satisfactionStats = stats[0].satisfaction[0] || {
            averageRating: 0,
            currentMonthRating: 0,
            lastMonthRating: 0
        };

        // Calculate satisfaction increase
        const satisfactionIncrease = satisfactionStats.lastMonthRating
            ? ((satisfactionStats.currentMonthRating - satisfactionStats.lastMonthRating) / satisfactionStats.lastMonthRating) * 100
            : 0;

        // Get rewards list
        const rewards = await Reward.find()
            .sort('-createdAt')
            .lean();

        // Get recent redemptions
        const redemptions = await Reward.aggregate([
            {
                $lookup: {
                    from: 'redemptions',
                    localField: '_id',
                    foreignField: 'rewardId',
                    as: 'redemptions'
                }
            },
            { $unwind: '$redemptions' },
            {
                $lookup: {
                    from: 'users',
                    localField: 'redemptions.userId',
                    foreignField: '_id',
                    as: 'member'
                }
            },
            { $unwind: '$member' },
            {
                $project: {
                    'member.name': 1,
                    'member.email': 1,
                    'member.profileImage': 1,
                    'reward.name': '$name',
                    'reward.category': '$category',
                    pointsUsed: '$pointsRequired',
                    date: '$redemptions.date',
                    status: '$redemptions.status',
                    rating: '$redemptions.rating'
                }
            },
            { $sort: { date: -1 } },
            { $limit: 50 }
        ]);

        res.render('admin/loyalty/rewards', {
            stats: {
                activeRewards,
                totalRedemptions: redemptionStats.totalRedemptions,
                redemptionsThisMonth: redemptionStats.monthlyRedemptions,
                totalPointsRedeemed: redemptionStats.totalPoints,
                pointsRedeemedThisMonth: redemptionStats.monthlyPoints,
                averageSatisfaction: satisfactionStats.averageRating.toFixed(1),
                satisfactionIncrease: satisfactionIncrease.toFixed(1)
            },
            rewards: rewards.map(reward => ({
                ...reward,
                redemptionCount: reward.redemptions?.length || 0,
                lastRedemption: reward.redemptions?.length 
                    ? reward.redemptions[reward.redemptions.length - 1].date 
                    : null
            })),
            redemptions
        });
    } catch (error) {
        console.error('Error getting rewards:', error);
        res.status(500).render('error', {
            message: 'Error loading rewards dashboard'
        });
    }
};

// Get reward details
exports.getReward = async (req, res) => {
    try {
        const reward = await Reward.findById(req.params.id);
        if (!reward) {
            return res.status(404).json({
                success: false,
                message: 'Reward not found'
            });
        }

        res.json({
            success: true,
            reward
        });
    } catch (error) {
        console.error('Error getting reward:', error);
        res.status(500).json({
            success: false,
            message: 'Error getting reward details'
        });
    }
};

// Create new reward
exports.createReward = async (req, res) => {
    try {
        const {
            name,
            description,
            category,
            pointsRequired,
            isActive,
            limitedQuantity,
            quantity,
            expiryDate,
            termsAndConditions
        } = req.body;

        const reward = await Reward.create({
            name,
            description,
            category,
            pointsRequired: parseInt(pointsRequired),
            isActive: isActive === 'true',
            limitedQuantity: limitedQuantity === 'true',
            quantity: limitedQuantity === 'true' ? parseInt(quantity) : null,
            remainingQuantity: limitedQuantity === 'true' ? parseInt(quantity) : null,
            expiryDate: expiryDate ? new Date(expiryDate) : null,
            termsAndConditions
        });

        // Notify loyalty members about new reward
        const members = await LoyaltyProgram.find()
            .populate('userId', 'email name')
            .lean();

        // Send email notifications in batches to avoid overwhelming the email service
        const batchSize = 50;
        for (let i = 0; i < members.length; i += batchSize) {
            const batch = members.slice(i, i + batchSize);
            await Promise.all(batch.map(member => 
                sendEmail({
                    to: member.userId.email,
                    subject: 'New Reward Available!',
                    template: 'loyalty-new-reward',
                    context: {
                        name: member.userId.name,
                        rewardName: reward.name,
                        rewardDescription: reward.description,
                        pointsRequired: reward.pointsRequired,
                        validityPeriod: reward.validityPeriod,
                        dashboardUrl: `${process.env.FRONTEND_URL}/loyalty/rewards`
                    }
                })
            ));
        }

        res.json({
            success: true,
            message: 'Reward created successfully',
            reward
        });
    } catch (error) {
        console.error('Error creating reward:', error);
        res.status(500).json({
            success: false,
            message: 'Error creating reward'
        });
    }
};

// Update reward
exports.updateReward = async (req, res) => {
    try {
        const { id } = req.params;
        const {
            name,
            description,
            category,
            pointsRequired,
            isActive,
            limitedQuantity,
            quantity,
            expiryDate,
            termsAndConditions
        } = req.body;

        const reward = await Reward.findByIdAndUpdate(
            id,
            {
                name,
                description,
                category,
                pointsRequired: parseInt(pointsRequired),
                isActive: isActive === 'true',
                limitedQuantity: limitedQuantity === 'true',
                quantity: limitedQuantity === 'true' ? parseInt(quantity) : null,
                remainingQuantity: limitedQuantity === 'true' ? parseInt(quantity) : null,
                expiryDate: expiryDate ? new Date(expiryDate) : null,
                termsAndConditions
            },
            { new: true }
        );

        if (!reward) {
            return res.status(404).json({
                success: false,
                message: 'Reward not found'
            });
        }

        res.json({
            success: true,
            message: 'Reward updated successfully',
            reward
        });
    } catch (error) {
        console.error('Error updating reward:', error);
        res.status(500).json({
            success: false,
            message: 'Error updating reward'
        });
    }
};

// Delete reward
exports.deleteReward = async (req, res) => {
    try {
        const { id } = req.params;
        const reward = await Reward.findByIdAndDelete(id);

        if (!reward) {
            return res.status(404).json({
                success: false,
                message: 'Reward not found'
            });
        }

        res.json({
            success: true,
            message: 'Reward deleted successfully'
        });
    } catch (error) {
        console.error('Error deleting reward:', error);
        res.status(500).json({
            success: false,
            message: 'Error deleting reward'
        });
    }
};

// Toggle reward status
exports.toggleReward = async (req, res) => {
    try {
        const reward = await Reward.findById(req.params.id);
        if (!reward) {
            return res.status(404).json({
                success: false,
                message: 'Reward not found'
            });
        }

        reward.isActive = !reward.isActive;
        await reward.save();

        res.json({
            success: true,
            message: `Reward ${reward.isActive ? 'activated' : 'deactivated'} successfully`
        });
    } catch (error) {
        console.error('Error toggling reward:', error);
        res.status(500).json({
            success: false,
            message: 'Error updating reward status'
        });
    }
};

// Export redemption data
exports.exportRedemptions = async (req, res) => {
    try {
        const redemptions = await Reward.aggregate([
            {
                $lookup: {
                    from: 'redemptions',
                    localField: '_id',
                    foreignField: 'rewardId',
                    as: 'redemptions'
                }
            },
            { $unwind: '$redemptions' },
            {
                $lookup: {
                    from: 'users',
                    localField: 'redemptions.userId',
                    foreignField: '_id',
                    as: 'member'
                }
            },
            { $unwind: '$member' },
            {
                $project: {
                    'Member Name': '$member.name',
                    'Member Email': '$member.email',
                    'Reward Name': '$name',
                    'Category': '$category',
                    'Points Used': '$pointsRequired',
                    'Redemption Date': '$redemptions.date',
                    'Status': '$redemptions.status',
                    'Rating': '$redemptions.rating',
                    'Feedback': '$redemptions.feedback'
                }
            }
        ]);

        const fields = [
            'Member Name',
            'Member Email',
            'Reward Name',
            'Category',
            'Points Used',
            'Redemption Date',
            'Status',
            'Rating',
            'Feedback'
        ];

        const csv = json2csv(redemptions, { fields });

        res.setHeader('Content-Type', 'text/csv');
        res.setHeader('Content-Disposition', 'attachment; filename=reward-redemptions.csv');
        res.send(csv);
    } catch (error) {
        console.error('Error exporting redemptions:', error);
        res.status(500).json({
            success: false,
            message: 'Error exporting redemption data'
        });
    }
};

================
File: src/controllers/admin.tier.controller.js
================
const Tier = require('../models/Tier');
const LoyaltyProgram = require('../models/LoyaltyProgram');
const { sendEmail } = require('../utils/email');

// Get all tiers
exports.getTiers = async (req, res) => {
    try {
        const tiers = await Tier.find()
            .populate('exclusiveRewards')
            .sort({ minimumPoints: 1 });

        // Get member count for each tier
        const tierStats = await Promise.all(tiers.map(async (tier) => {
            const memberCount = await LoyaltyProgram.countDocuments({
                membershipTier: tier.name
            });

            return {
                ...tier.toObject(),
                memberCount
            };
        }));

        res.json({
            success: true,
            data: tierStats
        });
    } catch (error) {
        console.error('Error getting tiers:', error);
        res.status(500).json({
            success: false,
            message: 'Error getting tiers'
        });
    }
};

// Create tier
exports.createTier = async (req, res) => {
    try {
        const {
            name,
            minimumPoints,
            pointsMultiplier,
            benefits,
            exclusiveRewards,
            upgradeBonusPoints,
            color,
            icon
        } = req.body;

        // Check if tier already exists
        const existingTier = await Tier.findOne({ name });
        if (existingTier) {
            return res.status(400).json({
                success: false,
                message: 'Tier already exists'
            });
        }

        // Create tier
        const tier = new Tier({
            name,
            minimumPoints,
            pointsMultiplier,
            benefits,
            exclusiveRewards,
            upgradeBonusPoints,
            color,
            icon
        });

        await tier.save();

        res.json({
            success: true,
            message: 'Tier created successfully',
            data: tier
        });
    } catch (error) {
        console.error('Error creating tier:', error);
        res.status(500).json({
            success: false,
            message: 'Error creating tier'
        });
    }
};

// Update tier
exports.updateTier = async (req, res) => {
    try {
        const {
            minimumPoints,
            pointsMultiplier,
            benefits,
            exclusiveRewards,
            upgradeBonusPoints,
            color,
            icon
        } = req.body;

        const tier = await Tier.findById(req.params.id);
        if (!tier) {
            return res.status(404).json({
                success: false,
                message: 'Tier not found'
            });
        }

        // Update tier
        tier.minimumPoints = minimumPoints;
        tier.pointsMultiplier = pointsMultiplier;
        tier.benefits = benefits;
        tier.exclusiveRewards = exclusiveRewards;
        tier.upgradeBonusPoints = upgradeBonusPoints;
        tier.color = color;
        tier.icon = icon;

        await tier.save();

        res.json({
            success: true,
            message: 'Tier updated successfully',
            data: tier
        });
    } catch (error) {
        console.error('Error updating tier:', error);
        res.status(500).json({
            success: false,
            message: 'Error updating tier'
        });
    }
};

// Toggle tier status
exports.toggleTier = async (req, res) => {
    try {
        const tier = await Tier.findById(req.params.id);
        if (!tier) {
            return res.status(404).json({
                success: false,
                message: 'Tier not found'
            });
        }

        tier.isActive = !tier.isActive;
        await tier.save();

        res.json({
            success: true,
            message: `Tier ${tier.isActive ? 'activated' : 'deactivated'} successfully`,
            data: tier
        });
    } catch (error) {
        console.error('Error toggling tier:', error);
        res.status(500).json({
            success: false,
            message: 'Error toggling tier status'
        });
    }
};

// Get tier statistics
exports.getTierStats = async (req, res) => {
    try {
        const tiers = await Tier.find().sort({ minimumPoints: 1 });
        const stats = await Promise.all(tiers.map(async (tier) => {
            const members = await LoyaltyProgram.find({ membershipTier: tier.name });
            
            const totalPoints = members.reduce((sum, member) => sum + member.points, 0);
            const averagePoints = members.length > 0 ? totalPoints / members.length : 0;
            
            const upgradeCandidates = members.filter(member => {
                const pointsToNextTier = tier.nextTier ? 
                    tier.nextTier.minimumPoints - member.points : 0;
                return pointsToNextTier <= 1000; // Within 1000 points of upgrade
            }).length;

            return {
                tier: tier.name,
                memberCount: members.length,
                totalPoints,
                averagePoints,
                upgradeCandidates
            };
        }));

        res.json({
            success: true,
            data: stats
        });
    } catch (error) {
        console.error('Error getting tier statistics:', error);
        res.status(500).json({
            success: false,
            message: 'Error getting tier statistics'
        });
    }
};

// Process tier upgrades
exports.processTierUpgrades = async (req, res) => {
    try {
        const tiers = await Tier.find({ isActive: true })
            .sort({ minimumPoints: 1 });
        
        const members = await LoyaltyProgram.find();
        const upgrades = [];

        for (const member of members) {
            const currentTierIndex = tiers.findIndex(t => t.name === member.membershipTier);
            const eligibleTier = tiers.find((t, index) => 
                index > currentTierIndex && member.points >= t.minimumPoints
            );

            if (eligibleTier) {
                // Process upgrade
                const oldTier = member.membershipTier;
                member.membershipTier = eligibleTier.name;
                
                // Award upgrade bonus points
                if (eligibleTier.upgradeBonusPoints > 0) {
                    await member.addPoints(
                        eligibleTier.upgradeBonusPoints,
                        'bonus',
                        'tier_upgrade',
                        null,
                        `Tier upgrade bonus: ${oldTier} to ${eligibleTier.name}`
                    );
                }

                await member.save();
                upgrades.push({
                    memberId: member._id,
                    name: member.name,
                    email: member.email,
                    oldTier,
                    newTier: eligibleTier.name,
                    bonusPoints: eligibleTier.upgradeBonusPoints
                });

                // Send upgrade notification email
                await sendEmail({
                    to: member.email,
                    subject: 'Congratulations on Your Tier Upgrade!',
                    template: 'loyalty-tier-upgrade',
                    context: {
                        name: member.name,
                        oldTier,
                        newTier: eligibleTier.name,
                        bonusPoints: eligibleTier.upgradeBonusPoints,
                        benefits: eligibleTier.benefits,
                        dashboardUrl: `${process.env.FRONTEND_URL}/loyalty/dashboard`
                    }
                });
            }
        }

        res.json({
            success: true,
            message: `Processed ${upgrades.length} tier upgrades`,
            data: upgrades
        });
    } catch (error) {
        console.error('Error processing tier upgrades:', error);
        res.status(500).json({
            success: false,
            message: 'Error processing tier upgrades'
        });
    }
};

================
File: src/controllers/admin/analytics.controller.js
================
const Booking = require('../../models/Booking');
const Guest = require('../../models/Guest');
const Room = require('../../models/Room');
const Payment = require('../../models/Payment');
const LoyaltyProgram = require('../../models/LoyaltyProgram');
const Task = require('../../models/Task');
const moment = require('moment');

// Financial Reports
exports.getFinancialReports = async (req, res) => {
    try {
        const today = moment().startOf('day');
        const lastMonth = moment().subtract(1, 'months').startOf('month');

        // Revenue analytics
        const revenue = await Payment.aggregate([
            {
                $match: {
                    createdAt: { $gte: lastMonth.toDate() }
                }
            },
            {
                $group: {
                    _id: { $dateToString: { format: "%Y-%m-%d", date: "$createdAt" } },
                    total: { $sum: "$amount" }
                }
            },
            { $sort: { _id: 1 } }
        ]);

        // Payment method distribution
        const paymentMethods = await Payment.aggregate([
            {
                $group: {
                    _id: "$method",
                    count: { $sum: 1 },
                    total: { $sum: "$amount" }
                }
            }
        ]);

        res.render('admin/reports/financial', {
            revenue,
            paymentMethods,
            pageTitle: 'Financial Reports'
        });
    } catch (error) {
        console.error('Error in financial reports:', error);
        res.status(500).json({ message: 'Error generating financial reports' });
    }
};

// Occupancy Reports
exports.getOccupancyReports = async (req, res) => {
    try {
        const lastMonth = moment().subtract(1, 'months').startOf('month');

        // Daily occupancy rate
        const occupancyData = await Booking.aggregate([
            {
                $match: {
                    checkInDate: { $gte: lastMonth.toDate() }
                }
            },
            {
                $group: {
                    _id: { $dateToString: { format: "%Y-%m-%d", date: "$checkInDate" } },
                    count: { $sum: 1 }
                }
            },
            { $sort: { _id: 1 } }
        ]);

        // Room type distribution
        const roomTypeDistribution = await Room.aggregate([
            {
                $group: {
                    _id: "$type",
                    count: { $sum: 1 }
                }
            }
        ]);

        res.render('admin/reports/occupancy', {
            occupancyData,
            roomTypeDistribution,
            pageTitle: 'Occupancy Reports'
        });
    } catch (error) {
        console.error('Error in occupancy reports:', error);
        res.status(500).json({ message: 'Error generating occupancy reports' });
    }
};

// Guest Analytics
exports.getGuestAnalytics = async (req, res) => {
    try {
        // Guest demographics
        const demographics = await Guest.aggregate([
            {
                $group: {
                    _id: "$country",
                    count: { $sum: 1 }
                }
            },
            { $sort: { count: -1 } },
            { $limit: 10 }
        ]);

        // Booking patterns
        const bookingPatterns = await Booking.aggregate([
            {
                $group: {
                    _id: { $dayOfWeek: "$checkInDate" },
                    count: { $sum: 1 }
                }
            },
            { $sort: { _id: 1 } }
        ]);

        res.render('admin/reports/guest', {
            demographics,
            bookingPatterns,
            pageTitle: 'Guest Analytics'
        });
    } catch (error) {
        console.error('Error in guest analytics:', error);
        res.status(500).json({ message: 'Error generating guest analytics' });
    }
};

// Staff Performance
exports.getStaffPerformance = async (req, res) => {
    try {
        // Staff booking performance
        const staffPerformance = await Booking.aggregate([
            {
                $group: {
                    _id: "$createdBy",
                    bookings: { $sum: 1 },
                    revenue: { $sum: "$totalAmount" }
                }
            },
            {
                $lookup: {
                    from: "users",
                    localField: "_id",
                    foreignField: "_id",
                    as: "staff"
                }
            },
            { $unwind: "$staff" }
        ]);

        res.render('admin/reports/staff', {
            staffPerformance,
            pageTitle: 'Staff Performance'
        });
    } catch (error) {
        console.error('Error in staff performance:', error);
        res.status(500).json({ message: 'Error generating staff performance' });
    }
};

// Get analytics dashboard
exports.getDashboard = async (req, res) => {
    try {
        const hotelId = req.query.hotelId;
        const today = moment().startOf('day');
        const lastMonth = moment().subtract(1, 'months').startOf('month');

        // Get revenue metrics
        const [revenue, occupancy, guests, loyalty] = await Promise.all([
            // Revenue metrics
            Payment.aggregate([
                {
                    $match: {
                        createdAt: { $gte: lastMonth.toDate() }
                    }
                },
                {
                    $group: {
                        _id: { $dateToString: { format: "%Y-%m-%d", date: "$createdAt" } },
                        total: { $sum: "$amount" }
                    }
                },
                { $sort: { _id: 1 } }
            ]),

            // Occupancy metrics
            Room.aggregate([
                {
                    $match: { hotel: hotelId }
                },
                {
                    $lookup: {
                        from: 'bookings',
                        localField: '_id',
                        foreignField: 'room',
                        as: 'bookings'
                    }
                },
                {
                    $project: {
                        occupancy: {
                            $size: {
                                $filter: {
                                    input: '$bookings',
                                    as: 'booking',
                                    cond: {
                                        $and: [
                                            { $lte: ['$$booking.checkIn', today.toDate()] },
                                            { $gte: ['$$booking.checkOut', today.toDate()] }
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            ]),

            // Guest metrics
            Guest.aggregate([
                {
                    $match: {
                        createdAt: { $gte: lastMonth.toDate() }
                    }
                },
                {
                    $group: {
                        _id: { $dateToString: { format: "%Y-%m-%d", date: "$createdAt" } },
                        count: { $sum: 1 }
                    }
                },
                { $sort: { _id: 1 } }
            ]),

            // Loyalty metrics
            LoyaltyProgram.aggregate([
                {
                    $group: {
                        _id: '$tier',
                        count: { $sum: 1 }
                    }
                }
            ])
        ]);

        res.json({
            revenue: {
                data: revenue,
                total: revenue.reduce((sum, day) => sum + day.total, 0),
                average: revenue.length ? revenue.reduce((sum, day) => sum + day.total, 0) / revenue.length : 0
            },
            occupancy: {
                current: occupancy.reduce((sum, room) => sum + room.occupancy, 0),
                total: occupancy.length,
                rate: occupancy.length ? (occupancy.reduce((sum, room) => sum + room.occupancy, 0) / occupancy.length) * 100 : 0
            },
            guests: {
                data: guests,
                total: guests.reduce((sum, day) => sum + day.count, 0),
                average: guests.length ? guests.reduce((sum, day) => sum + day.count, 0) / guests.length : 0
            },
            loyalty: {
                distribution: loyalty,
                total: loyalty.reduce((sum, tier) => sum + tier.count, 0)
            }
        });
    } catch (error) {
        console.error('Error getting analytics dashboard:', error);
        res.status(500).json({ message: 'Error getting analytics dashboard' });
    }
};

// Get revenue analytics
exports.getRevenueAnalytics = async (req, res) => {
    try {
        const hotelId = req.query.hotelId;
        const startDate = req.query.startDate ? moment(req.query.startDate) : moment().subtract(30, 'days');
        const endDate = req.query.endDate ? moment(req.query.endDate) : moment();

        // Get revenue data
        const [dailyRevenue, paymentMethods, roomTypes, channels] = await Promise.all([
            // Daily revenue
            Payment.aggregate([
                {
                    $match: {
                        hotel: hotelId,
                        createdAt: {
                            $gte: startDate.toDate(),
                            $lte: endDate.toDate()
                        }
                    }
                },
                {
                    $group: {
                        _id: { $dateToString: { format: "%Y-%m-%d", date: "$createdAt" } },
                        total: { $sum: "$amount" }
                    }
                },
                { $sort: { _id: 1 } }
            ]),

            // Payment method distribution
            Payment.aggregate([
                {
                    $match: {
                        hotel: hotelId,
                        createdAt: {
                            $gte: startDate.toDate(),
                            $lte: endDate.toDate()
                        }
                    }
                },
                {
                    $group: {
                        _id: "$method",
                        count: { $sum: 1 },
                        total: { $sum: "$amount" }
                    }
                }
            ]),

            // Revenue by room type
            Booking.aggregate([
                {
                    $match: {
                        hotel: hotelId,
                        createdAt: {
                            $gte: startDate.toDate(),
                            $lte: endDate.toDate()
                        }
                    }
                },
                {
                    $lookup: {
                        from: 'rooms',
                        localField: 'room',
                        foreignField: '_id',
                        as: 'room'
                    }
                },
                {
                    $unwind: '$room'
                },
                {
                    $group: {
                        _id: '$room.type',
                        bookings: { $sum: 1 },
                        revenue: { $sum: '$totalAmount' }
                    }
                }
            ]),

            // Revenue by channel
            Booking.aggregate([
                {
                    $match: {
                        hotel: hotelId,
                        createdAt: {
                            $gte: startDate.toDate(),
                            $lte: endDate.toDate()
                        }
                    }
                },
                {
                    $group: {
                        _id: '$source',
                        bookings: { $sum: 1 },
                        revenue: { $sum: '$totalAmount' }
                    }
                }
            ])
        ]);

        res.json({
            dailyRevenue: {
                data: dailyRevenue,
                total: dailyRevenue.reduce((sum, day) => sum + day.total, 0),
                average: dailyRevenue.length ? dailyRevenue.reduce((sum, day) => sum + day.total, 0) / dailyRevenue.length : 0
            },
            paymentMethods: {
                distribution: paymentMethods,
                total: paymentMethods.reduce((sum, method) => sum + method.total, 0)
            },
            roomTypes: {
                distribution: roomTypes,
                total: roomTypes.reduce((sum, type) => sum + type.revenue, 0)
            },
            channels: {
                distribution: channels,
                total: channels.reduce((sum, channel) => sum + channel.revenue, 0)
            }
        });
    } catch (error) {
        console.error('Error getting revenue analytics:', error);
        res.status(500).json({ message: 'Error getting revenue analytics' });
    }
};

// Get occupancy analytics
exports.getOccupancyAnalytics = async (req, res) => {
    try {
        const hotelId = req.query.hotelId;
        const startDate = req.query.startDate ? moment(req.query.startDate) : moment().subtract(30, 'days');
        const endDate = req.query.endDate ? moment(req.query.endDate) : moment();

        // Get occupancy data
        const [dailyOccupancy, roomTypes, seasonality] = await Promise.all([
            // Daily occupancy
            Booking.aggregate([
                {
                    $match: {
                        hotel: hotelId,
                        checkIn: { $lte: endDate.toDate() },
                        checkOut: { $gte: startDate.toDate() }
                    }
                },
                {
                    $group: {
                        _id: { $dateToString: { format: "%Y-%m-%d", date: "$checkIn" } },
                        rooms: { $sum: 1 }
                    }
                },
                { $sort: { _id: 1 } }
            ]),

            // Occupancy by room type
            Room.aggregate([
                {
                    $match: { hotel: hotelId }
                },
                {
                    $lookup: {
                        from: 'bookings',
                        localField: '_id',
                        foreignField: 'room',
                        as: 'bookings'
                    }
                },
                {
                    $unwind: '$bookings'
                },
                {
                    $match: {
                        'bookings.checkIn': { $lte: endDate.toDate() },
                        'bookings.checkOut': { $gte: startDate.toDate() }
                    }
                },
                {
                    $group: {
                        _id: '$type',
                        totalRooms: { $sum: 1 },
                        occupiedRooms: { $sum: 1 }
                    }
                }
            ]),

            // Seasonality analysis
            Booking.aggregate([
                {
                    $match: {
                        hotel: hotelId,
                        checkIn: { $lte: endDate.toDate() },
                        checkOut: { $gte: startDate.toDate() }
                    }
                },
                {
                    $group: {
                        _id: {
                            month: { $month: '$checkIn' },
                            year: { $year: '$checkIn' }
                        },
                        bookings: { $sum: 1 },
                        revenue: { $sum: '$totalAmount' }
                    }
                },
                { $sort: { '_id.year': 1, '_id.month': 1 } }
            ])
        ]);

        // Get total room count for occupancy rate calculation
        const totalRooms = await Room.countDocuments({ hotel: hotelId });

        res.json({
            dailyOccupancy: {
                data: dailyOccupancy.map(day => ({
                    ...day,
                    rate: (day.rooms / totalRooms) * 100
                })),
                average: dailyOccupancy.length ? 
                    (dailyOccupancy.reduce((sum, day) => sum + day.rooms, 0) / (dailyOccupancy.length * totalRooms)) * 100 : 0
            },
            roomTypes: {
                distribution: roomTypes.map(type => ({
                    ...type,
                    occupancyRate: (type.occupiedRooms / type.totalRooms) * 100
                }))
            },
            seasonality: {
                data: seasonality,
                peakMonths: seasonality
                    .sort((a, b) => b.bookings - a.bookings)
                    .slice(0, 3)
                    .map(month => ({
                        month: month._id.month,
                        year: month._id.year,
                        bookings: month.bookings,
                        revenue: month.revenue
                    }))
            }
        });
    } catch (error) {
        console.error('Error getting occupancy analytics:', error);
        res.status(500).json({ message: 'Error getting occupancy analytics' });
    }
};

// Get guest analytics
exports.getGuestAnalytics = async (req, res) => {
    try {
        const hotelId = req.query.hotelId;
        const startDate = req.query.startDate ? moment(req.query.startDate) : moment().subtract(30, 'days');
        const endDate = req.query.endDate ? moment(req.query.endDate) : moment();

        // Get guest data
        const [guestAcquisition, demographics, preferences, loyalty] = await Promise.all([
            // Guest acquisition
            Guest.aggregate([
                {
                    $match: {
                        hotel: hotelId,
                        createdAt: {
                            $gte: startDate.toDate(),
                            $lte: endDate.toDate()
                        }
                    }
                },
                {
                    $group: {
                        _id: { $dateToString: { format: "%Y-%m-%d", date: "$createdAt" } },
                        count: { $sum: 1 }
                    }
                },
                { $sort: { _id: 1 } }
            ]),

            // Guest demographics
            Guest.aggregate([
                {
                    $match: { hotel: hotelId }
                },
                {
                    $group: {
                        _id: {
                            ageGroup: {
                                $switch: {
                                    branches: [
                                        { case: { $lt: ['$age', 25] }, then: '18-24' },
                                        { case: { $lt: ['$age', 35] }, then: '25-34' },
                                        { case: { $lt: ['$age', 45] }, then: '35-44' },
                                        { case: { $lt: ['$age', 55] }, then: '45-54' },
                                        { case: { $lt: ['$age', 65] }, then: '55-64' }
                                    ],
                                    default: '65+'
                                }
                            },
                            gender: '$gender'
                        },
                        count: { $sum: 1 }
                    }
                }
            ]),

            // Guest preferences
            Booking.aggregate([
                {
                    $match: {
                        hotel: hotelId,
                        checkIn: {
                            $gte: startDate.toDate(),
                            $lte: endDate.toDate()
                        }
                    }
                },
                {
                    $lookup: {
                        from: 'rooms',
                        localField: 'room',
                        foreignField: '_id',
                        as: 'room'
                    }
                },
                {
                    $unwind: '$room'
                },
                {
                    $group: {
                        _id: {
                            roomType: '$room.type',
                            source: '$source'
                        },
                        bookings: { $sum: 1 },
                        avgStay: { $avg: { $subtract: ['$checkOut', '$checkIn'] } }
                    }
                }
            ]),

            // Loyalty program metrics
            LoyaltyProgram.aggregate([
                {
                    $match: { hotel: hotelId }
                },
                {
                    $group: {
                        _id: '$tier',
                        members: { $sum: 1 },
                        totalPoints: { $sum: '$points' },
                        avgSpending: { $avg: '$totalSpent' }
                    }
                },
                { $sort: { avgSpending: -1 } }
            ])
        ]);

        res.json({
            acquisition: {
                data: guestAcquisition,
                total: guestAcquisition.reduce((sum, day) => sum + day.count, 0),
                average: guestAcquisition.length ? 
                    guestAcquisition.reduce((sum, day) => sum + day.count, 0) / guestAcquisition.length : 0
            },
            demographics: {
                ageGroups: demographics
                    .reduce((groups, item) => {
                        const key = item._id.ageGroup;
                        if (!groups[key]) groups[key] = { male: 0, female: 0 };
                        groups[key][item._id.gender.toLowerCase()] = item.count;
                        return groups;
                    }, {}),
                genderDistribution: demographics
                    .reduce((dist, item) => {
                        dist[item._id.gender.toLowerCase()] = (dist[item._id.gender.toLowerCase()] || 0) + item.count;
                        return dist;
                    }, {})
            },
            preferences: {
                roomTypes: preferences
                    .reduce((types, pref) => {
                        const key = pref._id.roomType;
                        if (!types[key]) types[key] = { bookings: 0, sources: {} };
                        types[key].bookings += pref.bookings;
                        types[key].sources[pref._id.source] = pref.bookings;
                        types[key].avgStay = pref.avgStay;
                        return types;
                    }, {}),
                bookingSources: preferences
                    .reduce((sources, pref) => {
                        const key = pref._id.source;
                        if (!sources[key]) sources[key] = { bookings: 0, roomTypes: {} };
                        sources[key].bookings += pref.bookings;
                        sources[key].roomTypes[pref._id.roomType] = pref.bookings;
                        return sources;
                    }, {})
            },
            loyalty: {
                tiers: loyalty,
                totalMembers: loyalty.reduce((sum, tier) => sum + tier.members, 0),
                totalPoints: loyalty.reduce((sum, tier) => sum + tier.totalPoints, 0),
                avgSpending: loyalty.reduce((sum, tier) => sum + tier.avgSpending, 0) / loyalty.length
            }
        });
    } catch (error) {
        console.error('Error getting guest analytics:', error);
        res.status(500).json({ message: 'Error getting guest analytics' });
    }
};

// Get loyalty analytics
exports.getLoyaltyAnalytics = async (req, res) => {
    try {
        const hotelId = req.query.hotelId;
        const startDate = req.query.startDate ? moment(req.query.startDate) : moment().subtract(30, 'days');
        const endDate = req.query.endDate ? moment(req.query.endDate) : moment();

        // Get loyalty program data
        const [membershipGrowth, tierDistribution, pointsActivity, rewards] = await Promise.all([
            // Membership growth
            LoyaltyProgram.aggregate([
                {
                    $match: {
                        hotel: hotelId,
                        createdAt: {
                            $gte: startDate.toDate(),
                            $lte: endDate.toDate()
                        }
                    }
                },
                {
                    $group: {
                        _id: { $dateToString: { format: "%Y-%m-%d", date: "$createdAt" } },
                        newMembers: { $sum: 1 }
                    }
                },
                { $sort: { _id: 1 } }
            ]),

            // Tier distribution and metrics
            LoyaltyProgram.aggregate([
                {
                    $match: { hotel: hotelId }
                },
                {
                    $group: {
                        _id: '$tier',
                        members: { $sum: 1 },
                        totalPoints: { $sum: '$points' },
                        avgSpending: { $avg: '$totalSpent' },
                        avgStayDuration: { $avg: '$avgStayDuration' }
                    }
                }
            ]),

            // Points activity
            LoyaltyProgram.aggregate([
                {
                    $match: {
                        hotel: hotelId,
                        'pointsHistory.date': {
                            $gte: startDate.toDate(),
                            $lte: endDate.toDate()
                        }
                    }
                },
                {
                    $unwind: '$pointsHistory'
                },
                {
                    $group: {
                        _id: {
                            date: { $dateToString: { format: "%Y-%m-%d", date: "$pointsHistory.date" } },
                            type: '$pointsHistory.type'
                        },
                        points: { $sum: '$pointsHistory.points' }
                    }
                },
                { $sort: { '_id.date': 1 } }
            ]),

            // Rewards redemption
            LoyaltyProgram.aggregate([
                {
                    $match: {
                        hotel: hotelId,
                        'rewards.redeemedAt': {
                            $gte: startDate.toDate(),
                            $lte: endDate.toDate()
                        }
                    }
                },
                {
                    $unwind: '$rewards'
                },
                {
                    $group: {
                        _id: '$rewards.type',
                        count: { $sum: 1 },
                        pointsSpent: { $sum: '$rewards.pointsCost' }
                    }
                }
            ])
        ]);

        res.json({
            membershipGrowth: {
                data: membershipGrowth,
                total: membershipGrowth.reduce((sum, day) => sum + day.newMembers, 0),
                average: membershipGrowth.length ? 
                    membershipGrowth.reduce((sum, day) => sum + day.newMembers, 0) / membershipGrowth.length : 0
            },
            tiers: {
                distribution: tierDistribution,
                totalMembers: tierDistribution.reduce((sum, tier) => sum + tier.members, 0),
                totalPoints: tierDistribution.reduce((sum, tier) => sum + tier.totalPoints, 0),
                metrics: tierDistribution.map(tier => ({
                    tier: tier._id,
                    avgSpending: tier.avgSpending,
                    avgStayDuration: tier.avgStayDuration,
                    memberPercentage: (tier.members / tierDistribution.reduce((sum, t) => sum + t.members, 0)) * 100
                }))
            },
            pointsActivity: {
                earned: pointsActivity
                    .filter(activity => activity._id.type === 'EARNED')
                    .reduce((sum, activity) => sum + activity.points, 0),
                redeemed: pointsActivity
                    .filter(activity => activity._id.type === 'REDEEMED')
                    .reduce((sum, activity) => sum + activity.points, 0),
                daily: pointsActivity.reduce((daily, activity) => {
                    const date = activity._id.date;
                    if (!daily[date]) daily[date] = { earned: 0, redeemed: 0 };
                    if (activity._id.type === 'EARNED') daily[date].earned = activity.points;
                    if (activity._id.type === 'REDEEMED') daily[date].redeemed = activity.points;
                    return daily;
                }, {})
            },
            rewards: {
                distribution: rewards,
                totalRedemptions: rewards.reduce((sum, reward) => sum + reward.count, 0),
                totalPointsSpent: rewards.reduce((sum, reward) => sum + reward.pointsSpent, 0),
                popularRewards: rewards
                    .sort((a, b) => b.count - a.count)
                    .slice(0, 5)
                    .map(reward => ({
                        type: reward._id,
                        redemptions: reward.count,
                        pointsSpent: reward.pointsSpent
                    }))
            }
        });
    } catch (error) {
        console.error('Error getting loyalty analytics:', error);
        res.status(500).json({ message: 'Error getting loyalty analytics' });
    }
};

// Get analytics dashboard
exports.getDashboard = async (req, res) => {
    try {
        const hotelId = req.query.hotelId;
        const today = moment().startOf('day');
        const lastMonth = moment().subtract(1, 'months').startOf('month');

        // Get revenue metrics
        const [revenue, occupancy, guests, loyalty] = await Promise.all([
            // Revenue metrics
            Payment.aggregate([
                {
                    $match: {
                        createdAt: { $gte: lastMonth.toDate() }
                    }
                },
                {
                    $group: {
                        _id: { $dateToString: { format: "%Y-%m-%d", date: "$createdAt" } },
                        total: { $sum: "$amount" }
                    }
                },
                { $sort: { _id: 1 } }
            ]),

            // Occupancy metrics
            Room.aggregate([
                {
                    $match: { hotel: hotelId }
                },
                {
                    $lookup: {
                        from: 'bookings',
                        localField: '_id',
                        foreignField: 'room',
                        as: 'bookings'
                    }
                },
                {
                    $project: {
                        type: 1,
                        totalRooms: 1,
                        occupiedRooms: {
                            $size: {
                                $filter: {
                                    input: '$bookings',
                                    as: 'booking',
                                    cond: {
                                        $and: [
                                            { $lte: ['$booking.checkIn', today] },
                                            { $gte: ['$booking.checkOut', today] }
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                {
                    $group: {
                        _id: '$type',
                        totalRooms: { $sum: 1 },
                        occupiedRooms: { $sum: '$occupiedRooms' }
                    }
                }
            ]),

            // Guest metrics
            Guest.aggregate([
                {
                    $match: {
                        createdAt: { $gte: lastMonth.toDate() }
                    }
                },
                {
                    $group: {
                        _id: { $dateToString: { format: "%Y-%m-%d", date: "$createdAt" } },
                        count: { $sum: 1 }
                    }
                },
                { $sort: { _id: 1 } }
            ]),

            // Loyalty metrics
            LoyaltyProgram.aggregate([
                {
                    $group: {
                        _id: '$tier',
                        count: { $sum: 1 },
                        totalPoints: { $sum: '$points' }
                    }
                }
            ])
        ]);

        res.render('admin/analytics/dashboard', {
            title: 'Analytics Dashboard',
            data: {
                revenue,
                occupancy,
                guests,
                loyalty
            }
        });
    } catch (error) {
        console.error('Error in analytics dashboard:', error);
        res.status(500).render('error', {
            message: 'Error loading analytics dashboard'
        });
    }
};

// Get revenue analytics
exports.getRevenueAnalytics = async (req, res) => {
    try {
        const hotelId = req.query.hotelId;
        const startDate = req.query.startDate ? moment(req.query.startDate) : moment().subtract(30, 'days');
        const endDate = req.query.endDate ? moment(req.query.endDate) : moment();

        // Get daily revenue
        const dailyRevenue = await Payment.aggregate([
            {
                $match: {
                    hotel: hotelId,
                    createdAt: {
                        $gte: startDate.toDate(),
                        $lte: endDate.toDate()
                    }
                }
            },
            {
                $group: {
                    _id: { $dateToString: { format: "%Y-%m-%d", date: "$createdAt" } },
                    total: { $sum: "$amount" }
                }
            },
            { $sort: { _id: 1 } }
        ]);

        // Get revenue by payment method
        const revenueByMethod = await Payment.aggregate([
            {
                $match: {
                    hotel: hotelId,
                    createdAt: {
                        $gte: startDate.toDate(),
                        $lte: endDate.toDate()
                    }
                }
            },
            {
                $group: {
                    _id: "$method",
                    total: { $sum: "$amount" },
                    count: { $sum: 1 }
                }
            }
        ]);

        // Get revenue by room type
        const revenueByRoomType = await Booking.aggregate([
            {
                $match: {
                    hotel: hotelId,
                    createdAt: {
                        $gte: startDate.toDate(),
                        $lte: endDate.toDate()
                    }
                }
            },
            {
                $lookup: {
                    from: 'rooms',
                    localField: 'room',
                    foreignField: '_id',
                    as: 'room'
                }
            },
            { $unwind: '$room' },
            {
                $group: {
                    _id: '$room.type',
                    total: { $sum: "$totalAmount" },
                    count: { $sum: 1 }
                }
            }
        ]);

        res.render('admin/analytics/revenue', {
            title: 'Revenue Analytics',
            data: {
                dailyRevenue,
                revenueByMethod,
                revenueByRoomType
            },
            dateRange: {
                start: startDate.format('YYYY-MM-DD'),
                end: endDate.format('YYYY-MM-DD')
            }
        });
    } catch (error) {
        console.error('Error in revenue analytics:', error);
        res.status(500).render('error', {
            message: 'Error loading revenue analytics'
        });
    }
};

// Get occupancy analytics
exports.getOccupancyAnalytics = async (req, res) => {
    try {
        const hotelId = req.query.hotelId;
        const startDate = req.query.startDate ? moment(req.query.startDate) : moment().subtract(30, 'days');
        const endDate = req.query.endDate ? moment(req.query.endDate) : moment();

        // Get daily occupancy rate
        const dailyOccupancy = await Room.aggregate([
            {
                $match: { hotel: hotelId }
            },
            {
                $lookup: {
                    from: 'bookings',
                    localField: '_id',
                    foreignField: 'room',
                    as: 'bookings'
                }
            },
            {
                $unwind: '$bookings'
            },
            {
                $match: {
                    'bookings.checkIn': {
                        $gte: startDate.toDate(),
                        $lte: endDate.toDate()
                    }
                }
            },
            {
                $group: {
                    _id: { $dateToString: { format: "%Y-%m-%d", date: "$bookings.checkIn" } },
                    occupiedRooms: { $sum: 1 }
                }
            },
            { $sort: { _id: 1 } }
        ]);

        // Get occupancy by room type
        const occupancyByType = await Room.aggregate([
            {
                $match: { hotel: hotelId }
            },
            {
                $group: {
                    _id: '$type',
                    totalRooms: { $sum: 1 },
                    occupiedRooms: {
                        $sum: {
                            $cond: [
                                { $eq: ['$status', 'occupied'] },
                                1,
                                0
                            ]
                        }
                    }
                }
            }
        ]);

        // Get average length of stay
        const avgStayDuration = await Booking.aggregate([
            {
                $match: {
                    hotel: hotelId,
                    checkIn: {
                        $gte: startDate.toDate(),
                        $lte: endDate.toDate()
                    }
                }
            },
            {
                $project: {
                    stayDuration: {
                        $divide: [
                            { $subtract: ['$checkOut', '$checkIn'] },
                            1000 * 60 * 60 * 24 // Convert to days
                        ]
                    }
                }
            },
            {
                $group: {
                    _id: null,
                    avgStay: { $avg: '$stayDuration' }
                }
            }
        ]);

        res.render('admin/analytics/occupancy', {
            title: 'Occupancy Analytics',
            data: {
                dailyOccupancy,
                occupancyByType,
                avgStayDuration: avgStayDuration[0]?.avgStay || 0
            },
            dateRange: {
                start: startDate.format('YYYY-MM-DD'),
                end: endDate.format('YYYY-MM-DD')
            }
        });
    } catch (error) {
        console.error('Error in occupancy analytics:', error);
        res.status(500).render('error', {
            message: 'Error loading occupancy analytics'
        });
    }
};

// Get guest analytics
exports.getGuestAnalytics = async (req, res) => {
    try {
        const hotelId = req.query.hotelId;
        const startDate = req.query.startDate ? moment(req.query.startDate) : moment().subtract(30, 'days');
        const endDate = req.query.endDate ? moment(req.query.endDate) : moment();

        // Get guest demographics
        const demographics = await Guest.aggregate([
            {
                $match: {
                    hotel: hotelId,
                    createdAt: {
                        $gte: startDate.toDate(),
                        $lte: endDate.toDate()
                    }
                }
            },
            {
                $group: {
                    _id: {
                        country: '$country',
                        ageGroup: {
                            $switch: {
                                branches: [
                                    { case: { $lt: ['$age', 25] }, then: '18-24' },
                                    { case: { $lt: ['$age', 35] }, then: '25-34' },
                                    { case: { $lt: ['$age', 45] }, then: '35-44' },
                                    { case: { $lt: ['$age', 55] }, then: '45-54' },
                                    { case: { $lt: ['$age', 65] }, then: '55-64' }
                                ],
                                default: '65+'
                            }
                        }
                    },
                    count: { $sum: 1 }
                }
            }
        ]);

        // Get booking patterns
        const bookingPatterns = await Booking.aggregate([
            {
                $match: {
                    hotel: hotelId,
                    createdAt: {
                        $gte: startDate.toDate(),
                        $lte: endDate.toDate()
                    }
                }
            },
            {
                $group: {
                    _id: {
                        dayOfWeek: { $dayOfWeek: '$checkIn' },
                        month: { $month: '$checkIn' }
                    },
                    count: { $sum: 1 }
                }
            }
        ]);

        // Get guest preferences
        const preferences = await Guest.aggregate([
            {
                $match: {
                    hotel: hotelId,
                    createdAt: {
                        $gte: startDate.toDate(),
                        $lte: endDate.toDate()
                    }
                }
            },
            {
                $unwind: '$preferences'
            },
            {
                $group: {
                    _id: '$preferences.category',
                    preferences: {
                        $push: {
                            preference: '$preferences.preference',
                            count: 1
                        }
                    }
                }
            }
        ]);

        res.render('admin/analytics/guest', {
            title: 'Guest Analytics',
            data: {
                demographics,
                bookingPatterns,
                preferences
            },
            dateRange: {
                start: startDate.format('YYYY-MM-DD'),
                end: endDate.format('YYYY-MM-DD')
            }
        });
    } catch (error) {
        console.error('Error in guest analytics:', error);
        res.status(500).render('error', {
            message: 'Error loading guest analytics'
        });
    }
};

// Get loyalty analytics
exports.getLoyaltyAnalytics = async (req, res) => {
    try {
        const hotelId = req.query.hotelId;
        const startDate = req.query.startDate ? moment(req.query.startDate) : moment().subtract(30, 'days');
        const endDate = req.query.endDate ? moment(req.query.endDate) : moment();

        // Get tier distribution
        const tierDistribution = await LoyaltyProgram.aggregate([
            {
                $match: {
                    hotel: hotelId
                }
            },
            {
                $group: {
                    _id: '$tier',
                    count: { $sum: 1 },
                    totalPoints: { $sum: '$points' }
                }
            }
        ]);

        // Get points activity
        const pointsActivity = await LoyaltyProgram.aggregate([
            {
                $match: {
                    hotel: hotelId,
                    'pointsHistory.date': {
                        $gte: startDate.toDate(),
                        $lte: endDate.toDate()
                    }
                }
            },
            {
                $unwind: '$pointsHistory'
            },
            {
                $group: {
                    _id: {
                        date: { $dateToString: { format: "%Y-%m-%d", date: "$pointsHistory.date" } },
                        type: '$pointsHistory.type'
                    },
                    points: { $sum: '$pointsHistory.points' }
                }
            },
            { $sort: { '_id.date': 1 } }
        ]);

        // Get reward redemption stats
        const rewardRedemptions = await LoyaltyProgram.aggregate([
            {
                $match: {
                    hotel: hotelId,
                    'rewardHistory.date': {
                        $gte: startDate.toDate(),
                        $lte: endDate.toDate()
                    }
                }
            },
            {
                $unwind: '$rewardHistory'
            },
            {
                $group: {
                    _id: '$rewardHistory.rewardType',
                    count: { $sum: 1 },
                    totalPoints: { $sum: '$rewardHistory.pointsCost' }
                }
            }
        ]);

        res.render('admin/analytics/loyalty', {
            title: 'Loyalty Analytics',
            data: {
                tierDistribution,
                pointsActivity,
                rewardRedemptions
            },
            dateRange: {
                start: startDate.format('YYYY-MM-DD'),
                end: endDate.format('YYYY-MM-DD')
            }
        });
    } catch (error) {
        console.error('Error in loyalty analytics:', error);
        res.status(500).render('error', {
            message: 'Error loading loyalty analytics'
        });
    }
};

// Get staff analytics
exports.getStaffAnalytics = async (req, res) => {
    try {
        const startDate = req.query.startDate ? new Date(req.query.startDate) : moment().subtract(30, 'days').toDate();
        const endDate = req.query.endDate ? new Date(req.query.endDate) : new Date();

        // Staff booking performance
        const bookingPerformance = await Booking.aggregate([
            {
                $match: {
                    createdAt: {
                        $gte: startDate,
                        $lte: endDate
                    }
                }
            },
            {
                $group: {
                    _id: "$createdBy",
                    totalBookings: { $sum: 1 },
                    totalRevenue: { $sum: "$totalAmount" },
                    avgBookingValue: { $avg: "$totalAmount" }
                }
            },
            {
                $lookup: {
                    from: "users",
                    localField: "_id",
                    foreignField: "_id",
                    as: "staff"
                }
            },
            { $unwind: "$staff" },
            {
                $project: {
                    staffName: "$staff.name",
                    totalBookings: 1,
                    totalRevenue: 1,
                    avgBookingValue: 1
                }
            }
        ]);

        // Staff check-in/check-out performance
        const checkInOutPerformance = await Booking.aggregate([
            {
                $match: {
                    $or: [
                        { checkInDate: { $gte: startDate, $lte: endDate } },
                        { checkOutDate: { $gte: startDate, $lte: endDate } }
                    ]
                }
            },
            {
                $group: {
                    _id: "$processedBy",
                    totalCheckIns: {
                        $sum: {
                            $cond: [
                                { $and: [
                                    { $gte: ["$checkInDate", startDate] },
                                    { $lte: ["$checkInDate", endDate] }
                                ]},
                                1,
                                0
                            ]
                        }
                    },
                    totalCheckOuts: {
                        $sum: {
                            $cond: [
                                { $and: [
                                    { $gte: ["$checkOutDate", startDate] },
                                    { $lte: ["$checkOutDate", endDate] }
                                ]},
                                1,
                                0
                            ]
                        }
                    }
                }
            },
            {
                $lookup: {
                    from: "users",
                    localField: "_id",
                    foreignField: "_id",
                    as: "staff"
                }
            },
            { $unwind: "$staff" },
            {
                $project: {
                    staffName: "$staff.name",
                    totalCheckIns: 1,
                    totalCheckOuts: 1
                }
            }
        ]);

        // Staff task completion rate
        const taskPerformance = await Task.aggregate([
            {
                $match: {
                    createdAt: {
                        $gte: startDate,
                        $lte: endDate
                    }
                }
            },
            {
                $group: {
                    _id: "$assignedTo",
                    totalTasks: { $sum: 1 },
                    completedTasks: {
                        $sum: {
                            $cond: [{ $eq: ["$status", "completed"] }, 1, 0]
                        }
                    }
                }
            },
            {
                $lookup: {
                    from: "users",
                    localField: "_id",
                    foreignField: "_id",
                    as: "staff"
                }
            },
            { $unwind: "$staff" },
            {
                $project: {
                    staffName: "$staff.name",
                    totalTasks: 1,
                    completedTasks: 1,
                    completionRate: {
                        $multiply: [
                            { $divide: ["$completedTasks", "$totalTasks"] },
                            100
                        ]
                    }
                }
            }
        ]);

        res.json({
            success: true,
            data: {
                bookingPerformance,
                checkInOutPerformance,
                taskPerformance
            }
        });
    } catch (error) {
        console.error('Error getting staff analytics:', error);
        res.status(500).json({ message: 'Error getting staff analytics' });
    }
};

================
File: src/controllers/admin/booking.controller.js
================
const Booking = require('../../models/Booking');
const moment = require('moment');

// Helper function to get base query with common population
const getBaseQuery = () => {
    return Booking.find()
        .populate('user', 'name email phone')
        .populate('hotel', 'name location')
        .populate('room', 'type number capacity price')
        .populate('corporateAccount', 'companyName');
};

// Helper function to format booking source
const formatBookingSource = (source) => {
    const sourceMap = {
        'direct': 'Direct Booking',
        'website': 'Website',
        'phone': 'Phone',
        'email': 'Email',
        'ota': 'Online Travel Agency',
        'corporate': 'Corporate Account',
        'walk_in': 'Walk-in'
    };
    return sourceMap[source] || source;
};

// Helper function to calculate total amount
const calculateTotalAmount = (booking) => {
    const baseAmount = booking.room.price * Math.ceil((booking.checkOut - booking.checkIn) / (1000 * 60 * 60 * 24));
    const taxAmount = baseAmount * (booking.taxRate || 0.1); // Default 10% tax
    return baseAmount + taxAmount;
};

// Helper function to get booking statistics
const getBookingStats = async () => {
    const now = new Date();
    const thirtyDaysAgo = new Date(now.getTime() - (30 * 24 * 60 * 60 * 1000));

    const stats = await Booking.aggregate([
        {
            $facet: {
                'totalBookings': [
                    { $count: 'count' }
                ],
                'recentBookings': [
                    {
                        $match: {
                            createdAt: { $gte: thirtyDaysAgo }
                        }
                    },
                    { $count: 'count' }
                ],
                'statusDistribution': [
                    {
                        $group: {
                            _id: '$status',
                            count: { $sum: 1 }
                        }
                    }
                ],
                'sourceDistribution': [
                    {
                        $group: {
                            _id: '$bookingSource',
                            count: { $sum: 1 }
                        }
                    }
                ]
            }
        }
    ]);

    return {
        total: stats[0].totalBookings[0]?.count || 0,
        recent: stats[0].recentBookings[0]?.count || 0,
        byStatus: stats[0].statusDistribution,
        bySource: stats[0].sourceDistribution
    };
};

// Get all bookings with filters
exports.getAllBookings = async (req, res) => {
    try {
        const page = parseInt(req.query.page) || 1;
        const limit = parseInt(req.query.limit) || 10;
        const skip = (page - 1) * limit;

        // Build filter query
        const query = {};
        
        // Filter by booking source
        if (req.query.source) {
            query.bookingSource = req.query.source;
        }

        // Filter by date range
        if (req.query.startDate) {
            query.checkIn = { $gte: new Date(req.query.startDate) };
        }
        if (req.query.endDate) {
            query.checkOut = { $lte: new Date(req.query.endDate) };
        }

        // Filter by status
        if (req.query.status) {
            query.status = req.query.status;
        }

        // Get bookings with pagination and stats
        const [bookings, total, stats] = await Promise.all([
            getBaseQuery()
                .find(query)
                .sort({ createdAt: -1 })
                .skip(skip)
                .limit(limit)
                .lean(),
            Booking.countDocuments(query),
            getBookingStats()
        ]);

        // Process bookings to add display values
        const processedBookings = bookings.map(booking => ({
            ...booking,
            bookingSourceDisplay: formatBookingSource(booking.bookingSource),
            nights: Math.ceil((booking.checkOut - booking.checkIn) / (1000 * 60 * 60 * 24)),
            totalAmount: calculateTotalAmount(booking)
        }));

        // Prepare pagination data
        const totalPages = Math.ceil(total / limit);
        const pagination = {
            page,
            limit,
            total,
            totalPages,
            hasNextPage: page < totalPages,
            hasPrevPage: page > 1,
            nextPage: page < totalPages ? page + 1 : null,
            prevPage: page > 1 ? page - 1 : null,
            pages: Array.from({ length: totalPages }, (_, i) => ({
                number: i + 1,
                isCurrent: i + 1 === page
            }))
        };

        // Render the bookings list page
        res.render('admin/bookings/list', {
            title: 'Booking Management',
            active: 'bookings',
            bookings: processedBookings,
            stats,
            filters: {
                source: req.query.source,
                status: req.query.status,
                startDate: req.query.startDate,
                endDate: req.query.endDate
            },
            pagination
        });
    } catch (error) {
        console.error('Error getting bookings:', error);
        res.status(500).render('error', {
            message: 'Error loading bookings'
        });
    }
};

// Get upcoming bookings
exports.getUpcomingBookings = async (req, res) => {
    try {
        const page = parseInt(req.query.page) || 1;
        const limit = parseInt(req.query.limit) || 10;
        const skip = (page - 1) * limit;

        const now = new Date();
        const query = {
            checkIn: { $gt: now },
            status: { $in: ['confirmed', 'pending'] }
        };

        const [bookings, total] = await Promise.all([
            getBaseQuery()
                .find(query)
                .sort({ checkIn: 1 })
                .skip(skip)
                .limit(limit)
                .lean(),
            Booking.countDocuments(query)
        ]);

        const processedBookings = bookings.map(booking => ({
            ...booking,
            bookingSourceDisplay: formatBookingSource(booking.bookingSource),
            nights: Math.ceil((booking.checkOut - booking.checkIn) / (1000 * 60 * 60 * 24)),
            totalAmount: calculateTotalAmount(booking)
        }));

        const totalPages = Math.ceil(total / limit);
        const pagination = {
            page,
            limit,
            total,
            totalPages,
            hasNextPage: page < totalPages,
            hasPrevPage: page > 1,
            nextPage: page < totalPages ? page + 1 : null,
            prevPage: page > 1 ? page - 1 : null,
            pages: Array.from({ length: totalPages }, (_, i) => ({
                number: i + 1,
                isCurrent: i + 1 === page
            }))
        };

        res.render('admin/bookings/list', {
            title: 'Upcoming Bookings',
            active: 'bookings',
            bookings: processedBookings,
            pagination,
            filters: {}
        });
    } catch (error) {
        console.error('Error getting upcoming bookings:', error);
        res.status(500).render('error', {
            message: 'Error loading upcoming bookings'
        });
    }
};

// Get current bookings
exports.getCurrentBookings = async (req, res) => {
    try {
        const page = parseInt(req.query.page) || 1;
        const limit = parseInt(req.query.limit) || 10;
        const skip = (page - 1) * limit;

        const now = new Date();
        const query = {
            checkIn: { $lte: now },
            checkOut: { $gte: now },
            status: 'checked_in'
        };

        const [bookings, total] = await Promise.all([
            getBaseQuery()
                .find(query)
                .sort({ checkIn: 1 })
                .skip(skip)
                .limit(limit)
                .lean(),
            Booking.countDocuments(query)
        ]);

        const processedBookings = bookings.map(booking => ({
            ...booking,
            bookingSourceDisplay: formatBookingSource(booking.bookingSource),
            nights: Math.ceil((booking.checkOut - booking.checkIn) / (1000 * 60 * 60 * 24)),
            totalAmount: calculateTotalAmount(booking)
        }));

        const totalPages = Math.ceil(total / limit);
        const pagination = {
            page,
            limit,
            total,
            totalPages,
            hasNextPage: page < totalPages,
            hasPrevPage: page > 1,
            nextPage: page < totalPages ? page + 1 : null,
            prevPage: page > 1 ? page - 1 : null,
            pages: Array.from({ length: totalPages }, (_, i) => ({
                number: i + 1,
                isCurrent: i + 1 === page
            }))
        };

        res.render('admin/bookings/list', {
            title: 'Current Bookings',
            active: 'bookings',
            bookings: processedBookings,
            pagination,
            filters: {}
        });
    } catch (error) {
        console.error('Error getting current bookings:', error);
        res.status(500).render('error', {
            message: 'Error loading current bookings'
        });
    }
};

// Get past bookings
exports.getPastBookings = async (req, res) => {
    try {
        const page = parseInt(req.query.page) || 1;
        const limit = parseInt(req.query.limit) || 10;
        const skip = (page - 1) * limit;

        const now = new Date();
        const query = {
            checkOut: { $lt: now },
            status: { $in: ['checked_out', 'cancelled'] }
        };

        const [bookings, total] = await Promise.all([
            getBaseQuery()
                .find(query)
                .sort({ checkOut: -1 })
                .skip(skip)
                .limit(limit)
                .lean(),
            Booking.countDocuments(query)
        ]);

        const processedBookings = bookings.map(booking => ({
            ...booking,
            bookingSourceDisplay: formatBookingSource(booking.bookingSource),
            nights: Math.ceil((booking.checkOut - booking.checkIn) / (1000 * 60 * 60 * 24)),
            totalAmount: calculateTotalAmount(booking)
        }));

        const totalPages = Math.ceil(total / limit);
        const pagination = {
            page,
            limit,
            total,
            totalPages,
            hasNextPage: page < totalPages,
            hasPrevPage: page > 1,
            nextPage: page < totalPages ? page + 1 : null,
            prevPage: page > 1 ? page - 1 : null,
            pages: Array.from({ length: totalPages }, (_, i) => ({
                number: i + 1,
                isCurrent: i + 1 === page
            }))
        };

        res.render('admin/bookings/list', {
            title: 'Past Bookings',
            active: 'bookings',
            bookings: processedBookings,
            pagination,
            filters: {}
        });
    } catch (error) {
        console.error('Error getting past bookings:', error);
        res.status(500).render('error', {
            message: 'Error loading past bookings'
        });
    }
};

// Get booking details
exports.getBookingDetails = async (req, res) => {
    try {
        const booking = await getBaseQuery()
            .findById(req.params.id)
            .lean();

        if (!booking) {
            return res.status(404).render('error', {
                message: 'Booking not found'
            });
        }

        booking.bookingSourceDisplay = formatBookingSource(booking.bookingSource);
        booking.nights = Math.ceil((booking.checkOut - booking.checkIn) / (1000 * 60 * 60 * 24));
        booking.totalAmount = calculateTotalAmount(booking);

        res.render('admin/bookings/details', {
            title: 'Booking Details',
            active: 'bookings',
            booking
        });
    } catch (error) {
        console.error('Error getting booking details:', error);
        res.status(500).render('error', {
            message: 'Error loading booking details'
        });
    }
};

// Update booking
exports.updateBooking = async (req, res) => {
    try {
        const {
            checkIn,
            checkOut,
            guests,
            specialRequests,
            bookingSource,
            corporateAccountId,
            status
        } = req.body;

        const booking = await Booking.findById(req.params.id);
        if (!booking) {
            return res.status(404).json({
                message: 'Booking not found'
            });
        }

        // Update fields
        if (checkIn) booking.checkIn = new Date(checkIn);
        if (checkOut) booking.checkOut = new Date(checkOut);
        if (guests) booking.guests = guests;
        if (specialRequests) booking.specialRequests = specialRequests;
        if (bookingSource) booking.bookingSource = bookingSource;
        if (corporateAccountId) booking.corporateAccount = corporateAccountId;
        if (status) booking.status = status;

        booking.updatedAt = new Date();
        booking.updatedBy = req.user._id;

        await booking.save();

        res.redirect(`/admin/bookings/${booking._id}`);
    } catch (error) {
        console.error('Error updating booking:', error);
        res.status(500).render('error', {
            message: 'Error updating booking'
        });
    }
};

// Delete booking
exports.deleteBooking = async (req, res) => {
    try {
        const booking = await Booking.findByIdAndDelete(req.params.id);
        if (!booking) {
            return res.status(404).json({
                message: 'Booking not found'
            });
        }

        res.json({
            message: 'Booking deleted successfully'
        });
    } catch (error) {
        console.error('Error deleting booking:', error);
        res.status(500).json({
            message: 'Error deleting booking'
        });
    }
};

================
File: src/controllers/admin/calendar.controller.js
================
const Room = require('../../models/Room');
const Booking = require('../../models/Booking');
const moment = require('moment');

// Get calendar view
exports.getCalendarView = async (req, res) => {
    try {
        // Get room types and floors for filters
        const rooms = await Room.find().select('type floor').lean();
        const roomTypes = [...new Set(rooms.map(room => room.type))].map(type => ({
            id: type.toLowerCase().replace(/\s+/g, '-'),
            name: type
        }));
        const floors = [...new Set(rooms.map(room => room.floor))].sort((a, b) => a - b);

        res.render('admin/bookings/calendar', {
            title: 'Booking Calendar',
            roomTypes,
            floors
        });
    } catch (error) {
        console.error('Error loading calendar view:', error);
        res.status(500).render('error', {
            message: 'Error loading calendar'
        });
    }
};

// Get rooms for calendar resources
exports.getRooms = async (req, res) => {
    try {
        const { roomType, floor, status } = req.query;
        let query = {};

        // Apply filters
        if (roomType) query.type = roomType;
        if (floor) query.floor = floor;
        if (status) query.status = status;

        const rooms = await Room.find(query)
            .select('number type floor status price')
            .lean();

        // Format rooms for FullCalendar
        const resources = rooms.map(room => ({
            id: room._id,
            title: `Room ${room.number}`,
            type: room.type,
            floor: `Floor ${room.floor}`,
            status: room.status,
            price: room.price,
            eventColor: getStatusColor(room.status)
        }));

        res.json(resources);
    } catch (error) {
        console.error('Error fetching rooms:', error);
        res.status(500).json({
            success: false,
            message: 'Error fetching rooms'
        });
    }
};

// Get bookings for calendar events
exports.getBookings = async (req, res) => {
    try {
        const { start, end } = req.query;
        
        const bookings = await Booking.find({
            $or: [
                { checkIn: { $gte: new Date(start), $lt: new Date(end) } },
                { checkOut: { $gt: new Date(start), $lte: new Date(end) } },
                {
                    checkIn: { $lt: new Date(start) },
                    checkOut: { $gt: new Date(end) }
                }
            ]
        })
        .populate('user', 'name')
        .populate('room', 'number')
        .lean();

        // Format bookings for FullCalendar
        const events = bookings.map(booking => ({
            id: booking._id,
            resourceId: booking.room._id,
            title: `${booking.user.name} - Room ${booking.room.number}`,
            start: booking.checkIn,
            end: booking.checkOut,
            extendedProps: {
                guestName: booking.user.name,
                adults: booking.adults,
                children: booking.children,
                specialRequests: booking.specialRequests,
                status: booking.status
            },
            backgroundColor: getBookingColor(booking.status),
            borderColor: getBookingColor(booking.status)
        }));

        res.json(events);
    } catch (error) {
        console.error('Error fetching bookings:', error);
        res.status(500).json({
            success: false,
            message: 'Error fetching bookings'
        });
    }
};

// Update booking (drag & drop or resize)
exports.updateBooking = async (req, res) => {
    try {
        const { id } = req.params;
        const { resourceId, start, end } = req.body;

        // Check for booking conflicts
        const conflictingBooking = await Booking.findOne({
            _id: { $ne: id },
            room: resourceId,
            $or: [
                { checkIn: { $lt: new Date(end), $gte: new Date(start) } },
                { checkOut: { $gt: new Date(start), $lte: new Date(end) } }
            ]
        });

        if (conflictingBooking) {
            return res.status(400).json({
                success: false,
                message: 'Room is not available for the selected dates'
            });
        }

        // Update booking
        const booking = await Booking.findByIdAndUpdate(
            id,
            {
                room: resourceId,
                checkIn: start,
                checkOut: end
            },
            { new: true }
        );

        if (!booking) {
            return res.status(404).json({
                success: false,
                message: 'Booking not found'
            });
        }

        res.json({
            success: true,
            data: booking
        });
    } catch (error) {
        console.error('Error updating booking:', error);
        res.status(500).json({
            success: false,
            message: 'Error updating booking'
        });
    }
};

// Helper functions
function getStatusColor(status) {
    switch (status) {
        case 'available':
            return '#28a745'; // green
        case 'occupied':
            return '#dc3545'; // red
        case 'maintenance':
            return '#ffc107'; // yellow
        case 'cleaning':
            return '#17a2b8'; // blue
        default:
            return '#6c757d'; // gray
    }
}

function getBookingColor(status) {
    switch (status) {
        case 'confirmed':
            return '#28a745'; // green
        case 'pending':
            return '#ffc107'; // yellow
        case 'cancelled':
            return '#dc3545'; // red
        case 'checked-in':
            return '#17a2b8'; // blue
        case 'checked-out':
            return '#6c757d'; // gray
        default:
            return '#6c757d'; // gray
    }
}

================
File: src/controllers/admin/channel-manager.controller.js
================
const Room = require('../../models/Room');
const Booking = require('../../models/Booking');
const OTAChannel = require('../../models/OTAChannel');
const RateManager = require('../../models/RateManager');
const { syncAvailability } = require('../../services/channel-manager.service');
const { updateOTAPricing } = require('../../services/rate-manager.service');

// Get channel manager dashboard
exports.getDashboard = async (req, res) => {
    try {
        const hotelId = req.query.hotelId;

        // Get connected channels
        const channels = await OTAChannel.find({ hotel: hotelId })
            .populate('lastSync')
            .populate('rateManager');

        // Get channel performance metrics
        const metrics = await calculateChannelMetrics(hotelId);

        // Get recent bookings from all channels
        const recentBookings = await Booking.find({
            hotel: hotelId,
            source: { $in: ['booking.com', 'expedia', 'airbnb'] },
            createdAt: { $gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) }
        })
        .populate('user')
        .populate('room')
        .sort('-createdAt');

        res.render('admin/channel-manager/dashboard', {
            title: 'Channel Manager',
            channels,
            metrics,
            recentBookings
        });
    } catch (error) {
        console.error('Error fetching channel manager dashboard:', error);
        res.status(500).render('error', {
            message: 'Error fetching channel manager dashboard'
        });
    }
};

// Sync availability across all channels
exports.syncAvailability = async (req, res) => {
    try {
        const hotelId = req.body.hotelId;
        const dateRange = {
            start: new Date(req.body.startDate),
            end: new Date(req.body.endDate)
        };

        // Get all active channels
        const channels = await OTAChannel.find({
            hotel: hotelId,
            status: 'active'
        });

        const results = [];
        for (const channel of channels) {
            try {
                // Sync availability for each channel
                const syncResult = await syncAvailability(channel, dateRange);
                results.push({
                    channel: channel.name,
                    success: true,
                    message: syncResult.message
                });
            } catch (error) {
                console.error(`Error syncing ${channel.name}:`, error);
                results.push({
                    channel: channel.name,
                    success: false,
                    message: error.message
                });
            }
        }

        res.json({
            success: true,
            data: results
        });
    } catch (error) {
        console.error('Error syncing availability:', error);
        res.status(500).json({
            success: false,
            message: 'Error syncing availability'
        });
    }
};

// Update pricing across channels
exports.updatePricing = async (req, res) => {
    try {
        const {
            hotelId,
            roomType,
            baseRate,
            adjustments,
            dateRange
        } = req.body;

        // Get rate manager for the hotel
        const rateManager = await RateManager.findOne({ hotel: hotelId });
        if (!rateManager) {
            return res.status(404).json({
                success: false,
                message: 'Rate manager not found'
            });
        }

        // Calculate rates for each channel based on adjustments
        const channelRates = calculateChannelRates(baseRate, adjustments);

        // Update rates in connected channels
        const channels = await OTAChannel.find({
            hotel: hotelId,
            status: 'active'
        });

        const updateResults = [];
        for (const channel of channels) {
            try {
                const rate = channelRates[channel.name.toLowerCase()];
                if (rate) {
                    const result = await updateOTAPricing(channel, {
                        roomType,
                        rate,
                        dateRange
                    });
                    updateResults.push({
                        channel: channel.name,
                        success: true,
                        message: result.message
                    });
                }
            } catch (error) {
                console.error(`Error updating pricing for ${channel.name}:`, error);
                updateResults.push({
                    channel: channel.name,
                    success: false,
                    message: error.message
                });
            }
        }

        res.json({
            success: true,
            data: updateResults
        });
    } catch (error) {
        console.error('Error updating pricing:', error);
        res.status(500).json({
            success: false,
            message: 'Error updating pricing'
        });
    }
};

// Get channel performance analytics
exports.getAnalytics = async (req, res) => {
    try {
        const hotelId = req.query.hotelId;
        const startDate = new Date(req.query.startDate);
        const endDate = new Date(req.query.endDate);

        const metrics = await calculateChannelMetrics(hotelId, startDate, endDate);

        res.json({
            success: true,
            data: metrics
        });
    } catch (error) {
        console.error('Error getting channel analytics:', error);
        res.status(500).json({
            success: false,
            message: 'Error getting channel analytics'
        });
    }
};

// Get all bookings from channels
exports.getBookings = async (req, res) => {
    try {
        const hotelId = req.query.hotelId;
        const page = parseInt(req.query.page) || 1;
        const limit = parseInt(req.query.limit) || 10;
        const skip = (page - 1) * limit;

        // Build query
        const query = {
            hotel: hotelId,
            source: { $in: ['booking.com', 'expedia', 'airbnb'] }
        };

        // Apply filters
        if (req.query.channel) {
            query.source = req.query.channel;
        }
        if (req.query.status) {
            query.status = req.query.status;
        }
        if (req.query.startDate && req.query.endDate) {
            query.checkIn = {
                $gte: new Date(req.query.startDate),
                $lte: new Date(req.query.endDate)
            };
        }

        const [bookings, total] = await Promise.all([
            Booking.find(query)
                .populate('user', 'name email phone')
                .populate('room', 'type number')
                .sort('-createdAt')
                .skip(skip)
                .limit(limit),
            Booking.countDocuments(query)
        ]);

        res.render('admin/channel-manager/bookings', {
            title: 'Channel Bookings',
            bookings,
            pagination: {
                page,
                pageCount: Math.ceil(total / limit),
                limit
            },
            filters: {
                channel: req.query.channel,
                status: req.query.status,
                startDate: req.query.startDate,
                endDate: req.query.endDate
            }
        });
    } catch (error) {
        console.error('Error fetching channel bookings:', error);
        res.status(500).render('error', {
            message: 'Error fetching channel bookings'
        });
    }
};

// Get rates for all channels
exports.getRates = async (req, res) => {
    try {
        const hotelId = req.query.hotelId;
        const roomType = req.query.roomType;
        const startDate = new Date(req.query.startDate || Date.now());
        const endDate = new Date(req.query.endDate || Date.now() + 30 * 24 * 60 * 60 * 1000);

        // Get rate manager for the hotel
        const rateManager = await RateManager.findOne({ hotel: hotelId });
        if (!rateManager) {
            return res.status(404).json({
                success: false,
                message: 'Rate manager not found'
            });
        }

        // Get rates from connected channels
        const channels = await OTAChannel.find({
            hotel: hotelId,
            status: 'active'
        });

        const rates = [];
        for (const channel of channels) {
            try {
                const channelRates = await channel.getRates({
                    roomType,
                    startDate,
                    endDate
                });
                rates.push({
                    channel: channel.name,
                    rates: channelRates
                });
            } catch (error) {
                console.error(`Error getting rates from ${channel.name}:`, error);
                rates.push({
                    channel: channel.name,
                    error: error.message
                });
            }
        }

        res.render('admin/channel-manager/rates', {
            title: 'Channel Rates',
            rates,
            filters: {
                roomType,
                startDate: startDate.toISOString().split('T')[0],
                endDate: endDate.toISOString().split('T')[0]
            }
        });
    } catch (error) {
        console.error('Error getting channel rates:', error);
        res.status(500).render('error', {
            message: 'Error getting channel rates'
        });
    }
};

// Update rates for channels
exports.updateRates = async (req, res) => {
    try {
        const {
            hotelId,
            roomType,
            baseRate,
            adjustments,
            dateRange
        } = req.body;

        // Get rate manager for the hotel
        const rateManager = await RateManager.findOne({ hotel: hotelId });
        if (!rateManager) {
            return res.status(404).json({
                success: false,
                message: 'Rate manager not found'
            });
        }

        // Calculate rates for each channel based on adjustments
        const channelRates = calculateChannelRates(baseRate, adjustments);

        // Update rates in connected channels
        const channels = await OTAChannel.find({
            hotel: hotelId,
            status: 'active'
        });

        const updateResults = [];
        for (const channel of channels) {
            try {
                const rate = channelRates[channel.name.toLowerCase()];
                if (rate) {
                    const result = await updateOTAPricing(channel, {
                        roomType,
                        rate,
                        dateRange
                    });
                    updateResults.push({
                        channel: channel.name,
                        success: true,
                        message: result.message
                    });
                }
            } catch (error) {
                console.error(`Error updating rates for ${channel.name}:`, error);
                updateResults.push({
                    channel: channel.name,
                    success: false,
                    message: error.message
                });
            }
        }

        res.json({
            success: true,
            data: updateResults
        });
    } catch (error) {
        console.error('Error updating channel rates:', error);
        res.status(500).json({
            success: false,
            message: 'Error updating channel rates'
        });
    }
};

// Get inventory status across channels
exports.getInventory = async (req, res) => {
    try {
        const hotelId = req.query.hotelId;
        const startDate = new Date(req.query.startDate || Date.now());
        const endDate = new Date(req.query.endDate || Date.now() + 30 * 24 * 60 * 60 * 1000);

        // Get inventory from all channels
        const channels = await OTAChannel.find({
            hotel: hotelId,
            status: 'active'
        });

        const inventory = [];
        for (const channel of channels) {
            try {
                const channelInventory = await channel.getInventory({
                    startDate,
                    endDate
                });
                inventory.push({
                    channel: channel.name,
                    inventory: channelInventory
                });
            } catch (error) {
                console.error(`Error getting inventory from ${channel.name}:`, error);
                inventory.push({
                    channel: channel.name,
                    error: error.message
                });
            }
        }

        res.render('admin/channel-manager/inventory', {
            title: 'Channel Inventory',
            inventory,
            filters: {
                startDate: startDate.toISOString().split('T')[0],
                endDate: endDate.toISOString().split('T')[0]
            }
        });
    } catch (error) {
        console.error('Error getting channel inventory:', error);
        res.status(500).render('error', {
            message: 'Error getting channel inventory'
        });
    }
};

// Update inventory across channels
exports.updateInventory = async (req, res) => {
    try {
        const {
            hotelId,
            roomType,
            inventory,
            dateRange
        } = req.body;

        // Get channels to update
        const channels = await OTAChannel.find({
            hotel: hotelId,
            status: 'active'
        });

        const updateResults = [];
        for (const channel of channels) {
            try {
                const result = await channel.updateInventory({
                    roomType,
                    inventory,
                    dateRange
                });
                updateResults.push({
                    channel: channel.name,
                    success: true,
                    message: result.message
                });
            } catch (error) {
                console.error(`Error updating inventory for ${channel.name}:`, error);
                updateResults.push({
                    channel: channel.name,
                    success: false,
                    message: error.message
                });
            }
        }

        res.json({
            success: true,
            data: updateResults
        });
    } catch (error) {
        console.error('Error updating channel inventory:', error);
        res.status(500).json({
            success: false,
            message: 'Error updating channel inventory'
        });
    }
};

// Helper function to calculate channel metrics
const calculateChannelMetrics = async (hotelId, startDate = new Date(0), endDate = new Date()) => {
    const bookings = await Booking.find({
        hotel: hotelId,
        source: { $in: ['booking.com', 'expedia', 'airbnb'] },
        createdAt: { $gte: startDate, $lte: endDate }
    });

    const metrics = {
        totalBookings: bookings.length,
        revenue: bookings.reduce((sum, booking) => sum + booking.totalAmount, 0),
        byChannel: {}
    };

    bookings.forEach(booking => {
        if (!metrics.byChannel[booking.source]) {
            metrics.byChannel[booking.source] = {
                bookings: 0,
                revenue: 0
            };
        }
        metrics.byChannel[booking.source].bookings++;
        metrics.byChannel[booking.source].revenue += booking.totalAmount;
    });

    return metrics;
};

// Helper function to calculate channel-specific rates
const calculateChannelRates = (baseRate, adjustments) => {
    const rates = {};
    
    for (const [channel, adjustment] of Object.entries(adjustments)) {
        rates[channel] = baseRate * (1 + adjustment);
    }

    return rates;
};

================
File: src/controllers/admin/check-in-out.controller.js
================
const Booking = require('../../models/Booking');
const Room = require('../../models/Room');
const Guest = require('../../models/Guest');
const LoyaltyProgram = require('../../models/LoyaltyProgram');
const { calculateLoyaltyPoints } = require('../../utils/loyalty.utils');

// Get check-in/out dashboard data
exports.getDashboard = async (req, res) => {
    try {
        const { range = 'today' } = req.query;
        const today = new Date();
        let startDate = new Date(today.setHours(0, 0, 0, 0));
        let endDate = new Date(today.setHours(23, 59, 59, 999));

        // Adjust date range based on filter
        if (range === 'tomorrow') {
            startDate.setDate(startDate.getDate() + 1);
            endDate.setDate(endDate.getDate() + 1);
        } else if (range === 'week') {
            endDate.setDate(endDate.getDate() + 7);
        }

        // Get expected check-ins
        const checkins = await Booking.find({
            checkIn: { $gte: startDate, $lte: endDate },
            status: 'confirmed'
        }).populate('user room');

        // Get expected check-outs
        const checkouts = await Booking.find({
            checkOut: { $gte: startDate, $lte: endDate },
            status: 'checked_in'
        }).populate('user room');

        // Get current stays
        const currentStays = await Booking.find({
            status: 'checked_in'
        }).populate('user room');

        // Get available rooms
        const availableRooms = await Room.countDocuments({
            status: 'available'
        });

        // Get statistics
        const stats = {
            expectedCheckins: checkins.length,
            expectedCheckouts: checkouts.length,
            currentStays: currentStays.length,
            availableRooms
        };

        res.render('admin/check-in-out/dashboard', {
            checkins,
            checkouts,
            currentStays,
            stats
        });
    } catch (error) {
        console.error('Error in getDashboard:', error);
        res.status(500).json({ message: 'Internal server error' });
    }
};

// Process check-in
exports.processCheckIn = async (req, res) => {
    try {
        const { bookingId } = req.params;
        const { idType, idNumber, roomStatus, services, specialRequests } = req.body;

        // Get booking details
        const booking = await Booking.findById(bookingId)
            .populate('user room');

        if (!booking) {
            return res.status(404).json({ message: 'Booking not found' });
        }

        if (booking.status !== 'confirmed') {
            return res.status(400).json({ message: 'Invalid booking status for check-in' });
        }

        // Update room status
        await Room.findByIdAndUpdate(booking.room._id, {
            status: 'occupied',
            currentBooking: booking._id,
            needsCleaning: roomStatus === 'needs_cleaning',
            needsMaintenance: roomStatus === 'maintenance'
        });

        // Update booking status and details
        booking.status = 'checked_in';
        booking.checkInTime = new Date();
        booking.idType = idType;
        booking.idNumber = idNumber;
        booking.services = services;
        booking.specialRequests = specialRequests;
        await booking.save();

        // Update guest's loyalty points if applicable
        const guest = await Guest.findById(booking.user);
        if (guest && guest.loyaltyProgram) {
            const loyaltyProgram = await LoyaltyProgram.findById(guest.loyaltyProgram);
            if (loyaltyProgram) {
                const points = calculateLoyaltyPoints(booking.totalAmount);
                loyaltyProgram.points += points;
                loyaltyProgram.history.push({
                    type: 'earn',
                    points,
                    description: `Check-in points for booking #${booking._id}`,
                    date: new Date()
                });
                await loyaltyProgram.save();
            }
        }

        res.json({ success: true, message: 'Check-in processed successfully' });
    } catch (error) {
        console.error('Error in processCheckIn:', error);
        res.status(500).json({ message: 'Internal server error' });
    }
};

// Process check-out
exports.processCheckOut = async (req, res) => {
    try {
        const { bookingId } = req.params;
        const { roomCondition, roomNotes, additionalCharges } = req.body;

        // Get booking details
        const booking = await Booking.findById(bookingId)
            .populate('user room');

        if (!booking) {
            return res.status(404).json({ message: 'Booking not found' });
        }

        if (booking.status !== 'checked_in') {
            return res.status(400).json({ message: 'Invalid booking status for check-out' });
        }

        // Calculate additional charges
        let totalAdditionalCharges = 0;
        if (additionalCharges && additionalCharges.length > 0) {
            totalAdditionalCharges = additionalCharges.reduce((total, charge) => {
                return total + parseFloat(charge.amount);
            }, 0);

            // Add additional charges to booking
            booking.additionalCharges = additionalCharges;
            booking.totalAmount += totalAdditionalCharges;
        }

        // Update room status
        await Room.findByIdAndUpdate(booking.room._id, {
            status: 'needs_cleaning',
            currentBooking: null,
            needsCleaning: roomCondition === 'needs_cleaning',
            needsMaintenance: roomCondition === 'damaged',
            maintenanceNotes: roomNotes
        });

        // Update booking status and details
        booking.status = 'checked_out';
        booking.checkOutTime = new Date();
        booking.roomCondition = roomCondition;
        booking.roomNotes = roomNotes;
        await booking.save();

        // Update guest's stay history
        const guest = await Guest.findById(booking.user);
        if (guest) {
            guest.totalStays += 1;
            guest.totalSpent += booking.totalAmount;
            guest.lastVisit = new Date();
            
            // Update loyalty points if applicable
            if (guest.loyaltyProgram) {
                const loyaltyProgram = await LoyaltyProgram.findById(guest.loyaltyProgram);
                if (loyaltyProgram) {
                    const points = calculateLoyaltyPoints(totalAdditionalCharges);
                    if (points > 0) {
                        loyaltyProgram.points += points;
                        loyaltyProgram.history.push({
                            type: 'earn',
                            points,
                            description: `Additional charges points for booking #${booking._id}`,
                            date: new Date()
                        });
                        await loyaltyProgram.save();
                    }
                }
            }
            
            await guest.save();
        }

        res.json({ success: true, message: 'Check-out processed successfully' });
    } catch (error) {
        console.error('Error in processCheckOut:', error);
        res.status(500).json({ message: 'Internal server error' });
    }
};

// Get check-in details
exports.getCheckInDetails = async (req, res) => {
    try {
        const { bookingId } = req.params;
        const booking = await Booking.findById(bookingId)
            .populate('user room');

        if (!booking) {
            return res.status(404).json({ message: 'Booking not found' });
        }

        const guest = await Guest.findById(booking.user);
        const room = await Room.findById(booking.room);

        res.json({
            guest: {
                name: guest.name,
                email: guest.email,
                phone: guest.phone
            },
            room: {
                number: room.number,
                type: room.type,
                floor: room.floor
            }
        });
    } catch (error) {
        console.error('Error in getCheckInDetails:', error);
        res.status(500).json({ message: 'Internal server error' });
    }
};

// Get check-out details
exports.getCheckOutDetails = async (req, res) => {
    try {
        const { bookingId } = req.params;
        const booking = await Booking.findById(bookingId)
            .populate('user room');

        if (!booking) {
            return res.status(404).json({ message: 'Booking not found' });
        }

        // Calculate stay duration
        const checkIn = new Date(booking.checkIn);
        const checkOut = new Date(booking.checkOut);
        const nights = Math.ceil((checkOut - checkIn) / (1000 * 60 * 60 * 24));

        res.json({
            checkIn: booking.checkIn,
            checkOut: booking.checkOut,
            nights,
            roomRate: booking.room.rate,
            totalRoomCharges: booking.room.rate * nights,
            amountPaid: booking.amountPaid
        });
    } catch (error) {
        console.error('Error in getCheckOutDetails:', error);
        res.status(500).json({ message: 'Internal server error' });
    }
};

// Get pending check-ins
exports.getPendingCheckIns = async (req, res) => {
    try {
        const today = new Date();
        const startDate = new Date(today.setHours(0, 0, 0, 0));
        const endDate = new Date(today.setHours(23, 59, 59, 999));

        const pendingCheckIns = await Booking.find({
            checkIn: { $gte: startDate, $lte: endDate },
            status: 'confirmed'
        })
        .populate('user room')
        .sort('checkIn');

        res.json({
            success: true,
            data: pendingCheckIns
        });
    } catch (error) {
        console.error('Error getting pending check-ins:', error);
        res.status(500).json({ message: 'Error getting pending check-ins' });
    }
};

// Check-in guest
exports.checkIn = async (req, res) => {
    try {
        const { bookingId } = req.params;
        const { idType, idNumber, roomStatus, specialRequests } = req.body;

        const booking = await Booking.findById(bookingId)
            .populate('user room');

        if (!booking) {
            return res.status(404).json({ message: 'Booking not found' });
        }

        if (booking.status !== 'confirmed') {
            return res.status(400).json({ message: 'Invalid booking status for check-in' });
        }

        // Update room status
        await Room.findByIdAndUpdate(booking.room._id, {
            status: 'occupied',
            currentBooking: booking._id,
            needsCleaning: roomStatus === 'needs_cleaning'
        });

        // Update booking status
        booking.status = 'checked_in';
        booking.checkInTime = new Date();
        booking.idType = idType;
        booking.idNumber = idNumber;
        booking.specialRequests = specialRequests;
        await booking.save();

        // Update guest's loyalty points if applicable
        if (booking.user.loyaltyProgram) {
            const points = calculateLoyaltyPoints(booking.totalAmount);
            await LoyaltyProgram.findByIdAndUpdate(booking.user.loyaltyProgram, {
                $inc: { points },
                $push: {
                    history: {
                        type: 'earn',
                        points,
                        description: `Check-in points for booking #${booking._id}`,
                        date: new Date()
                    }
                }
            });
        }

        res.json({
            success: true,
            message: 'Check-in successful',
            data: booking
        });
    } catch (error) {
        console.error('Error during check-in:', error);
        res.status(500).json({ message: 'Error during check-in' });
    }
};

// Check-out guest
exports.checkOut = async (req, res) => {
    try {
        const { bookingId } = req.params;
        const { roomCondition, additionalCharges, notes } = req.body;

        const booking = await Booking.findById(bookingId)
            .populate('user room');

        if (!booking) {
            return res.status(404).json({ message: 'Booking not found' });
        }

        if (booking.status !== 'checked_in') {
            return res.status(400).json({ message: 'Invalid booking status for check-out' });
        }

        // Calculate additional charges
        let totalAdditionalCharges = 0;
        if (additionalCharges && additionalCharges.length > 0) {
            totalAdditionalCharges = additionalCharges.reduce((total, charge) => {
                return total + parseFloat(charge.amount);
            }, 0);
            booking.additionalCharges = additionalCharges;
            booking.totalAmount += totalAdditionalCharges;
        }

        // Update room status
        await Room.findByIdAndUpdate(booking.room._id, {
            status: 'needs_cleaning',
            currentBooking: null,
            needsCleaning: true,
            lastCheckOut: new Date(),
            notes: notes || ''
        });

        // Update booking status
        booking.status = 'checked_out';
        booking.checkOutTime = new Date();
        booking.roomCondition = roomCondition;
        booking.notes = notes;
        await booking.save();

        // Update guest's loyalty points for additional charges if applicable
        if (booking.user.loyaltyProgram && totalAdditionalCharges > 0) {
            const points = calculateLoyaltyPoints(totalAdditionalCharges);
            await LoyaltyProgram.findByIdAndUpdate(booking.user.loyaltyProgram, {
                $inc: { points },
                $push: {
                    history: {
                        type: 'earn',
                        points,
                        description: `Additional charges points for booking #${booking._id}`,
                        date: new Date()
                    }
                }
            });
        }

        res.json({
            success: true,
            message: 'Check-out successful',
            data: booking
        });
    } catch (error) {
        console.error('Error during check-out:', error);
        res.status(500).json({ message: 'Error during check-out' });
    }
};

================
File: src/controllers/admin/digital-checkin.controller.js
================
const qr = require('qrcode');
const crypto = require('crypto');
const Booking = require('../../models/Booking');
const Room = require('../../models/Room');
const DigitalKey = require('../../models/DigitalKey');
const { sendEmail } = require('../../services/email.service');
const { sendSMS } = require('../../services/sms.service');
const { verifyDocument } = require('../../services/document-verification.service');
const { generateMobileKey } = require('../../services/mobile-key.service');

// Generate digital check-in token
exports.generateCheckInToken = async (req, res) => {
    try {
        const { bookingId } = req.params;
        
        const booking = await Booking.findById(bookingId)
            .populate('user')
            .populate('room');

        if (!booking) {
            return res.status(404).json({
                success: false,
                message: 'Booking not found'
            });
        }

        // Generate unique token
        const token = crypto.randomBytes(32).toString('hex');
        
        // Create QR code
        const checkInUrl = `${process.env.FRONTEND_URL}/digital-checkin/${token}`;
        const qrCode = await qr.toDataURL(checkInUrl);

        // Save token to booking
        booking.digitalCheckIn = {
            token,
            generatedAt: new Date(),
            status: 'pending'
        };
        await booking.save();

        // Send email to guest
        await sendEmail({
            to: booking.user.email,
            subject: 'Your Digital Check-in Information',
            template: 'digital-checkin',
            data: {
                guestName: booking.user.name,
                hotelName: booking.room.hotel.name,
                checkInDate: booking.checkIn,
                roomNumber: booking.room.number,
                checkInUrl,
                qrCode
            }
        });

        // Send SMS if phone number available
        if (booking.user.phone) {
            await sendSMS({
                to: booking.user.phone,
                message: `Your digital check-in link for ${booking.room.hotel.name}: ${checkInUrl}`
            });
        }

        res.json({
            success: true,
            message: 'Digital check-in token generated and sent to guest',
            data: {
                token,
                qrCode
            }
        });
    } catch (error) {
        console.error('Error generating check-in token:', error);
        res.status(500).json({
            success: false,
            message: 'Error generating check-in token'
        });
    }
};

// Process digital check-in
exports.processDigitalCheckIn = async (req, res) => {
    try {
        const { token } = req.params;
        const { documents, selfie } = req.body;

        const booking = await Booking.findOne({
            'digitalCheckIn.token': token,
            'digitalCheckIn.status': 'pending'
        }).populate('user').populate('room');

        if (!booking) {
            return res.status(404).json({
                success: false,
                message: 'Invalid or expired check-in token'
            });
        }

        // Verify ID documents
        const documentVerification = await verifyDocument({
            documents,
            selfie,
            userData: {
                name: booking.user.name,
                email: booking.user.email
            }
        });

        if (!documentVerification.verified) {
            return res.status(400).json({
                success: false,
                message: 'Document verification failed',
                errors: documentVerification.errors
            });
        }

        // Generate mobile key
        const mobileKey = await generateMobileKey({
            roomId: booking.room._id,
            userId: booking.user._id,
            validFrom: booking.checkIn,
            validTo: booking.checkOut
        });

        // Create digital key record
        const digitalKey = await DigitalKey.create({
            booking: booking._id,
            user: booking.user._id,
            room: booking.room._id,
            key: mobileKey,
            validFrom: booking.checkIn,
            validTo: booking.checkOut,
            status: 'active'
        });

        // Update booking status
        booking.status = 'checked_in';
        booking.digitalCheckIn.status = 'completed';
        booking.digitalCheckIn.completedAt = new Date();
        booking.digitalKey = digitalKey._id;
        await booking.save();

        // Update room status
        await Room.findByIdAndUpdate(booking.room._id, {
            status: 'occupied',
            currentGuest: booking.user._id,
            currentBooking: booking._id
        });

        // Send welcome email with mobile key
        await sendEmail({
            to: booking.user.email,
            subject: 'Welcome to Your Room',
            template: 'digital-key',
            data: {
                guestName: booking.user.name,
                hotelName: booking.room.hotel.name,
                roomNumber: booking.room.number,
                checkOutDate: booking.checkOut,
                mobileKeyInstructions: 'Use our mobile app to access your room'
            }
        });

        res.json({
            success: true,
            message: 'Digital check-in completed successfully',
            data: {
                bookingId: booking._id,
                roomNumber: booking.room.number,
                mobileKey: mobileKey
            }
        });
    } catch (error) {
        console.error('Error processing digital check-in:', error);
        res.status(500).json({
            success: false,
            message: 'Error processing digital check-in'
        });
    }
};

// Process digital check-out
exports.processDigitalCheckOut = async (req, res) => {
    try {
        const { bookingId } = req.params;

        const booking = await Booking.findById(bookingId)
            .populate('user')
            .populate('room')
            .populate('digitalKey');

        if (!booking) {
            return res.status(404).json({
                success: false,
                message: 'Booking not found'
            });
        }

        // Verify payment status
        if (booking.payment.status !== 'paid') {
            return res.status(400).json({
                success: false,
                message: 'Please settle all payments before check-out'
            });
        }

        // Deactivate digital key
        if (booking.digitalKey) {
            booking.digitalKey.status = 'inactive';
            await booking.digitalKey.save();
        }

        // Update booking status
        booking.status = 'checked_out';
        booking.checkOutTime = new Date();
        await booking.save();

        // Update room status
        await Room.findByIdAndUpdate(booking.room._id, {
            status: 'dirty',
            currentGuest: null,
            currentBooking: null
        });

        // Send thank you email
        await sendEmail({
            to: booking.user.email,
            subject: 'Thank You for Your Stay',
            template: 'checkout-thanks',
            data: {
                guestName: booking.user.name,
                hotelName: booking.room.hotel.name,
                checkOutDate: new Date(),
                feedbackUrl: `${process.env.FRONTEND_URL}/feedback/${booking._id}`
            }
        });

        res.json({
            success: true,
            message: 'Digital check-out completed successfully',
            data: {
                bookingId: booking._id,
                checkOutTime: booking.checkOutTime
            }
        });
    } catch (error) {
        console.error('Error processing digital check-out:', error);
        res.status(500).json({
            success: false,
            message: 'Error processing digital check-out'
        });
    }
};

// Get digital key status
exports.getDigitalKeyStatus = async (req, res) => {
    try {
        const { keyId } = req.params;

        const digitalKey = await DigitalKey.findById(keyId)
            .populate('booking')
            .populate('room');

        if (!digitalKey) {
            return res.status(404).json({
                success: false,
                message: 'Digital key not found'
            });
        }

        res.json({
            success: true,
            data: {
                status: digitalKey.status,
                validFrom: digitalKey.validFrom,
                validTo: digitalKey.validTo,
                roomNumber: digitalKey.room.number,
                lastUsed: digitalKey.lastUsed
            }
        });
    } catch (error) {
        console.error('Error getting digital key status:', error);
        res.status(500).json({
            success: false,
            message: 'Error getting digital key status'
        });
    }
};

================
File: src/controllers/admin/guest-analytics.controller.js
================
const User = require('../../models/User');
const Booking = require('../../models/Booking');
const LoyaltyProgram = require('../../models/LoyaltyProgram');
const { calculateLoyaltyTier } = require('../../utils/loyalty.utils');
const { formatCurrency, calculateDateRange } = require('../../utils/format.utils');

// Get guest analytics dashboard
exports.getAnalytics = async (req, res) => {
    try {
        const { range = 'month' } = req.query;
        const { startDate, endDate } = calculateDateRange(range);

        // Get basic statistics
        const stats = await calculateStats(startDate, endDate);
        
        // Get demographic data
        const demographics = await calculateDemographics(startDate, endDate);
        
        // Get booking trends
        const bookingTrends = await calculateBookingTrends(startDate, endDate);
        
        // Get guest preferences
        const preferences = await calculatePreferences(startDate, endDate);
        
        // Get guest segments
        const segments = await calculateGuestSegments(startDate, endDate);

        res.render('admin/guests/analytics', {
            stats,
            ageData: demographics.age,
            nationalityData: demographics.nationality,
            purposeData: demographics.purpose,
            loyaltyData: demographics.loyalty,
            bookingTrends,
            preferences,
            segments
        });
    } catch (error) {
        console.error('Error in getAnalytics:', error);
        res.status(500).json({ message: 'Internal server error' });
    }
};

// Export analytics report
exports.exportAnalytics = async (req, res) => {
    try {
        const { range = 'month' } = req.query;
        const { startDate, endDate } = calculateDateRange(range);

        // Gather all analytics data
        const stats = await calculateStats(startDate, endDate);
        const demographics = await calculateDemographics(startDate, endDate);
        const bookingTrends = await calculateBookingTrends(startDate, endDate);
        const preferences = await calculatePreferences(startDate, endDate);
        const segments = await calculateGuestSegments(startDate, endDate);

        // Generate PDF report
        // Removed PDF util

        // Send PDF
        // Removed PDF util
    } catch (error) {
        console.error('Error in exportAnalytics:', error);
        res.status(500).json({ message: 'Internal server error' });
    }
};

// Get segment details
exports.getSegmentDetails = async (req, res) => {
    try {
        const { segmentId } = req.params;
        const { range = 'month' } = req.query;
        const { startDate, endDate } = calculateDateRange(range);

        // Get segment details and guests
        const segmentDetails = await getSegmentDetails(segmentId, startDate, endDate);

        res.render('admin/guests/segment-details', {
            segment: segmentDetails
        });
    } catch (error) {
        console.error('Error in getSegmentDetails:', error);
        res.status(500).json({ message: 'Internal server error' });
    }
};

// Helper Functions

// Calculate basic statistics
async function calculateStats(startDate, endDate) {
    // Calculate guest satisfaction
    const bookings = await Booking.find({
        checkOut: { $gte: startDate, $lte: endDate }
    });
    
    const satisfaction = bookings.reduce((acc, booking) => {
        return acc + (booking.rating || 0);
    }, 0) / (bookings.length || 1);

    // Calculate repeat rate
    const totalGuests = await User.countDocuments({
        createdAt: { $lte: endDate }
    });
    
    const repeatGuests = await User.countDocuments({
        totalStays: { $gt: 1 },
        createdAt: { $lte: endDate }
    });

    const repeatRate = (repeatGuests / totalGuests) * 100;

    // Calculate average guest value
    const totalRevenue = bookings.reduce((acc, booking) => {
        return acc + booking.totalAmount;
    }, 0);

    const avgGuestValue = totalRevenue / (totalGuests || 1);

    // Calculate loyalty conversion
    const loyaltyMembers = await User.countDocuments({
        loyaltyProgram: { $exists: true },
        createdAt: { $lte: endDate }
    });

    const loyaltyConversion = (loyaltyMembers / totalGuests) * 100;

    // Calculate trends
    const previousStartDate = new Date(startDate);
    previousStartDate.setMonth(previousStartDate.getMonth() - 1);
    
    const previousStats = await getPreviousPeriodStats(previousStartDate, startDate);

    return {
        satisfaction: satisfaction.toFixed(1),
        satisfactionTrend: calculateTrend(satisfaction, previousStats.satisfaction),
        repeatRate: repeatRate.toFixed(1),
        repeatRateTrend: calculateTrend(repeatRate, previousStats.repeatRate),
        avgGuestValue: avgGuestValue.toFixed(2),
        avgValueTrend: calculateTrend(avgGuestValue, previousStats.avgGuestValue),
        loyaltyConversion: loyaltyConversion.toFixed(1),
        loyaltyTrend: calculateTrend(loyaltyConversion, previousStats.loyaltyConversion)
    };
}

// Calculate demographics
async function calculateDemographics(startDate, endDate) {
    const guests = await User.find({
        createdAt: { $lte: endDate }
    });

    // Age distribution
    const ageGroups = {
        '18-24': 0,
        '25-34': 0,
        '35-44': 0,
        '45-54': 0,
        '55+': 0
    };

    // Nationality distribution
    const nationalities = {};

    // Purpose of stay distribution
    const purposes = {
        'Business': 0,
        'Leisure': 0,
        'Family': 0,
        'Other': 0
    };

    // Loyalty distribution
    const loyaltyTiers = {
        'Bronze': 0,
        'Silver': 0,
        'Gold': 0,
        'Platinum': 0
    };

    for (const guest of guests) {
        // Calculate age group
        const age = calculateAge(guest.dateOfBirth);
        if (age < 25) ageGroups['18-24']++;
        else if (age < 35) ageGroups['25-34']++;
        else if (age < 45) ageGroups['35-44']++;
        else if (age < 55) ageGroups['45-54']++;
        else ageGroups['55+']++;

        // Count nationality
        nationalities[guest.nationality] = (nationalities[guest.nationality] || 0) + 1;

        // Count purpose of stay
        const recentBookings = await Booking.find({
            user: guest._id,
            checkIn: { $gte: startDate, $lte: endDate }
        });
        
        recentBookings.forEach(booking => {
            purposes[booking.purpose || 'Other']++;
        });

        // Count loyalty tiers
        if (guest.loyaltyProgram) {
            const loyalty = await LoyaltyProgram.findById(guest.loyaltyProgram);
            if (loyalty) {
                loyaltyTiers[loyalty.tier]++;
            }
        }
    }

    return {
        age: {
            labels: Object.keys(ageGroups),
            values: Object.values(ageGroups)
        },
        nationality: {
            labels: Object.keys(nationalities).slice(0, 5), // Top 5 nationalities
            values: Object.values(nationalities).slice(0, 5)
        },
        purpose: {
            labels: Object.keys(purposes),
            values: Object.values(purposes)
        },
        loyalty: {
            labels: Object.keys(loyaltyTiers),
            values: Object.values(loyaltyTiers)
        }
    };
}

// Calculate booking trends
async function calculateBookingTrends(startDate, endDate) {
    const months = [];
    const newGuests = [];
    const returningGuests = [];

    let currentDate = new Date(startDate);
    while (currentDate <= endDate) {
        const monthEnd = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
        
        // Get bookings for the month
        const monthBookings = await Booking.find({
            checkIn: { $gte: currentDate, $lte: monthEnd }
        }).populate('user');

        // Count new vs returning guests
        const guestCounts = monthBookings.reduce((acc, booking) => {
            const isNewGuest = booking.user.totalStays === 1;
            if (isNewGuest) acc.new++;
            else acc.returning++;
            return acc;
        }, { new: 0, returning: 0 });

        months.push(currentDate.toLocaleString('default', { month: 'short' }));
        newGuests.push(guestCounts.new);
        returningGuests.push(guestCounts.returning);

        currentDate.setMonth(currentDate.getMonth() + 1);
    }

    return {
        labels: months,
        newGuests,
        returningGuests
    };
}

// Calculate guest preferences
async function calculatePreferences(startDate, endDate) {
    const bookings = await Booking.find({
        checkIn: { $gte: startDate, $lte: endDate }
    }).populate('room');

    // Room type preferences
    const roomTypes = {};
    const services = {};

    bookings.forEach(booking => {
        // Count room types
        roomTypes[booking.room.type] = (roomTypes[booking.room.type] || 0) + 1;

        // Count services
        booking.services?.forEach(service => {
            services[service] = (services[service] || 0) + 1;
        });
    });

    // Convert to percentages
    const totalBookings = bookings.length;
    return {
        roomTypes: Object.entries(roomTypes).map(([name, count]) => ({
            name,
            percentage: ((count / totalBookings) * 100).toFixed(1)
        })),
        services: Object.entries(services).map(([name, count]) => ({
            name,
            percentage: ((count / totalBookings) * 100).toFixed(1)
        }))
    };
}

// Calculate guest segments
async function calculateGuestSegments(startDate, endDate) {
    const guests = await User.find({
        createdAt: { $lte: endDate }
    }).populate('loyaltyProgram');

    const segments = [
        {
            id: 'luxury',
            name: 'Luxury Travelers',
            icon: 'crown',
            color: 'primary',
            filter: guest => guest.avgSpendPerStay > 500
        },
        {
            id: 'business',
            name: 'Business Travelers',
            icon: 'briefcase',
            color: 'info',
            filter: guest => guest.mostCommonPurpose === 'Business'
        },
        {
            id: 'family',
            name: 'Family Travelers',
            icon: 'users',
            color: 'success',
            filter: guest => guest.mostCommonPurpose === 'Family'
        },
        {
            id: 'loyal',
            name: 'Loyal Customers',
            icon: 'star',
            color: 'warning',
            filter: guest => guest.totalStays > 5
        }
    ];

    // Calculate segment metrics
    const totalGuests = guests.length;
    return Promise.all(segments.map(async segment => {
        const segmentGuests = guests.filter(segment.filter);
        const segmentCount = segmentGuests.length;

        return {
            ...segment,
            percentage: ((segmentCount / totalGuests) * 100).toFixed(1),
            avgStay: calculateAverageStay(segmentGuests),
            avgSpend: calculateAverageSpend(segmentGuests),
            loyaltyRate: calculateLoyaltyRate(segmentGuests)
        };
    }));
}

// Helper function to calculate trend
function calculateTrend(current, previous) {
    const change = ((current - previous) / previous) * 100;
    return {
        value: Math.abs(change).toFixed(1),
        color: change >= 0 ? 'text-success' : 'text-danger',
        icon: change >= 0 ? 'arrow-up' : 'arrow-down'
    };
}

// Helper function to calculate age
function calculateAge(dateOfBirth) {
    const today = new Date();
    const birthDate = new Date(dateOfBirth);
    let age = today.getFullYear() - birthDate.getFullYear();
    const monthDiff = today.getMonth() - birthDate.getMonth();
    
    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
        age--;
    }
    
    return age;
}

// Get previous period statistics
async function getPreviousPeriodStats(startDate, endDate) {
    // Implementation similar to calculateStats but for previous period
    return {
        satisfaction: 0,
        repeatRate: 0,
        avgGuestValue: 0,
        loyaltyConversion: 0
    };
}

// Calculate average stay duration
function calculateAverageStay(guests) {
    const totalStays = guests.reduce((acc, guest) => acc + guest.totalStays, 0);
    return (totalStays / guests.length || 0).toFixed(1);
}

// Calculate average spend
function calculateAverageSpend(guests) {
    const totalSpend = guests.reduce((acc, guest) => acc + guest.totalSpent, 0);
    return (totalSpend / guests.length || 0).toFixed(2);
}

// Calculate loyalty rate
function calculateLoyaltyRate(guests) {
    const loyalMembers = guests.filter(guest => guest.loyaltyProgram).length;
    return ((loyalMembers / guests.length) * 100 || 0).toFixed(1);
}

// Get detailed segment information
async function getSegmentDetails(segmentId, startDate, endDate) {
    // Implementation for getting detailed segment information
    return {};
}

================
File: src/controllers/admin/guest.controller.js
================
const User = require('../../models/User');
const Booking = require('../../models/Booking');
const LoyaltyProgram = require('../../models/LoyaltyProgram');
const { calculateLoyaltyTier } = require('../../utils/loyalty.utils');

// Helper Functions

// Get guest statistics
const getGuestStatistics = async () => {
    const now = new Date();
    const startOfDay = new Date(now.setHours(0, 0, 0, 0));
    const endOfDay = new Date(now.setHours(23, 59, 59, 999));
    const thirtyDaysAgo = new Date(now - 30 * 24 * 60 * 60 * 1000);

    const [
        totalGuests,
        newGuestsToday,
        activeGuests,
        loyaltyMembers,
        checkInsToday,
        checkOutsToday,
        thirtyDayStats
    ] = await Promise.all([
        User.countDocuments({ role: 'guest' }),
        User.countDocuments({
            role: 'guest',
            createdAt: {
                $gte: startOfDay,
                $lte: endOfDay
            }
        }),
        User.countDocuments({
            role: 'guest',
            'currentStay': { $ne: null }
        }),
        User.countDocuments({
            role: 'guest',
            'loyaltyProgram': { $ne: null }
        }),
        Booking.countDocuments({
            checkIn: {
                $gte: startOfDay,
                $lte: endOfDay
            }
        }),
        Booking.countDocuments({
            checkOut: {
                $gte: startOfDay,
                $lte: endOfDay
            }
        }),
        Booking.aggregate([
            {
                $match: {
                    createdAt: { $gte: thirtyDaysAgo }
                }
            },
            {
                $group: {
                    _id: null,
                    totalBookings: { $sum: 1 },
                    avgStayDuration: { $avg: { $subtract: ['$checkOut', '$checkIn'] } },
                    totalRevenue: { $sum: '$totalAmount' }
                }
            }
        ])
    ]);

    return {
        totalGuests,
        newGuestsToday,
        activeGuests,
        loyaltyMembers,
        checkInsToday,
        checkOutsToday,
        thirtyDayMetrics: thirtyDayStats[0] || {
            totalBookings: 0,
            avgStayDuration: 0,
            totalRevenue: 0
        }
    };
};

// Calculate average stay duration for a guest
const calculateAverageStayDuration = async (guestId) => {
    const bookings = await Booking.find({ guest: guestId });
    if (!bookings.length) return 0;

    const totalDuration = bookings.reduce((acc, booking) => {
        const duration = booking.checkOut - booking.checkIn;
        return acc + duration;
    }, 0);

    return totalDuration / bookings.length / (1000 * 60 * 60 * 24); // Convert to days
};

// Get most booked room type for a guest
const getMostBookedRoomType = async (guestId) => {
    const roomTypes = await Booking.aggregate([
        { $match: { guest: guestId } },
        {
            $lookup: {
                from: 'rooms',
                localField: 'room',
                foreignField: '_id',
                as: 'room'
            }
        },
        { $unwind: '$room' },
        {
            $group: {
                _id: '$room.type',
                count: { $sum: 1 }
            }
        },
        { $sort: { count: -1 } },
        { $limit: 1 }
    ]);

    return roomTypes[0]?._id || null;
};

// Analyze booking preferences
const analyzeBookingPreferences = (bookings) => {
    const preferences = {
        seasonality: {},
        dayOfWeek: {},
        stayDuration: {
            short: 0, // 1-2 nights
            medium: 0, // 3-7 nights
            long: 0 // 8+ nights
        },
        bookingWindow: {
            lastMinute: 0, // 0-2 days
            normal: 0, // 3-14 days
            advance: 0 // 15+ days
        }
    };

    bookings.forEach(booking => {
        // Analyze seasonality
        const month = new Date(booking.checkIn).getMonth();
        preferences.seasonality[month] = (preferences.seasonality[month] || 0) + 1;

        // Analyze day of week preference
        const dayOfWeek = new Date(booking.checkIn).getDay();
        preferences.dayOfWeek[dayOfWeek] = (preferences.dayOfWeek[dayOfWeek] || 0) + 1;

        // Analyze stay duration
        const duration = (booking.checkOut - booking.checkIn) / (1000 * 60 * 60 * 24);
        if (duration <= 2) preferences.stayDuration.short++;
        else if (duration <= 7) preferences.stayDuration.medium++;
        else preferences.stayDuration.long++;

        // Analyze booking window
        const bookingWindow = (booking.checkIn - booking.createdAt) / (1000 * 60 * 60 * 24);
        if (bookingWindow <= 2) preferences.bookingWindow.lastMinute++;
        else if (bookingWindow <= 14) preferences.bookingWindow.normal++;
        else preferences.bookingWindow.advance++;
    });

    return preferences;
};

// Get all guests
exports.getAllGuests = async (req, res) => {
    try {
        const page = parseInt(req.query.page) || 1;
        const limit = parseInt(req.query.limit) || 10;
        const skip = (page - 1) * limit;

        // Build filter query
        const query = { role: 'guest' };
        
        if (req.query.search) {
            query.$or = [
                { name: { $regex: req.query.search, $options: 'i' } },
                { email: { $regex: req.query.search, $options: 'i' } },
                { phone: { $regex: req.query.search, $options: 'i' } }
            ];
        }

        if (req.query.loyaltyTier) {
            query.loyaltyTier = req.query.loyaltyTier;
        }

        // Get guests with pagination
        const [guests, total] = await Promise.all([
            User.find(query)
                .sort({ createdAt: -1 })
                .skip(skip)
                .limit(limit)
                .populate('currentStay')
                .populate('loyaltyProgram')
                .lean(),
            User.countDocuments(query)
        ]);

        const totalPages = Math.ceil(total / limit);

        res.render('admin/guests/list', {
            title: 'All Guests',
            guests,
            filters: {
                search: req.query.search,
                loyaltyTier: req.query.loyaltyTier
            },
            pagination: {
                page,
                totalPages,
                hasNext: page < totalPages,
                hasPrev: page > 1,
                nextPage: page + 1,
                prevPage: page - 1
            }
        });
    } catch (error) {
        console.error('Error fetching guests:', error);
        res.status(500).render('error', {
            message: 'Error fetching guests'
        });
    }
};

// Get guest details
exports.getGuestDetails = async (req, res) => {
    try {
        const guest = await User.findById(req.params.id)
            .populate('currentStay')
            .populate('loyaltyProgram')
            .populate({
                path: 'bookings',
                populate: [
                    { path: 'room', select: 'type number' },
                    { path: 'hotel', select: 'name location' }
                ]
            })
            .lean();

        if (!guest) {
            return res.status(404).render('error', {
                message: 'Guest not found'
            });
        }

        // Get additional guest information
        const [avgStayDuration, preferredRoomType] = await Promise.all([
            calculateAverageStayDuration(guest._id),
            getMostBookedRoomType(guest._id)
        ]);

        // Analyze booking preferences
        const bookingPreferences = analyzeBookingPreferences(guest.bookings || []);

        res.render('admin/guests/details', {
            title: 'Guest Details',
            guest: {
                ...guest,
                avgStayDuration,
                preferredRoomType,
                bookingPreferences
            }
        });
    } catch (error) {
        console.error('Error fetching guest details:', error);
        res.status(500).render('error', {
            message: 'Error fetching guest details'
        });
    }
};

// Create new guest
exports.createGuest = async (req, res) => {
    try {
        const {
            name,
            email,
            phone,
            nationality,
            idType,
            idNumber,
            joinLoyalty,
            preferences
        } = req.body;

        // Check if guest already exists
        const existingGuest = await User.findOne({ email });
        if (existingGuest) {
            return res.status(400).render('error', {
                message: 'Guest with this email already exists'
            });
        }

        // Create guest
        const guest = await User.create({
            name,
            email,
            phone,
            nationality,
            idType,
            idNumber,
            role: 'guest',
            preferences: preferences || []
        });

        // Create loyalty program if requested
        if (joinLoyalty) {
            const loyaltyProgram = await LoyaltyProgram.create({
                user: guest._id,
                tier: 'bronze',
                points: 0,
                joinDate: new Date()
            });

            guest.loyaltyProgram = loyaltyProgram._id;
            await guest.save();
        }

        res.redirect(`/admin/guests/${guest._id}`);
    } catch (error) {
        console.error('Error creating guest:', error);
        res.status(500).render('error', {
            message: 'Error creating guest'
        });
    }
};

// Update guest
exports.updateGuest = async (req, res) => {
    try {
        const {
            name,
            email,
            phone,
            nationality,
            idType,
            idNumber,
            preferences
        } = req.body;

        const guest = await User.findById(req.params.id);
        if (!guest) {
            return res.status(404).render('error', {
                message: 'Guest not found'
            });
        }

        // Check email uniqueness if changed
        if (email !== guest.email) {
            const existingGuest = await User.findOne({ email });
            if (existingGuest) {
                return res.status(400).render('error', {
                    message: 'Email already in use'
                });
            }
        }

        // Update fields
        guest.name = name;
        guest.email = email;
        guest.phone = phone;
        guest.nationality = nationality;
        guest.idType = idType;
        guest.idNumber = idNumber;
        guest.preferences = preferences || [];

        await guest.save();
        res.redirect(`/admin/guests/${guest._id}`);
    } catch (error) {
        console.error('Error updating guest:', error);
        res.status(500).render('error', {
            message: 'Error updating guest'
        });
    }
};

// Delete guest
exports.deleteGuest = async (req, res) => {
    try {
        const guest = await User.findById(req.params.id);
        if (!guest) {
            return res.status(404).render('error', {
                message: 'Guest not found'
            });
        }

        // Check if guest has active bookings
        const activeBookings = await Booking.countDocuments({
            guest: guest._id,
            status: { $in: ['confirmed', 'checked_in'] }
        });

        if (activeBookings > 0) {
            return res.status(400).render('error', {
                message: 'Cannot delete guest with active bookings'
            });
        }

        // Delete loyalty program if exists
        if (guest.loyaltyProgram) {
            await LoyaltyProgram.findByIdAndDelete(guest.loyaltyProgram);
        }

        await guest.remove();
        res.redirect('/admin/guests');
    } catch (error) {
        console.error('Error deleting guest:', error);
        res.status(500).render('error', {
            message: 'Error deleting guest'
        });
    }
};

// Get guest analytics
exports.getGuestAnalytics = async (req, res) => {
    try {
        // Get guest statistics
        const stats = await getGuestStatistics();

        // Get guest distribution by loyalty tier
        const loyaltyDistribution = await User.aggregate([
            { $match: { role: 'guest', 'loyalty.tier': { $exists: true } } },
            {
                $group: {
                    _id: '$loyalty.tier',
                    count: { $sum: 1 }
                }
            },
            {
                $lookup: {
                    from: 'tiers',
                    localField: '_id',
                    foreignField: '_id',
                    as: 'tier'
                }
            },
            { $unwind: '$tier' },
            {
                $project: {
                    tier: '$tier.name',
                    count: 1
                }
            }
        ]);

        // Get booking trends
        const bookingTrends = await Booking.aggregate([
            {
                $group: {
                    _id: {
                        month: { $month: '$createdAt' },
                        year: { $year: '$createdAt' }
                    },
                    count: { $sum: 1 },
                    revenue: { $sum: '$totalAmount' }
                }
            },
            { $sort: { '_id.year': 1, '_id.month': 1 } }
        ]);

        // Get guest preferences
        const preferences = await Booking.aggregate([
            {
                $lookup: {
                    from: 'rooms',
                    localField: 'room',
                    foreignField: '_id',
                    as: 'room'
                }
            },
            { $unwind: '$room' },
            {
                $group: {
                    _id: '$room.type',
                    count: { $sum: 1 }
                }
            },
            { $sort: { count: -1 } }
        ]);

        res.json({
            success: true,
            data: {
                stats,
                loyaltyDistribution,
                bookingTrends,
                preferences
            }
        });
    } catch (error) {
        console.error('Error getting guest analytics:', error);
        res.status(500).json({ message: 'Error getting guest analytics' });
    }
};

================
File: src/controllers/admin/housekeeping.controller.js
================
const HousekeepingTask = require('../../models/HousekeepingTask');
const Room = require('../../models/Room');
const User = require('../../models/User');
const { sendNotification } = require('../../services/notification.service');
const housekeepingMetrics = require('../../utils/housekeeping-metrics');

// Helper function to calculate staff workload
const calculateStaffWorkload = async (staff) => {
    const workload = {};
    for (const member of staff) {
        const activeTasks = await HousekeepingTask.countDocuments({
            assignedTo: member._id,
            status: { $in: ['assigned', 'in_progress'] }
        });
        workload[member._id] = activeTasks;
    }
    return workload;
};

// Helper function to optimize task assignments
const optimizeTaskAssignments = async (tasks, staff, workload) => {
    const assignments = [];
    for (const task of tasks) {
        // Find staff member with lowest workload
        const sortedStaff = staff.sort((a, b) => workload[a._id] - workload[b._id]);
        const assignedStaff = sortedStaff[0];
        
        assignments.push({
            taskId: task._id,
            staffId: assignedStaff._id
        });
        
        // Update workload
        workload[assignedStaff._id]++;
    }
    return assignments;
};

// Helper function to calculate staff performance
const calculateStaffPerformance = async (hotelId, startDate = new Date(0), endDate = new Date()) => {
    const staffMetrics = await HousekeepingTask.aggregate([
        {
            $match: {
                hotel: hotelId,
                completedAt: { $gte: startDate, $lte: endDate }
            }
        },
        {
            $group: {
                _id: '$completedBy',
                tasksCompleted: { $sum: 1 },
                avgTimeToComplete: { $avg: '$metrics.timeToComplete' },
                avgEfficiency: { $avg: '$metrics.efficiency' }
            }
        },
        {
            $lookup: {
                from: 'users',
                localField: '_id',
                foreignField: '_id',
                as: 'staff'
            }
        },
        { $unwind: '$staff' }
    ]);

    return staffMetrics;
};

// Get housekeeping status
exports.getHousekeepingStatus = async (req, res) => {
    try {
        const hotelId = req.query.hotelId;

        // Get room cleaning status
        const roomStatus = await Room.aggregate([
            {
                $match: { hotel: hotelId }
            },
            {
                $group: {
                    _id: '$housekeepingStatus',
                    count: { $sum: 1 }
                }
            }
        ]);

        // Get active tasks
        const activeTasks = await HousekeepingTask.find({
            hotel: hotelId,
            status: { $in: ['assigned', 'in_progress'] }
        })
        .populate('room')
        .populate('assignedTo')
        .sort('priority');

        // Get staff availability
        const availableStaff = await User.find({
            hotel: hotelId,
            role: 'housekeeping',
            status: 'active'
        });

        res.render('admin/housekeeping/status', {
            title: 'Housekeeping Status',
            roomStatus,
            activeTasks,
            availableStaff
        });
    } catch (error) {
        console.error('Error fetching housekeeping status:', error);
        res.status(500).render('error', {
            message: 'Error fetching housekeeping status'
        });
    }
};

// Get housekeeping tasks
exports.getHousekeepingTasks = async (req, res) => {
    try {
        const hotelId = req.query.hotelId;
        const page = parseInt(req.query.page) || 1;
        const limit = parseInt(req.query.limit) || 10;
        const skip = (page - 1) * limit;

        // Build filter query
        const query = { hotel: hotelId };
        
        if (req.query.status) {
            query.status = req.query.status;
        }
        
        if (req.query.priority) {
            query.priority = req.query.priority;
        }
        
        if (req.query.assignedTo) {
            query.assignedTo = req.query.assignedTo;
        }

        // Get tasks with pagination
        const [tasks, total] = await Promise.all([
            HousekeepingTask.find(query)
                .populate('room')
                .populate('assignedTo')
                .sort({ priority: 1, createdAt: -1 })
                .skip(skip)
                .limit(limit),
            HousekeepingTask.countDocuments(query)
        ]);

        const totalPages = Math.ceil(total / limit);

        res.render('admin/housekeeping/tasks', {
            title: 'Housekeeping Tasks',
            tasks,
            filters: {
                status: req.query.status,
                priority: req.query.priority,
                assignedTo: req.query.assignedTo
            },
            pagination: {
                page,
                totalPages,
                hasNext: page < totalPages,
                hasPrev: page > 1,
                nextPage: page + 1,
                prevPage: page - 1
            }
        });
    } catch (error) {
        console.error('Error fetching housekeeping tasks:', error);
        res.status(500).render('error', {
            message: 'Error fetching housekeeping tasks'
        });
    }
};

// Create housekeeping task
exports.createHousekeepingTask = async (req, res) => {
    try {
        const {
            roomId,
            priority,
            description,
            assignToId
        } = req.body;

        // Create task
        const task = await HousekeepingTask.create({
            hotel: req.body.hotelId,
            room: roomId,
            priority: priority || 'normal',
            description,
            assignedTo: assignToId,
            status: assignToId ? 'assigned' : 'pending',
            createdBy: req.user._id
        });

        // If task is assigned, notify staff
        if (assignToId) {
            await sendNotification({
                type: 'task_assignment',
                user: assignToId,
                title: 'New Room Assignment',
                message: `A new room has been assigned to you for cleaning`,
                data: { taskId: task._id }
            });
        }

        res.redirect('/admin/housekeeping/tasks');
    } catch (error) {
        console.error('Error creating housekeeping task:', error);
        res.status(500).render('error', {
            message: 'Error creating housekeeping task'
        });
    }
};

// Update housekeeping task
exports.updateHousekeepingTask = async (req, res) => {
    try {
        const {
            priority,
            description,
            assignToId,
            status
        } = req.body;

        const task = await HousekeepingTask.findById(req.params.id);
        if (!task) {
            return res.status(404).render('error', {
                message: 'Task not found'
            });
        }

        // Update fields
        if (priority) task.priority = priority;
        if (description) task.description = description;
        if (assignToId) {
            task.assignedTo = assignToId;
            task.status = 'assigned';
            task.assignedAt = new Date();

            // Notify new assignee
            await sendNotification({
                type: 'task_assignment',
                user: assignToId,
                title: 'New Room Assignment',
                message: `A room has been assigned to you for cleaning`,
                data: { taskId: task._id }
            });
        }
        if (status) task.status = status;

        await task.save();
        res.redirect('/admin/housekeeping/tasks');
    } catch (error) {
        console.error('Error updating housekeeping task:', error);
        res.status(500).render('error', {
            message: 'Error updating housekeeping task'
        });
    }
};

// Delete housekeeping task
exports.deleteHousekeepingTask = async (req, res) => {
    try {
        const task = await HousekeepingTask.findById(req.params.id);
        if (!task) {
            return res.status(404).render('error', {
                message: 'Task not found'
            });
        }

        await task.remove();
        res.redirect('/admin/housekeeping/tasks');
    } catch (error) {
        console.error('Error deleting housekeeping task:', error);
        res.status(500).render('error', {
            message: 'Error deleting housekeeping task'
        });
    }
};

// Get housekeeping dashboard
exports.getDashboard = async (req, res) => {
    try {
        const hotelId = req.query.hotelId;

        // Get all tasks for today
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        
        const tasks = await HousekeepingTask.find({
            hotel: hotelId,
            createdAt: { $gte: today }
        })
        .populate('room')
        .populate('assignedTo')
        .sort('priority');

        // Get staff performance metrics
        const staffMetrics = await calculateStaffPerformance(hotelId);

        // Calculate room cleaning statistics
        const stats = {
            total: tasks.length,
            pending: tasks.filter(t => t.status === 'pending').length,
            inProgress: tasks.filter(t => t.status === 'in_progress').length,
            completed: tasks.filter(t => t.status === 'completed').length,
            verified: tasks.filter(t => t.status === 'verified').length
        };

        res.render('admin/housekeeping/dashboard', {
            title: 'Housekeeping Dashboard',
            stats,
            tasks,
            staffMetrics
        });
    } catch (error) {
        console.error('Error fetching housekeeping dashboard:', error);
        res.status(500).render('error', {
            message: 'Error fetching housekeeping dashboard'
        });
    }
};

// Auto-assign tasks
exports.autoAssignTasks = async (req, res) => {
    try {
        const hotelId = req.body.hotelId;
        const tasks = await HousekeepingTask.find({
            hotel: hotelId,
            status: 'pending',
            assignedTo: null
        });

        // Get available housekeeping staff
        const availableStaff = await User.find({
            hotel: hotelId,
            role: 'housekeeping',
            status: 'active'
        });

        if (!availableStaff.length) {
            return res.status(400).json({
                success: false,
                message: 'No available housekeeping staff'
            });
        }

        // Calculate current workload
        const staffWorkload = await calculateStaffWorkload(availableStaff);

        // Assign tasks based on workload and location
        const assignments = await optimizeTaskAssignments(tasks, availableStaff, staffWorkload);

        // Update tasks with assignments
        for (const assignment of assignments) {
            const task = await HousekeepingTask.findByIdAndUpdate(
                assignment.taskId,
                {
                    assignedTo: assignment.staffId,
                    status: 'assigned',
                    assignedAt: new Date()
                },
                { new: true }
            );

            // Notify assigned staff
            await sendNotification({
                type: 'task_assignment',
                user: assignment.staffId,
                title: 'New Room Assignment',
                message: `Room ${task.room.number} has been assigned to you for cleaning`,
                data: { taskId: task._id }
            });
        }

        res.json({
            success: true,
            message: `${assignments.length} tasks assigned successfully`
        });
    } catch (error) {
        console.error('Error auto-assigning tasks:', error);
        res.status(500).json({
            success: false,
            message: 'Error auto-assigning tasks'
        });
    }
};

// Get staff performance report
exports.getStaffPerformance = async (req, res) => {
    try {
        const hotelId = req.query.hotelId;
        const startDate = new Date(req.query.startDate);
        const endDate = new Date(req.query.endDate);

        const staffMetrics = await calculateStaffPerformance(hotelId, startDate, endDate);

        res.json({
            success: true,
            data: staffMetrics
        });
    } catch (error) {
        console.error('Error getting staff performance:', error);
        res.status(500).json({
            success: false,
            message: 'Error getting staff performance'
        });
    }
};

// Update task status
exports.updateTaskStatus = async (req, res) => {
    try {
        const { taskId } = req.params;
        const { status, notes } = req.body;

        const task = await HousekeepingTask.findById(taskId);
        if (!task) {
            return res.status(404).json({
                success: false,
                message: 'Task not found'
            });
        }

        // Update task status
        task.status = status;
        if (notes) task.notes.push({ content: notes, addedBy: req.user._id });
        
        // Add completion time if task is completed
        if (status === 'completed') {
            task.completedAt = new Date();
            task.completedBy = req.user._id;
            
            // Calculate efficiency metrics
            const efficiency = await housekeepingMetrics.calculateEfficiency(task);
            task.metrics = {
                ...task.metrics,
                timeToComplete: efficiency.timeToComplete,
                efficiency: efficiency.score
            };

            // Update room status
            await Room.findByIdAndUpdate(task.room, {
                housekeepingStatus: 'clean',
                lastCleaned: new Date()
            });
        }

        await task.save();

        // Notify supervisor for verification if task is completed
        if (status === 'completed') {
            const supervisors = await User.find({
                hotel: task.hotel,
                role: 'housekeeping_supervisor',
                status: 'active'
            });

            for (const supervisor of supervisors) {
                await sendNotification({
                    type: 'task_verification',
                    user: supervisor._id,
                    title: 'Room Ready for Inspection',
                    message: `Room ${task.room.number} is ready for inspection`,
                    data: { taskId: task._id }
                });
            }
        }

        res.json({
            success: true,
            message: 'Task status updated successfully'
        });
    } catch (error) {
        console.error('Error updating task status:', error);
        res.status(500).json({
            success: false,
            message: 'Error updating task status'
        });
    }
};

// Get all tasks
exports.getAllTasks = async (req, res) => {
    try {
        const page = parseInt(req.query.page) || 1;
        const limit = parseInt(req.query.limit) || 10;
        const skip = (page - 1) * limit;

        // Build filter query
        const query = {};
        if (req.query.status) query.status = req.query.status;
        if (req.query.priority) query.priority = req.query.priority;
        if (req.query.roomType) query['room.type'] = req.query.roomType;

        // Get tasks with pagination
        const [tasks, total] = await Promise.all([
            HousekeepingTask.find(query)
                .populate('room', 'number type status')
                .populate('assignedTo', 'name email')
                .sort({ priority: -1, createdAt: -1 })
                .skip(skip)
                .limit(limit),
            HousekeepingTask.countDocuments(query)
        ]);

        res.json({
            success: true,
            data: {
                tasks,
                pagination: {
                    page,
                    limit,
                    total,
                    pages: Math.ceil(total / limit)
                }
            }
        });
    } catch (error) {
        console.error('Error getting housekeeping tasks:', error);
        res.status(500).json({ message: 'Error getting housekeeping tasks' });
    }
};

// Create task
exports.createTask = async (req, res) => {
    try {
        const { roomId, priority, description, assignedTo } = req.body;

        // Validate room
        const room = await Room.findById(roomId);
        if (!room) {
            return res.status(404).json({ message: 'Room not found' });
        }

        // Create task
        const task = await HousekeepingTask.create({
            room: roomId,
            priority: priority || 'normal',
            description,
            assignedTo,
            status: assignedTo ? 'assigned' : 'pending',
            createdBy: req.user._id
        });

        // Update room status
        await Room.findByIdAndUpdate(roomId, {
            housekeepingStatus: 'pending',
            currentTask: task._id
        });

        // If task is assigned, send notification
        if (assignedTo) {
            await sendNotification(assignedTo, {
                type: 'TASK_ASSIGNED',
                title: 'New Housekeeping Task',
                message: `You have been assigned to clean room ${room.number}`,
                data: {
                    taskId: task._id,
                    roomId: room._id,
                    roomNumber: room.number
                }
            });
        }

        res.json({
            success: true,
            message: 'Task created successfully',
            data: task
        });
    } catch (error) {
        console.error('Error creating housekeeping task:', error);
        res.status(500).json({ message: 'Error creating housekeeping task' });
    }
};

// Update task
exports.updateTask = async (req, res) => {
    try {
        const { id } = req.params;
        const { status, priority, description, assignedTo } = req.body;

        const task = await HousekeepingTask.findById(id);
        if (!task) {
            return res.status(404).json({ message: 'Task not found' });
        }

        // Update task
        task.status = status || task.status;
        task.priority = priority || task.priority;
        task.description = description || task.description;
        
        // Handle assignment changes
        if (assignedTo && assignedTo !== task.assignedTo.toString()) {
            task.assignedTo = assignedTo;
            task.status = 'assigned';
            
            // Send notification to new assignee
            await sendNotification(assignedTo, {
                type: 'TASK_ASSIGNED',
                title: 'New Housekeeping Task',
                message: `You have been assigned to a housekeeping task`,
                data: {
                    taskId: task._id,
                    roomId: task.room
                }
            });
        }

        // If task is completed
        if (status === 'completed' && task.status !== 'completed') {
            task.completedAt = new Date();
            task.completedBy = req.user._id;

            // Update room status
            await Room.findByIdAndUpdate(task.room, {
                housekeepingStatus: 'clean',
                currentTask: null,
                lastCleaned: new Date()
            });
        }

        await task.save();

        res.json({
            success: true,
            message: 'Task updated successfully',
            data: task
        });
    } catch (error) {
        console.error('Error updating housekeeping task:', error);
        res.status(500).json({ message: 'Error updating housekeeping task' });
    }
};

// Delete task
exports.deleteTask = async (req, res) => {
    try {
        const { id } = req.params;

        const task = await HousekeepingTask.findById(id);
        if (!task) {
            return res.status(404).json({ message: 'Task not found' });
        }

        // Update room status if task is active
        if (task.status !== 'completed') {
            await Room.findByIdAndUpdate(task.room, {
                housekeepingStatus: 'clean',
                currentTask: null
            });
        }

        await task.remove();

        res.json({
            success: true,
            message: 'Task deleted successfully'
        });
    } catch (error) {
        console.error('Error deleting housekeeping task:', error);
        res.status(500).json({ message: 'Error deleting housekeeping task' });
    }
};

================
File: src/controllers/admin/inventory.controller.js
================
const InventoryItem = require('../../models/inventory-item.model');
const InventoryAdjustment = require('../../models/inventory-adjustment.model');
const Category = require('../../models/category.model');
const Supplier = require('../../models/supplier.model');
const LoyaltyProgram = require('../../models/LoyaltyProgram');
const moment = require('moment');
const PDFDocument = require('pdfkit');
const ExcelJS = require('exceljs');

// Helper function to get date range
const getDateRange = (range) => {
    const now = moment();
    switch (range) {
        case 'today':
            return {
                start: now.startOf('day'),
                end: now.endOf('day')
            };
        case 'week':
            return {
                start: now.startOf('week'),
                end: now.endOf('week')
            };
        case 'month':
            return {
                start: now.startOf('month'),
                end: now.endOf('month')
            };
        case 'quarter':
            return {
                start: now.startOf('quarter'),
                end: now.endOf('quarter')
            };
        case 'year':
            return {
                start: now.startOf('year'),
                end: now.endOf('year')
            };
        default:
            return {
                start: now.startOf('month'),
                end: now.endOf('month')
            };
    }
};

// Base Inventory Operations
exports.getInventory = async (req, res) => {
    try {
        const { search, category, supplier, sort, page = 1, limit = 10 } = req.query;
        const query = {};

        // Apply filters
        if (search) {
            query.$or = [
                { name: { $regex: search, $options: 'i' } },
                { sku: { $regex: search, $options: 'i' } }
            ];
        }
        if (category) query.category = category;
        if (supplier) query.supplier = supplier;

        // Apply sorting
        const sortOptions = {
            name_asc: { name: 1 },
            name_desc: { name: -1 },
            stock_asc: { stock: 1 },
            stock_desc: { stock: -1 },
            price_asc: { unitPrice: 1 },
            price_desc: { unitPrice: -1 }
        };

        const items = await InventoryItem.find(query)
            .populate('category')
            .populate('supplier')
            .sort(sortOptions[sort] || { createdAt: -1 })
            .skip((page - 1) * limit)
            .limit(limit);

        const total = await InventoryItem.countDocuments(query);

        // Get loyalty program impact by checking reward redemptions
        const loyaltyImpact = await LoyaltyProgram.aggregate([
            { $unwind: '$rewards' },
            { $match: { 'rewards.status': 'redeemed' } },
            { $group: {
                _id: '$rewards.type',
                totalRedemptions: { $sum: 1 }
            }}
        ]);

        // Enhance items with loyalty program data
        const enhancedItems = items.map(item => {
            const impact = loyaltyImpact.find(li => 
                ['dining_voucher', 'spa_voucher'].includes(li._id) && 
                item.category.name.toLowerCase().includes(li._id.split('_')[0])
            );
            return {
                ...item.toObject(),
                loyaltyImpact: impact ? impact.totalRedemptions : 0
            };
        });

        res.json({
            items: enhancedItems,
            total,
            pages: Math.ceil(total / limit)
        });
    } catch (error) {
        console.error('Error fetching inventory:', error);
        res.status(500).json({ error: 'Failed to fetch inventory' });
    }
};

exports.createItem = async (req, res) => {
    try {
        const {
            name,
            sku,
            category,
            supplier,
            stock,
            minStock,
            unitPrice,
            unit,
            image
        } = req.body;

        // Validate SKU uniqueness
        const existingItem = await InventoryItem.findOne({ sku });
        if (existingItem) {
            return res.status(400).json({ error: 'SKU already exists' });
        }

        const item = new InventoryItem({
            name,
            sku,
            category,
            supplier,
            stock,
            minStock,
            unitPrice,
            unit,
            image
        });

        await item.save();

        // Create initial stock adjustment
        const adjustment = new InventoryAdjustment({
            item: item._id,
            type: 'addition',
            quantity: stock,
            reason: 'Initial stock',
            adjustedBy: req.user._id,
            previousStock: 0,
            newStock: stock
        });

        await adjustment.save();

        res.status(201).json(item);
    } catch (error) {
        console.error('Error creating inventory item:', error);
        res.status(500).json({ error: 'Failed to create inventory item' });
    }
};

exports.getItem = async (req, res) => {
    try {
        const item = await InventoryItem.findById(req.params.id)
            .populate('category')
            .populate('supplier');

        if (!item) {
            return res.status(404).json({ error: 'Item not found' });
        }

        // Get item's adjustment history
        const adjustments = await InventoryAdjustment.find({ item: item._id })
            .populate('adjustedBy', 'name')
            .sort({ date: -1 })
            .limit(10);

        // Get loyalty program impact
        const loyaltyStats = await LoyaltyProgram.aggregate([
            { $unwind: '$rewards' },
            { $match: { 
                'rewards.status': 'redeemed',
                'rewards.type': { 
                    $in: ['dining_voucher', 'spa_voucher']
                }
            }},
            { $group: {
                _id: '$rewards.type',
                totalPoints: { $sum: '$rewards.pointsCost' },
                totalRedemptions: { $sum: 1 }
            }}
        ]);

        res.json({
            item,
            adjustments,
            loyaltyStats
        });
    } catch (error) {
        console.error('Error fetching inventory item:', error);
        res.status(500).json({ error: 'Failed to fetch inventory item' });
    }
};

exports.updateItem = async (req, res) => {
    try {
        const {
            name,
            category,
            supplier,
            minStock,
            unitPrice,
            unit,
            image
        } = req.body;

        const item = await InventoryItem.findById(req.params.id);
        if (!item) {
            return res.status(404).json({ error: 'Item not found' });
        }

        // Create adjustment if stock is being updated
        if (req.body.stock !== undefined && req.body.stock !== item.stock) {
            const adjustment = new InventoryAdjustment({
                item: item._id,
                type: req.body.stock > item.stock ? 'addition' : 'reduction',
                quantity: Math.abs(req.body.stock - item.stock),
                reason: 'Stock update',
                adjustedBy: req.user._id,
                previousStock: item.stock,
                newStock: req.body.stock
            });
            await adjustment.save();
        }

        // Update item
        Object.assign(item, {
            name,
            category,
            supplier,
            stock: req.body.stock !== undefined ? req.body.stock : item.stock,
            minStock,
            unitPrice,
            unit,
            image
        });

        await item.save();
        res.json(item);
    } catch (error) {
        console.error('Error updating inventory item:', error);
        res.status(500).json({ error: 'Failed to update inventory item' });
    }
};

exports.deleteItem = async (req, res) => {
    try {
        const item = await InventoryItem.findById(req.params.id);
        if (!item) {
            return res.status(404).json({ error: 'Item not found' });
        }

        // Create final adjustment for record
        const adjustment = new InventoryAdjustment({
            item: item._id,
            type: 'reduction',
            quantity: item.stock,
            reason: 'Item deleted',
            adjustedBy: req.user._id,
            previousStock: item.stock,
            newStock: 0
        });
        await adjustment.save();

        await item.remove();
        res.json({ message: 'Item deleted successfully' });
    } catch (error) {
        console.error('Error deleting inventory item:', error);
        res.status(500).json({ error: 'Failed to delete inventory item' });
    }
};

// Inventory Reports Controller
exports.getInventoryReports = async (req, res) => {
    try {
        const startDate = req.query.startDate ? moment(req.query.startDate) : moment().startOf('month');
        const endDate = req.query.endDate ? moment(req.query.endDate) : moment().endOf('month');

        // Get inventory statistics
        const [currentValue, previousValue] = await Promise.all([
            InventoryItem.aggregate([
                { $group: { _id: null, total: { $sum: { $multiply: ['$stock', '$unitPrice'] } } } }
            ]),
            InventoryItem.aggregate([
                { $group: { _id: null, total: { $sum: { $multiply: ['$stock', '$unitPrice'] } } } }
            ]).allowDiskUse(true)
        ]);

        const valueChange = previousValue[0]?.total ? 
            ((currentValue[0]?.total - previousValue[0].total) / previousValue[0].total * 100).toFixed(2) : 0;

        // Get low stock items
        const lowStockItems = await InventoryItem.find({
            $expr: { $lte: ['$stock', '$minStock'] }
        }).populate('category');

        // Get category distribution
        const categoryDistribution = await InventoryItem.aggregate([
            { $group: { _id: '$category', count: { $sum: 1 } } },
            { $lookup: { from: 'categories', localField: '_id', foreignField: '_id', as: 'category' } },
            { $unwind: '$category' }
        ]);

        // Get inventory value trend
        const valueTrend = await InventoryAdjustment.aggregate([
            { $match: { date: { $gte: startDate.toDate(), $lte: endDate.toDate() } } },
            { $group: { _id: { $dateToString: { format: '%Y-%m-%d', date: '$date' } }, value: { $sum: '$quantity' } } },
            { $sort: { '_id': 1 } }
        ]);

        // Integrate with loyalty program
        const loyaltyImpact = await LoyaltyProgram.aggregate([
            { $match: { 'rewards.type': 'product_discount' } },
            { $group: { _id: null, totalDiscounts: { $sum: '$rewards.value' } } }
        ]);

        res.render('admin/inventory/reports', {
            stats: {
                totalValue: currentValue[0]?.total || 0,
                valueChange: parseFloat(valueChange),
                totalItems: await InventoryItem.countDocuments(),
                lowStockItems: lowStockItems.length,
                orderValue: await calculateOrderValue(startDate, endDate)
            },
            lowStockItems,
            charts: {
                inventoryValue: {
                    labels: valueTrend.map(v => v._id),
                    data: valueTrend.map(v => v.value)
                },
                categoryDistribution: {
                    labels: categoryDistribution.map(c => c.category.name),
                    data: categoryDistribution.map(c => c.count)
                }
            },
            loyaltyImpact: loyaltyImpact[0]?.totalDiscounts || 0,
            startDate: startDate.format('YYYY-MM-DD'),
            endDate: endDate.format('YYYY-MM-DD')
        });
    } catch (error) {
        console.error('Error generating inventory reports:', error);
        res.status(500).json({ error: 'Failed to generate inventory reports' });
    }
};

// Inventory Adjustments Controller
exports.getInventoryAdjustments = async (req, res) => {
    try {
        const { type, category, dateRange, sort } = req.query;
        const { start, end } = getDateRange(dateRange);

        // Build query
        const query = { date: { $gte: start.toDate(), $lte: end.toDate() } };
        if (type) query.type = type;
        if (category) query['item.category'] = category;

        // Get adjustments with sorting
        const sortOptions = {
            date_desc: { date: -1 },
            date_asc: { date: 1 },
            quantity_desc: { quantity: -1 },
            quantity_asc: { quantity: 1 }
        };

        const adjustments = await InventoryAdjustment.find(query)
            .populate('item')
            .populate('adjustedBy', 'name')
            .sort(sortOptions[sort] || sortOptions.date_desc);

        // Get statistics
        const stats = {
            totalAdjustments: await InventoryAdjustment.countDocuments(query),
            stockAdditions: await InventoryAdjustment.countDocuments({ ...query, type: 'addition' }),
            stockReductions: await InventoryAdjustment.countDocuments({ ...query, type: 'reduction' })
        };

        // Calculate values
        const values = await InventoryAdjustment.aggregate([
            { $match: query },
            { $group: {
                _id: '$type',
                total: { $sum: '$quantity' }
            }}
        ]);

        stats.additionValue = values.find(v => v._id === 'addition')?.total || 0;
        stats.reductionValue = Math.abs(values.find(v => v._id === 'reduction')?.total || 0);

        // Get categories and items for filters
        const [categories, items] = await Promise.all([
            Category.find(),
            InventoryItem.find().select('name sku')
        ]);

        res.render('admin/inventory/adjustments', {
            adjustments,
            stats,
            categories,
            items,
            moment
        });
    } catch (error) {
        console.error('Error fetching inventory adjustments:', error);
        res.status(500).json({ error: 'Failed to fetch inventory adjustments' });
    }
};

exports.createAdjustment = async (req, res) => {
    try {
        const { item, type, quantity, reason } = req.body;

        // Get current item stock
        const inventoryItem = await InventoryItem.findById(item);
        if (!inventoryItem) {
            return res.status(404).json({ error: 'Item not found' });
        }

        const previousStock = inventoryItem.stock;
        const adjustmentQuantity = type === 'reduction' || type === 'damage' || type === 'loss' 
            ? -Math.abs(quantity) 
            : Math.abs(quantity);

        // Create adjustment record
        const adjustment = new InventoryAdjustment({
            item,
            type,
            quantity: adjustmentQuantity,
            reason,
            adjustedBy: req.user._id,
            previousStock,
            newStock: previousStock + adjustmentQuantity
        });

        // Update item stock
        inventoryItem.stock += adjustmentQuantity;
        
        await Promise.all([
            adjustment.save(),
            inventoryItem.save()
        ]);

        res.status(201).json(adjustment);
    } catch (error) {
        console.error('Error creating inventory adjustment:', error);
        res.status(500).json({ error: 'Failed to create inventory adjustment' });
    }
};

exports.exportReport = async (req, res) => {
    try {
        const { format } = req.query;
        const startDate = req.query.startDate ? moment(req.query.startDate) : moment().startOf('month');
        const endDate = req.query.endDate ? moment(req.query.endDate) : moment().endOf('month');

        const items = await InventoryItem.find()
            .populate('category')
            .populate('supplier');

        if (format === 'pdf') {
            const doc = new PDFDocument();
            doc.pipe(res);
            
            // Generate PDF report
            doc.fontSize(20).text('Inventory Report', { align: 'center' });
            doc.moveDown();
            doc.fontSize(12).text(`Report Period: ${startDate.format('MMM D, YYYY')} - ${endDate.format('MMM D, YYYY')}`);
            
            // Add items table
            let y = 150;
            items.forEach(item => {
                doc.text(item.name, 50, y)
                   .text(item.sku, 200, y)
                   .text(item.stock.toString(), 300, y)
                   .text(`$${item.unitPrice}`, 400, y);
                y += 20;
            });

            doc.end();
        } else {
            // Generate Excel report
            const workbook = new ExcelJS.Workbook();
            const worksheet = workbook.addWorksheet('Inventory Report');

            worksheet.columns = [
                { header: 'Name', key: 'name', width: 30 },
                { header: 'SKU', key: 'sku', width: 15 },
                { header: 'Category', key: 'category', width: 20 },
                { header: 'Stock', key: 'stock', width: 10 },
                { header: 'Unit Price', key: 'unitPrice', width: 15 },
                { header: 'Total Value', key: 'totalValue', width: 15 }
            ];

            items.forEach(item => {
                worksheet.addRow({
                    name: item.name,
                    sku: item.sku,
                    category: item.category?.name,
                    stock: item.stock,
                    unitPrice: item.unitPrice,
                    totalValue: item.stock * item.unitPrice
                });
            });

            res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            res.setHeader('Content-Disposition', 'attachment; filename=inventory-report.xlsx');
            await workbook.xlsx.write(res);
        }
    } catch (error) {
        console.error('Error exporting inventory report:', error);
        res.status(500).json({ error: 'Failed to export inventory report' });
    }
};

// Helper function to calculate order value
async function calculateOrderValue(startDate, endDate) {
    const result = await InventoryAdjustment.aggregate([
        {
            $match: {
                type: 'addition',
                date: { $gte: startDate.toDate(), $lte: endDate.toDate() }
            }
        },
        {
            $lookup: {
                from: 'inventoryitems',
                localField: 'item',
                foreignField: '_id',
                as: 'item'
            }
        },
        {
            $unwind: '$item'
        },
        {
            $group: {
                _id: null,
                total: { $sum: { $multiply: ['$quantity', '$item.unitPrice'] } }
            }
        }
    ]);

    return result[0]?.total || 0;
}

================
File: src/controllers/admin/loyalty.controller.js
================
const LoyaltyProgram = require('../../models/LoyaltyProgram');
const User = require('../../models/User');
const Booking = require('../../models/Booking');
const Referral = require('../../models/Referral');
const Reward = require('../../models/Reward');
const Tier = require('../../models/Tier');
const notificationService = require('../../services/notification.service');
const emailService = require('../../services/email.service');

// Get loyalty program dashboard data
exports.getDashboard = async (req, res) => {
    try {
        const { hotelId } = req.params;

        // Get loyalty program stats
        const totalMembers = await User.countDocuments({
            'loyalty.isEnrolled': true,
            'loyalty.hotel': hotelId
        });

        const activeMembers = await User.countDocuments({
            'loyalty.isEnrolled': true,
            'loyalty.hotel': hotelId,
            'loyalty.isActive': true
        });

        const tiers = await Tier.find({ hotel: hotelId });
        const tierDistribution = await Promise.all(
            tiers.map(async tier => ({
                tier: tier.name,
                count: await User.countDocuments({
                    'loyalty.tier': tier._id,
                    'loyalty.hotel': hotelId
                })
            }))
        );

        // Get recent point transactions
        const recentTransactions = await LoyaltyProgram.find({ hotel: hotelId })
            .sort({ createdAt: -1 })
            .limit(10)
            .populate('user', 'name email');

        // Get referral stats
        const referrals = await Referral.find({ hotel: hotelId })
            .sort({ createdAt: -1 })
            .limit(10)
            .populate('referrer', 'name email')
            .populate('referred', 'name email');

        // Get rewards stats
        const rewards = await Reward.find({ hotel: hotelId })
            .sort({ createdAt: -1 })
            .limit(10)
            .populate('user', 'name email');

        res.json({
            stats: {
                totalMembers,
                activeMembers,
                tierDistribution
            },
            recentTransactions,
            referrals,
            rewards
        });
    } catch (error) {
        console.error('Error getting loyalty dashboard:', error);
        res.status(500).json({ message: 'Error getting loyalty dashboard' });
    }
};

// Get all loyalty program members
exports.getAllMembers = async (req, res) => {
    try {
        const page = parseInt(req.query.page) || 1;
        const limit = parseInt(req.query.limit) || 10;
        const skip = (page - 1) * limit;

        const query = { 'loyalty.isEnrolled': true };
        if (req.query.tier) query['loyalty.tier'] = req.query.tier;
        if (req.query.minPoints) query['loyalty.points'] = { $gte: parseInt(req.query.minPoints) };

        const [members, total] = await Promise.all([
            User.find(query)
                .select('name email loyalty')
                .populate('loyalty.tier')
                .sort('-loyalty.points')
                .skip(skip)
                .limit(limit),
            User.countDocuments(query)
        ]);

        res.json({
            success: true,
            data: members,
            pagination: {
                page,
                limit,
                total,
                pages: Math.ceil(total / limit)
            }
        });
    } catch (error) {
        console.error('Error getting loyalty members:', error);
        res.status(500).json({ message: 'Error getting loyalty members' });
    }
};

// Get member details
exports.getMemberDetails = async (req, res) => {
    try {
        const { id } = req.params;

        const member = await User.findById(id)
            .populate('loyalty.tier')
            .select('name email loyalty');

        if (!member) {
            return res.status(404).json({ message: 'Member not found' });
        }

        // Get point history
        const pointHistory = await LoyaltyProgram.find({ user: id })
            .sort({ createdAt: -1 })
            .limit(20);

        // Get booking history
        const bookings = await Booking.find({ guest: id })
            .sort({ checkIn: -1 })
            .limit(10);

        // Get referral history
        const referrals = await Referral.find({ referrer: id })
            .populate('referred', 'name email')
            .sort({ createdAt: -1 });

        // Get reward redemptions
        const rewards = await Reward.find({ 'redemptions.user': id })
            .sort({ createdAt: -1 });

        res.json({
            success: true,
            data: {
                member,
                pointHistory,
                bookings,
                referrals,
                rewards
            }
        });
    } catch (error) {
        console.error('Error getting member details:', error);
        res.status(500).json({ message: 'Error getting member details' });
    }
};

// Update member
exports.updateMember = async (req, res) => {
    try {
        const { id } = req.params;
        const { tierId, points, reason } = req.body;

        const member = await User.findById(id);
        if (!member) {
            return res.status(404).json({ message: 'Member not found' });
        }

        // Update tier if provided
        if (tierId) {
            const tier = await Tier.findById(tierId);
            if (!tier) {
                return res.status(404).json({ message: 'Tier not found' });
            }

            member.loyalty.tier = tierId;
            member.loyalty.tierUpdateReason = reason;
            member.loyalty.tierUpdateDate = new Date();

            // Create loyalty program entry for tier update
            await LoyaltyProgram.create({
                user: id,
                type: 'TIER_UPDATE',
                description: `Tier updated to ${tier.name}`,
                metadata: {
                    previousTier: member.loyalty.tier,
                    newTier: tierId,
                    reason
                }
            });

            // Send tier update email
            await emailService.sendTierUpdateEmail(member.email, {
                name: member.name,
                newTier: tier.name,
                benefits: tier.benefits
            });
        }

        // Update points if provided
        if (points !== undefined) {
            const previousPoints = member.loyalty.points;
            member.loyalty.points = points;

            // Create loyalty program entry for points update
            await LoyaltyProgram.create({
                user: id,
                type: 'POINTS_ADJUSTMENT',
                points: points - previousPoints,
                description: reason || 'Manual points adjustment',
                metadata: {
                    previousPoints,
                    newPoints: points,
                    reason
                }
            });

            // Send points update email
            await emailService.sendPointsUpdateEmail(member.email, {
                name: member.name,
                pointsChange: points - previousPoints,
                newBalance: points,
                reason: reason || 'Manual points adjustment'
            });
        }

        await member.save();

        // Get updated member with populated tier
        const updatedMember = await User.findById(id)
            .populate('loyalty.tier')
            .select('name email loyalty');

        res.json({
            success: true,
            data: updatedMember
        });
    } catch (error) {
        console.error('Error updating member:', error);
        res.status(500).json({ message: 'Error updating member' });
    }
};

// Update member tier
exports.updateMemberTier = async (req, res) => {
    try {
        const { memberId } = req.params;
        const { tierId, reason } = req.body;

        const member = await User.findById(memberId);
        if (!member) {
            return res.status(404).json({ message: 'Member not found' });
        }

        const tier = await Tier.findById(tierId);
        if (!tier) {
            return res.status(404).json({ message: 'Tier not found' });
        }

        // Update member tier
        member.loyalty.tier = tierId;
        member.loyalty.tierUpdateReason = reason;
        member.loyalty.tierUpdateDate = new Date();
        await member.save();

        // Create loyalty program entry
        await LoyaltyProgram.create({
            user: memberId,
            hotel: member.loyalty.hotel,
            type: 'TIER_UPDATE',
            description: `Tier updated to ${tier.name}`,
            metadata: {
                previousTier: member.loyalty.tier,
                newTier: tierId,
                reason
            }
        });

        // Notify member
        await notificationService.notifyUser(memberId, {
            type: 'LOYALTY_UPDATE',
            title: 'Tier Update',
            message: `Your loyalty tier has been updated to ${tier.name}`,
            data: { tierId, tierName: tier.name }
        });

        res.json({ message: 'Member tier updated successfully' });
    } catch (error) {
        console.error('Error updating member tier:', error);
        res.status(500).json({ message: 'Error updating member tier' });
    }
};

// Add loyalty points
exports.addPoints = async (req, res) => {
    try {
        const { memberId } = req.params;
        const { points, reason, type } = req.body;

        const member = await User.findById(memberId);
        if (!member) {
            return res.status(404).json({ message: 'Member not found' });
        }

        // Add points
        member.loyalty.points += points;
        await member.save();

        // Create loyalty program entry
        await LoyaltyProgram.create({
            user: memberId,
            hotel: member.loyalty.hotel,
            type,
            points,
            description: reason,
            metadata: {
                previousPoints: member.loyalty.points - points,
                newPoints: member.loyalty.points
            }
        });

        // Notify member
        await notificationService.notifyUser(memberId, {
            type: 'LOYALTY_UPDATE',
            title: 'Points Added',
            message: `${points} points have been added to your account`,
            data: { points, reason }
        });

        res.json({ message: 'Points added successfully' });
    } catch (error) {
        console.error('Error adding points:', error);
        res.status(500).json({ message: 'Error adding points' });
    }
};

// Deduct loyalty points
exports.deductPoints = async (req, res) => {
    try {
        const { memberId } = req.params;
        const { points, reason, type } = req.body;

        const member = await User.findById(memberId);
        if (!member) {
            return res.status(404).json({ message: 'Member not found' });
        }

        if (member.loyalty.points < points) {
            return res.status(400).json({ message: 'Insufficient points' });
        }

        // Deduct points
        member.loyalty.points -= points;
        await member.save();

        // Create loyalty program entry
        await LoyaltyProgram.create({
            user: memberId,
            hotel: member.loyalty.hotel,
            type,
            points: -points,
            description: reason,
            metadata: {
                previousPoints: member.loyalty.points + points,
                newPoints: member.loyalty.points
            }
        });

        // Notify member
        await notificationService.notifyUser(memberId, {
            type: 'LOYALTY_UPDATE',
            title: 'Points Deducted',
            message: `${points} points have been deducted from your account`,
            data: { points, reason }
        });

        res.json({ message: 'Points deducted successfully' });
    } catch (error) {
        console.error('Error deducting points:', error);
        res.status(500).json({ message: 'Error deducting points' });
    }
};

// Get tier list
exports.getTiers = async (req, res) => {
    try {
        const tiers = await Tier.find()
            .sort({ minimumPoints: 1 });

        res.json({
            success: true,
            data: tiers
        });
    } catch (error) {
        console.error('Error getting tiers:', error);
        res.status(500).json({ message: 'Error getting tiers' });
    }
};

// Get all tiers
exports.getAllTiers = async (req, res) => {
    try {
        const tiers = await Tier.find({ isActive: true }).sort('minimumPoints');
        res.json({
            success: true,
            data: tiers
        });
    } catch (error) {
        console.error('Error getting tiers:', error);
        res.status(500).json({ message: 'Error getting tiers' });
    }
};

// Create tier
exports.createTier = async (req, res) => {
    try {
        const { name, minimumPoints, pointsMultiplier, benefits, color, icon } = req.body;

        const tier = await Tier.create({
            name,
            minimumPoints,
            pointsMultiplier,
            benefits,
            color,
            icon
        });

        res.json({
            success: true,
            data: tier
        });
    } catch (error) {
        console.error('Error creating tier:', error);
        res.status(500).json({ message: 'Error creating tier' });
    }
};

// Update tier
exports.updateTier = async (req, res) => {
    try {
        const { id } = req.params;
        const { name, minimumPoints, pointsMultiplier, benefits, color, icon } = req.body;

        const tier = await Tier.findByIdAndUpdate(
            id,
            { name, minimumPoints, pointsMultiplier, benefits, color, icon },
            { new: true }
        );

        if (!tier) {
            return res.status(404).json({ message: 'Tier not found' });
        }

        res.json({
            success: true,
            data: tier
        });
    } catch (error) {
        console.error('Error updating tier:', error);
        res.status(500).json({ message: 'Error updating tier' });
    }
};

// Delete tier
exports.deleteTier = async (req, res) => {
    try {
        const { id } = req.params;

        // Check if tier is being used
        const membersUsingTier = await User.countDocuments({ 'loyalty.tier': id });
        if (membersUsingTier > 0) {
            return res.status(400).json({
                message: 'Cannot delete tier as it is currently assigned to members'
            });
        }

        const tier = await Tier.findByIdAndDelete(id);
        if (!tier) {
            return res.status(404).json({ message: 'Tier not found' });
        }

        res.json({
            success: true,
            message: 'Tier deleted successfully'
        });
    } catch (error) {
        console.error('Error deleting tier:', error);
        res.status(500).json({ message: 'Error deleting tier' });
    }
};

// Get rewards list
exports.getRewards = async (req, res) => {
    try {
        const rewards = await Reward.find()
            .sort({ pointsCost: 1 });

        res.json({
            success: true,
            data: rewards
        });
    } catch (error) {
        console.error('Error getting rewards:', error);
        res.status(500).json({ message: 'Error getting rewards' });
    }
};

// Get all rewards
exports.getAllRewards = async (req, res) => {
    try {
        const rewards = await Reward.find({ isActive: true })
            .populate('minimumTier')
            .sort('pointsCost');

        res.json({
            success: true,
            data: rewards
        });
    } catch (error) {
        console.error('Error getting rewards:', error);
        res.status(500).json({ message: 'Error getting rewards' });
    }
};

// Create reward
exports.createReward = async (req, res) => {
    try {
        const {
            name,
            description,
            pointsCost,
            type,
            discountValue,
            validityDays,
            minimumTier,
            termsAndConditions,
            maxRedemptionsPerUser
        } = req.body;

        const reward = await Reward.create({
            name,
            description,
            pointsCost,
            type,
            discountValue,
            validityDays,
            minimumTier,
            termsAndConditions,
            maxRedemptionsPerUser
        });

        res.json({
            success: true,
            data: reward
        });
    } catch (error) {
        console.error('Error creating reward:', error);
        res.status(500).json({ message: 'Error creating reward' });
    }
};

// Update reward
exports.updateReward = async (req, res) => {
    try {
        const { id } = req.params;
        const {
            name,
            description,
            pointsCost,
            type,
            discountValue,
            validityDays,
            minimumTier,
            termsAndConditions,
            maxRedemptionsPerUser,
            isActive
        } = req.body;

        const reward = await Reward.findByIdAndUpdate(
            id,
            {
                name,
                description,
                pointsCost,
                type,
                discountValue,
                validityDays,
                minimumTier,
                termsAndConditions,
                maxRedemptionsPerUser,
                isActive
            },
            { new: true }
        );

        if (!reward) {
            return res.status(404).json({ message: 'Reward not found' });
        }

        res.json({
            success: true,
            data: reward
        });
    } catch (error) {
        console.error('Error updating reward:', error);
        res.status(500).json({ message: 'Error updating reward' });
    }
};

// Delete reward
exports.deleteReward = async (req, res) => {
    try {
        const { id } = req.params;

        // Check if reward has any redemptions
        const reward = await Reward.findById(id);
        if (!reward) {
            return res.status(404).json({ message: 'Reward not found' });
        }

        if (reward.totalRedemptions > 0) {
            // Instead of deleting, mark as inactive
            reward.isActive = false;
            await reward.save();

            return res.json({
                success: true,
                message: 'Reward has been marked as inactive'
            });
        }

        await reward.remove();

        res.json({
            success: true,
            message: 'Reward deleted successfully'
        });
    } catch (error) {
        console.error('Error deleting reward:', error);
        res.status(500).json({ message: 'Error deleting reward' });
    }
};

================
File: src/controllers/admin/payment.controller.js
================
const Payment = require('../../models/Payment');
const Invoice = require('../../models/Invoice');
const Refund = require('../../models/Refund');
const PaymentSettings = require('../../models/PaymentSettings');
const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);

// Get all payments
exports.getAllPayments = async (req, res) => {
    try {
        const page = parseInt(req.query.page) || 1;
        const limit = parseInt(req.query.limit) || 10;
        const skip = (page - 1) * limit;

        // Build filter query
        const query = {};
        
        if (req.query.status) {
            query.status = req.query.status;
        }
        
        if (req.query.method) {
            query.paymentMethod = req.query.method;
        }

        // Get payments with pagination
        const [payments, total] = await Promise.all([
            Payment.find(query)
                .populate('booking')
                .populate('guest')
                .sort({ createdAt: -1 })
                .skip(skip)
                .limit(limit),
            Payment.countDocuments(query)
        ]);

        const totalPages = Math.ceil(total / limit);

        res.render('admin/payments/list', {
            title: 'Payment Transactions',
            payments,
            filters: {
                status: req.query.status,
                method: req.query.method
            },
            pagination: {
                page,
                totalPages,
                hasNext: page < totalPages,
                hasPrev: page > 1,
                nextPage: page + 1,
                prevPage: page - 1
            }
        });
    } catch (error) {
        console.error('Error fetching payments:', error);
        res.status(500).render('error', {
            message: 'Error fetching payments'
        });
    }
};

// Get payment details
exports.getPaymentDetails = async (req, res) => {
    try {
        const payment = await Payment.findById(req.params.id)
            .populate('booking')
            .populate('guest')
            .populate('refund');

        if (!payment) {
            return res.status(404).render('error', {
                message: 'Payment not found'
            });
        }

        // Get related invoice if exists
        const invoice = await Invoice.findOne({ payment: payment._id });

        res.render('admin/payments/details', {
            title: 'Payment Details',
            payment,
            invoice
        });
    } catch (error) {
        console.error('Error fetching payment details:', error);
        res.status(500).render('error', {
            message: 'Error fetching payment details'
        });
    }
};

// Create payment
exports.createPayment = async (req, res) => {
    try {
        const {
            bookingId,
            amount,
            paymentMethod,
            currency = 'usd'
        } = req.body;

        // Create payment intent with Stripe
        const paymentIntent = await stripe.paymentIntents.create({
            amount: amount * 100, // Convert to cents
            currency,
            payment_method: paymentMethod,
            confirmation_method: 'manual',
            confirm: true
        });

        // Create payment record
        const payment = await Payment.create({
            booking: bookingId,
            amount,
            currency,
            paymentMethod,
            status: 'completed',
            stripePaymentIntentId: paymentIntent.id,
            processedBy: req.user._id
        });

        // Create invoice
        await Invoice.create({
            payment: payment._id,
            booking: bookingId,
            amount,
            currency,
            status: 'paid',
            generatedBy: req.user._id
        });

        res.redirect(`/admin/payments/${payment._id}`);
    } catch (error) {
        console.error('Error creating payment:', error);
        res.status(500).render('error', {
            message: 'Error creating payment'
        });
    }
};

// Update payment
exports.updatePayment = async (req, res) => {
    try {
        const { status, notes } = req.body;

        const payment = await Payment.findById(req.params.id);
        if (!payment) {
            return res.status(404).render('error', {
                message: 'Payment not found'
            });
        }

        // Update payment
        payment.status = status;
        if (notes) {
            payment.notes = notes;
        }
        payment.lastModifiedBy = req.user._id;
        payment.lastModifiedAt = new Date();

        await payment.save();
        res.redirect(`/admin/payments/${payment._id}`);
    } catch (error) {
        console.error('Error updating payment:', error);
        res.status(500).render('error', {
            message: 'Error updating payment'
        });
    }
};

// Delete payment
exports.deletePayment = async (req, res) => {
    try {
        const payment = await Payment.findById(req.params.id);
        if (!payment) {
            return res.status(404).render('error', {
                message: 'Payment not found'
            });
        }

        // Check if payment can be deleted
        if (payment.status !== 'pending') {
            return res.status(400).render('error', {
                message: 'Only pending payments can be deleted'
            });
        }

        // Delete related invoice if exists
        await Invoice.deleteOne({ payment: payment._id });

        // Delete payment
        await payment.remove();
        res.redirect('/admin/payments');
    } catch (error) {
        console.error('Error deleting payment:', error);
        res.status(500).render('error', {
            message: 'Error deleting payment'
        });
    }
};

// Process refund
exports.processRefund = async (req, res) => {
    try {
        const payment = await Payment.findById(req.params.id);
        if (!payment) {
            return res.status(404).render('error', {
                message: 'Payment not found'
            });
        }

        // Process refund through Stripe
        const refund = await stripe.refunds.create({
            payment_intent: payment.stripePaymentIntentId,
            amount: req.body.amount * 100 // Convert to cents
        });

        // Create refund record
        const refundRecord = await Refund.create({
            payment: payment._id,
            amount: req.body.amount,
            reason: req.body.reason,
            stripeRefundId: refund.id,
            processedBy: req.user._id
        });

        // Update payment status
        payment.status = 'refunded';
        payment.refund = refundRecord._id;
        await payment.save();

        // Update invoice status
        await Invoice.findOneAndUpdate(
            { payment: payment._id },
            { status: 'refunded' }
        );

        res.redirect(`/admin/payments/${payment._id}`);
    } catch (error) {
        console.error('Error processing refund:', error);
        res.status(500).render('error', {
            message: 'Error processing refund'
        });
    }
};

// Get all refunds
exports.getAllRefunds = async (req, res) => {
    try {
        const page = parseInt(req.query.page) || 1;
        const limit = parseInt(req.query.limit) || 10;
        const skip = (page - 1) * limit;

        // Get refunds with pagination
        const [refunds, total] = await Promise.all([
            Refund.find()
                .populate({
                    path: 'payment',
                    populate: ['booking', 'guest']
                })
                .populate('processedBy')
                .sort({ createdAt: -1 })
                .skip(skip)
                .limit(limit),
            Refund.countDocuments()
        ]);

        const totalPages = Math.ceil(total / limit);

        res.render('admin/payments/refunds', {
            title: 'Refunds',
            refunds,
            pagination: {
                page,
                totalPages,
                hasNext: page < totalPages,
                hasPrev: page > 1,
                nextPage: page + 1,
                prevPage: page - 1
            }
        });
    } catch (error) {
        console.error('Error fetching refunds:', error);
        res.status(500).render('error', {
            message: 'Error fetching refunds'
        });
    }
};

// Get all invoices
exports.getAllInvoices = async (req, res) => {
    try {
        const page = parseInt(req.query.page) || 1;
        const limit = parseInt(req.query.limit) || 10;
        const skip = (page - 1) * limit;

        // Build filter query
        const query = {};
        
        if (req.query.status) {
            query.status = req.query.status;
        }

        // Get invoices with pagination
        const [invoices, total] = await Promise.all([
            Invoice.find(query)
                .populate('booking')
                .populate('guest')
                .populate('payment')
                .sort({ createdAt: -1 })
                .skip(skip)
                .limit(limit),
            Invoice.countDocuments(query)
        ]);

        const totalPages = Math.ceil(total / limit);

        res.render('admin/payments/invoices', {
            title: 'Invoices',
            invoices,
            filters: {
                status: req.query.status
            },
            pagination: {
                page,
                totalPages,
                hasNext: page < totalPages,
                hasPrev: page > 1,
                nextPage: page + 1,
                prevPage: page - 1
            }
        });
    } catch (error) {
        console.error('Error fetching invoices:', error);
        res.status(500).render('error', {
            message: 'Error fetching invoices'
        });
    }
};

// Get payment settings
exports.getPaymentSettings = async (req, res) => {
    try {
        // Fetch payment gateway settings, tax rates, etc.
        const settings = await PaymentSettings.findOne();
        
        res.render('admin/payments/settings', {
            title: 'Payment Settings',
            settings
        });
    } catch (error) {
        console.error('Error fetching payment settings:', error);
        res.status(500).render('error', {
            message: 'Error fetching payment settings'
        });
    }
};

// Update payment settings
exports.updatePaymentSettings = async (req, res) => {
    try {
        const {
            taxRate,
            currency,
            paymentMethods,
            stripePublicKey,
            stripeSecretKey
        } = req.body;

        const updatedSettings = await PaymentSettings.findOneAndUpdate(
            {},
            {
                taxRate,
                currency,
                paymentMethods,
                stripePublicKey,
                stripeSecretKey
            },
            { new: true, upsert: true }
        );

        res.redirect('/admin/payments/settings');
    } catch (error) {
        console.error('Error updating payment settings:', error);
        res.status(500).render('error', {
            message: 'Error updating payment settings'
        });
    }
};

================
File: src/controllers/admin/room-status.controller.js
================
const Room = require('../../models/Room');
const Hotel = require('../../models/Hotel');
const HousekeepingTask = require('../../models/HousekeepingTask');
const MaintenanceRequest = require('../../models/MaintenanceRequest');
const { sendNotification } = require('../../services/notification.service');

// Get room status dashboard
exports.getRoomStatusDashboard = async (req, res) => {
    try {
        const hotelId = req.query.hotelId;
        
        // Get all rooms with their current status
        const rooms = await Room.find({ hotel: hotelId })
            .populate('currentBooking')
            .populate('currentGuest')
            .populate({
                path: 'housekeepingStatus',
                populate: {
                    path: 'assignedTo',
                    select: 'name'
                }
            })
            .populate('maintenanceRequests')
            .lean();

        // Calculate statistics
        const stats = {
            total: rooms.length,
            occupied: rooms.filter(r => r.status === 'occupied').length,
            vacant: rooms.filter(r => r.status === 'vacant').length,
            dirty: rooms.filter(r => r.housekeepingStatus?.status === 'dirty').length,
            maintenance: rooms.filter(r => r.status === 'maintenance').length,
            outOfOrder: rooms.filter(r => r.status === 'out_of_order').length
        };

        // Group rooms by floor
        const roomsByFloor = rooms.reduce((acc, room) => {
            const floor = room.floor || 'Unassigned';
            if (!acc[floor]) acc[floor] = [];
            acc[floor].push(room);
            return acc;
        }, {});

        res.render('admin/rooms/status-dashboard', {
            title: 'Room Status Dashboard',
            stats,
            roomsByFloor,
            hotelId
        });
    } catch (error) {
        console.error('Error fetching room status:', error);
        res.status(500).render('error', {
            message: 'Error fetching room status'
        });
    }
};

// Update room status
exports.updateRoomStatus = async (req, res) => {
    try {
        const { roomId } = req.params;
        const { status, notes } = req.body;

        const room = await Room.findById(roomId);
        if (!room) {
            return res.status(404).json({
                success: false,
                message: 'Room not found'
            });
        }

        // Update room status
        room.status = status;
        room.statusNotes = notes;
        room.lastStatusUpdate = new Date();
        room.lastUpdatedBy = req.user._id;

        await room.save();

        // Create housekeeping task if room becomes dirty
        if (status === 'dirty') {
            const task = await HousekeepingTask.create({
                room: roomId,
                hotel: room.hotel,
                status: 'pending',
                priority: 'normal',
                type: 'room_cleaning',
                createdBy: req.user._id
            });

            // Auto-assign to available housekeeping staff
            await autoAssignHousekeepingTask(task._id);
        }

        // Notify relevant staff
        await sendStatusUpdateNotifications(room, status);

        res.json({
            success: true,
            message: 'Room status updated successfully'
        });
    } catch (error) {
        console.error('Error updating room status:', error);
        res.status(500).json({
            success: false,
            message: 'Error updating room status'
        });
    }
};

// Handle room upgrades
exports.handleRoomUpgrade = async (req, res) => {
    try {
        const { bookingId, newRoomId } = req.body;

        // Verify room availability
        const newRoom = await Room.findById(newRoomId);
        if (!newRoom || newRoom.status !== 'vacant') {
            return res.status(400).json({
                success: false,
                message: 'Selected room is not available for upgrade'
            });
        }

        // Process upgrade
        const booking = await Booking.findById(bookingId)
            .populate('room')
            .populate('user');

        if (!booking) {
            return res.status(404).json({
                success: false,
                message: 'Booking not found'
            });
        }

        const oldRoom = booking.room;
        
        // Update booking with new room
        booking.room = newRoomId;
        booking.upgrades.push({
            from: oldRoom._id,
            to: newRoomId,
            date: new Date(),
            by: req.user._id
        });

        await booking.save();

        // Update room statuses
        oldRoom.status = 'dirty';
        oldRoom.currentBooking = null;
        await oldRoom.save();

        newRoom.status = 'occupied';
        newRoom.currentBooking = bookingId;
        await newRoom.save();

        // Create housekeeping task for old room
        await HousekeepingTask.create({
            room: oldRoom._id,
            hotel: oldRoom.hotel,
            status: 'pending',
            priority: 'high',
            type: 'room_cleaning',
            createdBy: req.user._id
        });

        // Notify guest about upgrade
        await sendNotification({
            type: 'room_upgrade',
            user: booking.user._id,
            title: 'Room Upgraded',
            message: `Your room has been upgraded from ${oldRoom.number} to ${newRoom.number}`,
            data: {
                bookingId: booking._id,
                oldRoom: oldRoom.number,
                newRoom: newRoom.number
            }
        });

        res.json({
            success: true,
            message: 'Room upgrade processed successfully'
        });
    } catch (error) {
        console.error('Error processing room upgrade:', error);
        res.status(500).json({
            success: false,
            message: 'Error processing room upgrade'
        });
    }
};

// Helper function to auto-assign housekeeping tasks
async function autoAssignHousekeepingTask(taskId) {
    try {
        const task = await HousekeepingTask.findById(taskId)
            .populate('room');

        // Get available housekeeping staff
        const availableStaff = await User.find({
            role: 'housekeeping',
            status: 'active',
            currentTasks: { $lt: 5 } // Staff with less than 5 current tasks
        }).sort('currentTasks');

        if (availableStaff.length > 0) {
            // Assign to staff member with least current tasks
            const assignedTo = availableStaff[0]._id;
            
            task.assignedTo = assignedTo;
            task.status = 'assigned';
            await task.save();

            // Notify assigned staff
            await sendNotification({
                type: 'task_assignment',
                user: assignedTo,
                title: 'New Room Cleaning Task',
                message: `You have been assigned to clean room ${task.room.number}`,
                data: {
                    taskId: task._id,
                    roomNumber: task.room.number
                }
            });
        }
    } catch (error) {
        console.error('Error auto-assigning housekeeping task:', error);
    }
}

// Helper function to send status update notifications
async function sendStatusUpdateNotifications(room, status) {
    try {
        // Notify housekeeping supervisor for dirty rooms
        if (status === 'dirty') {
            const supervisors = await User.find({
                role: 'housekeeping_supervisor',
                status: 'active'
            });

            for (const supervisor of supervisors) {
                await sendNotification({
                    type: 'room_status',
                    user: supervisor._id,
                    title: 'Room Needs Cleaning',
                    message: `Room ${room.number} has been marked as dirty`,
                    data: {
                        roomId: room._id,
                        roomNumber: room.number
                    }
                });
            }
        }

        // Notify maintenance for rooms under maintenance
        if (status === 'maintenance') {
            const maintenanceStaff = await User.find({
                role: 'maintenance',
                status: 'active'
            });

            for (const staff of maintenanceStaff) {
                await sendNotification({
                    type: 'room_status',
                    user: staff._id,
                    title: 'Room Under Maintenance',
                    message: `Room ${room.number} requires maintenance`,
                    data: {
                        roomId: room._id,
                        roomNumber: room.number
                    }
                });
            }
        }
    } catch (error) {
        console.error('Error sending status update notifications:', error);
    }
}

================
File: src/controllers/admin/settings.controller.js
================
const User = require('../../models/User');
const Role = require('../../models/Role');
const Permission = require('../../models/Permission');
const Hotel = require('../../models/Hotel');
const SystemSettings = require('../../models/SystemSettings');
const bcrypt = require('bcryptjs');

// User Management
exports.getAllUsers = async (req, res) => {
    try {
        const users = await User.find()
            .populate('role')
            .sort({ createdAt: -1 });

        res.render('admin/settings/users', {
            users,
            pageTitle: 'User Management'
        });
    } catch (error) {
        console.error('Error fetching users:', error);
        res.status(500).json({ message: 'Error fetching users' });
    }
};

exports.createUser = async (req, res) => {
    try {
        const { name, email, password, roleId } = req.body;

        // Check if user exists
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        // Hash password
        const hashedPassword = await bcrypt.hash(password, 12);

        // Create user
        const user = await User.create({
            name,
            email,
            password: hashedPassword,
            role: roleId
        });

        res.json({ message: 'User created successfully' });
    } catch (error) {
        console.error('Error creating user:', error);
        res.status(500).json({ message: 'Error creating user' });
    }
};

exports.updateUser = async (req, res) => {
    try {
        const { name, email, roleId, isActive } = req.body;
        const userId = req.params.id;

        const updates = {
            name,
            email,
            role: roleId,
            isActive
        };

        // If password is provided, hash and update it
        if (req.body.password) {
            updates.password = await bcrypt.hash(req.body.password, 12);
        }

        const user = await User.findByIdAndUpdate(userId, updates, { new: true });

        res.json({ message: 'User updated successfully' });
    } catch (error) {
        console.error('Error updating user:', error);
        res.status(500).json({ message: 'Error updating user' });
    }
};

// Role Management
exports.getAllRoles = async (req, res) => {
    try {
        const roles = await Role.find().sort({ name: 1 });

        res.render('admin/settings/roles', {
            roles,
            pageTitle: 'Role Management'
        });
    } catch (error) {
        console.error('Error fetching roles:', error);
        res.status(500).json({ message: 'Error fetching roles' });
    }
};

exports.createRole = async (req, res) => {
    try {
        const { name, permissions } = req.body;

        const role = await Role.create({
            name,
            permissions
        });

        res.json({ message: 'Role created successfully' });
    } catch (error) {
        console.error('Error creating role:', error);
        res.status(500).json({ message: 'Error creating role' });
    }
};

exports.updateRole = async (req, res) => {
    try {
        const { name, permissions } = req.body;
        const roleId = req.params.id;

        const role = await Role.findByIdAndUpdate(
            roleId,
            { name, permissions },
            { new: true }
        );

        res.json({ message: 'Role updated successfully' });
    } catch (error) {
        console.error('Error updating role:', error);
        res.status(500).json({ message: 'Error updating role' });
    }
};

// Hotel Settings
exports.getHotelSettings = async (req, res) => {
    try {
        const hotel = await Hotel.findOne();

        res.render('admin/settings/hotel', {
            hotel,
            pageTitle: 'Hotel Settings'
        });
    } catch (error) {
        console.error('Error fetching hotel settings:', error);
        res.status(500).json({ message: 'Error fetching hotel settings' });
    }
};

exports.updateHotelSettings = async (req, res) => {
    try {
        const {
            name,
            address,
            phone,
            email,
            checkInTime,
            checkOutTime,
            policies,
            amenities
        } = req.body;

        const hotel = await Hotel.findOneAndUpdate(
            {},
            {
                name,
                address,
                phone,
                email,
                checkInTime,
                checkOutTime,
                policies,
                amenities
            },
            { new: true, upsert: true }
        );

        res.json({ message: 'Hotel settings updated successfully' });
    } catch (error) {
        console.error('Error updating hotel settings:', error);
        res.status(500).json({ message: 'Error updating hotel settings' });
    }
};

// System Settings
exports.getSystemSettings = async (req, res) => {
    try {
        const settings = await SystemSettings.findOne();

        res.render('admin/settings/system', {
            settings,
            pageTitle: 'System Settings'
        });
    } catch (error) {
        console.error('Error fetching system settings:', error);
        res.status(500).json({ message: 'Error fetching system settings' });
    }
};

exports.updateSystemSettings = async (req, res) => {
    try {
        const {
            emailSettings,
            smsSettings,
            backupSettings,
            maintenanceMode,
            systemLanguage,
            dateFormat,
            timeFormat
        } = req.body;

        const settings = await SystemSettings.findOneAndUpdate(
            {},
            {
                emailSettings,
                smsSettings,
                backupSettings,
                maintenanceMode,
                systemLanguage,
                dateFormat,
                timeFormat
            },
            { new: true, upsert: true }
        );

        res.json({ message: 'System settings updated successfully' });
    } catch (error) {
        console.error('Error updating system settings:', error);
        res.status(500).json({ message: 'Error updating system settings' });
    }
};

// Get all settings
exports.getSettings = async (req, res) => {
    try {
        const [systemSettings, roles, permissions, staff] = await Promise.all([
            SystemSettings.findOne(),
            Role.find().sort({ name: 1 }),
            Permission.find().sort({ name: 1 }),
            User.find({ role: { $ne: 'guest' } })
                .populate('role')
                .sort({ name: 1 })
        ]);

        res.json({
            system: systemSettings,
            roles,
            permissions,
            staff
        });
    } catch (error) {
        console.error('Error fetching settings:', error);
        res.status(500).json({ message: 'Error fetching settings' });
    }
};

// Update settings
exports.updateSettings = async (req, res) => {
    try {
        const {
            emailSettings,
            smsSettings,
            backupSettings,
            maintenanceMode,
            systemLanguage,
            dateFormat,
            timeFormat,
            currency,
            timezone
        } = req.body;

        const settings = await SystemSettings.findOneAndUpdate(
            {},
            {
                emailSettings,
                smsSettings,
                backupSettings,
                maintenanceMode,
                systemLanguage,
                dateFormat,
                timeFormat,
                currency,
                timezone,
                lastModifiedBy: req.user._id,
                lastModifiedAt: new Date()
            },
            { new: true, upsert: true }
        );

        res.json({
            message: 'Settings updated successfully',
            settings
        });
    } catch (error) {
        console.error('Error updating settings:', error);
        res.status(500).json({ message: 'Error updating settings' });
    }
};

// Get all roles
exports.getRoles = async (req, res) => {
    try {
        const roles = await Role.find()
            .populate('permissions')
            .sort({ name: 1 });

        res.json(roles);
    } catch (error) {
        console.error('Error fetching roles:', error);
        res.status(500).json({ message: 'Error fetching roles' });
    }
};

// Create role
exports.createRole = async (req, res) => {
    try {
        const { name, permissions, description } = req.body;

        // Check if role exists
        const existingRole = await Role.findOne({ name });
        if (existingRole) {
            return res.status(400).json({ message: 'Role already exists' });
        }

        const role = await Role.create({
            name,
            permissions,
            description,
            createdBy: req.user._id
        });

        res.json({
            message: 'Role created successfully',
            role
        });
    } catch (error) {
        console.error('Error creating role:', error);
        res.status(500).json({ message: 'Error creating role' });
    }
};

// Update role
exports.updateRole = async (req, res) => {
    try {
        const { name, permissions, description } = req.body;
        const roleId = req.params.id;

        const role = await Role.findByIdAndUpdate(
            roleId,
            {
                name,
                permissions,
                description,
                lastModifiedBy: req.user._id,
                lastModifiedAt: new Date()
            },
            { new: true }
        ).populate('permissions');

        if (!role) {
            return res.status(404).json({ message: 'Role not found' });
        }

        res.json({
            message: 'Role updated successfully',
            role
        });
    } catch (error) {
        console.error('Error updating role:', error);
        res.status(500).json({ message: 'Error updating role' });
    }
};

// Delete role
exports.deleteRole = async (req, res) => {
    try {
        const roleId = req.params.id;

        // Check if role is in use
        const usersWithRole = await User.countDocuments({ role: roleId });
        if (usersWithRole > 0) {
            return res.status(400).json({
                message: 'Cannot delete role as it is assigned to users'
            });
        }

        await Role.findByIdAndDelete(roleId);

        res.json({ message: 'Role deleted successfully' });
    } catch (error) {
        console.error('Error deleting role:', error);
        res.status(500).json({ message: 'Error deleting role' });
    }
};

// Get all permissions
exports.getPermissions = async (req, res) => {
    try {
        const permissions = await Permission.find().sort({ name: 1 });

        res.json(permissions);
    } catch (error) {
        console.error('Error fetching permissions:', error);
        res.status(500).json({ message: 'Error fetching permissions' });
    }
};

// Create permission
exports.createPermission = async (req, res) => {
    try {
        const { name, description, module } = req.body;

        // Check if permission exists
        const existingPermission = await Permission.findOne({ name });
        if (existingPermission) {
            return res.status(400).json({ message: 'Permission already exists' });
        }

        const permission = await Permission.create({
            name,
            description,
            module,
            createdBy: req.user._id
        });

        res.json({
            message: 'Permission created successfully',
            permission
        });
    } catch (error) {
        console.error('Error creating permission:', error);
        res.status(500).json({ message: 'Error creating permission' });
    }
};

// Update permission
exports.updatePermission = async (req, res) => {
    try {
        const { name, description, module } = req.body;
        const permissionId = req.params.id;

        const permission = await Permission.findByIdAndUpdate(
            permissionId,
            {
                name,
                description,
                module,
                lastModifiedBy: req.user._id,
                lastModifiedAt: new Date()
            },
            { new: true }
        );

        if (!permission) {
            return res.status(404).json({ message: 'Permission not found' });
        }

        res.json({
            message: 'Permission updated successfully',
            permission
        });
    } catch (error) {
        console.error('Error updating permission:', error);
        res.status(500).json({ message: 'Error updating permission' });
    }
};

// Delete permission
exports.deletePermission = async (req, res) => {
    try {
        const permissionId = req.params.id;

        // Check if permission is in use
        const rolesWithPermission = await Role.countDocuments({
            permissions: permissionId
        });
        if (rolesWithPermission > 0) {
            return res.status(400).json({
                message: 'Cannot delete permission as it is assigned to roles'
            });
        }

        await Permission.findByIdAndDelete(permissionId);

        res.json({ message: 'Permission deleted successfully' });
    } catch (error) {
        console.error('Error deleting permission:', error);
        res.status(500).json({ message: 'Error deleting permission' });
    }
};

// Get all staff
exports.getStaff = async (req, res) => {
    try {
        const staff = await User.find({ role: { $ne: 'guest' } })
            .populate('role')
            .sort({ name: 1 });

        res.json(staff);
    } catch (error) {
        console.error('Error fetching staff:', error);
        res.status(500).json({ message: 'Error fetching staff' });
    }
};

// Create staff
exports.createStaff = async (req, res) => {
    try {
        const { name, email, password, roleId, phone, department } = req.body;

        // Check if user exists
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'Email already in use' });
        }

        // Hash password
        const hashedPassword = await bcrypt.hash(password, 12);

        const staff = await User.create({
            name,
            email,
            password: hashedPassword,
            role: roleId,
            phone,
            department,
            createdBy: req.user._id
        });

        res.json({
            message: 'Staff member created successfully',
            staff: {
                ...staff.toObject(),
                password: undefined
            }
        });
    } catch (error) {
        console.error('Error creating staff:', error);
        res.status(500).json({ message: 'Error creating staff' });
    }
};

// Update staff
exports.updateStaff = async (req, res) => {
    try {
        const { name, email, roleId, phone, department, isActive } = req.body;
        const staffId = req.params.id;

        const updates = {
            name,
            email,
            role: roleId,
            phone,
            department,
            isActive,
            lastModifiedBy: req.user._id,
            lastModifiedAt: new Date()
        };

        // If password is provided, hash and update it
        if (req.body.password) {
            updates.password = await bcrypt.hash(req.body.password, 12);
        }

        const staff = await User.findByIdAndUpdate(staffId, updates, {
            new: true
        }).populate('role');

        if (!staff) {
            return res.status(404).json({ message: 'Staff member not found' });
        }

        res.json({
            message: 'Staff member updated successfully',
            staff: {
                ...staff.toObject(),
                password: undefined
            }
        });
    } catch (error) {
        console.error('Error updating staff:', error);
        res.status(500).json({ message: 'Error updating staff' });
    }
};

// Delete staff
exports.deleteStaff = async (req, res) => {
    try {
        const staffId = req.params.id;

        // Check if trying to delete self
        if (staffId === req.user._id.toString()) {
            return res.status(400).json({
                message: 'Cannot delete your own account'
            });
        }

        const staff = await User.findById(staffId);
        if (!staff) {
            return res.status(404).json({ message: 'Staff member not found' });
        }

        // Instead of deleting, mark as inactive
        staff.isActive = false;
        staff.lastModifiedBy = req.user._id;
        staff.lastModifiedAt = new Date();
        await staff.save();

        res.json({ message: 'Staff member deactivated successfully' });
    } catch (error) {
        console.error('Error deleting staff:', error);
        res.status(500).json({ message: 'Error deleting staff' });
    }
};

================
File: src/controllers/auth.controller.js
================
const jwt = require('jsonwebtoken');
const authService = require('../services/auth.service');
const emailService = require('../services/email.service');
const User = require('../models/User');
const LoyaltyProgram = require('../models/LoyaltyProgram');
const crypto = require('crypto-js');

// Cookie options
const cookieOptions = {
    httpOnly: true,
    secure: process.env.NODE_ENV === 'production',
    sameSite: 'lax',
    maxAge: 24 * 60 * 60 * 1000 // 24 hours
};

// Helper function to check if request wants JSON response
function wantsJson(req) {
    const accept = req.get('Accept') || '';
    return accept.includes('application/json');
}

/**
 * Register a new user
 * @route POST /auth/register
 * @access Public
 */
exports.register = async (req, res) => {
    try {
        const { name, email, password, role } = req.body;

        // Register user through auth service
        const { user, token } = await authService.register({
            name,
            email,
            password,
            role: role || 'guest', // Default role for registration
            joinLoyalty: true // Auto-enroll in loyalty program
        });

        // Set JWT as HTTP-only cookie
        res.cookie('token', token, cookieOptions);

        // If it's an API request
        if (wantsJson(req)) {
            return res.status(201).json({
                success: true,
                message: 'Registration successful',
                data: { user }
            });
        }

        // For web requests
        res.redirect('/auth/login?success=Registration successful! Please log in.');
    } catch (error) {
        console.error('Registration error:', error);

        // If it's an API request
        if (wantsJson(req)) {
            return res.status(400).json({
                success: false,
                message: error.message
            });
        }

        // For web requests
        res.render('auth/register', {
            title: 'Register',
            error: error.message
        });
    }
};

/**
 * Login user
 * @route POST /auth/login
 * @access Public
 */
exports.login = async (req, res) => {
    try {
        const { email, password } = req.body;
        
        if (!email || !password) {
            throw new Error('Please provide email and password');
        }

        // Login through auth service
        const { token, user } = await authService.login(email, password);
        
        // Set JWT as HTTP-only cookie
        res.cookie('token', token, cookieOptions);
        
        // If it's an API request
        if (wantsJson(req)) {
            return res.status(200).json({
                success: true,
                message: 'Login successful',
                data: { user }
            });
        }

        // For web requests, redirect based on role
        if (user.role === 'admin') {
            res.redirect('/admin/dashboard');
        } else {
            res.redirect('/');
        }
    } catch (error) {
        console.error('Login error:', error);

        // If it's an API request
        if (wantsJson(req)) {
            return res.status(401).json({
                success: false,
                message: error.message
            });
        }

        // For web requests
        res.render('auth/login', {
            title: 'Login',
            error: error.message
        });
    }
};

/**
 * Logout user
 * @route POST /auth/logout
 * @access Private
 */
exports.logout = async (req, res) => {
    // Clear the cookie
    res.cookie('token', 'none', {
        expires: new Date(Date.now() + 10 * 1000), // Expire in 10 seconds
        httpOnly: true
    });
    
    // If it's an API request
    if (wantsJson(req)) {
        return res.status(200).json({
            success: true,
            message: 'Logged out successfully'
        });
    }

    // For web requests
    res.redirect('/auth/login');
};

/**
 * Request password reset
 * @route POST /auth/forgot-password
 * @access Public
 */
exports.forgotPassword = async (req, res) => {
    try {
        const { email } = req.body;
        
        if (!email) {
            throw new Error('Please provide an email address');
        }

        // Find user by email
        const user = await User.findOne({ email });
        if (!user) {
            throw new Error('No account found with that email');
        }

        // Generate reset token
        const resetToken = crypto.lib.WordArray.random(32).toString();
        const resetTokenHash = crypto.SHA256(resetToken).toString();

        // Save reset token and expiry
        user.resetPasswordToken = resetTokenHash;
        user.resetPasswordExpires = Date.now() + 3600000; // 1 hour
        await user.save();

        // Send reset email
        await emailService.sendPasswordResetEmail(email, resetToken);

        // If it's an API request
        if (wantsJson(req)) {
            return res.status(200).json({
                success: true,
                message: 'Password reset email sent'
            });
        }

        // For web requests
        res.redirect('/auth/login?success=Password reset email sent');
    } catch (error) {
        console.error('Forgot password error:', error);
        
        // If it's an API request
        if (wantsJson(req)) {
            return res.status(400).json({
                success: false,
                message: error.message
            });
        }

        // For web requests
        res.render('auth/forgot-password', {
            title: 'Forgot Password',
            error: error.message
        });
    }
};

/**
 * Reset password using token
 * @route POST /auth/reset-password/:token
 * @access Public
 */
exports.resetPassword = async (req, res) => {
    try {
        const { token } = req.params;
        const { password, confirmPassword } = req.body;

        if (!password || !confirmPassword) {
            throw new Error('Please provide password and confirmation');
        }

        const tokenHash = crypto.SHA256(token).toString();

        // Validate password match
        if (password !== confirmPassword) {
            throw new Error('Passwords do not match');
        }

        // Find user with valid reset token
        const user = await User.findOne({
            resetPasswordToken: tokenHash,
            resetPasswordExpires: { $gt: Date.now() }
        });

        if (!user) {
            throw new Error('Password reset token is invalid or has expired');
        }

        // Update password and clear reset token
        user.password = password;
        user.resetPasswordToken = undefined;
        user.resetPasswordExpires = undefined;
        await user.save();

        // Send confirmation email
        await emailService.sendPasswordChangeEmail(user.email);

        // If it's an API request
        if (wantsJson(req)) {
            return res.status(200).json({
                success: true,
                message: 'Password reset successful'
            });
        }

        // For web requests
        res.redirect('/auth/login?success=Password reset successful. Please login with your new password.');
    } catch (error) {
        console.error('Reset password error:', error);
        
        // If it's an API request
        if (wantsJson(req)) {
            return res.status(400).json({
                success: false,
                message: error.message
            });
        }

        // For web requests
        res.render('auth/reset-password', {
            title: 'Reset Password',
            error: error.message,
            token: req.params.token
        });
    }
};

/**
 * Verify JWT token
 * @route GET /auth/verify-token
 * @access Private
 */
exports.verifyToken = async (req, res) => {
    return res.status(200).json({
        success: true,
        message: 'Token is valid',
        data: { user: req.user }
    });
};

module.exports = exports;

================
File: src/controllers/booking.controller.js
================
const Booking = require('../models/Booking');
const Hotel = require('../models/Hotel');
const Room = require('../models/Room');
const LoyaltyProgram = require('../models/LoyaltyProgram');
const { sendEmail } = require('../utils/email');

// Create a new booking
exports.createBooking = async (req, res) => {
    try {
        const {
            hotelId,
            roomId,
            checkIn,
            checkOut,
            guests,
            specialRequests
        } = req.body;

        // Validate dates
        const checkInDate = new Date(checkIn);
        const checkOutDate = new Date(checkOut);
        
        if (checkInDate < new Date() || checkOutDate <= checkInDate) {
            return res.status(400).json({
                success: false,
                message: 'Invalid dates'
            });
        }

        // Check if hotel exists
        const hotel = await Hotel.findById(hotelId);
        if (!hotel) {
            return res.status(404).json({
                success: false,
                message: 'Hotel not found'
            });
        }

        // Check if room exists
        const room = await Room.findById(roomId);
        if (!room) {
            return res.status(404).json({
                success: false,
                message: 'Room not found'
            });
        }

        // Check if room is available for the dates
        const existingBooking = await Booking.findOne({
            room: roomId,
            status: { $in: ['pending', 'confirmed', 'checked_in'] },
            $or: [
                {
                    checkIn: { $lte: checkOutDate },
                    checkOut: { $gte: checkInDate }
                }
            ]
        });

        if (existingBooking) {
            return res.status(400).json({
                success: false,
                message: 'Room is not available for these dates'
            });
        }

        // Calculate total price
        const nights = Math.ceil((checkOutDate - checkInDate) / (1000 * 60 * 60 * 24));
        const basePrice = nights * room.price;

        // Apply loyalty program discount if applicable
        let totalPrice = basePrice;
        const loyaltyProgram = await LoyaltyProgram.findOne({ user: req.user._id });
        let loyaltyDiscount = 0;

        if (loyaltyProgram) {
            // Apply tier-based discount
            switch (loyaltyProgram.tier) {
                case 'Platinum':
                    loyaltyDiscount = 0.15; // 15% discount
                    break;
                case 'Gold':
                    loyaltyDiscount = 0.10; // 10% discount
                    break;
                case 'Silver':
                    loyaltyDiscount = 0.05; // 5% discount
                    break;
            }
            totalPrice = basePrice * (1 - loyaltyDiscount);
        }

        // Create booking
        const booking = await Booking.create({
            user: req.user._id,
            hotel: hotelId,
            room: roomId,
            checkIn: checkInDate,
            checkOut: checkOutDate,
            guests,
            basePrice,
            loyaltyDiscount,
            totalPrice,
            specialRequests
        });

        await booking.populate([
            { path: 'hotel', select: 'name location' },
            { path: 'room', select: 'number type' }
        ]);

        // Add booking points to loyalty program
        if (loyaltyProgram) {
            const bookingPoints = Math.floor(totalPrice * process.env.POINTS_PER_DOLLAR);
            await loyaltyProgram.addPoints(bookingPoints, 'Booking completed', {
                bookingId: booking._id,
                hotelId: hotel._id,
                amount: totalPrice
            });

            // Check for tier upgrade
            await loyaltyProgram.checkAndUpdateTier();
        }

        // Send booking confirmation email
        await sendEmail({
            to: req.user.email,
            subject: 'Booking Confirmation',
            template: 'booking-confirmation',
            data: {
                booking,
                loyaltyInfo: loyaltyProgram ? {
                    tier: loyaltyProgram.tier,
                    points: loyaltyProgram.points,
                    discount: loyaltyDiscount * 100
                } : null
            }
        });

        res.status(201).json({
            success: true,
            message: 'Booking created successfully',
            data: booking
        });
    } catch (error) {
        console.error('Error creating booking:', error);
        res.status(500).json({
            success: false,
            message: 'Error creating booking',
            error: error.message
        });
    }
};

// Get all bookings for a user
exports.getUserBookings = async (req, res) => {
    try {
        const page = parseInt(req.query.page) || 1;
        const limit = parseInt(req.query.limit) || 10;
        const status = req.query.status;

        let query = { user: req.user._id };
        if (status) {
            query.status = status;
        }

        const bookings = await Booking.find(query)
            .populate('hotel', 'name location images')
            .populate('room', 'number type')
            .sort({ createdAt: -1 })
            .skip((page - 1) * limit)
            .limit(limit);

        const total = await Booking.countDocuments(query);

        // Get loyalty program info
        const loyaltyProgram = await LoyaltyProgram.findOne({ user: req.user._id });

        res.json({
            success: true,
            data: {
                bookings,
                page,
                totalPages: Math.ceil(total / limit),
                total,
                loyaltyInfo: loyaltyProgram ? {
                    tier: loyaltyProgram.tier,
                    points: loyaltyProgram.points,
                    nextTier: loyaltyProgram.getNextTier(),
                    pointsToNextTier: loyaltyProgram.getPointsToNextTier()
                } : null
            }
        });
    } catch (error) {
        console.error('Error fetching user bookings:', error);
        res.status(500).json({
            success: false,
            message: 'Error fetching bookings',
            error: error.message
        });
    }
};

// Get booking by ID
exports.getBookingById = async (req, res) => {
    try {
        const booking = await Booking.findById(req.params.id)
            .populate('hotel', 'name location images')
            .populate('room', 'number type')
            .populate('user', 'name email');

        if (!booking) {
            return res.status(404).json({
                success: false,
                message: 'Booking not found'
            });
        }

        // Check if user is authorized to view this booking
        if (!req.user.isAdmin && booking.user._id.toString() !== req.user._id.toString()) {
            return res.status(403).json({
                success: false,
                message: 'Not authorized to view this booking'
            });
        }

        // Get loyalty program info if it's the user's booking
        let loyaltyInfo = null;
        if (booking.user._id.toString() === req.user._id.toString()) {
            const loyaltyProgram = await LoyaltyProgram.findOne({ user: req.user._id });
            if (loyaltyProgram) {
                loyaltyInfo = {
                    tier: loyaltyProgram.tier,
                    points: loyaltyProgram.points,
                    nextTier: loyaltyProgram.getNextTier(),
                    pointsToNextTier: loyaltyProgram.getPointsToNextTier()
                };
            }
        }

        res.json({
            success: true,
            data: { booking, loyaltyInfo }
        });
    } catch (error) {
        console.error('Error fetching booking:', error);
        res.status(500).json({
            success: false,
            message: 'Error fetching booking',
            error: error.message
        });
    }
};

// Update booking status
exports.updateBookingStatus = async (req, res) => {
    try {
        const { status } = req.body;
        const booking = await Booking.findById(req.params.id)
            .populate('hotel', 'name')
            .populate('room', 'number');

        if (!booking) {
            return res.status(404).json({
                success: false,
                message: 'Booking not found'
            });
        }

        // Only admin can update status to 'confirmed' or 'completed'
        if (!req.user.isAdmin && ['confirmed', 'completed'].includes(status)) {
            return res.status(403).json({
                success: false,
                message: 'Not authorized to update booking status'
            });
        }

        // Users can only cancel their own bookings
        if (!req.user.isAdmin && status === 'cancelled' && 
            booking.user.toString() !== req.user._id.toString()) {
            return res.status(403).json({
                success: false,
                message: 'Not authorized to cancel this booking'
            });
        }

        const oldStatus = booking.status;
        booking.status = status;
        
        if (status === 'cancelled') {
            booking.cancellationReason = req.body.cancellationReason;
            
            // Handle loyalty points refund if cancelled
            const loyaltyProgram = await LoyaltyProgram.findOne({ user: booking.user });
            if (loyaltyProgram) {
                const refundPoints = Math.floor(booking.totalPrice * process.env.POINTS_PER_DOLLAR);
                await loyaltyProgram.addPoints(-refundPoints, 'Booking cancelled - points refunded', {
                    bookingId: booking._id,
                    hotelId: booking.hotel._id
                });
            }
        }

        await booking.save();

        // Send status update email
        await sendEmail({
            to: req.user.email,
            subject: `Booking ${status.charAt(0).toUpperCase() + status.slice(1)}`,
            template: 'booking-status-update',
            data: {
                booking,
                oldStatus,
                newStatus: status
            }
        });

        res.json({
            success: true,
            message: `Booking ${status} successfully`,
            data: booking
        });
    } catch (error) {
        console.error('Error updating booking status:', error);
        res.status(500).json({
            success: false,
            message: 'Error updating booking status',
            error: error.message
        });
    }
};

// Get hotel bookings (admin only)
exports.getHotelBookings = async (req, res) => {
    try {
        if (!req.user.isAdmin) {
            return res.status(403).json({
                success: false,
                message: 'Not authorized to view hotel bookings'
            });
        }

        const page = parseInt(req.query.page) || 1;
        const limit = parseInt(req.query.limit) || 10;
        const status = req.query.status;
        const search = req.query.search;

        let query = { hotel: req.params.hotelId };
        if (status) {
            query.status = status;
        }

        if (search) {
            query.$or = [
                { 'user.name': { $regex: search, $options: 'i' } },
                { 'user.email': { $regex: search, $options: 'i' } },
                { 'room.number': { $regex: search, $options: 'i' } }
            ];
        }

        const bookings = await Booking.find(query)
            .populate('user', 'name email')
            .populate('room', 'number type')
            .populate({
                path: 'user',
                populate: {
                    path: 'loyaltyProgram',
                    select: 'tier points'
                }
            })
            .sort({ checkIn: -1 })
            .skip((page - 1) * limit)
            .limit(limit);

        const total = await Booking.countDocuments(query);

        res.json({
            success: true,
            data: {
                bookings,
                page,
                totalPages: Math.ceil(total / limit),
                total
            }
        });
    } catch (error) {
        console.error('Error fetching hotel bookings:', error);
        res.status(500).json({
            success: false,
            message: 'Error fetching hotel bookings',
            error: error.message
        });
    }
};

================
File: src/controllers/channel-manager.controller.js
================
const OTAChannel = require('../models/OTAChannel');
const OTABooking = require('../models/OTABooking');
const OTAService = require('../services/ota.service');
const cacheService = require('../services/cache.service');

exports.getDashboard = async (req, res) => {
    try {
        // Get all channels for the hotel
        const channels = await OTAChannel.find({ hotel: req.hotel._id });

        // Get statistics for each channel
        const channelStats = await Promise.all(channels.map(async (channel) => {
            const stats = await OTABooking.aggregate([
                {
                    $match: {
                        channel: channel._id,
                        createdAt: {
                            $gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) // Last 30 days
                        }
                    }
                },
                {
                    $group: {
                        _id: null,
                        totalBookings: { $sum: 1 },
                        totalRevenue: {
                            $sum: { $cond: [{ $eq: ['$status', 'confirmed'] }, '$bookingDetails.otaPrice', 0] }
                        },
                        confirmedBookings: {
                            $sum: { $cond: [{ $eq: ['$status', 'confirmed'] }, 1, 0] }
                        }
                    }
                }
            ]);

            return {
                ...channel.toObject(),
                stats: stats[0] || { totalBookings: 0, totalRevenue: 0, confirmedBookings: 0 }
            };
        }));

        // Get recent activities
        const recentActivities = await OTAChannel.aggregate([
            { $match: { hotel: req.hotel._id } },
            { $unwind: '$syncLogs' },
            { $sort: { 'syncLogs.timestamp': -1 } },
            { $limit: 10 },
            {
                $project: {
                    type: '$syncLogs.type',
                    status: '$syncLogs.status',
                    message: '$syncLogs.message',
                    timestamp: '$syncLogs.timestamp',
                    channelName: '$name'
                }
            }
        ]);

        // Get booking statistics for chart
        const bookingStats = await getBookingStats(req.hotel._id);
        const revenueDistribution = await getRevenueDistribution(req.hotel._id);
        const conversionRates = await getConversionRates(req.hotel._id);

        res.render('admin/channel-manager/dashboard', {
            channels: channelStats,
            recentActivities,
            bookingStats,
            revenueDistribution,
            conversionRates
        });
    } catch (error) {
        console.error('Channel Manager Dashboard Error:', error);
        req.flash('error', 'Error loading channel manager dashboard');
        res.redirect('/admin/dashboard');
    }
};

exports.syncAllChannels = async (req, res) => {
    try {
        const channels = await OTAChannel.find({ hotel: req.hotel._id });
        
        // Start sync for each channel
        const syncPromises = channels.map(async (channel) => {
            const otaService = await OTAService.getChannelInstance(channel._id);
            await Promise.all([
                otaService.syncInventory(),
                otaService.syncPrices(),
                otaService.syncAvailability()
            ]);
        });

        await Promise.all(syncPromises);
        res.json({ success: true, message: 'Sync initiated for all channels' });
    } catch (error) {
        console.error('Sync All Channels Error:', error);
        res.status(500).json({ success: false, error: error.message });
    }
};

exports.updateAllRates = async (req, res) => {
    try {
        const channels = await OTAChannel.find({ hotel: req.hotel._id });
        
        // Update rates for each channel
        const updatePromises = channels.map(async (channel) => {
            const otaService = await OTAService.getChannelInstance(channel._id);
            await otaService.syncPrices();
        });

        await Promise.all(updatePromises);
        res.json({ success: true, message: 'Rates updated for all channels' });
    } catch (error) {
        console.error('Update All Rates Error:', error);
        res.status(500).json({ success: false, error: error.message });
    }
};

exports.checkNewBookings = async (req, res) => {
    try {
        const channels = await OTAChannel.find({ hotel: req.hotel._id });
        
        // Check bookings for each channel
        const checkPromises = channels.map(async (channel) => {
            const otaService = await OTAService.getChannelInstance(channel._id);
            const bookings = await otaService.getNewBookings();
            
            // Process each new booking
            for (const booking of bookings) {
                await otaService.handleOTABooking(booking);
            }
        });

        await Promise.all(checkPromises);
        res.json({ success: true, message: 'New bookings checked and processed' });
    } catch (error) {
        console.error('Check New Bookings Error:', error);
        res.status(500).json({ success: false, error: error.message });
    }
};

// Helper functions for statistics
async function getBookingStats(hotelId) {
    const last30Days = Array.from({ length: 30 }, (_, i) => {
        const date = new Date();
        date.setDate(date.getDate() - i);
        return date.toISOString().split('T')[0];
    }).reverse();

    const bookings = await OTABooking.aggregate([
        {
            $match: {
                hotel: hotelId,
                createdAt: {
                    $gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)
                }
            }
        },
        {
            $group: {
                _id: {
                    date: { $dateToString: { format: '%Y-%m-%d', date: '$createdAt' } },
                    channel: '$channel'
                },
                count: { $sum: 1 }
            }
        },
        {
            $lookup: {
                from: 'otachannels',
                localField: '_id.channel',
                foreignField: '_id',
                as: 'channelInfo'
            }
        }
    ]);

    // Format data for Chart.js
    const datasets = {};
    bookings.forEach(booking => {
        const channelName = booking.channelInfo[0]?.name || 'Unknown';
        if (!datasets[channelName]) {
            datasets[channelName] = last30Days.map(() => 0);
        }
        const dayIndex = last30Days.indexOf(booking._id.date);
        if (dayIndex !== -1) {
            datasets[channelName][dayIndex] = booking.count;
        }
    });

    return {
        labels: last30Days,
        datasets: Object.entries(datasets).map(([name, data]) => ({
            label: name,
            data,
            borderWidth: 1
        }))
    };
}

async function getRevenueDistribution(hotelId) {
    const revenue = await OTABooking.aggregate([
        {
            $match: {
                hotel: hotelId,
                status: 'confirmed',
                createdAt: {
                    $gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)
                }
            }
        },
        {
            $group: {
                _id: '$channel',
                total: { $sum: '$bookingDetails.otaPrice' }
            }
        },
        {
            $lookup: {
                from: 'otachannels',
                localField: '_id',
                foreignField: '_id',
                as: 'channelInfo'
            }
        }
    ]);

    return {
        labels: revenue.map(r => r.channelInfo[0]?.name || 'Unknown'),
        data: revenue.map(r => r.total),
        colors: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0']
    };
}

async function getConversionRates(hotelId) {
    const conversions = await OTABooking.aggregate([
        {
            $match: {
                hotel: hotelId,
                createdAt: {
                    $gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)
                }
            }
        },
        {
            $group: {
                _id: {
                    channel: '$channel',
                    date: { $dateToString: { format: '%Y-%m-%d', date: '$createdAt' } }
                },
                total: { $sum: 1 },
                confirmed: {
                    $sum: { $cond: [{ $eq: ['$status', 'confirmed'] }, 1, 0] }
                }
            }
        },
        {
            $lookup: {
                from: 'otachannels',
                localField: '_id.channel',
                foreignField: '_id',
                as: 'channelInfo'
            }
        }
    ]);

    const last30Days = Array.from({ length: 30 }, (_, i) => {
        const date = new Date();
        date.setDate(date.getDate() - i);
        return date.toISOString().split('T')[0];
    }).reverse();

    // Format data for Chart.js
    const datasets = {};
    conversions.forEach(conv => {
        const channelName = conv.channelInfo[0]?.name || 'Unknown';
        if (!datasets[channelName]) {
            datasets[channelName] = last30Days.map(() => 0);
        }
        const dayIndex = last30Days.indexOf(conv._id.date);
        if (dayIndex !== -1) {
            datasets[channelName][dayIndex] = (conv.confirmed / conv.total) * 100;
        }
    });

    return {
        labels: last30Days,
        datasets: Object.entries(datasets).map(([name, data]) => ({
            label: name,
            data,
            borderWidth: 1,
            fill: false
        }))
    };
}

module.exports = exports;

================
File: src/controllers/check-in-out.controller.js
================
const Booking = require('../models/Booking');
const Room = require('../models/Room');
const LoyaltyProgram = require('../models/LoyaltyProgram');
const { NotFoundError, ValidationError } = require('../utils/errors');
const { sendEmail } = require('../utils/email');

// Get check-ins page
exports.getCheckIns = async (req, res) => {
    try {
        const page = parseInt(req.query.page) || 1;
        const limit = parseInt(req.query.limit) || 10;
        const search = req.query.search || '';
        const skip = (page - 1) * limit;

        // Build query
        let query = {
            status: 'confirmed',
            checkIn: { $lte: new Date() }
        };

        if (search) {
            query.$or = [
                { 'user.name': { $regex: search, $options: 'i' } },
                { 'user.email': { $regex: search, $options: 'i' } },
                { 'room.number': { $regex: search, $options: 'i' } }
            ];
        }

        // Get bookings
        const [bookings, total] = await Promise.all([
            Booking.find(query)
                .populate('user', 'name email phone')
                .populate('room', 'number type')
                .populate('hotel', 'name')
                .sort('checkIn')
                .skip(skip)
                .limit(limit),
            Booking.countDocuments(query)
        ]);

        const totalPages = Math.ceil(total / limit);

        res.render('admin/check-in', {
            bookings,
            pagination: {
                page,
                totalPages,
                hasNext: page < totalPages,
                hasPrev: page > 1
            },
            search
        });
    } catch (error) {
        console.error('Error in getCheckIns:', error);
        res.status(500).render('error', {
            message: 'Error loading check-ins'
        });
    }
};

// Get check-outs page
exports.getCheckOuts = async (req, res) => {
    try {
        const page = parseInt(req.query.page) || 1;
        const limit = parseInt(req.query.limit) || 10;
        const search = req.query.search || '';
        const skip = (page - 1) * limit;

        // Build query
        let query = {
            status: 'checked_in',
            checkOut: { $lte: new Date() }
        };

        if (search) {
            query.$or = [
                { 'user.name': { $regex: search, $options: 'i' } },
                { 'user.email': { $regex: search, $options: 'i' } },
                { 'room.number': { $regex: search, $options: 'i' } }
            ];
        }

        // Get bookings
        const [bookings, total] = await Promise.all([
            Booking.find(query)
                .populate('user', 'name email phone')
                .populate('room', 'number type')
                .populate('hotel', 'name')
                .sort('checkOut')
                .skip(skip)
                .limit(limit),
            Booking.countDocuments(query)
        ]);

        const totalPages = Math.ceil(total / limit);

        res.render('admin/check-out', {
            bookings,
            pagination: {
                page,
                totalPages,
                hasNext: page < totalPages,
                hasPrev: page > 1
            },
            search
        });
    } catch (error) {
        console.error('Error in getCheckOuts:', error);
        res.status(500).render('error', {
            message: 'Error loading check-outs'
        });
    }
};

// Process check-in for a booking
exports.checkIn = async (req, res) => {
    try {
        const { bookingId } = req.params;
        const checkInData = req.body;

        const booking = await exports.processCheckIn(bookingId, checkInData);

        res.json({
            success: true,
            message: 'Check-in processed successfully',
            booking
        });
    } catch (error) {
        console.error('Error in checkIn:', error);
        if (error instanceof NotFoundError || error instanceof ValidationError) {
            res.status(400).json({
                success: false,
                message: error.message
            });
        } else {
            res.status(500).json({
                success: false,
                message: 'Error processing check-in'
            });
        }
    }
};

// Process check-out for a booking
exports.checkOut = async (req, res) => {
    try {
        const { bookingId } = req.params;
        const checkOutData = req.body;

        const booking = await exports.processCheckOut(bookingId, checkOutData);

        res.json({
            success: true,
            message: 'Check-out processed successfully',
            booking
        });
    } catch (error) {
        console.error('Error in checkOut:', error);
        if (error instanceof NotFoundError || error instanceof ValidationError) {
            res.status(400).json({
                success: false,
                message: error.message
            });
        } else {
            res.status(500).json({
                success: false,
                message: 'Error processing check-out'
            });
        }
    }
};

// Process check-in
exports.processCheckIn = async (bookingId, checkInData) => {
    const booking = await Booking.findById(bookingId)
        .populate('user')
        .populate('room')
        .populate('hotel');

    if (!booking) {
        throw new NotFoundError('Booking not found');
    }

    if (booking.status !== 'confirmed') {
        throw new ValidationError('Only confirmed bookings can be checked in');
    }

    // Verify payment status
    if (booking.paymentStatus !== 'paid') {
        throw new ValidationError('Payment must be completed before check-in');
    }

    // Verify check-in date
    const today = new Date();
    const checkInDate = new Date(booking.checkIn);
    if (today < checkInDate.setHours(0, 0, 0, 0)) {
        throw new ValidationError('Cannot check in before scheduled check-in date');
    }

    // Update room status
    await Room.findByIdAndUpdate(booking.room._id, { isAvailable: false });

    // Update booking status
    booking.status = 'checked_in';
    await booking.save();

    // Award loyalty points for check-in
    const loyaltyProgram = await LoyaltyProgram.findOne({ user: booking.user._id });
    if (loyaltyProgram) {
        await loyaltyProgram.addPoints(50, 'Check-in completed', {
            bookingId: booking._id,
            hotelId: booking.hotel._id
        });
    }

    // Send welcome notification
    await sendEmail({
        userId: booking.user._id,
        type: 'check_in_completed',
        title: 'Welcome to ' + booking.hotel.name,
        message: `Your room ${booking.room.number} is ready. Enjoy your stay!`,
        data: { bookingId: booking._id }
    });

    return booking;
};

// Process check-out
exports.processCheckOut = async (bookingId, checkOutData) => {
    const booking = await Booking.findById(bookingId)
        .populate('user')
        .populate('room')
        .populate('hotel');

    if (!booking) {
        throw new NotFoundError('Booking not found');
    }

    if (booking.status !== 'checked_in') {
        throw new ValidationError('Only checked-in bookings can be checked out');
    }

    // Calculate any additional charges
    const additionalCharges = checkOutData.additionalCharges || [];
    const totalAdditionalCharges = additionalCharges.reduce((total, charge) => total + charge.amount, 0);

    // Update room status
    await Room.findByIdAndUpdate(booking.room._id, { 
        isAvailable: true,
        needsCleaning: true
    });

    // Update booking status
    booking.status = 'completed';
    booking.additionalCharges = additionalCharges;
    booking.totalPrice += totalAdditionalCharges;
    await booking.save();

    // Create housekeeping task
    const HousekeepingTask = require('../models/HousekeepingTask');
    await HousekeepingTask.create({
        room: booking.room._id,
        description: `Post-checkout cleaning for room ${booking.room.number}`,
        priority: 'high',
        scheduledDate: new Date(),
        checklist: [
            { item: 'Change linens' },
            { item: 'Clean bathroom' },
            { item: 'Vacuum/sweep floors' },
            { item: 'Dust surfaces' },
            { item: 'Restock amenities' }
        ]
    });

    // Award loyalty points for check-out
    const loyaltyProgram = await LoyaltyProgram.findOne({ user: booking.user._id });
    if (loyaltyProgram) {
        // Award points based on stay duration and booking amount
        const stayDuration = Math.ceil((new Date() - new Date(booking.checkIn)) / (1000 * 60 * 60 * 24));
        const pointsEarned = Math.floor(booking.totalPrice * process.env.POINTS_PER_DOLLAR) + (stayDuration * 100);
        
        await loyaltyProgram.addPoints(pointsEarned, 'Stay completed', {
            bookingId: booking._id,
            hotelId: booking.hotel._id,
            duration: stayDuration,
            amount: booking.totalPrice
        });

        // Check for tier upgrade
        await loyaltyProgram.checkAndUpdateTier();
    }

    // Send thank you notification
    await sendEmail({
        userId: booking.user._id,
        type: 'check_out_completed',
        title: 'Thank you for staying with us',
        message: `We hope you enjoyed your stay at ${booking.hotel.name}. Safe travels!`,
        data: { bookingId: booking._id }
    });

    return booking;
};

// Get check-in details
exports.getCheckInDetails = async (bookingId) => {
    const booking = await Booking.findById(bookingId)
        .populate('user')
        .populate('room')
        .populate('hotel');

    if (!booking) {
        throw new NotFoundError('Booking not found');
    }

    // Get loyalty program status
    const loyaltyProgram = await LoyaltyProgram.findOne({ user: booking.user._id });
    
    return {
        booking,
        loyaltyStatus: loyaltyProgram ? {
            tier: loyaltyProgram.tier,
            points: loyaltyProgram.points,
            nextTier: loyaltyProgram.getNextTier(),
            pointsToNextTier: loyaltyProgram.getPointsToNextTier()
        } : null
    };
};

// Get check-out details
exports.getCheckOutDetails = async (bookingId) => {
    const booking = await Booking.findById(bookingId)
        .populate('user')
        .populate('room')
        .populate('hotel');

    if (!booking) {
        throw new NotFoundError('Booking not found');
    }

    // Calculate stay duration
    const checkIn = new Date(booking.checkIn);
    const now = new Date();
    const stayDuration = Math.ceil((now - checkIn) / (1000 * 60 * 60 * 24));

    // Get loyalty program status
    const loyaltyProgram = await LoyaltyProgram.findOne({ user: booking.user._id });
    
    // Calculate potential points
    const potentialPoints = Math.floor(booking.totalPrice * process.env.POINTS_PER_DOLLAR) + (stayDuration * 100);

    return {
        booking,
        stayDuration,
        loyaltyStatus: loyaltyProgram ? {
            tier: loyaltyProgram.tier,
            points: loyaltyProgram.points,
            potentialPoints,
            nextTier: loyaltyProgram.getNextTier(),
            pointsToNextTier: loyaltyProgram.getPointsToNextTier()
        } : null
    };
};

================
File: src/controllers/checkInOut.controller.js
================
const CheckInOut = require('../models/CheckInOut');
const Booking = require('../models/Booking');
const Room = require('../models/Room');
const { sendEmail } = require('../utils/email');

// Generate a unique key card number
const generateKeyCardNumber = async () => {
    const prefix = 'KC';
    const randomNum = Math.floor(10000 + Math.random() * 90000);
    const keyCardNumber = `${prefix}${randomNum}`;
    
    const existing = await CheckInOut.findOne({ keyCardNumber });
    if (existing) {
        return generateKeyCardNumber();
    }
    return keyCardNumber;
};

// Check-in a guest
exports.checkIn = async (req, res) => {
    try {
        const { bookingId } = req.params;
        const { additionalGuests, vehicleInfo, specialRequests } = req.body;

        // Find booking and validate
        const booking = await Booking.findById(bookingId)
            .populate('roomId')
            .populate('guestId');

        if (!booking) {
            return res.status(404).json({
                success: false,
                message: 'Booking not found'
            });
        }

        if (booking.status !== 'confirmed') {
            return res.status(400).json({
                success: false,
                message: 'Booking must be confirmed for check-in'
            });
        }

        // Generate key card number
        const keyCardNumber = await generateKeyCardNumber();

        // Create check-in record
        const checkIn = await CheckInOut.create({
            bookingId,
            guestId: booking.guestId._id,
            roomId: booking.roomId._id,
            checkInTime: new Date(),
            status: 'checked-in',
            keyCardNumber,
            additionalGuests,
            vehicleInfo,
            specialRequests,
            createdBy: req.user._id
        });

        // Update booking status
        booking.status = 'checked-in';
        await booking.save();

        // Update room status
        await Room.findByIdAndUpdate(booking.roomId._id, {
            status: 'occupied',
            currentGuest: booking.guestId._id
        });

        // Send welcome email to guest
        await sendEmail({
            to: booking.guestId.email,
            subject: 'Welcome to Our Hotel',
            template: 'welcome',
            context: {
                guestName: booking.guestId.name,
                roomNumber: booking.roomId.number,
                keyCardNumber,
                checkInTime: checkIn.checkInTime
            }
        });

        res.status(200).json({
            success: true,
            data: checkIn
        });
    } catch (error) {
        console.error('Check-in error:', error);
        res.status(500).json({
            success: false,
            message: 'Error processing check-in'
        });
    }
};

// Check-out a guest
exports.checkOut = async (req, res) => {
    try {
        const { bookingId } = req.params;
        const { notes } = req.body;

        // Find check-in record
        const checkInRecord = await CheckInOut.findOne({ bookingId })
            .populate('bookingId')
            .populate('roomId');

        if (!checkInRecord || checkInRecord.status !== 'checked-in') {
            return res.status(400).json({
                success: false,
                message: 'No active check-in found for this booking'
            });
        }

        // Update check-in record
        checkInRecord.status = 'checked-out';
        checkInRecord.checkOutTime = new Date();
        checkInRecord.notes = notes;
        checkInRecord.updatedBy = req.user._id;
        await checkInRecord.save();

        // Update booking status
        await Booking.findByIdAndUpdate(bookingId, {
            status: 'completed'
        });

        // Update room status
        await Room.findByIdAndUpdate(checkInRecord.roomId._id, {
            status: 'needs-cleaning',
            currentGuest: null
        });

        // Create housekeeping task
        await createHousekeepingTask(checkInRecord.roomId._id);

        res.status(200).json({
            success: true,
            data: checkInRecord
        });
    } catch (error) {
        console.error('Check-out error:', error);
        res.status(500).json({
            success: false,
            message: 'Error processing check-out'
        });
    }
};

// Get check-in/out details
exports.getCheckInOutDetails = async (req, res) => {
    try {
        const { bookingId } = req.params;
        
        const checkInOut = await CheckInOut.findOne({ bookingId })
            .populate('bookingId')
            .populate('guestId')
            .populate('roomId')
            .populate('createdBy', 'name')
            .populate('updatedBy', 'name');

        if (!checkInOut) {
            return res.status(404).json({
                success: false,
                message: 'Check-in/out record not found'
            });
        }

        res.status(200).json({
            success: true,
            data: checkInOut
        });
    } catch (error) {
        console.error('Error fetching check-in/out details:', error);
        res.status(500).json({
            success: false,
            message: 'Error fetching check-in/out details'
        });
    }
};

// Helper function to create housekeeping task
const createHousekeepingTask = async (roomId) => {
    try {
        const Housekeeping = require('../models/Housekeeping');
        await Housekeeping.create({
            roomId,
            type: 'checkout-cleaning',
            status: 'pending',
            priority: 'high'
        });
    } catch (error) {
        console.error('Error creating housekeeping task:', error);
    }
};

================
File: src/controllers/corporate.controller.js
================
const CorporateAccount = require('../models/CorporateAccount');
const asyncHandler = require('../middleware/asyncHandler');
const ErrorResponse = require('../utils/errorResponse');

// @desc    Create corporate account
// @route   POST /api/corporate
// @access  Private/Admin
exports.createCorporateAccount = asyncHandler(async (req, res) => {
    const corporateAccount = await CorporateAccount.create(req.body);
    res.status(201).json({
        success: true,
        data: corporateAccount
    });
});

// @desc    Get all corporate accounts
// @route   GET /api/corporate
// @access  Private/Admin
exports.getCorporateAccounts = asyncHandler(async (req, res) => {
    const { page = 1, limit = 10, status, search } = req.query;
    const query = {};

    if (status) {
        query.status = status;
    }

    if (search) {
        query.$or = [
            { companyName: { $regex: search, $options: 'i' } },
            { 'contactPerson.email': { $regex: search, $options: 'i' } }
        ];
    }

    const accounts = await CorporateAccount.find(query)
        .limit(limit * 1)
        .skip((page - 1) * limit)
        .sort({ createdAt: -1 });

    const total = await CorporateAccount.countDocuments(query);

    res.status(200).json({
        success: true,
        data: accounts,
        pagination: {
            total,
            page: parseInt(page),
            pages: Math.ceil(total / limit)
        }
    });
});

// @desc    Get single corporate account
// @route   GET /api/corporate/:id
// @access  Private/Admin
exports.getCorporateAccount = asyncHandler(async (req, res) => {
    const account = await CorporateAccount.findById(req.params.id);
    if (!account) {
        throw new ErrorResponse('Corporate account not found', 404);
    }
    res.status(200).json({
        success: true,
        data: account
    });
});

// @desc    Update corporate account
// @route   PUT /api/corporate/:id
// @access  Private/Admin
exports.updateCorporateAccount = asyncHandler(async (req, res) => {
    let account = await CorporateAccount.findById(req.params.id);
    if (!account) {
        throw new ErrorResponse('Corporate account not found', 404);
    }

    account = await CorporateAccount.findByIdAndUpdate(
        req.params.id,
        req.body,
        {
            new: true,
            runValidators: true
        }
    );

    res.status(200).json({
        success: true,
        data: account
    });
});

// @desc    Delete corporate account
// @route   DELETE /api/corporate/:id
// @access  Private/Admin
exports.deleteCorporateAccount = asyncHandler(async (req, res) => {
    const account = await CorporateAccount.findById(req.params.id);
    if (!account) {
        throw new ErrorResponse('Corporate account not found', 404);
    }

    await account.remove();

    res.status(200).json({
        success: true,
        data: {}
    });
});

// @desc    Get corporate account rate for room
// @route   GET /api/corporate/:id/rate/:roomType
// @access  Private
exports.getCorporateRate = asyncHandler(async (req, res) => {
    const { id, roomType } = req.params;
    const { date } = req.query;

    const account = await CorporateAccount.findById(id);
    if (!account) {
        throw new ErrorResponse('Corporate account not found', 404);
    }

    const baseRate = 100; // This should come from your room rates
    const corporateRate = account.calculateRate(roomType, baseRate, new Date(date));

    res.status(200).json({
        success: true,
        data: {
            baseRate,
            corporateRate,
            discount: ((baseRate - corporateRate) / baseRate * 100).toFixed(2)
        }
    });
});

================
File: src/controllers/financial.controller.js
================
const Booking = require('../models/Booking');
const Payment = require('../models/Payment');
const LoyaltyProgram = require('../models/LoyaltyProgram');
const Room = require('../models/Room');
const { startOfDay, endOfDay, startOfMonth, endOfMonth, subMonths } = require('date-fns');

// Get revenue overview
exports.getRevenueOverview = async (hotelId, dateRange) => {
    const startDate = dateRange.start ? new Date(dateRange.start) : startOfMonth(new Date());
    const endDate = dateRange.end ? new Date(dateRange.end) : endOfMonth(new Date());

    const [
        totalRevenue,
        roomRevenue,
        additionalCharges,
        loyaltyRedemptions,
        paymentMethodStats,
        dailyRevenue
    ] = await Promise.all([
        // Total revenue
        Payment.aggregate([
            {
                $match: {
                    status: 'completed',
                    createdAt: { $gte: startDate, $lte: endDate }
                }
            },
            {
                $group: {
                    _id: null,
                    total: { $sum: '$amount' }
                }
            }
        ]),

        // Room revenue breakdown
        Booking.aggregate([
            {
                $match: {
                    status: 'completed',
                    checkOut: { $gte: startDate, $lte: endDate }
                }
            },
            {
                $group: {
                    _id: '$room',
                    revenue: { $sum: '$totalPrice' }
                }
            },
            {
                $lookup: {
                    from: 'rooms',
                    localField: '_id',
                    foreignField: '_id',
                    as: 'roomDetails'
                }
            }
        ]),

        // Additional charges revenue
        Payment.aggregate([
            {
                $match: {
                    status: 'completed',
                    createdAt: { $gte: startDate, $lte: endDate },
                    'metadata.type': 'additional_charge'
                }
            },
            {
                $group: {
                    _id: '$metadata.chargeType',
                    total: { $sum: '$amount' }
                }
            }
        ]),

        // Loyalty points redemptions
        Payment.aggregate([
            {
                $match: {
                    status: 'completed',
                    createdAt: { $gte: startDate, $lte: endDate },
                    method: 'loyalty_points'
                }
            },
            {
                $group: {
                    _id: null,
                    total: { $sum: '$amount' },
                    count: { $sum: 1 }
                }
            }
        ]),

        // Payment method statistics
        Payment.aggregate([
            {
                $match: {
                    status: 'completed',
                    createdAt: { $gte: startDate, $lte: endDate }
                }
            },
            {
                $group: {
                    _id: '$method',
                    total: { $sum: '$amount' },
                    count: { $sum: 1 }
                }
            }
        ]),

        // Daily revenue
        Payment.aggregate([
            {
                $match: {
                    status: 'completed',
                    createdAt: { $gte: startDate, $lte: endDate }
                }
            },
            {
                $group: {
                    _id: {
                        $dateToString: { format: '%Y-%m-%d', date: '$createdAt' }
                    },
                    total: { $sum: '$amount' }
                }
            },
            { $sort: { '_id': 1 } }
        ])
    ]);

    return {
        totalRevenue: totalRevenue[0]?.total || 0,
        roomRevenue,
        additionalCharges,
        loyaltyRedemptions: loyaltyRedemptions[0] || { total: 0, count: 0 },
        paymentMethodStats,
        dailyRevenue
    };
};

// Get occupancy report
exports.getOccupancyReport = async (hotelId, dateRange) => {
    const startDate = dateRange.start ? new Date(dateRange.start) : startOfMonth(new Date());
    const endDate = dateRange.end ? new Date(dateRange.end) : endOfMonth(new Date());

    const [
        totalRooms,
        occupancyStats,
        revenuePerRoom,
        averageStayDuration
    ] = await Promise.all([
        // Total rooms
        Room.countDocuments({ hotel: hotelId }),

        // Occupancy statistics
        Booking.aggregate([
            {
                $match: {
                    status: { $in: ['confirmed', 'checked_in', 'completed'] },
                    checkIn: { $lte: endDate },
                    checkOut: { $gte: startDate }
                }
            },
            {
                $group: {
                    _id: {
                        $dateToString: { format: '%Y-%m-%d', date: '$checkIn' }
                    },
                    occupiedRooms: { $sum: 1 }
                }
            },
            { $sort: { '_id': 1 } }
        ]),

        // Revenue per available room
        Payment.aggregate([
            {
                $match: {
                    status: 'completed',
                    createdAt: { $gte: startDate, $lte: endDate }
                }
            },
            {
                $lookup: {
                    from: 'bookings',
                    localField: 'booking',
                    foreignField: '_id',
                    as: 'bookingDetails'
                }
            },
            {
                $unwind: '$bookingDetails'
            },
            {
                $group: {
                    _id: '$bookingDetails.room',
                    revenue: { $sum: '$amount' }
                }
            }
        ]),

        // Average stay duration
        Booking.aggregate([
            {
                $match: {
                    status: 'completed',
                    checkOut: { $gte: startDate, $lte: endDate }
                }
            },
            {
                $project: {
                    duration: {
                        $divide: [
                            { $subtract: ['$checkOut', '$checkIn'] },
                            1000 * 60 * 60 * 24 // Convert to days
                        ]
                    }
                }
            },
            {
                $group: {
                    _id: null,
                    averageDuration: { $avg: '$duration' }
                }
            }
        ])
    ]);

    // Calculate occupancy rate
    const occupancyRate = occupancyStats.map(stat => ({
        date: stat._id,
        rate: (stat.occupiedRooms / totalRooms) * 100
    }));

    // Calculate RevPAR (Revenue per available room)
    const revpar = revenuePerRoom.map(room => ({
        roomId: room._id,
        revenue: room.revenue,
        revpar: room.revenue / totalRooms
    }));

    return {
        totalRooms,
        occupancyRate,
        revpar,
        averageStayDuration: averageStayDuration[0]?.averageDuration || 0
    };
};

// Get tax report
exports.getTaxReport = async (hotelId, dateRange) => {
    const startDate = dateRange.start ? new Date(dateRange.start) : startOfMonth(new Date());
    const endDate = dateRange.end ? new Date(dateRange.end) : endOfMonth(new Date());

    const [
        taxableRevenue,
        taxByCategory,
        refundedTaxes
    ] = await Promise.all([
        // Taxable revenue
        Payment.aggregate([
            {
                $match: {
                    status: 'completed',
                    createdAt: { $gte: startDate, $lte: endDate }
                }
            },
            {
                $group: {
                    _id: null,
                    totalAmount: { $sum: '$amount' },
                    taxableAmount: {
                        $sum: {
                            $cond: [
                                { $ne: ['$metadata.taxExempt', true] },
                                '$amount',
                                0
                            ]
                        }
                    }
                }
            }
        ]),

        // Tax by category
        Payment.aggregate([
            {
                $match: {
                    status: 'completed',
                    createdAt: { $gte: startDate, $lte: endDate }
                }
            },
            {
                $group: {
                    _id: '$metadata.taxCategory',
                    totalTax: { $sum: '$metadata.taxAmount' }
                }
            }
        ]),

        // Refunded taxes
        Payment.aggregate([
            {
                $match: {
                    status: 'refunded',
                    createdAt: { $gte: startDate, $lte: endDate }
                }
            },
            {
                $group: {
                    _id: null,
                    totalRefundedTax: { $sum: '$metadata.taxAmount' }
                }
            }
        ])
    ]);

    return {
        taxableRevenue: taxableRevenue[0] || { totalAmount: 0, taxableAmount: 0 },
        taxByCategory,
        refundedTaxes: refundedTaxes[0]?.totalRefundedTax || 0
    };
};

// Get loyalty program financial impact
exports.getLoyaltyFinancialReport = async (hotelId, dateRange) => {
    const startDate = dateRange.start ? new Date(dateRange.start) : startOfMonth(new Date());
    const endDate = dateRange.end ? new Date(dateRange.end) : endOfMonth(new Date());

    const [
        pointsIssued,
        pointsRedeemed,
        tierWiseRevenue,
        referralRevenue
    ] = await Promise.all([
        // Points issued
        LoyaltyProgram.aggregate([
            {
                $unwind: '$pointsHistory'
            },
            {
                $match: {
                    'pointsHistory.date': { $gte: startDate, $lte: endDate },
                    'pointsHistory.type': 'earned'
                }
            },
            {
                $group: {
                    _id: '$pointsHistory.source',
                    totalPoints: { $sum: '$pointsHistory.points' }
                }
            }
        ]),

        // Points redeemed
        LoyaltyProgram.aggregate([
            {
                $unwind: '$pointsHistory'
            },
            {
                $match: {
                    'pointsHistory.date': { $gte: startDate, $lte: endDate },
                    'pointsHistory.type': 'redeemed'
                }
            },
            {
                $group: {
                    _id: '$pointsHistory.source',
                    totalPoints: { $sum: '$pointsHistory.points' }
                }
            }
        ]),

        // Revenue by loyalty tier
        Booking.aggregate([
            {
                $match: {
                    status: 'completed',
                    checkOut: { $gte: startDate, $lte: endDate }
                }
            },
            {
                $lookup: {
                    from: 'loyaltyprograms',
                    localField: 'user',
                    foreignField: 'user',
                    as: 'loyalty'
                }
            },
            {
                $unwind: {
                    path: '$loyalty',
                    preserveNullAndEmptyArrays: true
                }
            },
            {
                $group: {
                    _id: '$loyalty.tier',
                    revenue: { $sum: '$totalPrice' },
                    bookings: { $sum: 1 }
                }
            }
        ]),

        // Referral program revenue
        Booking.aggregate([
            {
                $match: {
                    status: 'completed',
                    checkOut: { $gte: startDate, $lte: endDate },
                    'metadata.referralCode': { $exists: true }
                }
            },
            {
                $group: {
                    _id: null,
                    revenue: { $sum: '$totalPrice' },
                    count: { $sum: 1 }
                }
            }
        ])
    ]);

    // Calculate points monetary value (assuming 1 point = $0.01)
    const pointsValue = {
        issued: pointsIssued.reduce((total, p) => total + p.totalPoints, 0) * 0.01,
        redeemed: pointsRedeemed.reduce((total, p) => total + p.totalPoints, 0) * 0.01
    };

    return {
        pointsIssued,
        pointsRedeemed,
        pointsValue,
        tierWiseRevenue,
        referralRevenue: referralRevenue[0] || { revenue: 0, count: 0 }
    };
};

================
File: src/controllers/group.controller.js
================
const GroupBooking = require('../models/GroupBooking');
const Room = require('../models/Room');
const asyncHandler = require('../middleware/asyncHandler');
const ErrorResponse = require('../utils/errorResponse');

// @desc    Create group booking
// @route   POST /api/group-bookings
// @access  Private/Admin
exports.createGroupBooking = asyncHandler(async (req, res) => {
    // Check room availability first
    const groupBooking = new GroupBooking(req.body);
    const availability = await groupBooking.checkAvailability();
    
    const insufficientRooms = availability.filter(room => !room.sufficient);
    if (insufficientRooms.length > 0) {
        throw new ErrorResponse(
            `Insufficient rooms available for: ${insufficientRooms.map(r => r.roomType).join(', ')}`,
            400
        );
    }

    await groupBooking.save();

    res.status(201).json({
        success: true,
        data: groupBooking
    });
});

// @desc    Get all group bookings
// @route   GET /api/group-bookings
// @access  Private/Admin
exports.getGroupBookings = asyncHandler(async (req, res) => {
    const { page = 1, limit = 10, status, startDate, endDate } = req.query;
    const query = {};

    if (status) {
        query.status = status;
    }

    if (startDate || endDate) {
        query['eventDetails.startDate'] = {};
        if (startDate) {
            query['eventDetails.startDate'].$gte = new Date(startDate);
        }
        if (endDate) {
            query['eventDetails.startDate'].$lte = new Date(endDate);
        }
    }

    const bookings = await GroupBooking.find(query)
        .populate('corporateAccount', 'companyName contactPerson')
        .limit(limit * 1)
        .skip((page - 1) * limit)
        .sort({ 'eventDetails.startDate': 1 });

    const total = await GroupBooking.countDocuments(query);

    res.status(200).json({
        success: true,
        data: bookings,
        pagination: {
            total,
            page: parseInt(page),
            pages: Math.ceil(total / limit)
        }
    });
});

// @desc    Get single group booking
// @route   GET /api/group-bookings/:id
// @access  Private/Admin
exports.getGroupBooking = asyncHandler(async (req, res) => {
    const booking = await GroupBooking.findById(req.params.id)
        .populate('corporateAccount', 'companyName contactPerson')
        .populate('rooms.assignedRooms');

    if (!booking) {
        throw new ErrorResponse('Group booking not found', 404);
    }

    res.status(200).json({
        success: true,
        data: booking
    });
});

// @desc    Update group booking
// @route   PUT /api/group-bookings/:id
// @access  Private/Admin
exports.updateGroupBooking = asyncHandler(async (req, res) => {
    let booking = await GroupBooking.findById(req.params.id);
    if (!booking) {
        throw new ErrorResponse('Group booking not found', 404);
    }

    // If updating rooms, check availability
    if (req.body.rooms) {
        const tempBooking = new GroupBooking({
            ...booking.toObject(),
            rooms: req.body.rooms
        });
        const availability = await tempBooking.checkAvailability();
        
        const insufficientRooms = availability.filter(room => !room.sufficient);
        if (insufficientRooms.length > 0) {
            throw new ErrorResponse(
                `Insufficient rooms available for: ${insufficientRooms.map(r => r.roomType).join(', ')}`,
                400
            );
        }
    }

    booking = await GroupBooking.findByIdAndUpdate(
        req.params.id,
        req.body,
        {
            new: true,
            runValidators: true
        }
    );

    res.status(200).json({
        success: true,
        data: booking
    });
});

// @desc    Delete group booking
// @route   DELETE /api/group-bookings/:id
// @access  Private/Admin
exports.deleteGroupBooking = asyncHandler(async (req, res) => {
    const booking = await GroupBooking.findById(req.params.id);
    if (!booking) {
        throw new ErrorResponse('Group booking not found', 404);
    }

    await booking.remove();

    res.status(200).json({
        success: true,
        data: {}
    });
});

// @desc    Add guest to group booking
// @route   POST /api/group-bookings/:id/guests
// @access  Private/Admin
exports.addGuest = asyncHandler(async (req, res) => {
    const booking = await GroupBooking.findById(req.params.id);
    if (!booking) {
        throw new ErrorResponse('Group booking not found', 404);
    }

    booking.guests.push(req.body);
    await booking.save();

    res.status(200).json({
        success: true,
        data: booking
    });
});

// @desc    Update guest check-in status
// @route   PUT /api/group-bookings/:id/guests/:guestId
// @access  Private/Admin
exports.updateGuestStatus = asyncHandler(async (req, res) => {
    const booking = await GroupBooking.findById(req.params.id);
    if (!booking) {
        throw new ErrorResponse('Group booking not found', 404);
    }

    const guest = booking.guests.id(req.params.guestId);
    if (!guest) {
        throw new ErrorResponse('Guest not found', 404);
    }

    guest.checkInStatus = req.body.status;
    await booking.save();

    res.status(200).json({
        success: true,
        data: booking
    });
});

// @desc    Add payment transaction
// @route   POST /api/group-bookings/:id/payments
// @access  Private/Admin
exports.addPayment = asyncHandler(async (req, res) => {
    const booking = await GroupBooking.findById(req.params.id);
    if (!booking) {
        throw new ErrorResponse('Group booking not found', 404);
    }

    booking.payment.transactions.push(req.body);
    
    // Update payment status based on total paid
    const totalPaid = booking.payment.transactions.reduce((sum, transaction) => {
        return transaction.type === 'refund' 
            ? sum - transaction.amount 
            : sum + transaction.amount;
    }, 0);

    if (totalPaid >= booking.payment.totalAmount) {
        booking.payment.status = 'paid';
    } else if (totalPaid > 0) {
        booking.payment.status = 'partial';
    }

    await booking.save();

    res.status(200).json({
        success: true,
        data: booking
    });
});

================
File: src/controllers/guest-profile.controller.js
================
const User = require('../models/User');
const Booking = require('../models/Booking');
const LoyaltyProgram = require('../models/LoyaltyProgram');
const Review = require('../models/Review');
const { NotFoundError, ValidationError } = require('../utils/errors');

// Get guest profile for admin view
exports.getProfile = async (req, res) => {
    try {
        const { id } = req.params;
        const profile = await exports.getGuestProfile(id);

        res.render('admin/guests/profile', {
            title: 'Guest Profile',
            ...profile
        });
    } catch (error) {
        console.error('Error getting guest profile:', error);
        if (error instanceof NotFoundError) {
            res.status(404).render('error', {
                message: error.message
            });
        } else {
            res.status(500).render('error', {
                message: 'Error loading guest profile'
            });
        }
    }
};

// Get guest profile
exports.getGuestProfile = async (userId) => {
    const [user, loyaltyProgram, bookings, reviews] = await Promise.all([
        // Get user details
        User.findById(userId).select('-password'),

        // Get loyalty program details
        LoyaltyProgram.findOne({ user: userId }),

        // Get booking history
        Booking.find({ 
            user: userId,
            status: { $in: ['completed', 'cancelled'] }
        })
        .sort('-checkOut')
        .populate('hotel', 'name location')
        .populate('room', 'type number'),

        // Get reviews
        Review.find({ 
            user: userId,
            isActive: true 
        })
        .populate('hotel', 'name')
    ]);

    if (!user) {
        throw new NotFoundError('Guest not found');
    }

    // Calculate guest metrics
    const totalSpent = bookings.reduce((total, booking) => 
        booking.status === 'completed' ? total + booking.totalPrice : total, 0
    );

    const averageStayDuration = bookings.length > 0 ? 
        bookings.reduce((total, booking) => {
            if (booking.status === 'completed') {
                const duration = (new Date(booking.checkOut) - new Date(booking.checkIn)) / (1000 * 60 * 60 * 24);
                return total + duration;
            }
            return total;
        }, 0) / bookings.filter(b => b.status === 'completed').length : 0;

    const preferences = {
        roomTypes: {},
        locations: {},
        amenities: new Set()
    };

    bookings.forEach(booking => {
        if (booking.status === 'completed') {
            // Track room type preferences
            preferences.roomTypes[booking.room.type] = 
                (preferences.roomTypes[booking.room.type] || 0) + 1;

            // Track location preferences
            preferences.locations[booking.hotel.location] = 
                (preferences.locations[booking.hotel.location] || 0) + 1;

            // Track amenity preferences
            booking.room.amenities?.forEach(amenity => 
                preferences.amenities.add(amenity)
            );
        }
    });

    return {
        profile: {
            ...user.toObject(),
            loyaltyTier: loyaltyProgram?.tier || null,
            loyaltyPoints: loyaltyProgram?.points || 0,
            totalBookings: bookings.length,
            completedBookings: bookings.filter(b => b.status === 'completed').length,
            cancelledBookings: bookings.filter(b => b.status === 'cancelled').length,
            totalSpent,
            averageStayDuration,
            reviewsCount: reviews.length,
            averageRating: reviews.length > 0 ?
                reviews.reduce((total, review) => total + review.rating, 0) / reviews.length : 0
        },
        preferences: {
            roomTypes: Object.entries(preferences.roomTypes)
                .sort((a, b) => b[1] - a[1])
                .map(([type, count]) => ({ type, count })),
            locations: Object.entries(preferences.locations)
                .sort((a, b) => b[1] - a[1])
                .map(([location, count]) => ({ location, count })),
            amenities: Array.from(preferences.amenities)
        },
        bookingHistory: bookings.map(booking => ({
            id: booking._id,
            hotel: booking.hotel.name,
            room: `${booking.room.type} - ${booking.room.number}`,
            checkIn: booking.checkIn,
            checkOut: booking.checkOut,
            status: booking.status,
            totalPrice: booking.totalPrice
        })),
        reviews: reviews.map(review => ({
            id: review._id,
            hotel: review.hotel.name,
            rating: review.rating,
            comment: review.comment,
            date: review.createdAt
        }))
    };
};

// Update guest preferences
exports.updateGuestPreferences = async (userId, preferences) => {
    const user = await User.findById(userId);
    if (!user) {
        throw new NotFoundError('Guest not found');
    }

    // Validate preferences
    if (preferences.roomPreferences) {
        if (!Array.isArray(preferences.roomPreferences)) {
            throw new ValidationError('Room preferences must be an array');
        }
    }

    if (preferences.amenityPreferences) {
        if (!Array.isArray(preferences.amenityPreferences)) {
            throw new ValidationError('Amenity preferences must be an array');
        }
    }

    if (preferences.dietaryRestrictions) {
        if (!Array.isArray(preferences.dietaryRestrictions)) {
            throw new ValidationError('Dietary restrictions must be an array');
        }
    }

    // Update user preferences
    user.preferences = {
        ...user.preferences,
        ...preferences
    };

    await user.save();

    // Update loyalty program preferences if exists
    const loyaltyProgram = await LoyaltyProgram.findOne({ user: userId });
    if (loyaltyProgram) {
        loyaltyProgram.preferences = {
            ...loyaltyProgram.preferences,
            ...preferences
        };
        await loyaltyProgram.save();
    }

    return user;
};

// Get guest stay history
exports.getGuestStayHistory = async (userId, filters = {}) => {
    const query = { 
        user: userId,
        status: { $in: ['completed', 'cancelled'] }
    };

    if (filters.startDate) {
        query.checkIn = { $gte: new Date(filters.startDate) };
    }
    if (filters.endDate) {
        query.checkOut = { $lte: new Date(filters.endDate) };
    }
    if (filters.hotel) {
        query.hotel = filters.hotel;
    }
    if (filters.status) {
        query.status = filters.status;
    }

    const stays = await Booking.find(query)
        .sort('-checkOut')
        .populate('hotel', 'name location')
        .populate('room', 'type number price')
        .populate({
            path: 'reviews',
            match: { isActive: true }
        });

    return stays.map(stay => ({
        id: stay._id,
        hotel: {
            id: stay.hotel._id,
            name: stay.hotel.name,
            location: stay.hotel.location
        },
        room: {
            type: stay.room.type,
            number: stay.room.number,
            price: stay.room.price
        },
        dates: {
            checkIn: stay.checkIn,
            checkOut: stay.checkOut,
            duration: Math.ceil((new Date(stay.checkOut) - new Date(stay.checkIn)) / (1000 * 60 * 60 * 24))
        },
        status: stay.status,
        totalPrice: stay.totalPrice,
        review: stay.reviews?.[0] ? {
            rating: stay.reviews[0].rating,
            comment: stay.reviews[0].comment,
            date: stay.reviews[0].createdAt
        } : null
    }));
};

// Get guest spending analysis
exports.getGuestSpendingAnalysis = async (userId, dateRange = {}) => {
    const query = { 
        user: userId,
        status: 'completed'
    };

    if (dateRange.startDate) {
        query.checkOut = { $gte: new Date(dateRange.startDate) };
    }
    if (dateRange.endDate) {
        query.checkOut = { ...query.checkOut, $lte: new Date(dateRange.endDate) };
    }

    const bookings = await Booking.find(query)
        .populate('hotel', 'name location')
        .populate('room', 'type price');

    // Calculate spending metrics
    const totalSpent = bookings.reduce((total, booking) => total + booking.totalPrice, 0);
    const averagePerStay = totalSpent / bookings.length;
    
    // Analyze spending patterns
    const spendingByHotel = {};
    const spendingByRoomType = {};
    const spendingByMonth = {};

    bookings.forEach(booking => {
        // By hotel
        const hotelKey = booking.hotel.name;
        spendingByHotel[hotelKey] = (spendingByHotel[hotelKey] || 0) + booking.totalPrice;

        // By room type
        const roomKey = booking.room.type;
        spendingByRoomType[roomKey] = (spendingByRoomType[roomKey] || 0) + booking.totalPrice;

        // By month
        const monthKey = new Date(booking.checkOut).toISOString().slice(0, 7);
        spendingByMonth[monthKey] = (spendingByMonth[monthKey] || 0) + booking.totalPrice;
    });

    return {
        overview: {
            totalSpent,
            numberOfStays: bookings.length,
            averagePerStay,
            totalNights: bookings.reduce((total, booking) => 
                total + Math.ceil((new Date(booking.checkOut) - new Date(booking.checkIn)) / (1000 * 60 * 60 * 24)), 0
            )
        },
        breakdown: {
            byHotel: Object.entries(spendingByHotel)
                .map(([hotel, amount]) => ({ hotel, amount }))
                .sort((a, b) => b.amount - a.amount),
            byRoomType: Object.entries(spendingByRoomType)
                .map(([type, amount]) => ({ type, amount }))
                .sort((a, b) => b.amount - a.amount),
            byMonth: Object.entries(spendingByMonth)
                .map(([month, amount]) => ({ month, amount }))
                .sort((a, b) => a.month.localeCompare(b.month))
        },
        loyaltyImpact: await getLoyaltyImpact(userId, bookings)
    };
};

// Helper function to calculate loyalty program impact
async function getLoyaltyImpact(userId, bookings) {
    const loyaltyProgram = await LoyaltyProgram.findOne({ user: userId });
    if (!loyaltyProgram) return null;

    const pointsEarned = bookings.reduce((total, booking) => {
        // Calculate points based on spending and tier multiplier
        const basePoints = Math.floor(booking.totalPrice * 10);
        const tierMultiplier = getTierMultiplier(loyaltyProgram.tier);
        return total + (basePoints * tierMultiplier);
    }, 0);

    return {
        tier: loyaltyProgram.tier,
        pointsEarned,
        estimatedValue: pointsEarned * 0.01, // Assuming 1 point = $0.01
        benefits: getEstimatedBenefitsValue(loyaltyProgram.tier, bookings)
    };
}

// Helper function to get tier multiplier
function getTierMultiplier(tier) {
    switch (tier) {
        case 'platinum':
            return 1.5;
        case 'gold':
            return 1.25;
        case 'silver':
            return 1.1;
        default:
            return 1;
    }
}

// Helper function to calculate estimated benefits value
function getEstimatedBenefitsValue(tier, bookings) {
    const benefits = {
        roomUpgrades: 0,
        lateCheckout: 0,
        welcomeGifts: 0,
        breakfastValue: 0
    };

    const totalNights = bookings.reduce((total, booking) => 
        total + Math.ceil((new Date(booking.checkOut) - new Date(booking.checkIn)) / (1000 * 60 * 60 * 24)), 0
    );

    switch (tier) {
        case 'platinum':
            benefits.roomUpgrades = bookings.length * 50; // Estimated value per upgrade
            benefits.lateCheckout = bookings.length * 30;
            benefits.welcomeGifts = bookings.length * 25;
            benefits.breakfastValue = totalNights * 20;
            break;
        case 'gold':
            benefits.roomUpgrades = bookings.length * 30;
            benefits.lateCheckout = bookings.length * 20;
            benefits.welcomeGifts = bookings.length * 15;
            benefits.breakfastValue = totalNights * 15;
            break;
        case 'silver':
            benefits.lateCheckout = bookings.length * 15;
            benefits.welcomeGifts = bookings.length * 10;
            benefits.breakfastValue = totalNights * 10;
            break;
    }

    return benefits;
}

================
File: src/controllers/guest.controller.js
================
const Guest = require('../models/Guest');

/**
 * Get all guests with pagination and filters
 * @route GET /api/guests
 * @access Private (Admin)
 */
const getAllGuests = async (req, res) => {
    try {
        const page = parseInt(req.query.page) || 1;
        const limit = parseInt(req.query.limit) || 10;
        const skip = (page - 1) * limit;

        // Build query
        const query = {};
        if (req.query.status) query.status = req.query.status;
        if (req.query.search) {
            query.$or = [
                { name: { $regex: req.query.search, $options: 'i' } },
                { email: { $regex: req.query.search, $options: 'i' } },
                { phone: { $regex: req.query.search, $options: 'i' } }
            ];
        }

        // Get guests with pagination
        const [guests, total] = await Promise.all([
            Guest.find(query)
                .sort('-createdAt')
                .skip(skip)
                .limit(limit),
            Guest.countDocuments(query)
        ]);

        // Calculate pagination
        const totalPages = Math.ceil(total / limit);
        const pagination = {
            page,
            totalPages,
            total,
            hasPrev: page > 1,
            hasNext: page < totalPages
        };

        res.json({
            success: true,
            data: guests,
            pagination
        });
    } catch (error) {
        console.error('Error loading guests:', error);
        res.status(500).json({
            success: false,
            message: 'Error loading guests'
        });
    }
};

/**
 * Create new guest
 * @route POST /api/guests
 * @access Private (Admin)
 */
const createGuest = async (req, res) => {
    try {
        const guest = await Guest.create({
            ...req.body,
            createdBy: req.user._id
        });

        res.status(201).json({
            success: true,
            data: guest
        });
    } catch (error) {
        console.error('Error creating guest:', error);
        res.status(500).json({
            success: false,
            message: error.message || 'Error creating guest'
        });
    }
};

/**
 * Get guest by ID
 * @route GET /api/guests/:id
 * @access Private (Admin)
 */
const getGuestById = async (req, res) => {
    try {
        const guest = await Guest.findById(req.params.id)
            .populate('bookings')
            .populate('loyaltyProgram');
        
        if (!guest) {
            return res.status(404).json({
                success: false,
                message: 'Guest not found'
            });
        }

        res.json({
            success: true,
            data: guest
        });
    } catch (error) {
        console.error('Error fetching guest:', error);
        res.status(500).json({
            success: false,
            message: 'Error fetching guest'
        });
    }
};

/**
 * Update guest
 * @route PUT /api/guests/:id
 * @access Private (Admin)
 */
const updateGuest = async (req, res) => {
    try {
        const guest = await Guest.findByIdAndUpdate(
            req.params.id,
            {
                ...req.body,
                updatedBy: req.user._id,
                updatedAt: Date.now()
            },
            { new: true }
        );

        if (!guest) {
            return res.status(404).json({
                success: false,
                message: 'Guest not found'
            });
        }

        res.json({
            success: true,
            data: guest
        });
    } catch (error) {
        console.error('Error updating guest:', error);
        res.status(500).json({
            success: false,
            message: error.message || 'Error updating guest'
        });
    }
};

/**
 * Delete guest
 * @route DELETE /api/guests/:id
 * @access Private (Admin)
 */
const deleteGuest = async (req, res) => {
    try {
        const guest = await Guest.findById(req.params.id);

        if (!guest) {
            return res.status(404).json({
                success: false,
                message: 'Guest not found'
            });
        }

        // Check if guest has any active bookings
        const activeBookings = await guest.getActiveBookings();
        if (activeBookings.length > 0) {
            return res.status(400).json({
                success: false,
                message: 'Cannot delete guest with active bookings'
            });
        }

        await guest.remove();

        res.json({
            success: true,
            message: 'Guest deleted successfully'
        });
    } catch (error) {
        console.error('Error deleting guest:', error);
        res.status(500).json({
            success: false,
            message: error.message || 'Error deleting guest'
        });
    }
};

module.exports = {
    getAllGuests,
    createGuest,
    getGuestById,
    updateGuest,
    deleteGuest
};

================
File: src/controllers/home.controller.js
================
const getHomePage = (req, res) => {
    res.json({
        message: 'Welcome to Hotel Management System API',
        version: '1.0.0',
        endpoints: {
            auth: {
                login: '/api/auth/login',
                register: '/api/auth/register',
                forgotPassword: '/api/auth/forgot-password',
                resetPassword: '/api/auth/reset-password'
            },
            admin: {
                dashboard: '/api/admin/dashboard',
                bookings: '/api/admin/bookings',
                guests: '/api/admin/guests',
                rooms: '/api/admin/rooms',
                housekeeping: '/api/admin/housekeeping',
                maintenance: '/api/admin/maintenance',
                inventory: '/api/admin/inventory',
                staff: '/api/admin/staff',
                reports: '/api/admin/reports',
                settings: '/api/admin/settings'
            },
            guest: {
                profile: '/api/guest/profile',
                bookings: '/api/guest/bookings',
                amenities: '/api/guest/amenities',
                services: '/api/guest/services',
                loyalty: '/api/guest/loyalty'
            },
            staff: {
                profile: '/api/staff/profile',
                tasks: '/api/staff/tasks',
                schedule: '/api/staff/schedule',
                reports: '/api/staff/reports'
            }
        },
        documentation: '/api/docs',
        status: 'online',
        timestamp: new Date().toISOString()
    });
};

module.exports = {
    getHomePage
};

================
File: src/controllers/hotel.controller.js
================
const hotelService = require('../services/hotel.service');
const { successResponse, errorResponse } = require('../utils/response.util');
const { validateHotelData, validateRoomData } = require('../utils/validation.util');

exports.createHotel = async (req, res) => {
    try {
        const validationError = validateHotelData(req.body);
        if (validationError) {
            return errorResponse(res, 400, validationError);
        }

        const hotel = await hotelService.createHotel({
            ...req.body,
            owner: req.user._id
        });
        
        return successResponse(res, 201, 'Hotel created successfully', hotel);
    } catch (error) {
        console.error('Create hotel error:', error);
        return errorResponse(res, 400, error.message);
    }
};

exports.getAllHotels = async (req, res) => {
    try {
        const result = await hotelService.getAllHotels(req.query);
        return successResponse(res, 200, 'Hotels retrieved successfully', result);
    } catch (error) {
        console.error('Get hotels error:', error);
        return errorResponse(res, 500, error.message);
    }
};

exports.getHotelById = async (req, res) => {
    try {
        const result = await hotelService.getHotelById(
            req.params.id,
            req.user ? req.user._id : null
        );
        return successResponse(res, 200, 'Hotel retrieved successfully', result);
    } catch (error) {
        console.error('Get hotel error:', error);
        return errorResponse(res, 404, error.message);
    }
};

exports.updateHotel = async (req, res) => {
    try {
        // Check ownership
        const hotel = await hotelService.getHotelById(req.params.id);
        if (hotel.owner.toString() !== req.user._id.toString() && !req.user.isAdmin) {
            return errorResponse(res, 403, 'Not authorized to update this hotel');
        }

        const validationError = validateHotelData(req.body);
        if (validationError) {
            return errorResponse(res, 400, validationError);
        }

        const updatedHotel = await hotelService.updateHotel(req.params.id, req.body);
        return successResponse(res, 200, 'Hotel updated successfully', updatedHotel);
    } catch (error) {
        console.error('Update hotel error:', error);
        return errorResponse(res, 404, error.message);
    }
};

exports.deleteHotel = async (req, res) => {
    try {
        // Check ownership
        const hotel = await hotelService.getHotelById(req.params.id);
        if (hotel.owner.toString() !== req.user._id.toString() && !req.user.isAdmin) {
            return errorResponse(res, 403, 'Not authorized to delete this hotel');
        }

        await hotelService.deleteHotel(req.params.id);
        return successResponse(res, 200, 'Hotel deleted successfully');
    } catch (error) {
        console.error('Delete hotel error:', error);
        return errorResponse(res, 404, error.message);
    }
};

// Room management
exports.addRoom = async (req, res) => {
    try {
        // Check hotel ownership
        const hotel = await hotelService.getHotelById(req.params.hotelId);
        if (hotel.owner.toString() !== req.user._id.toString() && !req.user.isAdmin) {
            return errorResponse(res, 403, 'Not authorized to add rooms to this hotel');
        }

        const validationError = validateRoomData(req.body);
        if (validationError) {
            return errorResponse(res, 400, validationError);
        }

        const updatedHotel = await hotelService.addRoom(req.params.hotelId, req.body);
        return successResponse(res, 201, 'Room added successfully', updatedHotel);
    } catch (error) {
        console.error('Add room error:', error);
        return errorResponse(res, 404, error.message);
    }
};

exports.updateRoom = async (req, res) => {
    try {
        // Check hotel ownership
        const hotel = await hotelService.getHotelById(req.params.hotelId);
        if (hotel.owner.toString() !== req.user._id.toString() && !req.user.isAdmin) {
            return errorResponse(res, 403, 'Not authorized to update rooms in this hotel');
        }

        const validationError = validateRoomData(req.body);
        if (validationError) {
            return errorResponse(res, 400, validationError);
        }

        const updatedHotel = await hotelService.updateRoom(
            req.params.hotelId,
            req.params.roomId,
            req.body
        );
        return successResponse(res, 200, 'Room updated successfully', updatedHotel);
    } catch (error) {
        console.error('Update room error:', error);
        return errorResponse(res, 404, error.message);
    }
};

exports.deleteRoom = async (req, res) => {
    try {
        // Check hotel ownership
        const hotel = await hotelService.getHotelById(req.params.hotelId);
        if (hotel.owner.toString() !== req.user._id.toString() && !req.user.isAdmin) {
            return errorResponse(res, 403, 'Not authorized to delete rooms from this hotel');
        }

        const updatedHotel = await hotelService.deleteRoom(
            req.params.hotelId,
            req.params.roomId
        );
        return successResponse(res, 200, 'Room deleted successfully', updatedHotel);
    } catch (error) {
        console.error('Delete room error:', error);
        return errorResponse(res, 404, error.message);
    }
};

================
File: src/controllers/housekeeping.controller.js
================
const HousekeepingTask = require('../models/HousekeepingTask');
const LoyaltyProgram = require('../models/LoyaltyProgram');
const User = require('../models/User');
const { NotFoundError, ValidationError } = require('../utils/errors');
const { sendNotification } = require('../utils/notifications');
const { validateHousekeepingTask } = require('../validators/housekeeping.validator');

// Get housekeeping dashboard stats
exports.getDashboardStats = async () => {
    const [
        totalTasks,
        pendingTasks,
        inProgressTasks,
        completedToday,
        highPriorityTasks
    ] = await Promise.all([
        HousekeepingTask.countDocuments({ isActive: true }),
        HousekeepingTask.countDocuments({ status: 'pending', isActive: true }),
        HousekeepingTask.countDocuments({ status: 'in-progress', isActive: true }),
        HousekeepingTask.countDocuments({
            status: 'completed',
            completedDate: {
                $gte: new Date().setHours(0, 0, 0, 0),
                $lt: new Date().setHours(23, 59, 59, 999)
            },
            isActive: true
        }),
        HousekeepingTask.countDocuments({ priority: 'high', status: { $ne: 'completed' }, isActive: true })
    ]);

    return {
        totalTasks,
        pendingTasks,
        inProgressTasks,
        completedToday,
        highPriorityTasks
    };
};

// Get all housekeeping tasks with filters
exports.getTasks = async (filters = {}) => {
    const query = { isActive: true };

    if (filters.status) {
        query.status = filters.status;
    }
    if (filters.priority) {
        query.priority = filters.priority;
    }
    if (filters.room) {
        query.room = filters.room;
    }
    if (filters.assignedTo) {
        query.assignedTo = filters.assignedTo;
    }
    if (filters.date) {
        query.scheduledDate = {
            $gte: new Date(filters.date).setHours(0, 0, 0, 0),
            $lt: new Date(filters.date).setHours(23, 59, 59, 999)
        };
    }

    const tasks = await HousekeepingTask.find(query)
        .populate('room', 'number type')
        .populate('assignedTo', 'name email')
        .populate('completedBy', 'name')
        .sort(filters.sort || { scheduledDate: 1, priority: -1 });

    return tasks;
};

// Get task by ID
exports.getTaskById = async (taskId) => {
    const task = await HousekeepingTask.findById(taskId)
        .populate('room', 'number type')
        .populate('assignedTo', 'name email')
        .populate('completedBy', 'name')
        .populate('notes.addedBy', 'name')
        .populate('checklist.completedBy', 'name')
        .populate('supplies.item', 'name unit')
        .populate('photos.uploadedBy', 'name')
        .populate('feedback.givenBy', 'name');

    if (!task || !task.isActive) {
        throw new NotFoundError('Task not found');
    }

    return task;
};

// Create new task
exports.createTask = async (taskData) => {
    const validatedData = validateHousekeepingTask(taskData);
    const task = new HousekeepingTask(validatedData);
    await task.save();

    // If task is assigned, notify the staff member
    if (task.assignedTo) {
        await sendNotification({
            userId: task.assignedTo,
            type: 'task_assigned',
            title: 'New Task Assigned',
            message: `You have been assigned a new housekeeping task for Room ${task.room.number}`,
            data: { taskId: task._id }
        });
    }

    return task;
};

// Update task
exports.updateTask = async (taskId, updateData) => {
    const validatedData = validateHousekeepingTask(updateData, true);
    const task = await HousekeepingTask.findById(taskId);
    
    if (!task || !task.isActive) {
        throw new NotFoundError('Task not found');
    }

    // If assignee is changed, notify the new staff member
    if (validatedData.assignedTo && validatedData.assignedTo.toString() !== task.assignedTo?.toString()) {
        await sendNotification({
            userId: validatedData.assignedTo,
            type: 'task_assigned',
            title: 'New Task Assigned',
            message: `You have been assigned a housekeeping task for Room ${task.room.number}`,
            data: { taskId: task._id }
        });
    }

    Object.assign(task, validatedData);
    await task.save();

    // If task is completed, handle recurring task creation
    if (task.status === 'completed' && task.recurring.isRecurring) {
        await task.generateNextRecurring();
    }

    return task;
};

// Delete task (soft delete)
exports.deleteTask = async (taskId) => {
    const task = await HousekeepingTask.findById(taskId);
    if (!task || !task.isActive) {
        throw new NotFoundError('Task not found');
    }

    task.isActive = false;
    await task.save();
    return { success: true };
};

// Add note to task
exports.addNote = async (taskId, content, userId) => {
    const task = await HousekeepingTask.findById(taskId);
    if (!task || !task.isActive) {
        throw new NotFoundError('Task not found');
    }

    await task.addNote(content, userId);
    return task;
};

// Update checklist item
exports.updateChecklist = async (taskId, itemIndex, completed, userId) => {
    const task = await HousekeepingTask.findById(taskId);
    if (!task || !task.isActive) {
        throw new NotFoundError('Task not found');
    }

    await task.updateChecklist(itemIndex, completed, userId);
    return task;
};

// Add photo to task
exports.addPhoto = async (taskId, url, caption, userId) => {
    const task = await HousekeepingTask.findById(taskId);
    if (!task || !task.isActive) {
        throw new NotFoundError('Task not found');
    }

    await task.addPhoto(url, caption, userId);
    return task;
};

// Add feedback to task
exports.addFeedback = async (taskId, rating, comment, userId) => {
    const task = await HousekeepingTask.findById(taskId);
    if (!task || !task.isActive) {
        throw new NotFoundError('Task not found');
    }

    await task.addFeedback(rating, comment, userId);

    // If the feedback is from a guest, add loyalty points
    const user = await User.findById(userId);
    if (user && user.role === 'guest') {
        const loyaltyProgram = await LoyaltyProgram.findOne({ user: userId });
        if (loyaltyProgram) {
            await loyaltyProgram.addPoints(10, 'Housekeeping feedback provided', {
                taskId: task._id,
                rating,
                comment
            });
        }
    }

    return task;
};

// Get staff performance report
exports.getStaffPerformance = async (filters = {}) => {
    const matchStage = {
        isActive: true,
        status: 'completed'
    };

    if (filters.startDate) {
        matchStage.completedDate = { $gte: new Date(filters.startDate) };
    }
    if (filters.endDate) {
        matchStage.completedDate = { ...matchStage.completedDate, $lt: new Date(filters.endDate) };
    }

    const performance = await HousekeepingTask.aggregate([
        { $match: matchStage },
        {
            $group: {
                _id: '$completedBy',
                tasksCompleted: { $sum: 1 },
                avgDuration: { $avg: { $subtract: ['$completedDate', '$createdAt'] } },
                avgRating: { $avg: '$feedback.rating' },
                highPriorityTasks: {
                    $sum: { $cond: [{ $eq: ['$priority', 'high'] }, 1, 0] }
                }
            }
        },
        {
            $lookup: {
                from: 'users',
                localField: '_id',
                foreignField: '_id',
                as: 'staff'
            }
        },
        { $unwind: '$staff' },
        {
            $project: {
                _id: 1,
                name: '$staff.name',
                email: '$staff.email',
                tasksCompleted: 1,
                avgDuration: 1,
                avgRating: 1,
                highPriorityTasks: 1
            }
        },
        { $sort: { tasksCompleted: -1 } }
    ]);

    return performance;
};

// Get room cleaning report
exports.getRoomCleaningReport = async (filters = {}) => {
    const matchStage = {
        isActive: true,
        status: 'completed'
    };

    if (filters.startDate) {
        matchStage.completedDate = { $gte: new Date(filters.startDate) };
    }
    if (filters.endDate) {
        matchStage.completedDate = { ...matchStage.completedDate, $lt: new Date(filters.endDate) };
    }

    const report = await HousekeepingTask.aggregate([
        { $match: matchStage },
        {
            $group: {
                _id: '$room',
                cleaningCount: { $sum: 1 },
                avgDuration: { $avg: { $subtract: ['$completedDate', '$createdAt'] } },
                suppliesUsed: { $push: '$supplies' }
            }
        },
        {
            $lookup: {
                from: 'rooms',
                localField: '_id',
                foreignField: '_id',
                as: 'room'
            }
        },
        { $unwind: '$room' },
        {
            $project: {
                _id: 1,
                roomNumber: '$room.number',
                roomType: '$room.type',
                cleaningCount: 1,
                avgDuration: 1,
                suppliesUsed: 1
            }
        },
        { $sort: { cleaningCount: -1 } }
    ]);

    return report;
};

================
File: src/controllers/inventory.controller.js
================
const InventoryItem = require('../models/InventoryItem');
const Category = require('../models/Category');
const Supplier = require('../models/Supplier');
const Order = require('../models/Order');
const LoyaltyProgram = require('../models/LoyaltyProgram');
const { validateInventoryItem } = require('../validators/inventory.validator');
const { NotFoundError, ValidationError } = require('../utils/errors');

// Get inventory dashboard stats
exports.getDashboardStats = async () => {
    const [
        totalItems,
        lowStockItems,
        outOfStockItems,
        totalValue
    ] = await Promise.all([
        InventoryItem.countDocuments({ isActive: true }),
        InventoryItem.countDocuments({ status: 'low_stock', isActive: true }),
        InventoryItem.countDocuments({ status: 'out_of_stock', isActive: true }),
        InventoryItem.aggregate([
            { $match: { isActive: true } },
            { $group: { _id: null, total: { $sum: { $multiply: ['$currentStock', '$cost'] } } } }
        ])
    ]);

    return {
        totalItems,
        lowStockItems,
        outOfStockItems,
        totalValue: totalValue[0]?.total || 0
    };
};

// Get all inventory items with filters
exports.getInventoryItems = async (filters = {}) => {
    const query = { isActive: true };

    if (filters.category) {
        query.category = filters.category;
    }
    if (filters.status) {
        query.status = filters.status;
    }
    if (filters.search) {
        query.$or = [
            { name: { $regex: filters.search, $options: 'i' } },
            { sku: { $regex: filters.search, $options: 'i' } }
        ];
    }

    const items = await InventoryItem.find(query)
        .sort(filters.sort || '-updatedAt');

    return items;
};

// Get inventory item by ID
exports.getInventoryItemById = async (itemId) => {
    const item = await InventoryItem.findById(itemId);
    if (!item || !item.isActive) {
        throw new NotFoundError('Inventory item not found');
    }
    return item;
};

// Create new inventory item
exports.createInventoryItem = async (itemData) => {
    const validatedData = validateInventoryItem(itemData);
    const item = new InventoryItem(validatedData);
    await item.save();
    return item;
};

// Update inventory item
exports.updateInventoryItem = async (itemId, updateData) => {
    const validatedData = validateInventoryItem(updateData, true);
    const item = await InventoryItem.findById(itemId);
    
    if (!item || !item.isActive) {
        throw new NotFoundError('Inventory item not found');
    }

    Object.assign(item, validatedData);
    await item.save();
    return item;
};

// Delete inventory item (soft delete)
exports.deleteInventoryItem = async (itemId) => {
    const item = await InventoryItem.findById(itemId);
    if (!item || !item.isActive) {
        throw new NotFoundError('Inventory item not found');
    }

    item.isActive = false;
    await item.save();
    return { success: true };
};

// Add stock to inventory item
exports.addStock = async (itemId, quantity, reason, userId) => {
    if (!quantity || quantity <= 0) {
        throw new ValidationError('Invalid quantity');
    }

    const item = await InventoryItem.findById(itemId);
    if (!item || !item.isActive) {
        throw new NotFoundError('Inventory item not found');
    }

    await item.addStock(quantity, reason, userId);
    return item;
};

// Remove stock from inventory item
exports.removeStock = async (itemId, quantity, reason, userId) => {
    if (!quantity || quantity <= 0) {
        throw new ValidationError('Invalid quantity');
    }

    const item = await InventoryItem.findById(itemId);
    if (!item || !item.isActive) {
        throw new NotFoundError('Inventory item not found');
    }

    await item.removeStock(quantity, reason, userId);
    return item;
};

// Get stock history for an item
exports.getStockHistory = async (itemId, filters = {}) => {
    const item = await InventoryItem.findById(itemId)
        .populate('stockHistory.performedBy', 'name email');
    
    if (!item || !item.isActive) {
        throw new NotFoundError('Inventory item not found');
    }

    let history = item.stockHistory;

    if (filters.type) {
        history = history.filter(record => record.type === filters.type);
    }
    if (filters.startDate) {
        history = history.filter(record => record.date >= new Date(filters.startDate));
    }
    if (filters.endDate) {
        history = history.filter(record => record.date <= new Date(filters.endDate));
    }

    return history;
};

// Get low stock alerts
exports.getLowStockAlerts = async () => {
    const items = await InventoryItem.find({
        isActive: true,
        $or: [
            { status: 'low_stock' },
            { status: 'out_of_stock' }
        ]
    }).sort('status');

    return items;
};

// Get inventory value report
exports.getInventoryValueReport = async () => {
    const report = await InventoryItem.aggregate([
        { $match: { isActive: true } },
        {
            $group: {
                _id: '$category',
                totalItems: { $sum: 1 },
                totalValue: { $sum: { $multiply: ['$currentStock', '$cost'] } },
                averageCost: { $avg: '$cost' }
            }
        },
        { $sort: { totalValue: -1 } }
    ]);

    const totalValue = report.reduce((sum, category) => sum + category.totalValue, 0);

    return {
        categories: report,
        totalValue
    };
};

// Get supplier report
exports.getSupplierReport = async () => {
    const items = await InventoryItem.find({ isActive: true })
        .select('supplier name currentStock minimumStock reorderPoint cost lastRestocked')
        .sort('supplier.name');

    const supplierMap = new Map();

    items.forEach(item => {
        const supplier = item.supplier.name;
        if (!supplierMap.has(supplier)) {
            supplierMap.set(supplier, {
                name: supplier,
                items: [],
                totalValue: 0,
                itemsNeedingReorder: 0
            });
        }

        const supplierData = supplierMap.get(supplier);
        supplierData.items.push(item);
        supplierData.totalValue += item.currentStock * item.cost;
        if (item.currentStock <= item.reorderPoint) {
            supplierData.itemsNeedingReorder++;
        }
    });

    return Array.from(supplierMap.values());
};

// Get inventory dashboard
exports.getInventory = async (req, res) => {
    try {
        const page = parseInt(req.query.page) || 1;
        const limit = parseInt(req.query.limit) || 10;
        const skip = (page - 1) * limit;

        const query = { isActive: true };
        if (req.query.category) query.category = req.query.category;
        if (req.query.supplier) query.supplier = req.query.supplier;
        if (req.query.status) query.status = req.query.status;
        if (req.query.search) {
            query.$or = [
                { name: { $regex: req.query.search, $options: 'i' } },
                { sku: { $regex: req.query.search, $options: 'i' } }
            ];
        }

        const [items, total, categories, suppliers] = await Promise.all([
            InventoryItem.find(query)
                .populate('category')
                .populate('supplier')
                .sort(req.query.sort || '-updatedAt')
                .skip(skip)
                .limit(limit),
            InventoryItem.countDocuments(query),
            Category.find(),
            Supplier.find()
        ]);

        const totalPages = Math.ceil(total / limit);

        res.render('admin/inventory', {
            title: 'Inventory Management',
            items,
            categories,
            suppliers,
            pagination: {
                page,
                totalPages,
                hasNext: page < totalPages,
                hasPrev: page > 1
            },
            query: req.query
        });
    } catch (error) {
        console.error('Error in getInventory:', error);
        res.status(500).render('error', { message: 'Error fetching inventory' });
    }
};

// Create inventory item
exports.createItem = async (req, res) => {
    try {
        const itemData = {
            ...req.body,
            createdBy: req.user._id
        };
        
        const item = await InventoryItem.create(itemData);
        
        // If this is a reward item, update loyalty program catalog
        if (req.body.isRewardItem) {
            await LoyaltyProgram.updateMany(
                {},
                { $push: { availableRewards: { item: item._id, pointsCost: req.body.pointsCost } } }
            );
        }

        res.redirect('/admin/inventory');
    } catch (error) {
        console.error('Error in createItem:', error);
        res.status(500).render('error', { message: 'Error creating item' });
    }
};

// Get single item
exports.getItem = async (req, res) => {
    try {
        const item = await InventoryItem.findById(req.params.id)
            .populate('category')
            .populate('supplier')
            .populate('stockHistory.performedBy', 'name email');

        if (!item) {
            return res.status(404).render('error', { message: 'Item not found' });
        }

        // Get redemption history if it's a reward item
        let redemptionHistory = [];
        if (item.isRewardItem) {
            redemptionHistory = await LoyaltyProgram.aggregate([
                { $unwind: '$rewardHistory' },
                { $match: { 'rewardHistory.item': item._id } },
                { $sort: { 'rewardHistory.date': -1 } },
                { $limit: 10 }
            ]);
        }

        res.render('admin/inventory/item', {
            title: item.name,
            item,
            redemptionHistory
        });
    } catch (error) {
        console.error('Error in getItem:', error);
        res.status(500).render('error', { message: 'Error fetching item' });
    }
};

// Update item
exports.updateItem = async (req, res) => {
    try {
        const item = await InventoryItem.findById(req.params.id);
        if (!item) {
            return res.status(404).json({ message: 'Item not found' });
        }

        const updatedItem = await InventoryItem.findByIdAndUpdate(
            req.params.id,
            { ...req.body, updatedBy: req.user._id },
            { new: true }
        );

        // Update loyalty program catalog if reward status changed
        if (item.isRewardItem !== req.body.isRewardItem) {
            if (req.body.isRewardItem) {
                await LoyaltyProgram.updateMany(
                    {},
                    { $push: { availableRewards: { item: item._id, pointsCost: req.body.pointsCost } } }
                );
            } else {
                await LoyaltyProgram.updateMany(
                    {},
                    { $pull: { availableRewards: { item: item._id } } }
                );
            }
        }
        // Update points cost if changed
        else if (item.isRewardItem && item.pointsCost !== req.body.pointsCost) {
            await LoyaltyProgram.updateMany(
                { 'availableRewards.item': item._id },
                { $set: { 'availableRewards.$.pointsCost': req.body.pointsCost } }
            );
        }

        res.json(updatedItem);
    } catch (error) {
        console.error('Error in updateItem:', error);
        res.status(500).json({ message: 'Error updating item' });
    }
};

// Delete item
exports.deleteItem = async (req, res) => {
    try {
        const item = await InventoryItem.findById(req.params.id);
        if (!item) {
            return res.status(404).json({ message: 'Item not found' });
        }

        // Remove from loyalty program catalog if it's a reward item
        if (item.isRewardItem) {
            await LoyaltyProgram.updateMany(
                {},
                { $pull: { availableRewards: { item: item._id } } }
            );
        }

        await InventoryItem.findByIdAndUpdate(req.params.id, {
            isActive: false,
            deactivatedBy: req.user._id,
            deactivatedAt: new Date()
        });

        res.json({ message: 'Item deleted successfully' });
    } catch (error) {
        console.error('Error in deleteItem:', error);
        res.status(500).json({ message: 'Error deleting item' });
    }
};

// Get inventory reports
exports.getReports = async (req, res) => {
    try {
        const [valueReport, supplierReport, lowStockItems] = await Promise.all([
            getInventoryValueReport(),
            getSupplierReport(),
            getLowStockAlerts()
        ]);

        res.render('admin/inventory/reports', {
            title: 'Inventory Reports',
            valueReport,
            supplierReport,
            lowStockItems
        });
    } catch (error) {
        console.error('Error in getReports:', error);
        res.status(500).render('error', { message: 'Error generating reports' });
    }
};

// Get low stock items
exports.getLowStockItems = async (req, res) => {
    try {
        const items = await InventoryItem.find({
            isActive: true,
            $or: [
                { status: 'low_stock' },
                { status: 'out_of_stock' }
            ]
        })
        .populate('category')
        .populate('supplier')
        .sort('status');

        res.render('admin/inventory/low-stock', {
            title: 'Low Stock Items',
            items
        });
    } catch (error) {
        console.error('Error in getLowStockItems:', error);
        res.status(500).render('error', { message: 'Error fetching low stock items' });
    }
};

// Get expiring items
exports.getExpiringItems = async (req, res) => {
    try {
        const thirtyDaysFromNow = new Date();
        thirtyDaysFromNow.setDate(thirtyDaysFromNow.getDate() + 30);

        const items = await InventoryItem.find({
            isActive: true,
            expiryDate: { $lte: thirtyDaysFromNow }
        })
        .populate('category')
        .populate('supplier')
        .sort('expiryDate');

        res.render('admin/inventory/expiring', {
            title: 'Expiring Items',
            items
        });
    } catch (error) {
        console.error('Error in getExpiringItems:', error);
        res.status(500).render('error', { message: 'Error fetching expiring items' });
    }
};

// Category management
exports.getCategories = async (req, res) => {
    try {
        const categories = await Category.find().sort('name');
        res.json(categories);
    } catch (error) {
        console.error('Error in getCategories:', error);
        res.status(500).json({ message: 'Error fetching categories' });
    }
};

exports.createCategory = async (req, res) => {
    try {
        const category = await Category.create({
            ...req.body,
            createdBy: req.user._id
        });
        res.json(category);
    } catch (error) {
        console.error('Error in createCategory:', error);
        res.status(500).json({ message: 'Error creating category' });
    }
};

exports.updateCategory = async (req, res) => {
    try {
        const category = await Category.findByIdAndUpdate(
            req.params.id,
            { ...req.body, updatedBy: req.user._id },
            { new: true }
        );
        res.json(category);
    } catch (error) {
        console.error('Error in updateCategory:', error);
        res.status(500).json({ message: 'Error updating category' });
    }
};

exports.deleteCategory = async (req, res) => {
    try {
        await Category.findByIdAndDelete(req.params.id);
        res.json({ message: 'Category deleted successfully' });
    } catch (error) {
        console.error('Error in deleteCategory:', error);
        res.status(500).json({ message: 'Error deleting category' });
    }
};

// Supplier management
exports.getSuppliers = async (req, res) => {
    try {
        const suppliers = await Supplier.find().sort('name');
        res.json(suppliers);
    } catch (error) {
        console.error('Error in getSuppliers:', error);
        res.status(500).json({ message: 'Error fetching suppliers' });
    }
};

exports.createSupplier = async (req, res) => {
    try {
        const supplier = await Supplier.create({
            ...req.body,
            createdBy: req.user._id
        });
        res.json(supplier);
    } catch (error) {
        console.error('Error in createSupplier:', error);
        res.status(500).json({ message: 'Error creating supplier' });
    }
};

exports.updateSupplier = async (req, res) => {
    try {
        const supplier = await Supplier.findByIdAndUpdate(
            req.params.id,
            { ...req.body, updatedBy: req.user._id },
            { new: true }
        );
        res.json(supplier);
    } catch (error) {
        console.error('Error in updateSupplier:', error);
        res.status(500).json({ message: 'Error updating supplier' });
    }
};

exports.deleteSupplier = async (req, res) => {
    try {
        await Supplier.findByIdAndDelete(req.params.id);
        res.json({ message: 'Supplier deleted successfully' });
    } catch (error) {
        console.error('Error in deleteSupplier:', error);
        res.status(500).json({ message: 'Error deleting supplier' });
    }
};

// Order management
exports.getOrders = async (req, res) => {
    try {
        const page = parseInt(req.query.page) || 1;
        const limit = parseInt(req.query.limit) || 10;
        const skip = (page - 1) * limit;

        const query = {};
        if (req.query.supplier) query.supplier = req.query.supplier;
        if (req.query.status) query.status = req.query.status;

        const [orders, total] = await Promise.all([
            Order.find(query)
                .populate('supplier')
                .populate('items.item')
                .sort('-createdAt')
                .skip(skip)
                .limit(limit),
            Order.countDocuments(query)
        ]);

        const totalPages = Math.ceil(total / limit);

        res.render('admin/inventory/orders', {
            title: 'Purchase Orders',
            orders,
            pagination: {
                page,
                totalPages,
                hasNext: page < totalPages,
                hasPrev: page > 1
            }
        });
    } catch (error) {
        console.error('Error in getOrders:', error);
        res.status(500).render('error', { message: 'Error fetching orders' });
    }
};

exports.createOrder = async (req, res) => {
    try {
        const order = await Order.create({
            ...req.body,
            createdBy: req.user._id
        });
        res.json(order);
    } catch (error) {
        console.error('Error in createOrder:', error);
        res.status(500).json({ message: 'Error creating order' });
    }
};

exports.getOrder = async (req, res) => {
    try {
        const order = await Order.findById(req.params.id)
            .populate('supplier')
            .populate('items.item')
            .populate('createdBy', 'name email')
            .populate('updatedBy', 'name email');

        if (!order) {
            return res.status(404).render('error', { message: 'Order not found' });
        }

        res.render('admin/inventory/order-details', {
            title: `Order #${order.orderNumber}`,
            order
        });
    } catch (error) {
        console.error('Error in getOrder:', error);
        res.status(500).render('error', { message: 'Error fetching order' });
    }
};

exports.updateOrder = async (req, res) => {
    try {
        const order = await Order.findByIdAndUpdate(
            req.params.id,
            { ...req.body, updatedBy: req.user._id },
            { new: true }
        );
        res.json(order);
    } catch (error) {
        console.error('Error in updateOrder:', error);
        res.status(500).json({ message: 'Error updating order' });
    }
};

exports.deleteOrder = async (req, res) => {
    try {
        await Order.findByIdAndDelete(req.params.id);
        res.json({ message: 'Order deleted successfully' });
    } catch (error) {
        console.error('Error in deleteOrder:', error);
        res.status(500).json({ message: 'Error deleting order' });
    }
};

// Helper functions
async function getInventoryValueReport() {
    const report = await InventoryItem.aggregate([
        { $match: { isActive: true } },
        {
            $group: {
                _id: '$category',
                totalItems: { $sum: 1 },
                totalValue: { $sum: { $multiply: ['$currentStock', '$cost'] } },
                averageCost: { $avg: '$cost' }
            }
        },
        { $sort: { totalValue: -1 } }
    ]);

    const totalValue = report.reduce((sum, category) => sum + category.totalValue, 0);

    return {
        categories: report,
        totalValue
    };
}

async function getSupplierReport() {
    const items = await InventoryItem.find({ isActive: true })
        .populate('supplier')
        .select('supplier name currentStock minimumStock reorderPoint cost lastRestocked')
        .sort('supplier.name');

    const supplierMap = new Map();

    items.forEach(item => {
        const supplierName = item.supplier?.name || 'Unassigned';
        if (!supplierMap.has(supplierName)) {
            supplierMap.set(supplierName, {
                name: supplierName,
                items: [],
                totalValue: 0,
                itemsNeedingReorder: 0
            });
        }

        const supplier = supplierMap.get(supplierName);
        supplier.items.push(item);
        supplier.totalValue += item.currentStock * item.cost;
        if (item.currentStock <= item.reorderPoint) {
            supplier.itemsNeedingReorder++;
        }
    });

    return Array.from(supplierMap.values());
}

async function getLowStockAlerts() {
    return await InventoryItem.find({
        isActive: true,
        $or: [
            { status: 'low_stock' },
            { status: 'out_of_stock' }
        ]
    })
    .populate('category')
    .populate('supplier')
    .sort('status');
}

================
File: src/controllers/loyalty.controller.js
================
const LoyaltyProgram = require('../models/LoyaltyProgram');
const User = require('../models/User');
const { successResponse, errorResponse } = require('../utils/response.util');
const emailService = require('../services/email.service');

/**
 * Get loyalty program details
 * @route GET /api/loyalty
 * @access Private
 */
exports.getLoyaltyDetails = async (req, res) => {
    try {
        const loyalty = await LoyaltyProgram.findOne({ user: req.user._id })
            .populate('pointsHistory.bookingId')
            .populate('rewards.bookingId');

        if (!loyalty) {
            return errorResponse(res, 404, 'Loyalty program not found');
        }

        return successResponse(res, 200, 'Loyalty program details retrieved successfully', loyalty);
    } catch (error) {
        console.error('Error fetching loyalty details:', error);
        return errorResponse(res, 500, 'Error fetching loyalty details');
    }
};

/**
 * Enroll in loyalty program
 * @route POST /api/loyalty/enroll
 * @access Private
 */
exports.enrollInProgram = async (req, res) => {
    try {
        // Check if already enrolled
        let loyalty = await LoyaltyProgram.findOne({ user: req.user._id });
        
        if (loyalty) {
            return errorResponse(res, 400, 'Already enrolled in loyalty program');
        }

        // Generate referral code
        const referralCode = await LoyaltyProgram.generateReferralCode(req.user._id);

        // Create loyalty program entry
        loyalty = await LoyaltyProgram.create({
            user: req.user._id,
            tier: 'Bronze',
            points: 100, // Welcome bonus
            referralCode,
            referredBy: req.body.referralCode ? await getReferrerId(req.body.referralCode) : null,
            pointsHistory: [{
                points: 100,
                type: 'welcome_bonus',
                description: 'Welcome Bonus Points',
                date: new Date()
            }]
        });

        // If user was referred, reward the referrer
        if (req.body.referralCode) {
            await handleReferralReward(loyalty.referredBy);
        }

        // Send welcome email
        await emailService.sendWelcomeEmail(req.user.email, {
            name: req.user.name,
            loyaltyTier: loyalty.tier,
            welcomePoints: loyalty.points,
            referralCode: loyalty.referralCode
        });

        return successResponse(res, 201, 'Successfully enrolled in loyalty program', loyalty);
    } catch (error) {
        console.error('Error enrolling in loyalty program:', error);
        return errorResponse(res, 500, 'Error enrolling in loyalty program');
    }
};

/**
 * Update preferences
 * @route PUT /api/loyalty/preferences
 * @access Private
 */
exports.updatePreferences = async (req, res) => {
    try {
        const loyalty = await LoyaltyProgram.findOne({ user: req.user._id });
        
        if (!loyalty) {
            return errorResponse(res, 404, 'Loyalty program not found');
        }

        loyalty.preferences = {
            ...loyalty.preferences,
            ...req.body
        };

        await loyalty.save();

        return successResponse(res, 200, 'Preferences updated successfully', loyalty);
    } catch (error) {
        console.error('Error updating preferences:', error);
        return errorResponse(res, 500, 'Error updating preferences');
    }
};

/**
 * Redeem points for reward
 * @route POST /api/loyalty/redeem
 * @access Private
 */
exports.redeemReward = async (req, res) => {
    try {
        const { rewardType, points } = req.body;
        
        const loyalty = await LoyaltyProgram.findOne({ user: req.user._id });
        
        if (!loyalty) {
            return errorResponse(res, 404, 'Loyalty program not found');
        }

        // Validate points
        if (loyalty.points < points) {
            return errorResponse(res, 400, 'Insufficient points');
        }

        // Create reward
        const reward = {
            name: getRewardName(rewardType),
            type: rewardType,
            pointsCost: points,
            expiryDate: getRewardExpiry(rewardType),
            status: 'available'
        };

        // Add reward and deduct points
        loyalty.rewards.push(reward);
        await loyalty.redeemPoints(points, rewardType, null, `Redeemed ${reward.name}`);

        // Send confirmation email
        await emailService.sendRewardEmail(req.user.email, {
            name: req.user.name,
            rewardName: reward.name,
            pointsUsed: points,
            remainingPoints: loyalty.points,
            expiryDate: reward.expiryDate
        });

        return successResponse(res, 200, 'Reward redeemed successfully', { loyalty, reward });
    } catch (error) {
        console.error('Error redeeming reward:', error);
        return errorResponse(res, 500, 'Error redeeming reward');
    }
};

/**
 * Get available rewards
 * @route GET /api/loyalty/rewards
 * @access Private
 */
exports.getAvailableRewards = async (req, res) => {
    try {
        const loyalty = await LoyaltyProgram.findOne({ user: req.user._id });
        
        if (!loyalty) {
            return errorResponse(res, 404, 'Loyalty program not found');
        }

        const availableRewards = loyalty.rewards.filter(reward => 
            reward.status === 'available' && reward.expiryDate > new Date()
        );

        return successResponse(res, 200, 'Available rewards retrieved successfully', availableRewards);
    } catch (error) {
        console.error('Error fetching available rewards:', error);
        return errorResponse(res, 500, 'Error fetching available rewards');
    }
};

/**
 * Get points history
 * @route GET /api/loyalty/points-history
 * @access Private
 */
exports.getPointsHistory = async (req, res) => {
    try {
        const loyalty = await LoyaltyProgram.findOne({ user: req.user._id })
            .populate('pointsHistory.bookingId');
        
        if (!loyalty) {
            return errorResponse(res, 404, 'Loyalty program not found');
        }

        return successResponse(res, 200, 'Points history retrieved successfully', loyalty.pointsHistory);
    } catch (error) {
        console.error('Error fetching points history:', error);
        return errorResponse(res, 500, 'Error fetching points history');
    }
};

// Helper functions
const getRewardName = (type) => {
    const rewards = {
        room_upgrade: 'Room Upgrade',
        free_night: 'Free Night Stay',
        dining_voucher: 'Dining Voucher',
        spa_voucher: 'Spa Treatment Voucher',
        airport_transfer: 'Complimentary Airport Transfer',
        late_checkout: 'Late Checkout'
    };
    return rewards[type] || type;
};

const getRewardExpiry = (type) => {
    const expiryDays = {
        room_upgrade: 90,
        free_night: 180,
        dining_voucher: 90,
        spa_voucher: 90,
        airport_transfer: 90,
        late_checkout: 30
    };
    const days = expiryDays[type] || 90;
    return new Date(Date.now() + days * 24 * 60 * 60 * 1000);
};

const getReferrerId = async (referralCode) => {
    const referrer = await LoyaltyProgram.findOne({ referralCode });
    return referrer ? referrer.user : null;
};

const handleReferralReward = async (referrerId) => {
    if (!referrerId) return;

    const referrerLoyalty = await LoyaltyProgram.findOne({ user: referrerId });
    if (!referrerLoyalty) return;

    // Award referral bonus points
    const referralPoints = 500;
    referrerLoyalty.points += referralPoints;
    referrerLoyalty.pointsHistory.push({
        points: referralPoints,
        type: 'referral_bonus',
        description: 'Referral Bonus Points',
        date: new Date()
    });

    await referrerLoyalty.save();

    // Send email to referrer
    const referrer = await User.findById(referrerId);
    if (referrer) {
        await emailService.sendReferralRewardEmail(referrer.email, {
            name: referrer.name,
            points: referralPoints,
            totalPoints: referrerLoyalty.points
        });
    }
};

================
File: src/controllers/ota.controller.js
================
const OTAChannel = require('../models/OTAChannel');
const OTABooking = require('../models/OTABooking');
const OTAService = require('../services/ota.service');

exports.listChannels = async (req, res) => {
    try {
        const channels = await OTAChannel.find({ hotel: req.hotel._id });
        
        // Enhance channel data with statistics
        const enhancedChannels = await Promise.all(channels.map(async (channel) => {
            const stats = await OTABooking.aggregate([
                {
                    $match: {
                        channel: channel._id,
                        createdAt: {
                            $gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)
                        }
                    }
                },
                {
                    $group: {
                        _id: null,
                        recentBookings: { $sum: 1 },
                        revenue: {
                            $sum: '$bookingDetails.otaPrice'
                        }
                    }
                }
            ]);

            return {
                ...channel.toObject(),
                stats: stats[0] || { recentBookings: 0, revenue: 0 }
            };
        }));

        res.render('admin/ota/list', { channels: enhancedChannels });
    } catch (error) {
        console.error('List OTA Channels Error:', error);
        req.flash('error', 'Error loading OTA channels');
        res.redirect('/admin/dashboard');
    }
};

exports.createChannel = async (req, res) => {
    try {
        const { name, apiKey, apiSecret, propertyId, syncSettings } = req.body;

        // Create new channel
        const channel = await OTAChannel.create({
            hotel: req.hotel._id,
            name,
            credentials: {
                apiKey,
                apiSecret,
                propertyId
            },
            syncSettings,
            isActive: true
        });

        // Initialize OTA service for the channel
        const otaService = await OTAService.getChannelInstance(channel._id);
        
        // Perform initial sync
        await Promise.all([
            otaService.syncInventory(),
            otaService.syncPrices(),
            otaService.syncAvailability()
        ]);

        res.status(201).json({ success: true, channel });
    } catch (error) {
        console.error('Create OTA Channel Error:', error);
        res.status(500).json({ error: error.message });
    }
};

exports.updateChannel = async (req, res) => {
    try {
        const { id } = req.params;
        const { apiKey, apiSecret, propertyId, syncSettings, isActive } = req.body;

        const channel = await OTAChannel.findOneAndUpdate(
            { _id: id, hotel: req.hotel._id },
            {
                $set: {
                    'credentials.apiKey': apiKey,
                    'credentials.apiSecret': apiSecret,
                    'credentials.propertyId': propertyId,
                    syncSettings,
                    isActive
                }
            },
            { new: true }
        );

        if (!channel) {
            return res.status(404).json({ error: 'Channel not found' });
        }

        res.json({ success: true, channel });
    } catch (error) {
        console.error('Update OTA Channel Error:', error);
        res.status(500).json({ error: error.message });
    }
};

exports.deleteChannel = async (req, res) => {
    try {
        const { id } = req.params;

        const channel = await OTAChannel.findOneAndDelete({
            _id: id,
            hotel: req.hotel._id
        });

        if (!channel) {
            return res.status(404).json({ error: 'Channel not found' });
        }

        res.json({ success: true });
    } catch (error) {
        console.error('Delete OTA Channel Error:', error);
        res.status(500).json({ error: error.message });
    }
};

exports.syncChannel = async (req, res) => {
    try {
        const { id } = req.params;
        const channel = await OTAChannel.findOne({
            _id: id,
            hotel: req.hotel._id
        });

        if (!channel) {
            return res.status(404).json({ error: 'Channel not found' });
        }

        const otaService = await OTAService.getChannelInstance(channel._id);
        
        // Start sync operations
        await Promise.all([
            otaService.syncInventory(),
            otaService.syncPrices(),
            otaService.syncAvailability()
        ]);

        res.json({ success: true });
    } catch (error) {
        console.error('Sync OTA Channel Error:', error);
        res.status(500).json({ error: error.message });
    }
};

exports.getChannelLogs = async (req, res) => {
    try {
        const { id } = req.params;
        const channel = await OTAChannel.findOne({
            _id: id,
            hotel: req.hotel._id
        });

        if (!channel) {
            return res.status(404).json({ error: 'Channel not found' });
        }

        // Get the latest 50 logs
        const logs = channel.syncLogs
            .sort((a, b) => b.timestamp - a.timestamp)
            .slice(0, 50);

        res.json({ success: true, logs });
    } catch (error) {
        console.error('Get Channel Logs Error:', error);
        res.status(500).json({ error: error.message });
    }
};

exports.getChannelStats = async (req, res) => {
    try {
        const { id } = req.params;
        const channel = await OTAChannel.findOne({
            _id: id,
            hotel: req.hotel._id
        });

        if (!channel) {
            return res.status(404).json({ error: 'Channel not found' });
        }

        // Get last 30 days of data
        const thirtyDaysAgo = new Date();
        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

        const bookingStats = await OTABooking.aggregate([
            {
                $match: {
                    channel: channel._id,
                    createdAt: { $gte: thirtyDaysAgo }
                }
            },
            {
                $group: {
                    _id: {
                        $dateToString: {
                            format: '%Y-%m-%d',
                            date: '$createdAt'
                        }
                    },
                    bookings: { $sum: 1 },
                    revenue: { $sum: '$bookingDetails.otaPrice' }
                }
            },
            {
                $sort: { '_id': 1 }
            }
        ]);

        // Calculate success rate
        const syncStats = channel.syncLogs.reduce((acc, log) => {
            if (log.timestamp >= thirtyDaysAgo) {
                acc.total++;
                if (log.status === 'success') acc.success++;
            }
            return acc;
        }, { total: 0, success: 0 });

        const successRate = syncStats.total > 0 
            ? ((syncStats.success / syncStats.total) * 100).toFixed(1)
            : 100;

        res.json({
            success: true,
            stats: {
                bookingStats,
                syncStats: {
                    total: syncStats.total,
                    success: syncStats.success,
                    successRate
                }
            }
        });
    } catch (error) {
        console.error('Get Channel Stats Error:', error);
        res.status(500).json({ error: error.message });
    }
};

module.exports = exports;

================
File: src/controllers/redemption.controller.js
================
const Redemption = require('../models/Redemption');
const Reward = require('../models/Reward');
const LoyaltyProgram = require('../models/LoyaltyProgram');
const { sendEmail } = require('../utils/email');

// Redeem a reward
exports.redeemReward = async (req, res) => {
    try {
        const { rewardId } = req.body;

        // Find the reward
        const reward = await Reward.findById(rewardId);
        if (!reward) {
            return res.status(404).json({
                success: false,
                message: 'Reward not found'
            });
        }

        // Check if reward is active
        if (!reward.isActive) {
            return res.status(400).json({
                success: false,
                message: 'This reward is no longer available'
            });
        }

        // Check if reward has available quantity
        if (reward.limitedQuantity && reward.remainingQuantity <= 0) {
            return res.status(400).json({
                success: false,
                message: 'This reward is out of stock'
            });
        }

        // Get member's loyalty program
        const loyaltyProgram = await LoyaltyProgram.findOne({ userId: req.user._id });
        if (!loyaltyProgram) {
            return res.status(404).json({
                success: false,
                message: 'Loyalty program membership not found'
            });
        }

        // Check if member has enough points
        if (loyaltyProgram.points < reward.pointsRequired) {
            return res.status(400).json({
                success: false,
                message: 'Insufficient points for this reward'
            });
        }

        // Create redemption record
        const redemption = new Redemption({
            userId: req.user._id,
            rewardId: reward._id,
            pointsUsed: reward.pointsRequired,
            expiryDate: new Date(Date.now() + reward.validityPeriod * 24 * 60 * 60 * 1000),
            createdBy: req.user._id
        });

        // Deduct points from member's account
        await loyaltyProgram.deductPoints(
            reward.pointsRequired,
            'redeemed',
            'reward',
            redemption._id,
            `Redeemed reward: ${reward.name}`
        );

        // Update reward quantity if limited
        if (reward.limitedQuantity) {
            reward.remainingQuantity--;
            await reward.save();
        }

        // Save redemption
        await redemption.save();

        // Send confirmation email
        await sendEmail({
            to: req.user.email,
            subject: 'Reward Redemption Confirmation',
            template: 'loyalty-redemption',
            context: {
                name: req.user.name,
                rewardName: reward.name,
                pointsUsed: reward.pointsRequired,
                remainingPoints: loyaltyProgram.points,
                expiryDate: redemption.expiryDate,
                redemptionId: redemption._id,
                terms: reward.terms,
                dashboardUrl: `${process.env.FRONTEND_URL}/loyalty/redemptions`
            }
        });

        res.json({
            success: true,
            message: 'Reward redeemed successfully',
            data: {
                redemption,
                remainingPoints: loyaltyProgram.points
            }
        });
    } catch (error) {
        console.error('Error redeeming reward:', error);
        res.status(500).json({
            success: false,
            message: 'Error redeeming reward'
        });
    }
};

// Get member's redemptions
exports.getMemberRedemptions = async (req, res) => {
    try {
        const redemptions = await Redemption.find({ userId: req.user._id })
            .populate('rewardId')
            .populate('bookingId')
            .sort('-date');

        res.json({
            success: true,
            data: redemptions
        });
    } catch (error) {
        console.error('Error getting redemptions:', error);
        res.status(500).json({
            success: false,
            message: 'Error getting redemptions'
        });
    }
};

// Get redemption details
exports.getRedemptionDetails = async (req, res) => {
    try {
        const redemption = await Redemption.findOne({
            _id: req.params.id,
            userId: req.user._id
        })
        .populate('rewardId')
        .populate('bookingId');

        if (!redemption) {
            return res.status(404).json({
                success: false,
                message: 'Redemption not found'
            });
        }

        res.json({
            success: true,
            data: redemption
        });
    } catch (error) {
        console.error('Error getting redemption details:', error);
        res.status(500).json({
            success: false,
            message: 'Error getting redemption details'
        });
    }
};

// Add rating and feedback
exports.addRatingAndFeedback = async (req, res) => {
    try {
        const { rating, feedback } = req.body;

        const redemption = await Redemption.findOne({
            _id: req.params.id,
            userId: req.user._id
        });

        if (!redemption) {
            return res.status(404).json({
                success: false,
                message: 'Redemption not found'
            });
        }

        // Check if redemption is completed
        if (redemption.status !== 'completed') {
            return res.status(400).json({
                success: false,
                message: 'Can only rate completed redemptions'
            });
        }

        // Add rating and feedback
        await redemption.addRating(rating, feedback);

        res.json({
            success: true,
            message: 'Rating and feedback added successfully'
        });
    } catch (error) {
        console.error('Error adding rating and feedback:', error);
        res.status(500).json({
            success: false,
            message: 'Error adding rating and feedback'
        });
    }
};

// Get redemption statistics
exports.getRedemptionStats = async (req, res) => {
    try {
        const { startDate, endDate } = req.query;

        // Parse dates if provided
        const parsedStartDate = startDate ? new Date(startDate) : null;
        const parsedEndDate = endDate ? new Date(endDate) : null;

        // Get redemption statistics
        const stats = await Redemption.getStats(parsedStartDate, parsedEndDate);

        // Get popular rewards
        const popularRewards = await Redemption.getPopularRewards(5);

        res.json({
            success: true,
            data: {
                stats: stats[0] || {
                    totalRedemptions: 0,
                    totalPointsUsed: 0,
                    averageRating: 0,
                    completionRate: 0,
                    expiryRate: 0
                },
                popularRewards
            }
        });
    } catch (error) {
        console.error('Error getting redemption stats:', error);
        res.status(500).json({
            success: false,
            message: 'Error getting redemption statistics'
        });
    }
};

// Cancel redemption
exports.cancelRedemption = async (req, res) => {
    try {
        const redemption = await Redemption.findOne({
            _id: req.params.id,
            userId: req.user._id
        }).populate('rewardId');

        if (!redemption) {
            return res.status(404).json({
                success: false,
                message: 'Redemption not found'
            });
        }

        // Check if redemption can be cancelled
        if (redemption.status !== 'pending') {
            return res.status(400).json({
                success: false,
                message: 'Can only cancel pending redemptions'
            });
        }

        // Get member's loyalty program
        const loyaltyProgram = await LoyaltyProgram.findOne({ userId: req.user._id });
        if (!loyaltyProgram) {
            return res.status(404).json({
                success: false,
                message: 'Loyalty program membership not found'
            });
        }

        // Refund points
        await loyaltyProgram.addPoints(
            redemption.pointsUsed,
            'refunded',
            'cancellation',
            redemption._id,
            `Cancelled reward redemption: ${redemption.rewardId.name}`
        );

        // Update reward quantity if limited
        if (redemption.rewardId.limitedQuantity) {
            redemption.rewardId.remainingQuantity++;
            await redemption.rewardId.save();
        }

        // Update redemption status
        redemption.status = 'cancelled';
        redemption.notes = 'Cancelled by member';
        redemption.updatedBy = req.user._id;
        await redemption.save();

        // Send cancellation email
        await sendEmail({
            to: req.user.email,
            subject: 'Reward Redemption Cancelled',
            template: 'loyalty-redemption-cancelled',
            context: {
                name: req.user.name,
                rewardName: redemption.rewardId.name,
                pointsRefunded: redemption.pointsUsed,
                currentPoints: loyaltyProgram.points,
                dashboardUrl: `${process.env.FRONTEND_URL}/loyalty/dashboard`
            }
        });

        res.json({
            success: true,
            message: 'Redemption cancelled successfully',
            data: {
                redemption,
                currentPoints: loyaltyProgram.points
            }
        });
    } catch (error) {
        console.error('Error cancelling redemption:', error);
        res.status(500).json({
            success: false,
            message: 'Error cancelling redemption'
        });
    }
};

================
File: src/controllers/referral.controller.js
================
const Referral = require('../models/Referral');
const User = require('../models/User');
const LoyaltyProgram = require('../models/LoyaltyProgram');
const { sendEmail } = require('../utils/email');

// Generate referral code
exports.generateReferralCode = async (req, res) => {
    try {
        // Check if user already has a loyalty program
        const loyalty = await LoyaltyProgram.findOne({ userId: req.user._id });
        if (!loyalty) {
            return res.status(404).json({
                success: false,
                message: 'Loyalty program membership not found'
            });
        }

        // Generate unique referral code
        const code = await Referral.generateReferralCode(req.user._id);

        // Create referral record
        const referral = new Referral({
            referrerId: req.user._id,
            code,
            referrerPoints: process.env.REFERRER_BONUS_POINTS || 1000,
            refereePoints: process.env.REFEREE_BONUS_POINTS || 500,
            expiryDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000) // 30 days
        });

        await referral.save();

        res.json({
            success: true,
            data: {
                code,
                expiryDate: referral.expiryDate,
                referrerPoints: referral.referrerPoints,
                refereePoints: referral.refereePoints
            }
        });
    } catch (error) {
        console.error('Error generating referral code:', error);
        res.status(500).json({
            success: false,
            message: 'Error generating referral code'
        });
    }
};

// Apply referral code
exports.applyReferralCode = async (req, res) => {
    try {
        const { code } = req.body;

        // Find referral
        const referral = await Referral.findOne({ code })
            .populate('referrerId', 'name email');

        if (!referral) {
            return res.status(404).json({
                success: false,
                message: 'Invalid referral code'
            });
        }

        // Check if referral is valid
        if (!referral.isValid()) {
            return res.status(400).json({
                success: false,
                message: 'Referral code has expired'
            });
        }

        // Check if user is trying to refer themselves
        if (referral.referrerId.toString() === req.user._id.toString()) {
            return res.status(400).json({
                success: false,
                message: 'Cannot use your own referral code'
            });
        }

        // Update referral with referee
        referral.refereeId = req.user._id;
        await referral.save();

        // Send notification to referrer
        await sendEmail({
            to: referral.referrerId.email,
            subject: 'Someone Used Your Referral Code!',
            template: 'loyalty-referral-used',
            context: {
                name: referral.referrerId.name,
                refereeName: req.user.name,
                points: referral.referrerPoints,
                dashboardUrl: `${process.env.FRONTEND_URL}/loyalty/referrals`
            }
        });

        res.json({
            success: true,
            message: 'Referral code applied successfully',
            data: {
                referrerName: referral.referrerId.name,
                bonusPoints: referral.refereePoints
            }
        });
    } catch (error) {
        console.error('Error applying referral code:', error);
        res.status(500).json({
            success: false,
            message: 'Error applying referral code'
        });
    }
};

// Get user's referrals
exports.getUserReferrals = async (req, res) => {
    try {
        const referrals = await Referral.find({ referrerId: req.user._id })
            .populate('refereeId', 'name email')
            .populate('firstBooking')
            .sort('-createdAt');

        const stats = {
            totalReferrals: referrals.length,
            completedReferrals: referrals.filter(r => r.status === 'completed').length,
            pendingReferrals: referrals.filter(r => r.status === 'pending').length,
            totalPointsEarned: referrals.reduce((sum, r) => 
                r.bonusPointsAwarded ? sum + r.referrerPoints : sum, 0
            )
        };

        res.json({
            success: true,
            data: {
                referrals,
                stats
            }
        });
    } catch (error) {
        console.error('Error getting user referrals:', error);
        res.status(500).json({
            success: false,
            message: 'Error getting referrals'
        });
    }
};

// Get referral statistics (admin only)
exports.getReferralStats = async (req, res) => {
    try {
        const { startDate, endDate } = req.query;

        // Get overall statistics
        const stats = await Referral.getStats(startDate, endDate);

        // Get top referrers
        const topReferrers = await Referral.getTopReferrers(10);

        // Get monthly trends
        const monthlyTrends = await Referral.aggregate([
            {
                $match: {
                    createdAt: {
                        $gte: new Date(new Date().setMonth(new Date().getMonth() - 12))
                    }
                }
            },
            {
                $group: {
                    _id: {
                        year: { $year: '$createdAt' },
                        month: { $month: '$createdAt' }
                    },
                    totalReferrals: { $sum: 1 },
                    completedReferrals: {
                        $sum: { $cond: [{ $eq: ['$status', 'completed'] }, 1, 0] }
                    },
                    pointsAwarded: {
                        $sum: {
                            $cond: [
                                { $eq: ['$bonusPointsAwarded', true] },
                                { $add: ['$referrerPoints', '$refereePoints'] },
                                0
                            ]
                        }
                    }
                }
            },
            { $sort: { '_id.year': 1, '_id.month': 1 } }
        ]);

        res.json({
            success: true,
            data: {
                stats: stats[0] || {
                    totalReferrals: 0,
                    completedReferrals: 0,
                    expiredReferrals: 0,
                    totalPointsAwarded: 0,
                    conversionRate: 0
                },
                topReferrers,
                monthlyTrends
            }
        });
    } catch (error) {
        console.error('Error getting referral statistics:', error);
        res.status(500).json({
            success: false,
            message: 'Error getting referral statistics'
        });
    }
};

// Process expired referrals
exports.processExpiredReferrals = async (req, res) => {
    try {
        const expiredReferrals = await Referral.find({
            status: 'pending',
            expiryDate: { $lt: new Date() }
        });

        for (const referral of expiredReferrals) {
            referral.status = 'expired';
            await referral.save();

            // Notify referrer if referee was assigned
            if (referral.refereeId) {
                const referrer = await User.findById(referral.referrerId);
                if (referrer) {
                    await sendEmail({
                        to: referrer.email,
                        subject: 'Referral Code Expired',
                        template: 'loyalty-referral-expired',
                        context: {
                            name: referrer.name,
                            code: referral.code,
                            dashboardUrl: `${process.env.FRONTEND_URL}/loyalty/referrals`
                        }
                    });
                }
            }
        }

        res.json({
            success: true,
            message: `Processed ${expiredReferrals.length} expired referrals`
        });
    } catch (error) {
        console.error('Error processing expired referrals:', error);
        res.status(500).json({
            success: false,
            message: 'Error processing expired referrals'
        });
    }
};

================
File: src/controllers/user.controller.js
================
const userService = require('../services/user.service');
const { successResponse, errorResponse } = require('../utils/response.util');

exports.getAllUsers = async (req, res) => {
    try {
        const users = await userService.getAllUsers();
        return successResponse(res, 200, 'Users retrieved successfully', users);
    } catch (error) {
        return errorResponse(res, 500, error.message);
    }
};

exports.getUserById = async (req, res) => {
    try {
        const user = await userService.getUserById(req.params.id);
        return successResponse(res, 200, 'User retrieved successfully', user);
    } catch (error) {
        return errorResponse(res, 500, error.message);
    }
};

exports.updateUser = async (req, res) => {
    try {
        const user = await userService.updateUser(req.params.id, req.body);
        return successResponse(res, 200, 'User updated successfully', user);
    } catch (error) {
        return errorResponse(res, 500, error.message);
    }
};

exports.approveAdmin = async (req, res) => {
    try {
        const user = await userService.approveAdmin(req.params.id);
        return successResponse(res, 200, 'User has been approved as admin successfully', user);
    } catch (error) {
        return errorResponse(res, error.message.includes('not found') ? 404 : 400, error.message);
    }
};

exports.getCurrentUser = async (req, res) => {
    try {
        const user = await userService.getCurrentUser(req.user._id);
        return successResponse(res, 200, 'Current user retrieved successfully', user);
    } catch (error) {
        return errorResponse(res, error.message.includes('not found') ? 404 : 500, error.message);
    }
};

================
File: src/helpers/check-in-out-helpers.js
================
const { format, formatDistance } = require('date-fns');

module.exports = {
    // Format time in 12-hour format
    formatTime: function(date) {
        return format(new Date(date), 'hh:mm a');
    },

    // Format date and time
    formatDateTime: function(date) {
        return format(new Date(date), 'MMM dd, yyyy hh:mm a');
    },

    // Get initials from name
    initials: function(name) {
        return name
            .split(' ')
            .map(part => part[0])
            .join('')
            .toUpperCase();
    },

    // Get status color
    statusColor: function(status) {
        const colors = {
            'pending': 'warning',
            'confirmed': 'info',
            'checked_in': 'success',
            'checked_out': 'secondary',
            'cancelled': 'danger',
            'no_show': 'dark'
        };
        return colors[status] || 'primary';
    },

    // Calculate stay duration
    stayDuration: function(checkIn, checkOut) {
        const start = new Date(checkIn);
        const end = new Date(checkOut);
        const nights = Math.ceil((end - start) / (1000 * 60 * 60 * 24));
        return nights;
    },

    // Format relative time
    timeFromNow: function(date) {
        return formatDistance(new Date(date), new Date(), { addSuffix: true });
    },

    // Check if date is today
    isToday: function(date) {
        const today = new Date();
        const checkDate = new Date(date);
        return today.toDateString() === checkDate.toDateString();
    },

    // Check if date is tomorrow
    isTomorrow: function(date) {
        const tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 1);
        const checkDate = new Date(date);
        return tomorrow.toDateString() === checkDate.toDateString();
    },

    // Format currency
    formatCurrency: function(amount) {
        return new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: 'USD'
        }).format(amount);
    },

    // Format room number with type
    formatRoom: function(room) {
        return `${room.number} - ${room.type}`;
    },

    // Get guest full name with title
    guestFullName: function(guest) {
        return `${guest.title || ''} ${guest.firstName} ${guest.lastName}`.trim();
    },

    // Format booking ID
    formatBookingId: function(id) {
        return `#${id.toString().padStart(6, '0')}`;
    },

    // Get payment status color
    paymentStatusColor: function(status) {
        const colors = {
            'paid': 'success',
            'pending': 'warning',
            'failed': 'danger',
            'refunded': 'info',
            'partially_paid': 'primary'
        };
        return colors[status] || 'secondary';
    },

    // Format phone number
    formatPhone: function(phone) {
        if (!phone) return '';
        const cleaned = ('' + phone).replace(/\D/g, '');
        const match = cleaned.match(/^(\d{3})(\d{3})(\d{4})$/);
        if (match) {
            return '(' + match[1] + ') ' + match[2] + '-' + match[3];
        }
        return phone;
    },

    // Check if check-in is late
    isLateCheckIn: function(checkIn) {
        const checkInTime = new Date(checkIn);
        const cutoffTime = new Date(checkIn);
        cutoffTime.setHours(15, 0, 0); // 3 PM cutoff
        return checkInTime > cutoffTime;
    },

    // Check if check-out is late
    isLateCheckOut: function(checkOut) {
        const checkOutTime = new Date(checkOut);
        const cutoffTime = new Date(checkOut);
        cutoffTime.setHours(11, 0, 0); // 11 AM cutoff
        return checkOutTime > cutoffTime;
    },

    // Format stay status with icon
    stayStatusWithIcon: function(status) {
        const icons = {
            'pending': '<i class="fas fa-clock"></i>',
            'confirmed': '<i class="fas fa-check"></i>',
            'checked_in': '<i class="fas fa-bed"></i>',
            'checked_out': '<i class="fas fa-door-open"></i>',
            'cancelled': '<i class="fas fa-ban"></i>',
            'no_show': '<i class="fas fa-question"></i>'
        };
        return `${icons[status] || ''} ${status}`;
    },

    // Format housekeeping status
    housekeepingStatus: function(status) {
        const statuses = {
            'clean': 'Ready',
            'dirty': 'Needs Cleaning',
            'cleaning': 'In Progress',
            'maintenance': 'Under Maintenance',
            'inspection': 'Needs Inspection'
        };
        return statuses[status] || status;
    },

    // Get housekeeping status color
    housekeepingStatusColor: function(status) {
        const colors = {
            'clean': 'success',
            'dirty': 'danger',
            'cleaning': 'warning',
            'maintenance': 'info',
            'inspection': 'primary'
        };
        return colors[status] || 'secondary';
    },

    // Format special requests
    formatSpecialRequests: function(requests) {
        if (!requests || !requests.length) return 'None';
        return requests.join(', ');
    },

    // Check if room needs attention
    roomNeedsAttention: function(room) {
        return room.needsCleaning || 
               room.needsMaintenance || 
               room.status === 'maintenance' || 
               room.status === 'inspection';
    }
};

================
File: src/helpers/handlebars-helpers.js
================
const moment = require('moment');
const Handlebars = require('handlebars');

module.exports = {
    section: function (name, options) {
        if (!this._sections) this._sections = {};
        this._sections[name] = options.fn(this);
        return null;
    },
    formatDate: function (date) {
        return moment(date).format('MMM DD, YYYY');
    },
    formatTimeAgo: function (date) {
        return moment(date).fromNow();
    },
    firstLetter: function (str) {
        return str ? str.charAt(0).toUpperCase() : '';
    },
    // Billing helpers
    invoiceStatusColor: function (status) {
        const colors = {
            'draft': 'secondary',
            'issued': 'primary',
            'paid': 'success',
            'partially_paid': 'info',
            'overdue': 'danger',
            'cancelled': 'dark',
            'refunded': 'warning'
        };
        return colors[status] || 'secondary';
    },
    formatInvoiceStatus: function (status) {
        return status.split('_').map(word =>
            word.charAt(0).toUpperCase() + word.slice(1)
        ).join(' ');
    },
    transactionStatusColor: function (status) {
        const colors = {
            'pending': 'warning',
            'completed': 'success',
            'failed': 'danger',
            'refunded': 'info',
            'cancelled': 'secondary'
        };
        return colors[status] || 'secondary';
    },
    formatTransactionStatus: function (status) {
        return status.charAt(0).toUpperCase() + status.slice(1);
    },
    formatPaymentMethod: function (method) {
        return method.split('_').map(word =>
            word.charAt(0).toUpperCase() + word.slice(1)
        ).join(' ');
    },
    canEditInvoice: function (status) {
        return ['draft', 'issued'].includes(status);
    },
    // Existing helpers
    bookingStatusColor: function (status) {
        const colors = {
            'pending': 'warning',
            'confirmed': 'success',
            'checked-in': 'primary',
            'checked-out': 'secondary',
            'cancelled': 'danger'
        };
        return colors[status] || 'secondary';
    },
    requestStatusColor: function (status) {
        const colors = {
            'pending': 'warning',
            'processing': 'info',
            'completed': 'success',
            'cancelled': 'danger'
        };
        return colors[status] || 'secondary';
    },
    formatBookingStatus: function (status) {
        return status.charAt(0).toUpperCase() + status.slice(1);
    },
    formatRequestStatus: function (status) {
        return status.charAt(0).toUpperCase() + status.slice(1);
    }, 
    formatDateISO: function (date) {
        return moment(date).format('YYYY-MM-DD');
    },
    getStatusColor: function (status) {
        const colors = {
            'pending': 'warning',
            'confirmed': 'success',
            'cancelled': 'danger',
            'completed': 'info'
        };
        return colors[status.toLowerCase()] || 'secondary';
    },
    eq: function (a, b) {
        return a === b;
    },
    getPaginationUrl: function (page, options) {
        const currentUrl = options.data.root.currentUrl || '';
        const url = new URL(currentUrl, 'http://localhost:3000');

        if (page) {
            url.searchParams.set('page', page);
        } else {
            url.searchParams.delete('page');
        }

        return url.pathname + url.search;
    },
    lt: function (v1, v2) {
        return v1 < v2;
    },
    includes: function (array, value) {
        return Array.isArray(array) && array.includes(value);
    },
    tierColor: function (tier) {
        switch (tier) {
            case 'Bronze':
                return 'warning';
            case 'Silver':
                return 'secondary';
            case 'Gold':
                return 'primary';
            case 'Platinum':
                return 'info';
            default:
                return 'dark';
        }
    },
    statusColor: function (status) {
        switch (status) {
            case 'available':
                return 'success';
            case 'redeemed':
                return 'info';
            case 'expired':
                return 'danger';
            case 'pending':
                return 'warning';
            default:
                return 'secondary';
        }
    },
    countActiveRewards: function (rewards) {
        if (!Array.isArray(rewards)) return 0;
        return rewards.filter(reward => 
            reward.status === 'available' && 
            new Date(reward.expiryDate) > new Date()
        ).length;
    },
    formatDate: function (date) {
        if (!date) return '';
        return new Date(date).toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'short',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    },
    formatDateTime: function(date) {
        return moment(date).format('MMM DD, YYYY HH:mm');
    },
    gt: function(v1, v2) {
        return v1 > v2;
    },
    subtract: function(v1, v2) {
        return v1 - v2;
    },
    json: function(context) {
        return JSON.stringify(context);
    },
    statusColorLoyalty: function(status) {
        const colors = {
            'pending': 'warning',
            'completed': 'success',
            'expired': 'danger',
            'cancelled': 'secondary'
        };
        return colors[status] || 'primary';
    },
    categoryColor: function(category) {
        const colors = {
            'Room Upgrade': 'info',
            'Food & Beverage': 'success',
            'Spa & Wellness': 'warning',
            'Experience': 'primary',
            'Airport Transfer': 'danger'
        };
        return colors[category] || 'secondary';
    },
    isExpiringSoon: function(date) {
        const expiryDate = moment(date);
        const now = moment();
        const daysUntilExpiry = expiryDate.diff(now, 'days');
        return daysUntilExpiry >= 0 && daysUntilExpiry <= 7;
    },
    formatPoints: function(points) {
        return points.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
    },
    percentage: function(value, total) {
        if (total === 0) return 0;
        return Math.round((value / total) * 100);
    },
    formatCurrency: function(amount) {
        return new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: 'USD'
        }).format(amount);
    },
    progressColor: function(percentage) {
        if (percentage >= 80) return 'success';
        if (percentage >= 50) return 'info';
        if (percentage >= 25) return 'warning';
        return 'danger';
    },
    formatDuration: function(days) {
        if (days === 1) return '1 day';
        return `${days} days`;
    },
    initials: function(str) {
        return str
            .split(' ')
            .map(word => word[0])
            .join('')
            .toUpperCase();
    },
    formatPhone: function(phone) {
        if (!phone) return '';
        const cleaned = ('' + phone).replace(/\D/g, '');
        const match = cleaned.match(/^(\d{3})(\d{3})(\d{4})$/);
        if (match) {
            return '(' + match[1] + ') ' + match[2] + '-' + match[3];
        }
        return phone;
    },
    contractStatusColor: function(status) {
        const colors = {
            'active': 'success',
            'pending': 'warning',
            'expired': 'danger',
            'terminated': 'dark'
        };
        return colors[status] || 'secondary';
    },
    formatEventType: function(type) {
        return type.split('_').map(word =>
            word.charAt(0).toUpperCase() + word.slice(1)
        ).join(' ');
    },
    paymentStatusColor: function(status) {
        const colors = {
            'pending': 'warning',
            'partial': 'info',
            'paid': 'success',
            'refunded': 'dark'
        };
        return colors[status] || 'secondary';
    },
    formatPaymentTerms: function(terms) {
        switch(terms) {
            case 'immediate':
                return 'Immediate';
            case 'net15':
                return 'Net 15 Days';
            case 'net30':
                return 'Net 30 Days';
            case 'net45':
                return 'Net 45 Days';
            case 'net60':
                return 'Net 60 Days';
            default:
                return terms;
        }
    },
    roomTypeColor: function(type) {
        const colors = {
            'standard': 'secondary',
            'deluxe': 'info',
            'suite': 'primary',
            'executive': 'success',
            'presidential': 'warning'
        };
        return colors[type.toLowerCase()] || 'dark';
    }
};

// Format category name
Handlebars.registerHelper('formatCategory', function(category) {
    return category.split('_').map(word =>
        word.charAt(0).toUpperCase() + word.slice(1)
    ).join(' ');
});

// Get status color
Handlebars.registerHelper('statusColor', function(status) {
    switch(status) {
        case 'in_stock':
            return 'success';
        case 'low_stock':
            return 'warning';
        case 'out_of_stock':
            return 'danger';
        case 'discontinued':
            return 'secondary';
        default:
            return 'primary';
    }
});

// Get tier color
Handlebars.registerHelper('tierColor', function(tier) {
    switch(tier.toLowerCase()) {
        case 'bronze':
            return 'warning';
        case 'silver':
            return 'secondary';
        case 'gold':
            return 'warning';
        case 'platinum':
            return 'info';
        default:
            return 'primary';
    }
});

// Format currency
Handlebars.registerHelper('formatCurrency', function(amount) {
    return new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD'
    }).format(amount);
});

// Format date
Handlebars.registerHelper('formatDate', function(date) {
    return new Date(date).toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'short',
        day: 'numeric'
    });
});

// Format date and time
Handlebars.registerHelper('formatDateTime', function(date) {
    return new Date(date).toLocaleString('en-US', {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
});

// JSON stringify for chart data
Handlebars.registerHelper('json', function(context) {
    return JSON.stringify(context);
});

// Equality comparison
Handlebars.registerHelper('eq', function(a, b) {
    return a === b;
});

Handlebars.registerHelper('contractStatusColor', function(status) {
    const colors = {
        'active': 'success',
        'pending': 'warning',
        'expired': 'danger',
        'terminated': 'dark'
    };
    return colors[status] || 'secondary';
});

Handlebars.registerHelper('formatEventType', function(type) {
    return type.split('_').map(word =>
        word.charAt(0).toUpperCase() + word.slice(1)
    ).join(' ');
});

Handlebars.registerHelper('paymentStatusColor', function(status) {
    const colors = {
        'pending': 'warning',
        'partial': 'info',
        'paid': 'success',
        'refunded': 'dark'
    };
    return colors[status] || 'secondary';
});

Handlebars.registerHelper('formatPaymentTerms', function(terms) {
    switch(terms) {
        case 'immediate':
            return 'Immediate';
        case 'net15':
            return 'Net 15 Days';
        case 'net30':
            return 'Net 30 Days';
        case 'net45':
            return 'Net 45 Days';
        case 'net60':
            return 'Net 60 Days';
        default:
            return terms;
    }
});

Handlebars.registerHelper('roomTypeColor', function(type) {
    const colors = {
        'standard': 'secondary',
        'deluxe': 'info',
        'suite': 'primary',
        'executive': 'success',
        'presidential': 'warning'
    };
    return colors[type.toLowerCase()] || 'dark';
});

================
File: src/helpers/hbs.helper.js
================
const moment = require('moment');

module.exports = {
    formatDate: function(date) {
        return moment(date).format('MMM DD, YYYY');
    },
    firstChar: function(str) {
        return str ? str.charAt(0).toUpperCase() : '';
    },
    statusColor: function(status) {
        const colors = {
            'confirmed': 'success',
            'pending': 'warning',
            'cancelled': 'danger',
            'completed': 'info'
        };
        return colors[status] || 'secondary';
    },
    eq: function(a, b) {
        return a === b;
    },
    includes: function(array, item) {
        return array && array.includes(item);
    },
    formatNumber: function(number) {
        return number ? number.toLocaleString('en-US', {
            minimumFractionDigits: 2,
            maximumFractionDigits: 2
        }) : '0.00';
    }
};

================
File: src/middleware/asyncHandler.js
================
// Async handler middleware to wrap async functions and handle errors
const asyncHandler = fn => (req, res, next) => {
    Promise.resolve(fn(req, res, next)).catch(next);
};

module.exports = asyncHandler;

================
File: src/middleware/auth.js
================
const jwt = require('jsonwebtoken');
const User = require('../models/User');

// Helper function to determine if it's an API request
const isApiRequest = (req) => {
    return req.originalUrl.startsWith('/api/') || req.xhr || req.headers.accept?.includes('application/json');
};

// Helper function to handle unauthorized response
const handleUnauthorized = (req, res, message) => {
    if (isApiRequest(req)) {
        return res.status(401).json({
            success: false,
            message: message || 'Please authenticate'
        });
    }
    // For web routes, redirect to login page
    res.redirect('/auth/login');
};

// Protect routes
const protect = async (req, res, next) => {
    try {
        let token;

        // Get token from Authorization header
        if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {
            token = req.headers.authorization.split(' ')[1];
        }
        // Get token from cookie
        else if (req.cookies && req.cookies.token) {
            token = req.cookies.token;
        }

        if (!token) {
            return handleUnauthorized(req, res);
        }

        try {
            // Verify token
            const decoded = jwt.verify(token, process.env.JWT_SECRET || 'your-secret-key-123');

            // Get user from token
            const user = await User.findById(decoded.userId || decoded.id);

            if (!user) {
                return handleUnauthorized(req, res, 'User not found');
            }

            // Check if user is active
            if (!user.isActive) {
                return handleUnauthorized(req, res, 'User account is deactivated');
            }

            req.user = user;
            req.token = token;
            next();
        } catch (err) {
            console.error('Token verification error:', err);
            return handleUnauthorized(req, res);
        }
    } catch (error) {
        console.error('Auth middleware error:', error);
        if (isApiRequest(req)) {
            res.status(500).json({
                success: false,
                message: 'Internal server error'
            });
        } else {
            res.redirect('/auth/login');
        }
    }
};

// Authorize roles
const authorize = (...roles) => {
    return (req, res, next) => {
        if (!req.user) {
            return handleUnauthorized(req, res);
        }

        // Check both role and isAdmin flag
        if (!roles.includes(req.user.role) && !req.user.isAdmin) {
            if (isApiRequest(req)) {
                return res.status(403).json({
                    success: false,
                    message: `User role ${req.user.role} is not authorized to access this route`
                });
            } else {
                return res.redirect('/');
            }
        }

        next();
    };
};

module.exports = {
    protect,
    authorize
};

================
File: src/middleware/auth.middleware.js
================
const jwt = require('jsonwebtoken');
const User = require('../models/User');

// Helper function to determine if it's an API request
const isApiRequest = (req) => {
    return req.originalUrl.startsWith('/api/') || req.xhr || req.headers.accept?.includes('application/json');
};

// Helper function to handle unauthorized response
const handleUnauthorized = (req, res, message) => {
    if (isApiRequest(req)) {
        return res.status(401).json({
            success: false,
            message: message || 'Please authenticate'
        });
    }
    // For web routes, redirect to login page
    res.redirect('/auth/login');
};

// Protect routes
exports.protect = async (req, res, next) => {
    try {
        let token;

        // Get token from Authorization header
        if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {
            token = req.headers.authorization.split(' ')[1];
        }
        // Get token from cookie
        else if (req.cookies && req.cookies.token) {
            token = req.cookies.token;
        }

        if (!token) {
            return handleUnauthorized(req, res);
        }

        try {
            // Verify token
            const decoded = jwt.verify(token, process.env.JWT_SECRET || 'your-secret-key-123');

            // Get user from token
            const user = await User.findById(decoded.userId || decoded.id);

            if (!user) {
                return handleUnauthorized(req, res, 'User not found');
            }

            // Check if user is active
            if (!user.isActive) {
                return handleUnauthorized(req, res, 'User account is deactivated');
            }

            req.user = user;
            req.token = token;
            next();
        } catch (err) {
            console.error('Token verification error:', err);
            return handleUnauthorized(req, res);
        }
    } catch (error) {
        console.error('Auth middleware error:', error);
        if (isApiRequest(req)) {
            res.status(500).json({
                success: false,
                message: 'Internal server error'
            });
        } else {
            res.redirect('/auth/login');
        }
    }
};

// Grant access to specific roles
exports.authorize = (...roles) => {
    return (req, res, next) => {
        if (!req.user) {
            return handleUnauthorized(req, res);
        }

        // Check both role and isAdmin flag
        if (!roles.includes(req.user.role) && !req.user.isAdmin) {
            if (isApiRequest(req)) {
                return res.status(403).json({
                    success: false,
                    message: `User role ${req.user.role} is not authorized to access this route`
                });
            } else {
                return res.redirect('/');
            }
        }

        next();
    };
};

module.exports = exports;

================
File: src/middlewares/auth.middleware.js
================
const jwt = require('jsonwebtoken');
const User = require('../models/User');
const { JWT_SECRET } = require('../config/env');

// Protect routes
exports.protect = async (req, res, next) => {
    try {
        let token;

        // Get token from header or cookies
        if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {
            token = req.headers.authorization.split(' ')[1];
        } else if (req.cookies.token) {
            token = req.cookies.token;
        }

        if (!token) {
            return res.status(401).json({
                success: false,
                message: 'Not authorized to access this route'
            });
        }

        // Verify token
        const decoded = jwt.verify(token, JWT_SECRET);

        // Get user from token
        const user = await User.findById(decoded.id);
        if (!user) {
            return res.status(401).json({
                success: false,
                message: 'User not found'
            });
        }

        // Check if user is active
        if (!user.isActive) {
            return res.status(401).json({
                success: false,
                message: 'User account is inactive'
            });
        }

        // Add user to request
        req.user = user;
        next();
    } catch (error) {
        console.error('Auth middleware error:', error);
        return res.status(401).json({
            success: false,
            message: 'Not authorized to access this route'
        });
    }
};

// Grant access to specific roles
exports.authorize = (...roles) => {
    return (req, res, next) => {
        if (!req.user) {
            return res.status(401).json({
                success: false,
                message: 'Not authorized to access this route'
            });
        }

        if (!roles.includes(req.user.role)) {
            return res.status(403).json({
                success: false,
                message: 'User role not authorized to access this route'
            });
        }

        next();
    };
};

================
File: src/middlewares/error.middleware.js
================
const { errorResponse } = require('../utils/response.util');

const errorHandler = (err, req, res, next) => {
    let error = { ...err };
    error.message = err.message;

    // Mongoose bad ObjectId
    if (err.name === 'CastError') {
        error.message = 'Resource not found';
        return errorResponse(res, 404, error.message);
    }

    // Mongoose duplicate key
    if (err.code === 11000) {
        error.message = 'Duplicate field value entered';
        return errorResponse(res, 400, error.message);
    }

    // Mongoose validation error
    if (err.name === 'ValidationError') {
        const message = Object.values(err.errors).map(val => val.message);
        return errorResponse(res, 400, message.join(', '));
    }

    return errorResponse(res, error.statusCode || 500, error.message || 'Server Error');
};

module.exports = errorHandler;

================
File: src/models/AmenityRequest.js
================
const mongoose = require('mongoose');

const amenityRequestSchema = new mongoose.Schema({
    guest: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    room: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Room',
        required: true
    },
    hotel: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Hotel',
        required: true
    },
    amenityType: {
        type: String,
        enum: ['TOILETRIES', 'BEDDING', 'TOWELS', 'MINIBAR', 'CLEANING', 'OTHER'],
        required: true
    },
    items: [{
        item: {
            type: String,
            required: true
        },
        quantity: {
            type: Number,
            required: true,
            min: 1
        },
        notes: String
    }],
    status: {
        type: String,
        enum: ['PENDING', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED'],
        default: 'PENDING'
    },
    priority: {
        type: String,
        enum: ['LOW', 'MEDIUM', 'HIGH', 'URGENT'],
        default: 'MEDIUM'
    },
    requestedFor: {
        type: Date,
        default: Date.now
    },
    completedAt: Date,
    notes: String,
    assignedTo: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User'
    },
    metadata: {
        createdBy: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User',
            required: true
        },
        lastModifiedBy: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User'
        }
    }
}, {
    timestamps: true
});

// Indexes
amenityRequestSchema.index({ hotel: 1, status: 1 });
amenityRequestSchema.index({ guest: 1, status: 1 });
amenityRequestSchema.index({ assignedTo: 1, status: 1 });

// Methods
amenityRequestSchema.methods.markAsComplete = async function(userId) {
    this.status = 'COMPLETED';
    this.completedAt = new Date();
    this.metadata.lastModifiedBy = userId;
    await this.save();
};

amenityRequestSchema.methods.reassign = async function(newAssigneeId, userId) {
    this.assignedTo = newAssigneeId;
    this.metadata.lastModifiedBy = userId;
    await this.save();
};

// Statics
amenityRequestSchema.statics.findPendingRequests = function(hotelId) {
    return this.find({
        hotel: hotelId,
        status: 'PENDING'
    }).sort({ priority: -1, requestedFor: 1 });
};

amenityRequestSchema.statics.findRequestsByGuest = function(guestId, status) {
    const query = { guest: guestId };
    if (status) {
        query.status = status;
    }
    return this.find(query).sort({ requestedFor: -1 });
};

const AmenityRequest = mongoose.model('AmenityRequest', amenityRequestSchema);

module.exports = AmenityRequest;

================
File: src/models/Booking.js
================
const mongoose = require('mongoose');

// Check if model exists before defining
if (mongoose.models.Booking) {
    module.exports = mongoose.models.Booking;
} else {
    const bookingSchema = new mongoose.Schema({
        user: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User',
            required: true
        },
        hotel: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'Hotel',
            required: true
        },
        room: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'Room',
            required: true
        },
        checkIn: {
            type: Date,
            required: true
        },
        checkOut: {
            type: Date,
            required: true
        },
        guests: {
            adults: {
                type: Number,
                required: true,
                min: 1
            },
            children: {
                type: Number,
                default: 0
            },
            // Additional guest details
            names: [{
                type: String
            }],
            identifications: [{
                type: String
            }]
        },
        status: {
            type: String,
            enum: ['pending', 'confirmed', 'checked_in', 'checked_out', 'cancelled', 'completed', 'no_show'],
            default: 'pending'
        },
        bookingSource: {
            type: String,
            enum: ['website', 'walk_in', 'phone', 'corporate', 'ota', 'agent', 'other'],
            required: true
        },
        otaDetails: {
            platform: {
                type: String,
                enum: ['booking.com', 'expedia', 'airbnb', 'agoda', 'other']
            },
            bookingId: String,
            commission: Number
        },
        corporateDetails: {
            company: {
                type: mongoose.Schema.Types.ObjectId,
                ref: 'Company'
            },
            contactPerson: String,
            bookingReference: String,
            billingInstructions: String
        },
        agentDetails: {
            agent: {
                type: mongoose.Schema.Types.ObjectId,
                ref: 'Agent'
            },
            commission: Number,
            bookingReference: String
        },
        totalPrice: {
            type: Number,
            required: true
        },
        paymentStatus: {
            type: String,
            enum: ['pending', 'partially_paid', 'paid', 'refunded', 'failed'],
            default: 'pending'
        },
        paymentDetails: {
            method: {
                type: String,
                enum: ['credit_card', 'debit_card', 'cash', 'bank_transfer', 'corporate_billing']
            },
            amountPaid: {
                type: Number,
                default: 0
            },
            transactions: [{
                amount: Number,
                method: String,
                date: Date,
                reference: String,
                status: String
            }]
        },
        specialRequests: [{
            type: {
                type: String,
                enum: ['late_checkout', 'early_checkin', 'extra_bed', 'airport_pickup', 'special_occasion', 'dietary', 'other']
            },
            description: String,
            status: {
                type: String,
                enum: ['pending', 'approved', 'rejected', 'completed'],
                default: 'pending'
            },
            charge: {
                type: Number,
                default: 0
            }
        }],
        additionalCharges: [{
            description: String,
            amount: Number,
            date: {
                type: Date,
                default: Date.now
            },
            status: {
                type: String,
                enum: ['pending', 'paid'],
                default: 'pending'
            }
        }],
        loyaltyPointsEarned: {
            type: Number,
            default: 0
        },
        modifications: [{
            field: String,
            oldValue: mongoose.Schema.Types.Mixed,
            newValue: mongoose.Schema.Types.Mixed,
            reason: String,
            modifiedBy: {
                type: mongoose.Schema.Types.ObjectId,
                ref: 'User'
            },
            modifiedAt: {
                type: Date,
                default: Date.now
            }
        }],
        cancellation: {
            reason: String,
            date: Date,
            refundAmount: Number,
            refundStatus: {
                type: String,
                enum: ['pending', 'processed', 'completed'],
                default: 'pending'
            },
            cancelledBy: {
                type: mongoose.Schema.Types.ObjectId,
                ref: 'User'
            },
            policy: {
                type: String,
                enum: ['full_refund', 'partial_refund', 'no_refund']
            }
        },
        checkInDetails: {
            time: Date,
            keyCardNumber: String,
            notes: String,
            processedBy: {
                type: mongoose.Schema.Types.ObjectId,
                ref: 'User'
            }
        },
        checkOutDetails: {
            time: Date,
            notes: String,
            processedBy: {
                type: mongoose.Schema.Types.ObjectId,
                ref: 'User'
            },
            condition: {
                type: String,
                enum: ['excellent', 'good', 'fair', 'poor'],
                required: function() {
                    return this.status === 'checked_out' || this.status === 'completed';
                }
            },
            additionalCharges: [{
                description: String,
                amount: Number
            }]
        },
        flags: {
            isBlacklisted: {
                type: Boolean,
                default: false
            },
            isVIP: {
                type: Boolean,
                default: false
            },
            requiresAttention: {
                type: Boolean,
                default: false
            }
        },
        notes: [{
            content: String,
            author: {
                type: mongoose.Schema.Types.ObjectId,
                ref: 'User'
            },
            date: {
                type: Date,
                default: Date.now
            },
            type: {
                type: String,
                enum: ['general', 'issue', 'request', 'staff'],
                default: 'general'
            }
        }]
    }, {
        timestamps: true
    });

    // Calculate duration of stay in days
    bookingSchema.virtual('duration').get(function() {
        return Math.ceil((this.checkOut - this.checkIn) / (1000 * 60 * 60 * 24));
    });

    // Calculate total with additional charges
    bookingSchema.virtual('finalTotal').get(function() {
        const additionalTotal = this.additionalCharges.reduce((sum, charge) => sum + charge.amount, 0);
        const specialRequestTotal = this.specialRequests.reduce((sum, request) => sum + (request.charge || 0), 0);
        return this.totalPrice + additionalTotal + specialRequestTotal;
    });

    // Calculate amount due
    bookingSchema.virtual('amountDue').get(function() {
        return this.finalTotal - (this.paymentDetails.amountPaid || 0);
    });

    // Check if booking dates overlap with another booking
    bookingSchema.methods.hasOverlap = async function() {
        const overlapping = await this.constructor.findOne({
            room: this.room,
            _id: { $ne: this._id },
            $or: [
                {
                    checkIn: { $lt: this.checkOut },
                    checkOut: { $gt: this.checkIn }
                }
            ],
            status: { $nin: ['cancelled', 'completed'] }
        });
        return !!overlapping;
    };

    // Pre-save middleware to update loyalty points
    bookingSchema.pre('save', async function(next) {
        if (this.isModified('status') && this.status === 'completed') {
            try {
                const LoyaltyProgram = mongoose.model('LoyaltyProgram');
                const loyalty = await LoyaltyProgram.findOne({ user: this.user });
                if (loyalty) {
                    const points = Math.floor(this.finalTotal * 10);
                    await loyalty.addPoints(points, 'stay', this._id, 'Hotel stay completed');
                }
            } catch (error) {
                console.error('Error updating loyalty points:', error);
            }
        }
        next();
    });

    const Booking = mongoose.model('Booking', bookingSchema);
    module.exports = Booking;
}

================
File: src/models/Category.js
================
const mongoose = require('mongoose');

const categorySchema = new mongoose.Schema({
    name: {
        type: String,
        required: true,
        trim: true,
        unique: true
    },
    description: {
        type: String,
        trim: true
    },
    // For organizing categories hierarchically (e.g., Food > Beverages > Soft Drinks)
    parent: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Category'
    },
    // For tracking reward categories separately
    isRewardCategory: {
        type: Boolean,
        default: false
    },
    // For category-specific loyalty program rules
    loyaltyRules: {
        pointsMultiplier: {
            type: Number,
            default: 1,
            min: 0
        },
        bonusPoints: {
            type: Number,
            default: 0,
            min: 0
        },
        minimumPurchaseAmount: {
            type: Number,
            default: 0,
            min: 0
        }
    },
    createdBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    updatedBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User'
    }
}, {
    timestamps: true,
    toJSON: { virtuals: true },
    toObject: { virtuals: true }
});

// Virtual for child categories
categorySchema.virtual('children', {
    ref: 'Category',
    localField: '_id',
    foreignField: 'parent'
});

// Virtual for items in this category
categorySchema.virtual('items', {
    ref: 'InventoryItem',
    localField: '_id',
    foreignField: 'category'
});

// Get full path of category (e.g., "Food > Beverages > Soft Drinks")
categorySchema.methods.getFullPath = async function() {
    let path = [this.name];
    let currentCategory = this;

    while (currentCategory.parent) {
        currentCategory = await this.model('Category').findById(currentCategory.parent);
        if (currentCategory) {
            path.unshift(currentCategory.name);
        } else {
            break;
        }
    }

    return path.join(' > ');
};

// Get all descendant categories
categorySchema.methods.getAllDescendants = async function() {
    const descendants = [];
    const queue = [this._id];

    while (queue.length > 0) {
        const parentId = queue.shift();
        const children = await this.model('Category').find({ parent: parentId });
        
        for (const child of children) {
            descendants.push(child);
            queue.push(child._id);
        }
    }

    return descendants;
};

// Middleware to prevent circular references in parent-child relationships
categorySchema.pre('save', async function(next) {
    if (this.isModified('parent') && this.parent) {
        let currentParent = await this.model('Category').findById(this.parent);
        while (currentParent) {
            if (currentParent._id.equals(this._id)) {
                next(new Error('Circular reference detected in category hierarchy'));
                return;
            }
            currentParent = currentParent.parent ? 
                await this.model('Category').findById(currentParent.parent) : 
                null;
        }
    }
    next();
});

// Create indexes
categorySchema.index({ name: 1 }, { unique: true });
categorySchema.index({ parent: 1 });
categorySchema.index({ isRewardCategory: 1 });
categorySchema.index({ createdBy: 1 });

const Category = mongoose.model('Category', categorySchema);
module.exports = Category;

================
File: src/models/category.model.js
================
const mongoose = require('mongoose');

const categorySchema = new mongoose.Schema({
    name: {
        type: String,
        required: true,
        trim: true,
        unique: true
    },
    description: {
        type: String,
        trim: true
    },
    parentCategory: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Category',
        default: null
    },
    image: {
        type: String,
        trim: true
    },
    status: {
        type: String,
        enum: ['active', 'inactive'],
        default: 'active'
    },
    loyaltyProgram: {
        isEligible: {
            type: Boolean,
            default: false
        },
        basePoints: {
            type: Number,
            default: 0
        },
        bonusMultiplier: {
            type: Number,
            default: 1,
            min: 1,
            max: 5
        },
        tierMultipliers: {
            bronze: { type: Number, default: 1 },
            silver: { type: Number, default: 1.2 },
            gold: { type: Number, default: 1.5 },
            platinum: { type: Number, default: 2 }
        }
    },
    metadata: {
        itemCount: {
            type: Number,
            default: 0
        },
        totalValue: {
            type: Number,
            default: 0
        },
        lastUpdated: {
            type: Date,
            default: Date.now
        }
    }
}, {
    timestamps: true,
    toJSON: { virtuals: true },
    toObject: { virtuals: true }
});

// Virtual for subcategories
categorySchema.virtual('subcategories', {
    ref: 'Category',
    localField: '_id',
    foreignField: 'parentCategory'
});

// Virtual for items in this category
categorySchema.virtual('items', {
    ref: 'InventoryItem',
    localField: '_id',
    foreignField: 'category'
});

// Pre-save middleware to update metadata
categorySchema.pre('save', async function(next) {
    if (this.isModified('status')) {
        // Update all items in this category if category becomes inactive
        if (this.status === 'inactive') {
            await mongoose.model('InventoryItem').updateMany(
                { category: this._id },
                { status: 'discontinued' }
            );

            // Update loyalty program if category becomes inactive
            if (this.loyaltyProgram.isEligible) {
                await mongoose.model('LoyaltyProgram').updateMany(
                    { 'rewards.type': 'category_discount', 'rewards.categoryId': this._id },
                    { $set: { 'rewards.$.active': false } }
                );
            }
        }
    }
    next();
});

// Method to calculate points for a purchase amount
categorySchema.methods.calculateLoyaltyPoints = function(amount, userTier = 'bronze') {
    if (!this.loyaltyProgram.isEligible) return 0;

    const basePoints = (amount / 100) * this.loyaltyProgram.basePoints;
    const tierMultiplier = this.loyaltyProgram.tierMultipliers[userTier.toLowerCase()];
    const bonusMultiplier = this.loyaltyProgram.bonusMultiplier;

    return Math.floor(basePoints * tierMultiplier * bonusMultiplier);
};

// Static method to get categories with loyalty program
categorySchema.statics.getLoyaltyCategories = function() {
    return this.find({
        'loyaltyProgram.isEligible': true,
        'status': 'active'
    });
};

// Static method to update category metadata
categorySchema.statics.updateMetadata = async function(categoryId) {
    const InventoryItem = mongoose.model('InventoryItem');
    
    const [itemCount, totalValue] = await Promise.all([
        InventoryItem.countDocuments({ category: categoryId, status: 'active' }),
        InventoryItem.aggregate([
            { $match: { category: categoryId, status: 'active' } },
            { $group: { _id: null, total: { $sum: { $multiply: ['$stock', '$unitPrice'] } } } }
        ])
    ]);

    await this.findByIdAndUpdate(categoryId, {
        $set: {
            'metadata.itemCount': itemCount,
            'metadata.totalValue': totalValue[0]?.total || 0,
            'metadata.lastUpdated': new Date()
        }
    });
};

// Ensure indexes
categorySchema.index({ name: 1 }, { unique: true });
categorySchema.index({ parentCategory: 1 });
categorySchema.index({ status: 1 });
categorySchema.index({ 'loyaltyProgram.isEligible': 1 });

const Category = mongoose.model('Category', categorySchema);

module.exports = Category;

================
File: src/models/CheckInOut.js
================
const mongoose = require('mongoose');

const checkInOutSchema = new mongoose.Schema({
    bookingId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Booking',
        required: true
    },
    guestId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    roomId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Room',
        required: true
    },
    checkInTime: {
        type: Date,
        default: null
    },
    checkOutTime: {
        type: Date,
        default: null
    },
    status: {
        type: String,
        enum: ['pending', 'checked-in', 'checked-out'],
        default: 'pending'
    },
    keyCardNumber: {
        type: String,
        unique: true,
        sparse: true
    },
    specialRequests: [{
        type: String
    }],
    additionalGuests: [{
        name: String,
        idType: String,
        idNumber: String
    }],
    vehicleInfo: {
        plateNumber: String,
        parkingSpot: String
    },
    depositAmount: {
        type: Number,
        default: 0
    },
    notes: {
        type: String
    },
    createdBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    updatedBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User'
    }
}, {
    timestamps: true
});

// Indexes
checkInOutSchema.index({ bookingId: 1 });
checkInOutSchema.index({ guestId: 1 });
checkInOutSchema.index({ roomId: 1 });
checkInOutSchema.index({ status: 1 });
checkInOutSchema.index({ keyCardNumber: 1 });

module.exports = mongoose.model('CheckInOut', checkInOutSchema);

================
File: src/models/CorporateAccount.js
================
const mongoose = require('mongoose');

const corporateAccountSchema = new mongoose.Schema({
    companyName: {
        type: String,
        required: true,
        trim: true,
        index: true
    },
    registrationNumber: {
        type: String,
        required: true,
        unique: true,
        index: true
    },
    contactPerson: {
        name: String,
        email: {
            type: String,
            required: true,
            unique: true,
            index: true
        },
        phone: String,
        position: String
    },
    billingAddress: {
        street: String,
        city: String,
        state: String,
        country: String,
        postalCode: String
    },
    contractDetails: {
        startDate: Date,
        endDate: Date,
        status: {
            type: String,
            enum: ['active', 'pending', 'expired', 'terminated'],
            default: 'pending',
            index: true
        }
    },
    rateContract: {
        discountPercentage: {
            type: Number,
            default: 0
        },
        roomTypes: [{
            type: {
                type: String,
                required: true
            },
            rate: {
                type: Number,
                required: true
            }
        }],
        specialRates: [{
            startDate: Date,
            endDate: Date,
            discountPercentage: Number
        }]
    },
    creditLimit: {
        amount: {
            type: Number,
            default: 0
        },
        currency: {
            type: String,
            default: 'USD'
        }
    },
    paymentTerms: {
        type: String,
        enum: ['immediate', 'net15', 'net30', 'net45', 'net60'],
        default: 'net30',
        index: true
    },
    documents: [{
        type: {
            type: String,
            enum: ['contract', 'tax', 'registration', 'other']
        },
        name: String,
        url: String,
        uploadDate: {
            type: Date,
            default: Date.now
        }
    }],
    status: {
        type: String,
        enum: ['active', 'inactive', 'suspended'],
        default: 'active',
        index: true
    }
}, {
    timestamps: true
});

// Create indexes for frequently queried fields
corporateAccountSchema.index({ 'contractDetails.endDate': 1 });

// Method to check if contract is valid
corporateAccountSchema.methods.isContractValid = function() {
    const now = new Date();
    return (
        this.contractDetails.status === 'active' &&
        this.contractDetails.startDate <= now &&
        this.contractDetails.endDate >= now
    );
};

// Method to calculate rate for a room type
corporateAccountSchema.methods.calculateRate = function(roomType, baseRate, date) {
    // Check if contract is valid
    if (!this.isContractValid()) {
        return baseRate;
    }

    // Find special rate for the date if exists
    const specialRate = this.rateContract.specialRates.find(rate => 
        date >= rate.startDate && date <= rate.endDate
    );

    if (specialRate) {
        return baseRate * (1 - specialRate.discountPercentage / 100);
    }

    // Find contracted rate for room type
    const contractedRate = this.rateContract.roomTypes.find(r => r.type === roomType);
    if (contractedRate) {
        return contractedRate.rate;
    }

    // Apply general discount if no specific rate found
    return baseRate * (1 - this.rateContract.discountPercentage / 100);
};

const CorporateAccount = mongoose.model('CorporateAccount', corporateAccountSchema);
module.exports = CorporateAccount;

================
File: src/models/DigitalKey.js
================
const mongoose = require('mongoose');

const digitalKeySchema = new mongoose.Schema({
    booking: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Booking',
        required: true
    },
    user: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    room: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Room',
        required: true
    },
    key: {
        type: String,
        required: true
    },
    validFrom: {
        type: Date,
        required: true
    },
    validTo: {
        type: Date,
        required: true
    },
    status: {
        type: String,
        enum: ['active', 'inactive', 'expired', 'revoked'],
        default: 'active'
    },
    lastUsed: {
        type: Date
    },
    accessLog: [{
        timestamp: {
            type: Date,
            default: Date.now
        },
        action: {
            type: String,
            enum: ['unlock', 'lock', 'attempt'],
            required: true
        },
        success: {
            type: Boolean,
            required: true
        },
        deviceInfo: {
            type: String
        },
        location: {
            type: {
                type: String,
                enum: ['Point'],
                default: 'Point'
            },
            coordinates: {
                type: [Number],
                default: [0, 0]
            }
        }
    }],
    deviceRegistrations: [{
        deviceId: {
            type: String,
            required: true
        },
        platform: {
            type: String,
            enum: ['ios', 'android'],
            required: true
        },
        registeredAt: {
            type: Date,
            default: Date.now
        },
        lastActive: {
            type: Date
        }
    }],
    restrictions: {
        timeRestrictions: {
            enabled: {
                type: Boolean,
                default: false
            },
            allowedTimeRanges: [{
                start: String,
                end: String,
                days: [Number] // 0-6 for Sunday-Saturday
            }]
        },
        areaRestrictions: {
            enabled: {
                type: Boolean,
                default: false
            },
            allowedAreas: [{
                type: String
            }]
        },
        usageLimit: {
            enabled: {
                type: Boolean,
                default: false
            },
            maxUsesPerDay: {
                type: Number
            }
        }
    }
}, {
    timestamps: true
});

// Index for geospatial queries on access log locations
digitalKeySchema.index({ 'accessLog.location': '2dsphere' });

// Index for querying active keys
digitalKeySchema.index({ status: 1, validFrom: 1, validTo: 1 });

// Middleware to check and update key status based on validity dates
digitalKeySchema.pre('save', function(next) {
    const now = new Date();
    if (this.validTo < now) {
        this.status = 'expired';
    }
    next();
});

// Method to validate key access
digitalKeySchema.methods.validateAccess = async function(deviceInfo = {}) {
    const now = new Date();

    // Check basic validity
    if (this.status !== 'active') return false;
    if (now < this.validFrom || now > this.validTo) return false;

    // Check time restrictions
    if (this.restrictions.timeRestrictions.enabled) {
        const currentDay = now.getDay();
        const currentTime = now.toTimeString().slice(0, 5); // HH:MM format

        const hasValidTimeSlot = this.restrictions.timeRestrictions.allowedTimeRanges.some(range => {
            return range.days.includes(currentDay) &&
                   currentTime >= range.start &&
                   currentTime <= range.end;
        });

        if (!hasValidTimeSlot) return false;
    }

    // Check usage limits
    if (this.restrictions.usageLimit.enabled) {
        const startOfDay = new Date(now);
        startOfDay.setHours(0, 0, 0, 0);

        const todayUses = this.accessLog.filter(log => 
            log.timestamp >= startOfDay && 
            log.action === 'unlock' && 
            log.success
        ).length;

        if (todayUses >= this.restrictions.usageLimit.maxUsesPerDay) return false;
    }

    return true;
};

// Method to log access attempt
digitalKeySchema.methods.logAccess = async function(action, success, deviceInfo = {}) {
    this.lastUsed = new Date();
    this.accessLog.push({
        action,
        success,
        deviceInfo: JSON.stringify(deviceInfo),
        location: deviceInfo.location || undefined
    });
    await this.save();
};

// Method to register new device
digitalKeySchema.methods.registerDevice = async function(deviceId, platform) {
    const existingDevice = this.deviceRegistrations.find(d => d.deviceId === deviceId);
    
    if (existingDevice) {
        existingDevice.lastActive = new Date();
    } else {
        this.deviceRegistrations.push({
            deviceId,
            platform,
            lastActive: new Date()
        });
    }
    
    await this.save();
};

const DigitalKey = mongoose.model('DigitalKey', digitalKeySchema);

module.exports = DigitalKey;

================
File: src/models/EmailCampaign.js
================
const mongoose = require('mongoose');

// Check if model exists before defining
if (mongoose.models.EmailCampaign) {
    module.exports = mongoose.models.EmailCampaign;
} else {
    const emailCampaignSchema = new mongoose.Schema({
        name: {
            type: String,
            required: true,
            trim: true
        },
        subject: {
            type: String,
            required: true,
            trim: true
        },
        content: {
            type: String,
            required: true
        },
        template: {
            type: String,
            enum: ['newsletter', 'promotion', 'welcome', 'loyalty', 'event', 'custom'],
            default: 'custom'
        },
        targetAudience: {
            type: [{
                type: String,
                enum: ['all', 'loyalty_members', 'past_guests', 'new_guests', 'vip']
            }],
            default: ['all']
        },
        filters: {
            loyaltyTier: [{
                type: String,
                enum: ['Bronze', 'Silver', 'Gold', 'Platinum']
            }],
            lastStayDays: Number,
            minimumStays: Number,
            totalSpent: Number
        },
        schedule: {
            sendDate: Date,
            recurring: {
                type: Boolean,
                default: false
            },
            frequency: {
                type: String,
                enum: ['daily', 'weekly', 'monthly', 'quarterly'],
                required: function() {
                    return this.schedule.recurring;
                }
            }
        },
        status: {
            type: String,
            enum: ['draft', 'scheduled', 'sending', 'completed', 'cancelled'],
            default: 'draft'
        },
        metrics: {
            sent: {
                type: Number,
                default: 0
            },
            opened: {
                type: Number,
                default: 0
            },
            clicked: {
                type: Number,
                default: 0
            },
            bounced: {
                type: Number,
                default: 0
            },
            unsubscribed: {
                type: Number,
                default: 0
            }
        },
        createdBy: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User',
            required: true
        }
    }, {
        timestamps: true
    });

    // Indexes
    emailCampaignSchema.index({ status: 1 });
    emailCampaignSchema.index({ 'schedule.sendDate': 1 });
    emailCampaignSchema.index({ createdAt: -1 });

    const EmailCampaign = mongoose.model('EmailCampaign', emailCampaignSchema);
    module.exports = EmailCampaign;
}

================
File: src/models/Group.js
================
const mongoose = require('mongoose');

const groupSchema = new mongoose.Schema({
    groupName: {
        type: String,
        required: [true, 'Please add a group name'],
        trim: true
    },
    contactPerson: {
        name: {
            type: String,
            required: [true, 'Please add contact person name']
        },
        email: {
            type: String,
            required: [true, 'Please add contact person email'],
            match: [
                /^([\w-\.]+@([\w-]+\.)+[\w-]{2,4})?$/,
                'Please add a valid email'
            ]
        },
        phone: {
            type: String,
            required: [true, 'Please add contact person phone']
        }
    },
    checkInDate: {
        type: Date,
        required: [true, 'Please add check-in date']
    },
    checkOutDate: {
        type: Date,
        required: [true, 'Please add check-out date']
    },
    numberOfRooms: {
        type: Number,
        required: [true, 'Please add number of rooms']
    },
    roomType: {
        type: String,
        required: [true, 'Please add room type'],
        enum: ['standard', 'deluxe', 'suite', 'executive']
    },
    specialRequests: {
        type: String
    },
    status: {
        type: String,
        enum: ['pending', 'confirmed', 'checked-in', 'checked-out', 'cancelled'],
        default: 'pending'
    },
    paymentStatus: {
        type: String,
        enum: ['pending', 'partial', 'paid'],
        default: 'pending'
    },
    totalAmount: {
        type: Number,
        required: true
    },
    paidAmount: {
        type: Number,
        default: 0
    },
    bookings: [{
        type: mongoose.Schema.ObjectId,
        ref: 'Booking'
    }],
    createdBy: {
        type: mongoose.Schema.ObjectId,
        ref: 'User',
        required: true
    }
}, {
    timestamps: true,
    toJSON: { virtuals: true },
    toObject: { virtuals: true }
});

// Add index for frequently queried fields
groupSchema.index({ groupName: 1, status: 1 });
groupSchema.index({ checkInDate: 1, checkOutDate: 1 });

// Calculate remaining balance
groupSchema.virtual('remainingBalance').get(function() {
    return this.totalAmount - this.paidAmount;
});

module.exports = mongoose.model('Group', groupSchema);

================
File: src/models/GroupBooking.js
================
const mongoose = require('mongoose');

const groupBookingSchema = new mongoose.Schema({
    name: {
        type: String,
        required: true,
        trim: true
    },
    corporateAccount: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'CorporateAccount'
    },
    organizer: {
        name: String,
        email: String,
        phone: String,
        role: String
    },
    eventDetails: {
        type: {
            type: String,
            enum: ['conference', 'wedding', 'tour_group', 'corporate_event', 'other'],
            required: true
        },
        description: String,
        startDate: {
            type: Date,
            required: true
        },
        endDate: {
            type: Date,
            required: true
        }
    },
    rooms: [{
        roomType: {
            type: String,
            required: true
        },
        quantity: {
            type: Number,
            required: true,
            min: 1
        },
        rate: {
            type: Number,
            required: true
        },
        assignedRooms: [{
            type: mongoose.Schema.Types.ObjectId,
            ref: 'Room'
        }]
    }],
    guests: [{
        name: String,
        email: String,
        phone: String,
        roomAssignment: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'Room'
        },
        checkInStatus: {
            type: String,
            enum: ['pending', 'checked_in', 'checked_out'],
            default: 'pending'
        }
    }],
    amenities: [{
        type: {
            type: String,
            enum: ['meeting_room', 'conference_hall', 'dining', 'transportation', 'other']
        },
        description: String,
        quantity: Number,
        rate: Number,
        dates: [{
            date: Date,
            startTime: String,
            endTime: String
        }]
    }],
    payment: {
        method: {
            type: String,
            enum: ['credit_card', 'bank_transfer', 'corporate_billing', 'cash'],
            required: true
        },
        status: {
            type: String,
            enum: ['pending', 'partial', 'paid', 'refunded'],
            default: 'pending'
        },
        depositAmount: Number,
        depositPaid: {
            type: Boolean,
            default: false
        },
        totalAmount: {
            type: Number,
            required: true
        },
        transactions: [{
            date: Date,
            amount: Number,
            type: {
                type: String,
                enum: ['deposit', 'payment', 'refund']
            },
            reference: String
        }]
    },
    status: {
        type: String,
        enum: ['draft', 'confirmed', 'in_progress', 'completed', 'cancelled'],
        default: 'draft'
    },
    cancellationPolicy: {
        deadline: Date,
        refundPercentage: Number,
        terms: String
    },
    notes: [{
        content: String,
        author: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User'
        },
        date: {
            type: Date,
            default: Date.now
        }
    }]
}, {
    timestamps: true
});

// Add indexes for frequently queried fields
groupBookingSchema.index({ status: 1 });
groupBookingSchema.index({ 'eventDetails.startDate': 1 });
groupBookingSchema.index({ 'eventDetails.endDate': 1 });
groupBookingSchema.index({ 'payment.status': 1 });

// Calculate total number of rooms
groupBookingSchema.virtual('totalRooms').get(function() {
    return this.rooms.reduce((total, room) => total + room.quantity, 0);
});

// Calculate total number of guests
groupBookingSchema.virtual('totalGuests').get(function() {
    return this.guests.length;
});

// Calculate remaining balance
groupBookingSchema.virtual('remainingBalance').get(function() {
    const totalPaid = this.payment.transactions.reduce((sum, transaction) => {
        return transaction.type === 'refund' 
            ? sum - transaction.amount 
            : sum + transaction.amount;
    }, 0);
    return this.payment.totalAmount - totalPaid;
});

// Method to check room availability
groupBookingSchema.methods.checkAvailability = async function() {
    const Room = mongoose.model('Room');
    const availability = [];

    for (const roomRequest of this.rooms) {
        const availableRooms = await Room.find({
            type: roomRequest.roomType,
            status: 'available',
            hotel: this.hotel
        }).count();

        availability.push({
            roomType: roomRequest.roomType,
            requested: roomRequest.quantity,
            available: availableRooms,
            sufficient: availableRooms >= roomRequest.quantity
        });
    }

    return availability;
};

const GroupBooking = mongoose.model('GroupBooking', groupBookingSchema);
module.exports = GroupBooking;

================
File: src/models/Guest.js
================
const mongoose = require('mongoose');

const guestSchema = new mongoose.Schema({
    user: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User'
    },
    name: {
        type: String,
        required: true,
        trim: true
    },
    email: {
        type: String,
        required: true,
        unique: true,
        trim: true,
        lowercase: true,
        match: [/^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,3})+$/, 'Please enter a valid email']
    },
    phone: {
        type: String,
        trim: true
    },
    address: {
        street: String,
        city: String,
        state: String,
        country: String,
        postalCode: String
    },
    nationality: String,
    idType: {
        type: String,
        enum: ['passport', 'national_id', 'driving_license', 'other'],
        required: true
    },
    idNumber: {
        type: String,
        required: true
    },
    dateOfBirth: Date,
    preferences: {
        roomType: {
            type: String,
            enum: ['single', 'double', 'suite', 'deluxe']
        },
        floorPreference: String,
        dietaryRestrictions: [String],
        specialRequests: String
    },
    loyaltyProgram: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'LoyaltyProgram'
    },
    bookingHistory: [{
        booking: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'Booking'
        },
        checkIn: Date,
        checkOut: Date,
        roomType: String,
        totalAmount: Number,
        status: {
            type: String,
            enum: ['completed', 'cancelled', 'no_show']
        },
        rating: {
            type: Number,
            min: 1,
            max: 5
        },
        review: String
    }],
    status: {
        type: String,
        enum: ['active', 'inactive', 'blacklisted'],
        default: 'active'
    },
    blacklistReason: String,
    notes: [{
        content: String,
        createdBy: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User'
        },
        createdAt: {
            type: Date,
            default: Date.now
        }
    }],
    documents: [{
        type: {
            type: String,
            enum: ['id', 'passport', 'visa', 'other']
        },
        number: String,
        expiryDate: Date,
        fileUrl: String
    }],
    createdBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    }
}, {
    timestamps: true
});

// Indexes
guestSchema.index({ email: 1 }, { unique: true });
guestSchema.index({ phone: 1 });
guestSchema.index({ 'bookingHistory.booking': 1 });
guestSchema.index({ status: 1 });
guestSchema.index({ loyaltyProgram: 1 });

// Pre-save middleware to handle loyalty program
guestSchema.pre('save', async function(next) {
    if (this.isNew) {
        try {
            // Create loyalty program for new guests
            const LoyaltyProgram = mongoose.model('LoyaltyProgram');
            const loyaltyProgram = await LoyaltyProgram.create({
                user: this.user,
                guest: this._id,
                tier: 'Bronze',
                points: 0,
                memberSince: new Date()
            });
            
            this.loyaltyProgram = loyaltyProgram._id;
        } catch (error) {
            console.error('Error creating loyalty program for guest:', error);
        }
    }
    next();
});

// Virtual for total spent
guestSchema.virtual('totalSpent').get(function() {
    return this.bookingHistory.reduce((total, booking) => {
        return total + (booking.status === 'completed' ? booking.totalAmount : 0);
    }, 0);
});

// Virtual for average rating
guestSchema.virtual('averageRating').get(function() {
    const ratedBookings = this.bookingHistory.filter(booking => booking.rating);
    if (ratedBookings.length === 0) return 0;
    
    const totalRating = ratedBookings.reduce((sum, booking) => sum + booking.rating, 0);
    return totalRating / ratedBookings.length;
});

// Method to add booking to history
guestSchema.methods.addBooking = async function(bookingData) {
    this.bookingHistory.push(bookingData);
    
    if (bookingData.status === 'completed') {
        // Update loyalty points (1 point per dollar spent)
        const pointsEarned = Math.floor(bookingData.totalAmount);
        
        const loyaltyProgram = await mongoose.model('LoyaltyProgram')
            .findById(this.loyaltyProgram);
            
        if (loyaltyProgram) {
            await loyaltyProgram.addPoints(pointsEarned, 'Booking Completion', {
                bookingId: bookingData.booking,
                amount: bookingData.totalAmount
            });
        }
    }
    
    return this.save();
};

// Method to update guest status
guestSchema.methods.updateStatus = async function(newStatus, reason = '') {
    this.status = newStatus;
    if (newStatus === 'blacklisted') {
        this.blacklistReason = reason;
    }
    return this.save();
};

module.exports = mongoose.model('Guest', guestSchema);

================
File: src/models/Hotel.js
================
const mongoose = require('mongoose');

// Check if model exists before defining
if (mongoose.models.Hotel) {
    module.exports = mongoose.models.Hotel;
} else {
    const hotelSchema = new mongoose.Schema({
        name: {
            type: String,
            required: true,
            trim: true
        },
        description: {
            type: String,
            required: true
        },
        featured: {
            type: Boolean,
            default: false
        },
        startingPrice: {
            type: Number,
            required: true
        },
        location: {
            address: {
                type: String,
                required: true
            },
            city: {
                type: String,
                required: true
            },
            state: {
                type: String,
                required: true
            },
            country: {
                type: String,
                required: true
            },
            zipCode: {
                type: String,
                required: true
            },
            coordinates: {
                latitude: Number,
                longitude: Number
            }
        },
        amenities: [{
            type: String,
            enum: [
                'pool',
                'spa',
                'gym',
                'restaurant',
                'bar',
                'room_service',
                'wifi',
                'parking',
                'conference_room',
                'business_center',
                'laundry',
                'concierge'
            ]
        }],
        images: [{
            url: String,
            caption: String,
            isPrimary: {
                type: Boolean,
                default: false
            }
        }],
        rooms: [{
            type: mongoose.Schema.Types.ObjectId,
            ref: 'Room'
        }],
        rating: {
            average: {
                type: Number,
                default: 0,
                min: 0,
                max: 5
            },
            count: {
                type: Number,
                default: 0
            }
        },
        policies: {
            checkInTime: {
                type: String,
                default: '14:00'
            },
            checkOutTime: {
                type: String,
                default: '12:00'
            },
            cancellationDeadline: {
                type: Number,
                default: 24 // hours before check-in
            },
            cancellationFee: {
                type: Number,
                default: 0 // percentage of total booking
            },
            petFriendly: {
                type: Boolean,
                default: false
            }
        },
        loyaltyBenefits: {
            pointsMultiplier: {
                type: Number,
                default: 1
            },
            memberDiscounts: [{
                tier: {
                    type: String,
                    enum: ['Bronze', 'Silver', 'Gold', 'Platinum']
                },
                discount: {
                    type: Number,
                    min: 0,
                    max: 100
                }
            }],
            specialPerks: [{
                tier: {
                    type: String,
                    enum: ['Bronze', 'Silver', 'Gold', 'Platinum']
                },
                perks: [String]
            }]
        },
        status: {
            type: String,
            enum: ['active', 'maintenance', 'closed'],
            default: 'active'
        },
        manager: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User',
            required: true
        },
        contacts: {
            phone: {
                type: String,
                required: true
            },
            email: {
                type: String,
                required: true
            },
            website: String
        }
    }, {
        timestamps: true
    });

    // Virtual for getting room availability
    hotelSchema.virtual('availableRooms').get(async function() {
        const Room = mongoose.model('Room');
        const rooms = await Room.find({
            _id: { $in: this.rooms },
            isAvailable: true
        });
        return rooms;
    });

    // Method to calculate room rates with loyalty discounts
    hotelSchema.methods.calculateRoomRate = function(roomType, loyaltyTier) {
        const baseRate = roomType.baseRate;
        if (!loyaltyTier) return baseRate;

        const tierDiscount = this.loyaltyBenefits.memberDiscounts.find(d => d.tier === loyaltyTier);
        if (!tierDiscount) return baseRate;

        return baseRate * (1 - (tierDiscount.discount / 100));
    };

    // Method to get loyalty perks for a tier
    hotelSchema.methods.getLoyaltyPerks = function(tier) {
        const tierPerks = this.loyaltyBenefits.specialPerks.find(p => p.tier === tier);
        return tierPerks ? tierPerks.perks : [];
    };

    // Index for searching
    hotelSchema.index({
        'name': 'text',
        'location.city': 'text',
        'location.country': 'text',
        'description': 'text'
    });

    const Hotel = mongoose.model('Hotel', hotelSchema);
    module.exports = Hotel;
}

================
File: src/models/HousekeepingTask.js
================
const mongoose = require('mongoose');

const housekeepingTaskSchema = new mongoose.Schema({
    room: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Room',
        required: true
    },
    taskType: {
        type: String,
        enum: ['CLEANING', 'MAINTENANCE', 'INSPECTION', 'TURNDOWN', 'LINEN_CHANGE', 'RESTOCKING'],
        required: true
    },
    status: {
        type: String,
        enum: ['PENDING', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED'],
        default: 'PENDING'
    },
    priority: {
        type: String,
        enum: ['LOW', 'MEDIUM', 'HIGH', 'URGENT'],
        default: 'MEDIUM'
    },
    assignedTo: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User'
    },
    description: {
        type: String,
        required: true
    },
    notes: String,
    scheduledFor: {
        type: Date,
        required: true
    },
    completedAt: Date,
    duration: {
        type: Number, // in minutes
        default: 30
    },
    checklist: [{
        item: {
            type: String,
            required: true
        },
        completed: {
            type: Boolean,
            default: false
        },
        completedAt: Date,
        notes: String
    }],
    supplies: [{
        item: {
            type: String,
            required: true
        },
        quantity: {
            type: Number,
            required: true
        }
    }],
    images: [{
        url: String,
        caption: String,
        uploadedAt: {
            type: Date,
            default: Date.now
        }
    }],
    feedback: {
        rating: {
            type: Number,
            min: 1,
            max: 5
        },
        comment: String,
        submittedAt: Date
    },
    metadata: {
        createdBy: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User',
            required: true
        },
        lastModifiedBy: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User'
        }
    }
}, {
    timestamps: true
});

// Indexes
housekeepingTaskSchema.index({ room: 1, scheduledFor: 1 });
housekeepingTaskSchema.index({ assignedTo: 1, status: 1 });
housekeepingTaskSchema.index({ status: 1, priority: 1 });

// Virtual for task duration
housekeepingTaskSchema.virtual('actualDuration').get(function() {
    if (this.completedAt && this.createdAt) {
        return Math.round((this.completedAt - this.createdAt) / (1000 * 60)); // in minutes
    }
    return null;
});

// Pre-save middleware
housekeepingTaskSchema.pre('save', function(next) {
    if (this.isModified('status') && this.status === 'COMPLETED' && !this.completedAt) {
        this.completedAt = new Date();
    }
    next();
});

// Methods
housekeepingTaskSchema.methods.markAsComplete = async function(userId) {
    this.status = 'COMPLETED';
    this.completedAt = new Date();
    this.metadata.lastModifiedBy = userId;
    await this.save();
};

housekeepingTaskSchema.methods.reassign = async function(newAssigneeId, userId) {
    this.assignedTo = newAssigneeId;
    this.metadata.lastModifiedBy = userId;
    await this.save();
};

housekeepingTaskSchema.methods.updatePriority = async function(newPriority, userId) {
    this.priority = newPriority;
    this.metadata.lastModifiedBy = userId;
    await this.save();
};

// Statics
housekeepingTaskSchema.statics.findDueTasks = function(date = new Date()) {
    return this.find({
        scheduledFor: { $lte: date },
        status: { $in: ['PENDING', 'IN_PROGRESS'] }
    }).sort({ priority: -1, scheduledFor: 1 });
};

housekeepingTaskSchema.statics.findTasksByStaff = function(staffId, status) {
    const query = { assignedTo: staffId };
    if (status) {
        query.status = status;
    }
    return this.find(query).sort({ scheduledFor: 1 });
};

housekeepingTaskSchema.statics.findTasksByRoom = function(roomId, status) {
    const query = { room: roomId };
    if (status) {
        query.status = status;
    }
    return this.find(query).sort({ scheduledFor: -1 });
};

const HousekeepingTask = mongoose.model('HousekeepingTask', housekeepingTaskSchema);

module.exports = HousekeepingTask;

================
File: src/models/inventory-adjustment.model.js
================
const mongoose = require('mongoose');

const inventoryAdjustmentSchema = new mongoose.Schema({
    reference: {
        type: String,
        required: true,
        unique: true
    },
    item: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'InventoryItem',
        required: true
    },
    type: {
        type: String,
        enum: ['addition', 'reduction', 'correction', 'damage', 'loss'],
        required: true
    },
    quantity: {
        type: Number,
        required: true
    },
    reason: {
        type: String,
        required: true
    },
    date: {
        type: Date,
        default: Date.now
    },
    adjustedBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    previousStock: {
        type: Number,
        required: true
    },
    newStock: {
        type: Number,
        required: true
    },
    notes: String,
    attachments: [{
        name: String,
        url: String,
        type: String
    }]
}, {
    timestamps: true
});

// Generate a unique reference number before saving
inventoryAdjustmentSchema.pre('save', async function(next) {
    if (this.isNew) {
        const date = new Date();
        const year = date.getFullYear().toString().slice(-2);
        const month = (date.getMonth() + 1).toString().padStart(2, '0');
        const count = await this.constructor.countDocuments({
            createdAt: {
                $gte: new Date(date.getFullYear(), date.getMonth(), 1),
                $lt: new Date(date.getFullYear(), date.getMonth() + 1, 1)
            }
        });
        this.reference = `ADJ${year}${month}${(count + 1).toString().padStart(4, '0')}`;
    }
    next();
});

module.exports = mongoose.model('InventoryAdjustment', inventoryAdjustmentSchema);

================
File: src/models/inventory-item.model.js
================
const mongoose = require('mongoose');

const inventoryItemSchema = new mongoose.Schema({
    name: {
        type: String,
        required: true,
        trim: true
    },
    sku: {
        type: String,
        required: true,
        unique: true,
        trim: true
    },
    category: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Category',
        required: true
    },
    supplier: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Supplier',
        required: true
    },
    stock: {
        type: Number,
        required: true,
        min: 0,
        default: 0
    },
    minStock: {
        type: Number,
        required: true,
        min: 0,
        default: 10
    },
    unitPrice: {
        type: Number,
        required: true,
        min: 0
    },
    unit: {
        type: String,
        required: true,
        trim: true
    },
    image: {
        type: String,
        trim: true
    },
    loyaltyProgram: {
        isEligible: {
            type: Boolean,
            default: false
        },
        minPoints: {
            type: Number,
            default: 100
        },
        discountRate: {
            type: Number,
            min: 0,
            max: 100,
            default: 0
        }
    },
    status: {
        type: String,
        enum: ['active', 'discontinued', 'out_of_stock'],
        default: 'active'
    },
    metadata: {
        lastRestockDate: Date,
        lastAuditDate: Date,
        averageMonthlyUsage: Number,
        reorderPoint: Number,
        leadTime: {
            type: Number,
            default: 7, // days
        }
    }
}, {
    timestamps: true
});

// Middleware to update loyalty program when stock changes
inventoryItemSchema.pre('save', async function(next) {
    if (this.isModified('stock')) {
        const stockLevel = this.stock / this.minStock;
        
        // Update loyalty program rewards based on stock level
        if (this.loyaltyProgram.isEligible) {
            let discountRate;
            if (stockLevel >= 2) {
                // High stock - increase discount
                discountRate = Math.min(this.loyaltyProgram.discountRate + 5, 100);
            } else if (stockLevel < 1) {
                // Low stock - decrease discount
                discountRate = Math.max(this.loyaltyProgram.discountRate - 5, 0);
            }

            if (discountRate !== undefined) {
                this.loyaltyProgram.discountRate = discountRate;
                
                // Update associated loyalty programs
                await mongoose.model('LoyaltyProgram').updateMany(
                    { 'rewards.productId': this._id },
                    { $set: { 'rewards.$.value': discountRate } }
                );
            }
        }
    }
    next();
});

// Virtual for total value
inventoryItemSchema.virtual('totalValue').get(function() {
    return this.stock * this.unitPrice;
});

// Method to check if item needs reordering
inventoryItemSchema.methods.needsReorder = function() {
    return this.stock <= this.metadata.reorderPoint;
};

// Method to calculate days until reorder needed
inventoryItemSchema.methods.daysUntilReorder = function() {
    if (!this.metadata.averageMonthlyUsage) return null;
    const dailyUsage = this.metadata.averageMonthlyUsage / 30;
    if (dailyUsage === 0) return null;
    return Math.floor((this.stock - this.metadata.reorderPoint) / dailyUsage);
};

// Static method to get all low stock items
inventoryItemSchema.statics.getLowStockItems = function() {
    return this.find({
        $expr: {
            $lte: ['$stock', '$minStock']
        }
    }).populate('category supplier');
};

// Static method to get items eligible for loyalty program
inventoryItemSchema.statics.getLoyaltyEligibleItems = function() {
    return this.find({
        'loyaltyProgram.isEligible': true,
        'status': 'active'
    }).populate('category');
};

// Ensure indexes for common queries
inventoryItemSchema.index({ sku: 1 }, { unique: true });
inventoryItemSchema.index({ name: 1 });
inventoryItemSchema.index({ category: 1 });
inventoryItemSchema.index({ supplier: 1 });
inventoryItemSchema.index({ status: 1 });
inventoryItemSchema.index({ 'loyaltyProgram.isEligible': 1 });

const InventoryItem = mongoose.model('InventoryItem', inventoryItemSchema);

module.exports = InventoryItem;

================
File: src/models/Inventory.js
================
const mongoose = require('mongoose');

// Check if model exists before defining
if (mongoose.models.Inventory) {
    module.exports = mongoose.models.Inventory;
} else {
    const inventorySchema = new mongoose.Schema({
        hotel: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'Hotel',
            required: true
        },
        item: {
            name: {
                type: String,
                required: true,
                trim: true
            },
            category: {
                type: String,
                enum: ['amenities', 'supplies', 'equipment', 'furniture', 'food', 'beverage', 'other'],
                required: true
            },
            description: String,
            unit: {
                type: String,
                required: true
            }
        },
        quantity: {
            current: {
                type: Number,
                required: true,
                min: 0
            },
            minimum: {
                type: Number,
                required: true,
                min: 0
            },
            reorderPoint: {
                type: Number,
                required: true,
                min: 0
            }
        },
        cost: {
            perUnit: {
                type: Number,
                required: true,
                min: 0
            },
            currency: {
                type: String,
                default: 'USD'
            }
        },
        supplier: {
            name: {
                type: String,
                required: true
            },
            contact: {
                phone: String,
                email: String
            },
            leadTime: {
                type: Number, // in days
                default: 7
            }
        },
        location: {
            building: String,
            floor: String,
            room: String,
            shelf: String
        },
        status: {
            type: String,
            enum: ['in_stock', 'low_stock', 'out_of_stock', 'discontinued'],
            default: 'in_stock'
        },
        transactions: [{
            type: {
                type: String,
                enum: ['received', 'used', 'disposed', 'transferred'],
                required: true
            },
            quantity: {
                type: Number,
                required: true
            },
            date: {
                type: Date,
                default: Date.now
            },
            notes: String,
            performedBy: {
                type: mongoose.Schema.Types.ObjectId,
                ref: 'User',
                required: true
            }
        }],
        expiryDate: Date,
        lastStockCheck: {
            date: Date,
            performedBy: {
                type: mongoose.Schema.Types.ObjectId,
                ref: 'User'
            }
        },
        notes: String
    }, {
        timestamps: true
    });

    // Update status based on quantity
    inventorySchema.pre('save', function(next) {
        if (this.quantity.current <= 0) {
            this.status = 'out_of_stock';
        } else if (this.quantity.current <= this.quantity.minimum) {
            this.status = 'low_stock';
        } else {
            this.status = 'in_stock';
        }
        next();
    });

    // Method to check if reorder is needed
    inventorySchema.methods.needsReorder = function() {
        return this.quantity.current <= this.quantity.reorderPoint;
    };

    // Method to add transaction
    inventorySchema.methods.addTransaction = async function(type, quantity, userId, notes = '') {
        this.transactions.push({
            type,
            quantity,
            performedBy: userId,
            notes,
            date: new Date()
        });

        // Update current quantity
        if (type === 'received') {
            this.quantity.current += quantity;
        } else if (['used', 'disposed', 'transferred'].includes(type)) {
            this.quantity.current -= quantity;
        }

        return this.save();
    };

    // Method to get transaction history within date range
    inventorySchema.methods.getTransactionHistory = function(startDate, endDate) {
        return this.transactions.filter(transaction => {
            return transaction.date >= startDate && transaction.date <= endDate;
        });
    };

    // Index for searching
    inventorySchema.index({
        'item.name': 'text',
        'item.category': 1,
        'status': 1,
        'hotel': 1
    });

    const Inventory = mongoose.model('Inventory', inventorySchema);
    module.exports = Inventory;
}

================
File: src/models/InventoryItem.js
================
const mongoose = require('mongoose');

const inventoryItemSchema = new mongoose.Schema({
    name: {
        type: String,
        required: true,
        trim: true
    },
    sku: {
        type: String,
        required: true,
        trim: true,
        index: { unique: true }
    },
    description: {
        type: String,
        trim: true
    },
    category: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Category',
        required: true
    },
    supplier: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Supplier'
    },
    cost: {
        type: Number,
        required: true,
        min: 0
    },
    currentStock: {
        type: Number,
        required: true,
        default: 0,
        min: 0
    },
    minimumStock: {
        type: Number,
        required: true,
        default: 0,
        min: 0
    },
    reorderPoint: {
        type: Number,
        required: true,
        default: 0,
        min: 0
    },
    unit: {
        type: String,
        required: true,
        trim: true
    },
    location: {
        type: String,
        trim: true
    },
    expiryDate: {
        type: Date
    },
    lastRestocked: {
        type: Date
    },
    status: {
        type: String,
        enum: ['in_stock', 'low_stock', 'out_of_stock'],
        default: 'in_stock'
    },
    isRewardItem: {
        type: Boolean,
        default: false
    },
    pointsCost: {
        type: Number,
        min: 0,
        validate: {
            validator: function(v) {
                return !this.isRewardItem || (this.isRewardItem && v > 0);
            },
            message: 'Points cost is required for reward items'
        }
    },
    stockHistory: [{
        type: {
            type: String,
            enum: ['add', 'remove'],
            required: true
        },
        quantity: {
            type: Number,
            required: true
        },
        date: {
            type: Date,
            default: Date.now
        },
        reason: String,
        performedBy: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User',
            required: true
        }
    }],
    isActive: {
        type: Boolean,
        default: true
    },
    createdBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    updatedBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User'
    },
    deactivatedBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User'
    },
    deactivatedAt: {
        type: Date
    }
}, {
    timestamps: true
});

// Update status based on stock levels
inventoryItemSchema.pre('save', function(next) {
    if (this.isModified('currentStock') || this.isModified('minimumStock')) {
        if (this.currentStock === 0) {
            this.status = 'out_of_stock';
        } else if (this.currentStock <= this.minimumStock) {
            this.status = 'low_stock';
        } else {
            this.status = 'in_stock';
        }
    }
    next();
});

// Add stock method
inventoryItemSchema.methods.addStock = async function(quantity, reason, userId) {
    this.currentStock += quantity;
    this.lastRestocked = new Date();
    this.stockHistory.push({
        type: 'add',
        quantity,
        reason,
        performedBy: userId
    });
    await this.save();
};

// Remove stock method
inventoryItemSchema.methods.removeStock = async function(quantity, reason, userId) {
    if (quantity > this.currentStock) {
        throw new Error('Insufficient stock');
    }
    this.currentStock -= quantity;
    this.stockHistory.push({
        type: 'remove',
        quantity,
        reason,
        performedBy: userId
    });
    await this.save();
};

// Create indexes
inventoryItemSchema.index({ name: 1 });
inventoryItemSchema.index({ category: 1 });
inventoryItemSchema.index({ supplier: 1 });
inventoryItemSchema.index({ status: 1 });
inventoryItemSchema.index({ isActive: 1 });

const InventoryItem = mongoose.model('InventoryItem', inventoryItemSchema);
module.exports = InventoryItem;

================
File: src/models/Invoice.js
================
const mongoose = require('mongoose');

// Check if model exists before defining
if (mongoose.models.Invoice) {
    module.exports = mongoose.models.Invoice;
} else {
    const invoiceSchema = new mongoose.Schema({
        booking: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'Booking',
            required: true
        },
        user: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User',
            required: true
        },
        hotel: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'Hotel',
            required: true
        },
        invoiceNumber: {
            type: String,
            required: true,
            unique: true
        },
        items: [{
            description: {
                type: String,
                required: true
            },
            quantity: {
                type: Number,
                required: true,
                min: 1
            },
            unitPrice: {
                type: Number,
                required: true,
                min: 0
            },
            amount: {
                type: Number,
                required: true,
                min: 0
            },
            category: {
                type: String,
                enum: ['room_charge', 'service', 'food_beverage', 'amenity', 'tax', 'other'],
                required: true
            }
        }],
        subtotal: {
            type: Number,
            required: true,
            min: 0
        },
        taxes: [{
            name: {
                type: String,
                required: true
            },
            rate: {
                type: Number,
                required: true,
                min: 0
            },
            amount: {
                type: Number,
                required: true,
                min: 0
            }
        }],
        discounts: [{
            type: {
                type: String,
                enum: ['loyalty', 'promotion', 'corporate', 'seasonal', 'other'],
                required: true
            },
            description: String,
            amount: {
                type: Number,
                required: true,
                min: 0
            }
        }],
        loyaltyPoints: {
            earned: {
                type: Number,
                default: 0
            },
            redeemed: {
                type: Number,
                default: 0
            },
            pointValue: {
                type: Number,
                default: 0
            }
        },
        total: {
            type: Number,
            required: true,
            min: 0
        },
        currency: {
            type: String,
            default: 'USD'
        },
        status: {
            type: String,
            enum: ['draft', 'issued', 'paid', 'partially_paid', 'overdue', 'cancelled', 'refunded'],
            default: 'draft'
        },
        paymentDetails: [{
            method: {
                type: String,
                enum: ['credit_card', 'debit_card', 'cash', 'bank_transfer', 'loyalty_points'],
                required: true
            },
            amount: {
                type: Number,
                required: true,
                min: 0
            },
            transactionId: String,
            date: {
                type: Date,
                default: Date.now
            },
            status: {
                type: String,
                enum: ['pending', 'completed', 'failed', 'refunded'],
                default: 'pending'
            },
            notes: String
        }],
        dueDate: {
            type: Date,
            required: true
        },
        notes: String,
        terms: String,
        billingAddress: {
            name: String,
            street: String,
            city: String,
            state: String,
            country: String,
            zipCode: String
        }
    }, {
        timestamps: true
    });

    // Generate invoice number
    invoiceSchema.pre('save', async function(next) {
        if (!this.invoiceNumber) {
            const currentDate = new Date();
            const year = currentDate.getFullYear();
            const month = String(currentDate.getMonth() + 1).padStart(2, '0');
            
            // Get count of invoices for current year/month
            const count = await mongoose.model('Invoice').countDocuments({
                createdAt: {
                    $gte: new Date(year, currentDate.getMonth(), 1),
                    $lt: new Date(year, currentDate.getMonth() + 1, 1)
                }
            });
            
            // Format: INV-YYYYMM-XXXX
            this.invoiceNumber = `INV-${year}${month}-${String(count + 1).padStart(4, '0')}`;
        }
        next();
    });

    // Calculate totals before saving
    invoiceSchema.pre('save', function(next) {
        // Calculate subtotal
        this.subtotal = this.items.reduce((sum, item) => sum + item.amount, 0);

        // Calculate total tax amount
        const totalTax = this.taxes.reduce((sum, tax) => sum + tax.amount, 0);

        // Calculate total discounts
        const totalDiscounts = this.discounts.reduce((sum, discount) => sum + discount.amount, 0);

        // Calculate loyalty points value
        const loyaltyValue = this.loyaltyPoints.redeemed * this.loyaltyPoints.pointValue;

        // Calculate final total
        this.total = this.subtotal + totalTax - totalDiscounts - loyaltyValue;

        next();
    });

    // Method to add payment
    invoiceSchema.methods.addPayment = async function(paymentDetails) {
        this.paymentDetails.push(paymentDetails);
        
        // Calculate total paid amount
        const totalPaid = this.paymentDetails.reduce((sum, payment) => {
            return payment.status === 'completed' ? sum + payment.amount : sum;
        }, 0);

        // Update invoice status based on payment
        if (totalPaid >= this.total) {
            this.status = 'paid';
        } else if (totalPaid > 0) {
            this.status = 'partially_paid';
        }

        return this.save();
    };

    // Method to process loyalty points
    invoiceSchema.methods.processLoyaltyPoints = async function() {
        if (this.status === 'paid' && this.loyaltyPoints.earned > 0) {
            try {
                const LoyaltyProgram = mongoose.model('LoyaltyProgram');
                const loyalty = await LoyaltyProgram.findOne({ user: this.user });
                if (loyalty) {
                    await loyalty.addPoints(
                        this.loyaltyPoints.earned,
                        'purchase',
                        this._id,
                        `Points earned from invoice ${this.invoiceNumber}`
                    );
                }
            } catch (error) {
                console.error('Error processing loyalty points:', error);
            }
        }
    };

    // Index for searching
    invoiceSchema.index({
        invoiceNumber: 1,
        status: 1,
        'billingAddress.name': 'text'
    });

    const Invoice = mongoose.model('Invoice', invoiceSchema);
    module.exports = Invoice;
}

================
File: src/models/Loyalty.js
================
const mongoose = require('mongoose');

const loyaltySchema = new mongoose.Schema({
    user: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true,
        unique: true
    },
    points: {
        type: Number,
        default: 0,
        min: 0
    },
    tier: {
        type: String,
        enum: ['Bronze', 'Silver', 'Gold', 'Platinum'],
        default: 'Bronze'
    },
    pointsHistory: [{
        points: Number,
        type: {
            type: String,
            enum: ['EARNED', 'REDEEMED', 'EXPIRED', 'ADJUSTED'],
            required: true
        },
        description: String,
        reference: {
            type: mongoose.Schema.Types.ObjectId,
            refPath: 'pointsHistory.referenceModel'
        },
        referenceModel: {
            type: String,
            enum: ['Booking', 'Reward']
        },
        createdAt: {
            type: Date,
            default: Date.now
        }
    }],
    totalPointsEarned: {
        type: Number,
        default: 0
    },
    totalPointsRedeemed: {
        type: Number,
        default: 0
    },
    lastUpdated: {
        type: Date,
        default: Date.now
    }
}, {
    timestamps: true
});

// Update tier based on total points
loyaltySchema.methods.updateTier = function() {
    if (this.points >= 50000) {
        this.tier = 'Platinum';
    } else if (this.points >= 25000) {
        this.tier = 'Gold';
    } else if (this.points >= 10000) {
        this.tier = 'Silver';
    } else {
        this.tier = 'Bronze';
    }
};

// Add points and update tier
loyaltySchema.methods.addPoints = async function(points, type, description, reference, referenceModel) {
    this.points += points;
    this.totalPointsEarned += points;
    this.lastUpdated = Date.now();
    
    this.pointsHistory.push({
        points,
        type,
        description,
        reference,
        referenceModel
    });

    this.updateTier();
    await this.save();
};

// Redeem points and update tier
loyaltySchema.methods.redeemPoints = async function(points, description, reference) {
    if (points > this.points) {
        throw new Error('Insufficient points');
    }

    this.points -= points;
    this.totalPointsRedeemed += points;
    this.lastUpdated = Date.now();
    
    this.pointsHistory.push({
        points: -points,
        type: 'REDEEMED',
        description,
        reference,
        referenceModel: 'Reward'
    });

    this.updateTier();
    await this.save();
};

const Loyalty = mongoose.model('Loyalty', loyaltySchema);
module.exports = Loyalty;

================
File: src/models/LoyaltyProgram.js
================
const mongoose = require('mongoose');

// Check if model exists before defining
if (mongoose.models.LoyaltyProgram) {
    module.exports = mongoose.models.LoyaltyProgram;
} else {
    const loyaltyProgramSchema = new mongoose.Schema({
        user: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User',
            required: true,
            unique: true,
            index: true
        },
        membershipTier: {
            type: String,
            enum: ['Bronze', 'Silver', 'Gold', 'Platinum'],
            default: 'Bronze',
            index: true
        },
        points: {
            type: Number,
            default: 0,
            min: 0,
            index: true
        },
        lifetimePoints: {
            type: Number,
            default: 0,
            min: 0,
            index: true
        },
        pointsHistory: [{
            points: Number,
            type: {
                type: String,
                enum: ['earned', 'redeemed', 'expired', 'adjusted'],
                required: true
            },
            source: {
                type: String,
                enum: ['stay', 'dining', 'spa', 'event', 'promotion', 'referral', 'redemption', 'compensation', 'system'],
                required: true
            },
            bookingId: {
                type: mongoose.Schema.Types.ObjectId,
                ref: 'Booking'
            },
            description: String,
            date: {
                type: Date,
                default: Date.now
            }
        }],
        rewards: [{
            name: String,
            type: {
                type: String,
                enum: ['room_upgrade', 'free_night', 'dining_voucher', 'spa_voucher', 'airport_transfer', 'late_checkout'],
                required: true
            },
            pointsCost: Number,
            expiryDate: Date,
            status: {
                type: String,
                enum: ['available', 'redeemed', 'expired'],
                default: 'available'
            },
            redeemedAt: Date,
            bookingId: {
                type: mongoose.Schema.Types.ObjectId,
                ref: 'Booking'
            }
        }],
        memberSince: {
            type: Date,
            default: Date.now
        },
        lastActivity: {
            type: Date,
            default: Date.now
        },
        preferences: {
            roomType: String,
            floorPreference: String,
            pillowType: String,
            newspaper: String,
            dietaryRestrictions: [String],
            specialRequests: String,
            communicationPreferences: {
                email: {
                    type: Boolean,
                    default: true
                },
                sms: {
                    type: Boolean,
                    default: false
                },
                promotions: {
                    type: Boolean,
                    default: true
                },
                newsletter: {
                    type: Boolean,
                    default: true
                }
            }
        },
        referralCode: {
            type: String,
            unique: true,
            index: true
        },
        referredBy: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User'
        },
        referralCount: {
            type: Number,
            default: 0
        },
        milestones: [{
            type: {
                type: String,
                enum: ['points_earned', 'tier_upgrade', 'referral_milestone', 'years_membership'],
                required: true
            },
            description: String,
            date: {
                type: Date,
                default: Date.now
            },
            rewardPoints: Number,
            status: {
                type: String,
                enum: ['pending', 'awarded'],
                default: 'pending'
            }
        }]
    }, {
        timestamps: true
    });

    // Middleware to update lastActivity
    loyaltyProgramSchema.pre('save', function(next) {
        this.lastActivity = new Date();
        next();
    });

    // Instance method to add points
    loyaltyProgramSchema.methods.addPoints = async function(points, source, bookingId, description) {
        this.points += points;
        this.lifetimePoints += points;
        
        this.pointsHistory.push({
            points,
            type: 'earned',
            source,
            bookingId,
            description
        });

        // Check and update membership tier
        await this.updateMembershipTier();
        
        // Check for milestones
        await this.checkMilestones();
        
        return this.save();
    };

    // Instance method to redeem points
    loyaltyProgramSchema.methods.redeemPoints = async function(points, rewardType, bookingId, description) {
        if (this.points < points) {
            throw new Error('Insufficient points');
        }

        this.points -= points;
        this.pointsHistory.push({
            points: -points,
            type: 'redeemed',
            source: 'redemption',
            bookingId,
            description
        });

        return this.save();
    };

    // Instance method to update membership tier
    loyaltyProgramSchema.methods.updateMembershipTier = async function() {
        const tiers = {
            Bronze: 0,
            Silver: 10000,
            Gold: 25000,
            Platinum: 50000
        };

        let newTier = 'Bronze';
        for (const [tier, points] of Object.entries(tiers)) {
            if (this.lifetimePoints >= points) {
                newTier = tier;
            }
        }

        if (this.membershipTier !== newTier) {
            // Record tier upgrade milestone
            this.milestones.push({
                type: 'tier_upgrade',
                description: `Upgraded to ${newTier} tier`,
                rewardPoints: 1000, // Bonus points for tier upgrade
                status: 'pending'
            });

            this.membershipTier = newTier;
        }
    };

    // Instance method to check and process milestones
    loyaltyProgramSchema.methods.checkMilestones = async function() {
        // Points earned milestones
        const pointsMilestones = [10000, 25000, 50000, 100000];
        for (const milestone of pointsMilestones) {
            if (this.lifetimePoints >= milestone) {
                const existingMilestone = this.milestones.find(m => 
                    m.type === 'points_earned' && 
                    m.description.includes(`${milestone} points`)
                );

                if (!existingMilestone) {
                    this.milestones.push({
                        type: 'points_earned',
                        description: `Earned ${milestone} lifetime points`,
                        rewardPoints: Math.floor(milestone * 0.01), // 1% bonus
                        status: 'pending'
                    });
                }
            }
        }

        // Referral milestones
        const referralMilestones = [5, 10, 25, 50];
        for (const milestone of referralMilestones) {
            if (this.referralCount >= milestone) {
                const existingMilestone = this.milestones.find(m => 
                    m.type === 'referral_milestone' && 
                    m.description.includes(`${milestone} referrals`)
                );

                if (!existingMilestone) {
                    this.milestones.push({
                        type: 'referral_milestone',
                        description: `Completed ${milestone} referrals`,
                        rewardPoints: milestone * 500, // 500 points per referral milestone
                        status: 'pending'
                    });
                }
            }
        }

        // Years of membership milestones
        const yearsSinceMembership = Math.floor(
            (Date.now() - this.memberSince.getTime()) / (1000 * 60 * 60 * 24 * 365)
        );
        const yearMilestones = [1, 3, 5, 10];
        for (const milestone of yearMilestones) {
            if (yearsSinceMembership >= milestone) {
                const existingMilestone = this.milestones.find(m => 
                    m.type === 'years_membership' && 
                    m.description.includes(`${milestone} year`)
                );

                if (!existingMilestone) {
                    this.milestones.push({
                        type: 'years_membership',
                        description: `${milestone} year${milestone > 1 ? 's' : ''} of membership`,
                        rewardPoints: milestone * 1000, // 1000 points per year milestone
                        status: 'pending'
                    });
                }
            }
        }
    };

    // Static method to generate referral code
    loyaltyProgramSchema.statics.generateReferralCode = async function(userId) {
        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
        let referralCode;
        let isUnique = false;

        while (!isUnique) {
            referralCode = Array.from(
                { length: 8 },
                () => characters[Math.floor(Math.random() * characters.length)]
            ).join('');

            // Check if code already exists
            const existing = await this.findOne({ referralCode });
            if (!existing) {
                isUnique = true;
            }
        }

        return referralCode;
    };

    const LoyaltyProgram = mongoose.model('LoyaltyProgram', loyaltyProgramSchema);
    module.exports = LoyaltyProgram;
}

================
File: src/models/Maintenance.js
================
const mongoose = require('mongoose');

// Check if model exists before defining
if (mongoose.models.Maintenance) {
    module.exports = mongoose.models.Maintenance;
} else {
    const maintenanceSchema = new mongoose.Schema({
        requestType: {
            type: String,
            required: true,
            enum: ['maintenance', 'housekeeping', 'amenity', 'other'],
            default: 'maintenance'
        },
        serviceType: {
            type: String,
            required: true,
            enum: ['guest-request', 'regular-service', 'emergency', 'preventive'],
            default: 'guest-request'
        },
        description: {
            type: String,
            required: true,
            trim: true
        },
        priority: {
            type: String,
            required: true,
            enum: ['low', 'medium', 'high', 'urgent'],
            default: 'medium'
        },
        status: {
            type: String,
            required: true,
            enum: ['pending', 'in-progress', 'completed', 'cancelled'],
            default: 'pending'
        },
        hotel: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'Hotel',
            required: true
        },
        location: {
            room: {
                type: mongoose.Schema.Types.ObjectId,
                ref: 'Room',
                required: true
            },
            description: String
        },
        guest: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User',
            required: true
        },
        requestedBy: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User',
            required: true
        },
        assignedTo: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User'
        },
        notes: [{
            text: {
                type: String,
                required: true
            },
            addedBy: {
                type: mongoose.Schema.Types.ObjectId,
                ref: 'User',
                required: true
            },
            addedAt: {
                type: Date,
                default: Date.now
            }
        }],
        completedAt: Date,
        loyaltyImpact: {
            affectedBooking: {
                type: mongoose.Schema.Types.ObjectId,
                ref: 'Booking'
            },
            compensationPoints: {
                type: Number,
                default: 0,
                min: 0
            },
            compensationReason: String,
            compensationStatus: {
                type: String,
                enum: ['pending', 'approved', 'processed', 'rejected'],
                default: 'pending'
            }
        }
    }, {
        timestamps: true,
        toJSON: { virtuals: true },
        toObject: { virtuals: true }
    });

    // Indexes for performance
    maintenanceSchema.index({ status: 1 });
    maintenanceSchema.index({ priority: 1 });
    maintenanceSchema.index({ hotel: 1 });
    maintenanceSchema.index({ 'location.room': 1 });
    maintenanceSchema.index({ guest: 1 });
    maintenanceSchema.index({ requestedBy: 1 });
    maintenanceSchema.index({ createdAt: -1 });

    // Virtual for response time
    maintenanceSchema.virtual('responseTime').get(function() {
        if (this.status === 'pending') {
            return Math.round((Date.now() - this.createdAt) / (1000 * 60)); // in minutes
        }
        return null;
    });

    // Process loyalty compensation after maintenance completion
    maintenanceSchema.post('save', async function(doc) {
        if (doc.status === 'completed' && 
            doc.loyaltyImpact && 
            doc.loyaltyImpact.compensationPoints > 0 && 
            doc.loyaltyImpact.compensationStatus === 'approved') {
            try {
                const LoyaltyProgram = mongoose.model('LoyaltyProgram');
                const loyalty = await LoyaltyProgram.findOne({ guest: doc.guest });
                
                if (loyalty) {
                    await loyalty.addPoints(
                        doc.loyaltyImpact.compensationPoints,
                        'maintenance_compensation',
                        `Maintenance request ${doc._id}`,
                        doc.loyaltyImpact.compensationReason || 'Service recovery compensation'
                    );
                    doc.loyaltyImpact.compensationStatus = 'processed';
                    await doc.save();
                }
            } catch (error) {
                console.error('Error processing loyalty compensation:', error);
            }
        }
    });

    const Maintenance = mongoose.model('Maintenance', maintenanceSchema);
    module.exports = Maintenance;
}

================
File: src/models/MaintenanceRequest.js
================
const mongoose = require('mongoose');

const maintenanceRequestSchema = new mongoose.Schema({
    room: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Room',
        required: true
    },
    description: {
        type: String,
        required: true
    },
    priority: {
        type: String,
        enum: ['low', 'medium', 'high', 'urgent'],
        default: 'medium'
    },
    status: {
        type: String,
        enum: ['pending', 'in_progress', 'completed', 'cancelled'],
        default: 'pending'
    },
    assignedTo: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User'
    },
    requestedBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    completedBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User'
    },
    completedAt: {
        type: Date
    },
    estimatedTime: {
        type: Number, // in minutes
    },
    actualTime: {
        type: Number, // in minutes
    },
    notes: [{
        content: String,
        addedBy: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User'
        },
        addedAt: {
            type: Date,
            default: Date.now
        }
    }],
    parts: [{
        item: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'InventoryItem'
        },
        quantity: Number,
        cost: Number
    }],
    totalCost: {
        type: Number,
        default: 0
    }
}, {
    timestamps: true
});

// Add indexes
maintenanceRequestSchema.index({ room: 1, status: 1 });
maintenanceRequestSchema.index({ assignedTo: 1, status: 1 });
maintenanceRequestSchema.index({ priority: 1, status: 1 });

// Pre-save middleware to update totalCost
maintenanceRequestSchema.pre('save', function(next) {
    if (this.parts && this.parts.length > 0) {
        this.totalCost = this.parts.reduce((total, part) => total + (part.cost || 0), 0);
    }
    next();
});

// Instance methods
maintenanceRequestSchema.methods.assignTo = async function(userId) {
    this.assignedTo = userId;
    this.status = 'in_progress';
    await this.save();
};

maintenanceRequestSchema.methods.complete = async function(userId, actualTime) {
    this.completedBy = userId;
    this.completedAt = new Date();
    this.status = 'completed';
    if (actualTime) {
        this.actualTime = actualTime;
    }
    await this.save();
};

maintenanceRequestSchema.methods.addNote = async function(content, userId) {
    this.notes.push({
        content,
        addedBy: userId,
        addedAt: new Date()
    });
    await this.save();
};

maintenanceRequestSchema.methods.addPart = async function(itemId, quantity, cost) {
    this.parts.push({
        item: itemId,
        quantity,
        cost
    });
    await this.save();
};

// Static methods
maintenanceRequestSchema.statics.getOverdueRequests = function() {
    const twoDaysAgo = new Date();
    twoDaysAgo.setDate(twoDaysAgo.getDate() - 2);
    
    return this.find({
        status: { $in: ['pending', 'in_progress'] },
        priority: { $in: ['high', 'urgent'] },
        createdAt: { $lte: twoDaysAgo }
    }).populate('room').populate('assignedTo');
};

maintenanceRequestSchema.statics.getRequestsByPriority = function() {
    return this.aggregate([
        {
            $group: {
                _id: '$priority',
                count: { $sum: 1 }
            }
        }
    ]);
};

maintenanceRequestSchema.statics.getAverageCompletionTime = function() {
    return this.aggregate([
        {
            $match: {
                status: 'completed',
                actualTime: { $exists: true }
            }
        },
        {
            $group: {
                _id: '$priority',
                averageTime: { $avg: '$actualTime' }
            }
        }
    ]);
};

const MaintenanceRequest = mongoose.model('MaintenanceRequest', maintenanceRequestSchema);

module.exports = MaintenanceRequest;

================
File: src/models/Notification.js
================
const mongoose = require('mongoose');

const notificationSchema = new mongoose.Schema({
    recipient: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    type: {
        type: String,
        enum: [
            'BOOKING_CONFIRMATION',
            'CHECK_IN_REMINDER',
            'CHECK_OUT_REMINDER',
            'HOUSEKEEPING_REQUEST',
            'MAINTENANCE_REQUEST',
            'AMENITY_REQUEST',
            'LOYALTY_UPDATE',
            'PROMOTION',
            'PAYMENT',
            'SYSTEM'
        ],
        required: true
    },
    title: {
        type: String,
        required: true
    },
    message: {
        type: String,
        required: true
    },
    priority: {
        type: String,
        enum: ['LOW', 'MEDIUM', 'HIGH', 'URGENT'],
        default: 'MEDIUM'
    },
    status: {
        type: String,
        enum: ['UNREAD', 'READ', 'ARCHIVED'],
        default: 'UNREAD'
    },
    data: {
        type: mongoose.Schema.Types.Mixed,
        default: {}
    },
    readAt: Date,
    expiresAt: Date,
    metadata: {
        createdBy: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User'
        },
        source: {
            type: String,
            enum: ['SYSTEM', 'USER', 'INTEGRATION'],
            default: 'SYSTEM'
        },
        sourceDetails: mongoose.Schema.Types.Mixed
    }
}, {
    timestamps: true
});

// Indexes
notificationSchema.index({ recipient: 1, status: 1 });
notificationSchema.index({ recipient: 1, type: 1 });
notificationSchema.index({ recipient: 1, createdAt: -1 });

// Methods
notificationSchema.methods.markAsRead = async function() {
    if (this.status === 'UNREAD') {
        this.status = 'READ';
        this.readAt = new Date();
        await this.save();
    }
};

notificationSchema.methods.archive = async function() {
    this.status = 'ARCHIVED';
    await this.save();
};

// Statics
notificationSchema.statics.findUnreadByUser = function(userId) {
    return this.find({
        recipient: userId,
        status: 'UNREAD'
    }).sort({ createdAt: -1 });
};

notificationSchema.statics.findByUserAndType = function(userId, type) {
    return this.find({
        recipient: userId,
        type,
        status: { $ne: 'ARCHIVED' }
    }).sort({ createdAt: -1 });
};

notificationSchema.statics.markAllAsRead = async function(userId) {
    const now = new Date();
    return this.updateMany(
        {
            recipient: userId,
            status: 'UNREAD'
        },
        {
            $set: {
                status: 'READ',
                readAt: now
            }
        }
    );
};

// Pre-save middleware
notificationSchema.pre('save', function(next) {
    // Set expiration date if not set (default 30 days)
    if (!this.expiresAt) {
        this.expiresAt = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000);
    }
    next();
});

const Notification = mongoose.model('Notification', notificationSchema);

module.exports = Notification;

================
File: src/models/Order.js
================
const mongoose = require('mongoose');

const orderSchema = new mongoose.Schema({
    orderNumber: {
        type: String,
        required: true,
        unique: true,
        default: () => 'PO' + Date.now()
    },
    supplier: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Supplier',
        required: true
    },
    items: [{
        item: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'InventoryItem',
            required: true
        },
        quantity: {
            type: Number,
            required: true,
            min: 1
        },
        unitPrice: {
            type: Number,
            required: true,
            min: 0
        },
        discount: {
            type: Number,
            default: 0,
            min: 0
        },
        tax: {
            type: Number,
            default: 0,
            min: 0
        },
        total: {
            type: Number,
            required: true,
            min: 0
        },
        receivedQuantity: {
            type: Number,
            default: 0,
            min: 0
        },
        status: {
            type: String,
            enum: ['pending', 'partial', 'complete', 'cancelled'],
            default: 'pending'
        },
        notes: String
    }],
    status: {
        type: String,
        enum: ['draft', 'pending', 'approved', 'ordered', 'partial', 'complete', 'cancelled'],
        default: 'draft'
    },
    orderDate: {
        type: Date
    },
    expectedDeliveryDate: {
        type: Date
    },
    actualDeliveryDate: {
        type: Date
    },
    subtotal: {
        type: Number,
        required: true,
        min: 0
    },
    tax: {
        type: Number,
        required: true,
        min: 0
    },
    discount: {
        type: Number,
        default: 0,
        min: 0
    },
    shipping: {
        cost: {
            type: Number,
            default: 0,
            min: 0
        },
        method: {
            type: String,
            trim: true
        },
        trackingNumber: {
            type: String,
            trim: true
        }
    },
    total: {
        type: Number,
        required: true,
        min: 0
    },
    paymentTerms: {
        type: String,
        required: true,
        enum: ['NET30', 'NET60', 'NET90', 'Immediate']
    },
    paymentStatus: {
        type: String,
        enum: ['pending', 'partial', 'paid', 'overdue'],
        default: 'pending'
    },
    paymentHistory: [{
        amount: {
            type: Number,
            required: true,
            min: 0
        },
        date: {
            type: Date,
            required: true,
            default: Date.now
        },
        method: {
            type: String,
            required: true,
            enum: ['cash', 'check', 'bank_transfer', 'credit_card']
        },
        reference: String,
        notes: String,
        recordedBy: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User',
            required: true
        }
    }],
    deliveryAddress: {
        street: {
            type: String,
            required: true,
            trim: true
        },
        city: {
            type: String,
            required: true,
            trim: true
        },
        state: {
            type: String,
            required: true,
            trim: true
        },
        zipCode: {
            type: String,
            required: true,
            trim: true
        },
        country: {
            type: String,
            required: true,
            trim: true
        }
    },
    billingAddress: {
        street: {
            type: String,
            required: true,
            trim: true
        },
        city: {
            type: String,
            required: true,
            trim: true
        },
        state: {
            type: String,
            required: true,
            trim: true
        },
        zipCode: {
            type: String,
            required: true,
            trim: true
        },
        country: {
            type: String,
            required: true,
            trim: true
        }
    },
    attachments: [{
        type: {
            type: String,
            required: true,
            enum: ['invoice', 'packing_slip', 'receipt', 'other']
        },
        url: {
            type: String,
            required: true
        },
        name: {
            type: String,
            required: true
        },
        uploadedAt: {
            type: Date,
            default: Date.now
        },
        uploadedBy: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User',
            required: true
        }
    }],
    notes: [{
        content: {
            type: String,
            required: true
        },
        date: {
            type: Date,
            default: Date.now
        },
        author: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User',
            required: true
        }
    }],
    approvals: [{
        status: {
            type: String,
            enum: ['pending', 'approved', 'rejected'],
            required: true
        },
        date: {
            type: Date,
            default: Date.now
        },
        approver: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User',
            required: true
        },
        comments: String
    }],
    createdBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    updatedBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User'
    }
}, {
    timestamps: true
});

// Calculate totals before saving
orderSchema.pre('save', function(next) {
    // Calculate item totals
    this.items.forEach(item => {
        item.total = (item.quantity * item.unitPrice) + item.tax - item.discount;
    });

    // Calculate order subtotal
    this.subtotal = this.items.reduce((sum, item) => sum + item.total, 0);

    // Calculate order total
    this.total = this.subtotal + this.tax + this.shipping.cost - this.discount;

    // Update order status based on items
    if (this.items.length > 0) {
        const allComplete = this.items.every(item => item.status === 'complete');
        const allCancelled = this.items.every(item => item.status === 'cancelled');
        const hasPartial = this.items.some(item => item.status === 'partial');
        const hasPending = this.items.some(item => item.status === 'pending');

        if (allComplete) {
            this.status = 'complete';
        } else if (allCancelled) {
            this.status = 'cancelled';
        } else if (hasPartial || (hasPending && !allCancelled)) {
            this.status = 'partial';
        }
    }

    next();
});

// Update inventory when order is completed
orderSchema.methods.completeDelivery = async function(userId) {
    const InventoryItem = mongoose.model('InventoryItem');
    const Supplier = mongoose.model('Supplier');

    // Update each item's inventory
    for (const orderItem of this.items) {
        if (orderItem.receivedQuantity > 0) {
            const item = await InventoryItem.findById(orderItem.item);
            if (item) {
                await item.addStock(
                    orderItem.receivedQuantity,
                    `Received from PO ${this.orderNumber}`,
                    userId
                );
            }
        }
    }

    // Update order status
    this.status = 'complete';
    this.actualDeliveryDate = new Date();
    this.updatedBy = userId;

    // Update supplier performance metrics
    const supplier = await Supplier.findById(this.supplier);
    if (supplier) {
        await supplier.updatePerformanceMetrics('completed');
    }

    await this.save();
};

// Add payment
orderSchema.methods.addPayment = async function(paymentData, userId) {
    this.paymentHistory.push({
        ...paymentData,
        recordedBy: userId
    });

    // Calculate total paid
    const totalPaid = this.paymentHistory.reduce((sum, payment) => sum + payment.amount, 0);

    // Update payment status
    if (totalPaid >= this.total) {
        this.paymentStatus = 'paid';
    } else if (totalPaid > 0) {
        this.paymentStatus = 'partial';
    }

    await this.save();
};

// Add note
orderSchema.methods.addNote = async function(content, userId) {
    this.notes.push({
        content,
        author: userId
    });
    await this.save();
};

// Add approval
orderSchema.methods.addApproval = async function(approvalData, userId) {
    this.approvals.push({
        ...approvalData,
        approver: userId
    });

    // Update order status if all required approvals are received
    const allApproved = this.approvals.every(approval => approval.status === 'approved');
    if (allApproved) {
        this.status = 'approved';
    }

    await this.save();
};

const Order = mongoose.model('Order', orderSchema);
module.exports = Order;

================
File: src/models/OTABooking.js
================
const mongoose = require('mongoose');

// Check if model exists before defining
if (mongoose.models.OTABooking) {
    module.exports = mongoose.models.OTABooking;
} else {
    const otaBookingSchema = new mongoose.Schema({
        channel: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'OTAChannel',
            required: true
        },
        otaBookingId: {
            type: String,
            required: true
        },
        hotel: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'Hotel',
            required: true
        },
        localBooking: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'Booking'
        },
        otaGuestDetails: {
            name: String,
            email: String,
            phone: String,
            otaGuestId: String,
            address: {
                street: String,
                city: String,
                state: String,
                country: String,
                postalCode: String
            }
        },
        bookingDetails: {
            checkIn: {
                type: Date,
                required: true
            },
            checkOut: {
                type: Date,
                required: true
            },
            roomType: {
                type: mongoose.Schema.Types.ObjectId,
                ref: 'Room',
                required: true
            },
            adults: {
                type: Number,
                required: true,
                min: 1
            },
            children: {
                type: Number,
                default: 0,
                min: 0
            },
            otaPrice: {
                type: Number,
                required: true
            },
            currency: {
                type: String,
                default: 'USD'
            },
            specialRequests: String,
            mealPlan: {
                type: String,
                enum: ['none', 'breakfast', 'half-board', 'full-board'],
                default: 'none'
            }
        },
        status: {
            type: String,
            enum: ['pending', 'confirmed', 'cancelled', 'completed'],
            default: 'pending'
        },
        syncStatus: {
            type: String,
            enum: ['pending', 'synced', 'error'],
            default: 'pending'
        },
        syncErrors: [{
            timestamp: {
                type: Date,
                default: Date.now
            },
            message: String,
            details: mongoose.Schema.Types.Mixed
        }],
        otaMetadata: {
            type: Map,
            of: mongoose.Schema.Types.Mixed
        },
        loyaltyInfo: {
            memberId: String,
            tier: String,
            points: Number,
            pointsEarned: Number,
            discountApplied: Number
        }
    }, {
        timestamps: true
    });

    // Indexes
    otaBookingSchema.index({ channel: 1, otaBookingId: 1 }, { unique: true });
    otaBookingSchema.index({ hotel: 1 });
    otaBookingSchema.index({ localBooking: 1 });
    otaBookingSchema.index({ 'bookingDetails.checkIn': 1 });
    otaBookingSchema.index({ 'bookingDetails.checkOut': 1 });
    otaBookingSchema.index({ status: 1 });
    otaBookingSchema.index({ syncStatus: 1 });
    otaBookingSchema.index({ 'otaGuestDetails.email': 1 });

    // Middleware to handle loyalty program integration
    otaBookingSchema.pre('save', async function(next) {
        if (this.isNew || this.isModified('status')) {
            try {
                // Only process loyalty if booking is confirmed and has a local booking
                if (this.status === 'confirmed' && this.localBooking) {
                    const booking = await mongoose.model('Booking').findById(this.localBooking)
                        .populate('user');
                    
                    if (booking && booking.user) {
                        const loyaltyProgram = await mongoose.model('LoyaltyProgram')
                            .findOne({ user: booking.user._id });

                        if (loyaltyProgram) {
                            // Calculate points (1 point per dollar spent)
                            const pointsEarned = Math.floor(this.bookingDetails.otaPrice);
                            
                            // Add points to loyalty program
                            await loyaltyProgram.addPoints(pointsEarned, 'OTA Booking', {
                                bookingId: this._id,
                                otaBookingId: this.otaBookingId,
                                amount: this.bookingDetails.otaPrice
                            });

                            // Update loyalty info in booking
                            this.loyaltyInfo = {
                                memberId: loyaltyProgram._id,
                                tier: loyaltyProgram.tier,
                                points: loyaltyProgram.points,
                                pointsEarned,
                                discountApplied: this.bookingDetails.otaPrice * getLoyaltyDiscount(loyaltyProgram.tier)
                            };

                            // Check for tier upgrade
                            await loyaltyProgram.checkAndUpdateTier();
                        }
                    }
                }
            } catch (error) {
                console.error('Error processing loyalty for OTA booking:', error);
            }
        }
        next();
    });

    // Helper function to get loyalty discount
    function getLoyaltyDiscount(tier) {
        switch (tier) {
            case 'Platinum':
                return 0.15; // 15% discount
            case 'Gold':
                return 0.10; // 10% discount
            case 'Silver':
                return 0.05; // 5% discount
            default:
                return 0;
        }
    }

    const OTABooking = mongoose.model('OTABooking', otaBookingSchema);
    module.exports = OTABooking;
}

================
File: src/models/OTAChannel.js
================
const mongoose = require('mongoose');

// Check if model exists before defining
if (mongoose.models.OTAChannel) {
    module.exports = mongoose.models.OTAChannel;
} else {
    const otaChannelSchema = new mongoose.Schema({
        hotel: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'Hotel',
            required: true
        },
        name: {
            type: String,
            required: true,
            enum: ['booking.com', 'airbnb', 'expedia']
        },
        credentials: {
            apiKey: {
                type: String,
                required: true
            },
            apiSecret: {
                type: String,
                required: true
            },
            propertyId: {
                type: String,
                required: true
            }
        },
        webhookSecret: {
            type: String
        },
        mappings: {
            roomTypes: [{
                localRoomId: {
                    type: mongoose.Schema.Types.ObjectId,
                    ref: 'Room',
                    required: true
                },
                otaRoomId: {
                    type: String,
                    required: true
                }
            }],
            ratePlans: [{
                localRoomId: {
                    type: mongoose.Schema.Types.ObjectId,
                    ref: 'Room',
                    required: true
                },
                otaRatePlanId: {
                    type: String,
                    required: true
                }
            }]
        },
        syncSettings: {
            inventory: {
                enabled: {
                    type: Boolean,
                    default: true
                },
                interval: {
                    type: Number,
                    default: 3600 // 1 hour in seconds
                }
            },
            prices: {
                enabled: {
                    type: Boolean,
                    default: true
                },
                interval: {
                    type: Number,
                    default: 1800 // 30 minutes in seconds
                }
            },
            availability: {
                enabled: {
                    type: Boolean,
                    default: true
                },
                interval: {
                    type: Number,
                    default: 300 // 5 minutes in seconds
                }
            }
        },
        lastSync: {
            inventory: Date,
            prices: Date,
            availability: Date
        },
        syncLogs: [{
            type: {
                type: String,
                enum: ['inventory', 'prices', 'availability'],
                required: true
            },
            status: {
                type: String,
                enum: ['success', 'failed'],
                required: true
            },
            message: String,
            timestamp: {
                type: Date,
                default: Date.now
            }
        }],
        isActive: {
            type: Boolean,
            default: true
        }
    }, {
        timestamps: true
    });

    // Indexes
    otaChannelSchema.index({ hotel: 1, name: 1 }, { unique: true });
    otaChannelSchema.index({ 'mappings.roomTypes.localRoomId': 1 });
    otaChannelSchema.index({ 'mappings.ratePlans.localRoomId': 1 });
    otaChannelSchema.index({ isActive: 1 });

    const OTAChannel = mongoose.model('OTAChannel', otaChannelSchema);
    module.exports = OTAChannel;
}

================
File: src/models/Payment.js
================
const mongoose = require('mongoose');

const paymentSchema = new mongoose.Schema({
    booking: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Booking',
        required: true
    },
    guest: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Guest',
        required: true
    },
    hotel: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Hotel',
        required: true
    },
    amount: {
        type: Number,
        required: true,
        min: 0
    },
    currency: {
        type: String,
        required: true,
        default: 'USD'
    },
    paymentMethod: {
        type: String,
        enum: ['CREDIT_CARD', 'DEBIT_CARD', 'BANK_TRANSFER', 'CASH', 'CRYPTO', 'LOYALTY_POINTS'],
        required: true
    },
    paymentStatus: {
        type: String,
        enum: ['PENDING', 'PROCESSING', 'COMPLETED', 'FAILED', 'REFUNDED', 'CANCELLED'],
        default: 'PENDING'
    },
    paymentGateway: {
        type: String,
        enum: ['STRIPE', 'PAYPAL', 'RAZORPAY', 'MANUAL', 'OTHER'],
        required: true
    },
    transactionId: {
        type: String,
        unique: true,
        sparse: true
    },
    paymentDetails: {
        cardLast4: String,
        cardBrand: String,
        bankName: String,
        accountLast4: String,
        walletType: String,
        upiId: String
    },
    refundDetails: {
        refundId: String,
        refundAmount: Number,
        refundReason: String,
        refundedAt: Date,
        refundStatus: {
            type: String,
            enum: ['PENDING', 'PROCESSING', 'COMPLETED', 'FAILED']
        }
    },
    metadata: {
        createdBy: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User',
            required: true
        },
        lastModifiedBy: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User'
        },
        source: {
            type: String,
            enum: ['WEB', 'MOBILE', 'POS', 'API'],
            default: 'WEB'
        },
        ipAddress: String,
        userAgent: String
    }
}, {
    timestamps: true
});

// Indexes
paymentSchema.index({ booking: 1, paymentStatus: 1 });
paymentSchema.index({ guest: 1, paymentStatus: 1 });
paymentSchema.index({ hotel: 1, createdAt: -1 });
paymentSchema.index({ transactionId: 1 }, { unique: true, sparse: true });

// Methods
paymentSchema.methods.markAsCompleted = async function(userId) {
    this.paymentStatus = 'COMPLETED';
    this.metadata.lastModifiedBy = userId;
    await this.save();
};

paymentSchema.methods.initiateRefund = async function(amount, reason, userId) {
    if (this.paymentStatus !== 'COMPLETED') {
        throw new Error('Payment must be completed before initiating refund');
    }

    this.refundDetails = {
        refundAmount: amount,
        refundReason: reason,
        refundStatus: 'PENDING'
    };
    this.metadata.lastModifiedBy = userId;
    await this.save();
};

// Statics
paymentSchema.statics.findByBooking = function(bookingId) {
    return this.find({ booking: bookingId }).sort({ createdAt: -1 });
};

paymentSchema.statics.findByGuest = function(guestId, status) {
    const query = { guest: guestId };
    if (status) {
        query.paymentStatus = status;
    }
    return this.find(query).sort({ createdAt: -1 });
};

paymentSchema.statics.findPendingPayments = function(hotelId) {
    return this.find({
        hotel: hotelId,
        paymentStatus: 'PENDING'
    }).sort({ createdAt: 1 });
};

const Payment = mongoose.model('Payment', paymentSchema);

module.exports = Payment;

================
File: src/models/PaymentSettings.js
================
const mongoose = require('mongoose');

const paymentSettingsSchema = new mongoose.Schema({
    taxRate: {
        type: Number,
        required: true,
        default: 0
    },
    currency: {
        type: String,
        required: true,
        default: 'usd'
    },
    paymentMethods: [{
        type: String,
        enum: ['card', 'bank_transfer', 'cash', 'mobile_payment'],
        default: ['card']
    }],
    stripePublicKey: {
        type: String,
        required: true
    },
    stripeSecretKey: {
        type: String,
        required: true
    },
    lastModifiedBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User'
    },
    lastModifiedAt: {
        type: Date,
        default: Date.now
    }
}, {
    timestamps: true
});

module.exports = mongoose.model('PaymentSettings', paymentSettingsSchema);

================
File: src/models/Permission.js
================
const mongoose = require('mongoose');

const permissionSchema = new mongoose.Schema({
    name: {
        type: String,
        required: true,
        unique: true,
        trim: true
    },
    description: {
        type: String,
        required: true,
        trim: true
    },
    module: {
        type: String,
        required: true,
        trim: true,
        enum: [
            'dashboard',
            'bookings',
            'guests',
            'rooms',
            'housekeeping',
            'maintenance',
            'inventory',
            'staff',
            'reports',
            'settings'
        ]
    },
    createdBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    createdAt: {
        type: Date,
        default: Date.now
    },
    lastModifiedBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User'
    },
    lastModifiedAt: {
        type: Date
    }
}, {
    timestamps: true
});

// Indexes
permissionSchema.index({ name: 1 }, { unique: true });
permissionSchema.index({ module: 1 });

const Permission = mongoose.model('Permission', permissionSchema);

module.exports = Permission;

================
File: src/models/Promotion.js
================
const mongoose = require('mongoose');

// Check if model exists before defining
if (mongoose.models.Promotion) {
    module.exports = mongoose.models.Promotion;
} else {
    const promotionSchema = new mongoose.Schema({
        name: {
            type: String,
            required: true,
            trim: true
        },
        code: {
            type: String,
            required: true,
            unique: true,
            uppercase: true,
            trim: true
        },
        description: {
            type: String,
            required: true
        },
        type: {
            type: String,
            enum: ['percentage', 'fixed_amount', 'free_night', 'room_upgrade', 'amenity'],
            required: true
        },
        value: {
            type: Number,
            required: function() {
                return ['percentage', 'fixed_amount'].includes(this.type);
            }
        },
        minStay: {
            type: Number,
            default: 1
        },
        minSpend: {
            type: Number,
            default: 0
        },
        validFrom: {
            type: Date,
            required: true
        },
        validUntil: {
            type: Date,
            required: true
        },
        applicableRoomTypes: [{
            type: mongoose.Schema.Types.ObjectId,
            ref: 'Room'
        }],
        maxUsage: {
            type: Number,
            default: null
        },
        usageCount: {
            type: Number,
            default: 0
        },
        perUserLimit: {
            type: Number,
            default: 1
        },
        targetAudience: {
            type: [{
                type: String,
                enum: ['all', 'new_guests', 'loyalty_members', 'corporate', 'vip']
            }],
            default: ['all']
        },
        loyaltyTierRestriction: [{
            type: String,
            enum: ['Bronze', 'Silver', 'Gold', 'Platinum']
        }],
        terms: {
            type: String,
            required: true
        },
        isActive: {
            type: Boolean,
            default: true
        },
        blackoutDates: [{
            start: Date,
            end: Date,
            reason: String
        }],
        combinable: {
            type: Boolean,
            default: false
        },
        createdBy: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User',
            required: true
        }
    }, {
        timestamps: true
    });

    // Indexes
    promotionSchema.index({ code: 1 }, { unique: true });
    promotionSchema.index({ validFrom: 1, validUntil: 1 });
    promotionSchema.index({ isActive: 1 });
    promotionSchema.index({ 'targetAudience': 1 });
    promotionSchema.index({ createdAt: -1 });

    // Methods
    promotionSchema.methods.isValid = function() {
        const now = new Date();
        return (
            this.isActive &&
            now >= this.validFrom &&
            now <= this.validUntil &&
            (this.maxUsage === null || this.usageCount < this.maxUsage)
        );
    };

    promotionSchema.methods.canBeUsedBy = function(user) {
        // Check if promotion is valid for the user's loyalty tier
        if (this.loyaltyTierRestriction.length > 0) {
            const userLoyalty = user.loyaltyProgram;
            if (!userLoyalty || !this.loyaltyTierRestriction.includes(userLoyalty.tier)) {
                return false;
            }
        }

        // Check if user has exceeded their usage limit
        const userUsageCount = user.bookings.filter(booking => 
            booking.promotion && booking.promotion.toString() === this._id.toString()
        ).length;

        return userUsageCount < this.perUserLimit;
    };

    promotionSchema.methods.calculateDiscount = function(amount, nights = 1) {
        if (!this.isValid()) return 0;

        switch (this.type) {
            case 'percentage':
                return (amount * this.value) / 100;
            case 'fixed_amount':
                return Math.min(this.value, amount);
            case 'free_night':
                const nightlyRate = amount / nights;
                return nightlyRate;
            default:
                return 0;
        }
    };

    const Promotion = mongoose.model('Promotion', promotionSchema);
    module.exports = Promotion;
}

================
File: src/models/RateManager.js
================
const mongoose = require('mongoose');

const rateManagerSchema = new mongoose.Schema({
    hotel: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Hotel',
        required: true
    },
    roomType: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'RoomType',
        required: true
    },
    channel: {
        type: String,
        enum: ['DIRECT', 'BOOKING_COM', 'EXPEDIA', 'AIRBNB'],
        required: true
    },
    baseRate: {
        type: Number,
        required: true,
        min: 0
    },
    dynamicPricing: {
        enabled: {
            type: Boolean,
            default: false
        },
        minRate: {
            type: Number,
            min: 0
        },
        maxRate: {
            type: Number,
            min: 0
        },
        rules: [{
            condition: {
                type: String,
                enum: ['OCCUPANCY', 'SEASON', 'DAY_OF_WEEK', 'ADVANCE_BOOKING', 'LENGTH_OF_STAY'],
                required: true
            },
            operator: {
                type: String,
                enum: ['GREATER_THAN', 'LESS_THAN', 'EQUAL_TO', 'BETWEEN'],
                required: true
            },
            value: {
                type: mongoose.Schema.Types.Mixed,
                required: true
            },
            adjustment: {
                type: {
                    type: String,
                    enum: ['PERCENTAGE', 'FIXED'],
                    required: true
                },
                value: {
                    type: Number,
                    required: true
                }
            }
        }]
    },
    restrictions: {
        minStay: {
            type: Number,
            min: 1,
            default: 1
        },
        maxStay: {
            type: Number,
            min: 1
        },
        closedToArrival: {
            type: Boolean,
            default: false
        },
        closedToDeparture: {
            type: Boolean,
            default: false
        },
        stopSell: {
            type: Boolean,
            default: false
        }
    },
    promotions: [{
        name: {
            type: String,
            required: true
        },
        description: String,
        startDate: {
            type: Date,
            required: true
        },
        endDate: {
            type: Date,
            required: true
        },
        discount: {
            type: {
                type: String,
                enum: ['PERCENTAGE', 'FIXED'],
                required: true
            },
            value: {
                type: Number,
                required: true
            }
        },
        conditions: {
            minStay: Number,
            advanceBooking: Number,
            roomTypes: [{
                type: mongoose.Schema.Types.ObjectId,
                ref: 'RoomType'
            }]
        },
        status: {
            type: String,
            enum: ['ACTIVE', 'INACTIVE', 'EXPIRED'],
            default: 'ACTIVE'
        }
    }],
    rateCalendar: [{
        date: {
            type: Date,
            required: true
        },
        rate: {
            type: Number,
            required: true,
            min: 0
        },
        availability: {
            type: Number,
            required: true,
            min: 0
        },
        restrictions: {
            minStay: Number,
            maxStay: Number,
            closedToArrival: Boolean,
            closedToDeparture: Boolean,
            stopSell: Boolean
        }
    }],
    lastSync: {
        status: {
            type: String,
            enum: ['SUCCESS', 'FAILED', 'IN_PROGRESS'],
            default: 'SUCCESS'
        },
        timestamp: {
            type: Date,
            default: Date.now
        },
        error: String
    },
    metadata: {
        createdBy: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User',
            required: true
        },
        lastModifiedBy: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User'
        }
    }
}, {
    timestamps: true
});

// Indexes
rateManagerSchema.index({ hotel: 1, roomType: 1, channel: 1 }, { unique: true });
rateManagerSchema.index({ 'rateCalendar.date': 1 });
rateManagerSchema.index({ 'promotions.startDate': 1, 'promotions.endDate': 1 });

// Methods
rateManagerSchema.methods.calculateRate = async function(date, length = 1) {
    const baseRate = this.baseRate;
    let finalRate = baseRate;

    // Apply dynamic pricing rules if enabled
    if (this.dynamicPricing.enabled) {
        for (const rule of this.dynamicPricing.rules) {
            const adjustment = await this.evaluateRule(rule, date);
            if (adjustment) {
                if (rule.adjustment.type === 'PERCENTAGE') {
                    finalRate *= (1 + rule.adjustment.value / 100);
                } else {
                    finalRate += rule.adjustment.value;
                }
            }
        }

        // Ensure rate is within min/max bounds
        if (this.dynamicPricing.minRate) {
            finalRate = Math.max(finalRate, this.dynamicPricing.minRate);
        }
        if (this.dynamicPricing.maxRate) {
            finalRate = Math.min(finalRate, this.dynamicPricing.maxRate);
        }
    }

    // Apply active promotions
    const activePromotion = this.getActivePromotion(date, length);
    if (activePromotion) {
        if (activePromotion.discount.type === 'PERCENTAGE') {
            finalRate *= (1 - activePromotion.discount.value / 100);
        } else {
            finalRate -= activePromotion.discount.value;
        }
    }

    return Math.round(finalRate * 100) / 100; // Round to 2 decimal places
};

rateManagerSchema.methods.evaluateRule = async function(rule, date) {
    // Implement rule evaluation logic based on conditions
    switch (rule.condition) {
        case 'OCCUPANCY':
            // Implement occupancy-based pricing
            break;
        case 'SEASON':
            // Implement seasonal pricing
            break;
        case 'DAY_OF_WEEK':
            // Implement day of week pricing
            break;
        case 'ADVANCE_BOOKING':
            // Implement advance booking pricing
            break;
        case 'LENGTH_OF_STAY':
            // Implement length of stay pricing
            break;
    }
    return false;
};

rateManagerSchema.methods.getActivePromotion = function(date, length) {
    return this.promotions.find(promo => {
        if (promo.status !== 'ACTIVE') return false;
        if (date < promo.startDate || date > promo.endDate) return false;
        if (promo.conditions.minStay && length < promo.conditions.minStay) return false;
        return true;
    });
};

// Statics
rateManagerSchema.statics.syncRates = async function(hotelId) {
    const rates = await this.find({ hotel: hotelId });
    for (const rate of rates) {
        try {
            rate.lastSync.status = 'IN_PROGRESS';
            await rate.save();

            // Implement channel-specific rate sync logic here

            rate.lastSync.status = 'SUCCESS';
            rate.lastSync.timestamp = new Date();
            await rate.save();
        } catch (error) {
            rate.lastSync.status = 'FAILED';
            rate.lastSync.error = error.message;
            rate.lastSync.timestamp = new Date();
            await rate.save();
        }
    }
};

const RateManager = mongoose.model('RateManager', rateManagerSchema);

module.exports = RateManager;

================
File: src/models/Redemption.js
================
const mongoose = require('mongoose');

const redemptionSchema = new mongoose.Schema({
    userId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    rewardId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Reward',
        required: true
    },
    date: {
        type: Date,
        default: Date.now
    },
    status: {
        type: String,
        enum: ['pending', 'approved', 'rejected', 'completed', 'expired'],
        default: 'pending'
    },
    pointsUsed: {
        type: Number,
        required: true
    },
    bookingId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Booking'
    },
    expiryDate: {
        type: Date,
        required: true
    },
    usedDate: {
        type: Date
    },
    rating: {
        type: Number,
        min: 1,
        max: 5
    },
    feedback: {
        type: String
    },
    notes: {
        type: String
    },
    createdBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    updatedBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User'
    }
}, {
    timestamps: true
});

// Pre-save middleware to set expiry date if not provided
redemptionSchema.pre('save', async function(next) {
    if (!this.expiryDate && this.rewardId) {
        const reward = await mongoose.model('Reward').findById(this.rewardId);
        if (reward) {
            const validityDays = reward.validityPeriod || 30; // Default to 30 days if not specified
            this.expiryDate = new Date(Date.now() + validityDays * 24 * 60 * 60 * 1000);
        }
    }
    next();
});

// Instance method to check if redemption is expired
redemptionSchema.methods.isExpired = function() {
    return this.expiryDate && this.expiryDate < new Date();
};

// Instance method to update status
redemptionSchema.methods.updateStatus = async function(newStatus, userId) {
    this.status = newStatus;
    this.updatedBy = userId;

    if (newStatus === 'completed') {
        this.usedDate = new Date();
    }

    await this.save();
};

// Instance method to add rating and feedback
redemptionSchema.methods.addRating = async function(rating, feedback) {
    this.rating = rating;
    this.feedback = feedback;
    await this.save();
};

// Static method to get redemption statistics
redemptionSchema.statics.getStats = async function(startDate, endDate) {
    const match = {};
    if (startDate || endDate) {
        match.date = {};
        if (startDate) match.date.$gte = startDate;
        if (endDate) match.date.$lte = endDate;
    }

    return this.aggregate([
        { $match: match },
        {
            $group: {
                _id: null,
                totalRedemptions: { $sum: 1 },
                totalPointsUsed: { $sum: '$pointsUsed' },
                averageRating: { $avg: '$rating' },
                completedRedemptions: {
                    $sum: { $cond: [{ $eq: ['$status', 'completed'] }, 1, 0] }
                },
                expiredRedemptions: {
                    $sum: { $cond: [{ $eq: ['$status', 'expired'] }, 1, 0] }
                }
            }
        },
        {
            $project: {
                _id: 0,
                totalRedemptions: 1,
                totalPointsUsed: 1,
                averageRating: { $round: ['$averageRating', 1] },
                completionRate: {
                    $multiply: [
                        { $divide: ['$completedRedemptions', '$totalRedemptions'] },
                        100
                    ]
                },
                expiryRate: {
                    $multiply: [
                        { $divide: ['$expiredRedemptions', '$totalRedemptions'] },
                        100
                    ]
                }
            }
        }
    ]);
};

// Static method to get popular rewards
redemptionSchema.statics.getPopularRewards = async function(limit = 5) {
    return this.aggregate([
        {
            $group: {
                _id: '$rewardId',
                totalRedemptions: { $sum: 1 },
                averageRating: { $avg: '$rating' },
                totalPoints: { $sum: '$pointsUsed' }
            }
        },
        {
            $lookup: {
                from: 'rewards',
                localField: '_id',
                foreignField: '_id',
                as: 'reward'
            }
        },
        { $unwind: '$reward' },
        {
            $project: {
                name: '$reward.name',
                category: '$reward.category',
                totalRedemptions: 1,
                averageRating: { $round: ['$averageRating', 1] },
                totalPoints: 1
            }
        },
        { $sort: { totalRedemptions: -1 } },
        { $limit: limit }
    ]);
};

const Redemption = mongoose.model('Redemption', redemptionSchema);
module.exports = Redemption;

================
File: src/models/Referral.js
================
const mongoose = require('mongoose');

const referralSchema = new mongoose.Schema({
    referrerId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    refereeId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    code: {
        type: String,
        required: true,
        unique: true
    },
    status: {
        type: String,
        enum: ['pending', 'completed', 'expired'],
        default: 'pending'
    },
    bonusPointsAwarded: {
        type: Boolean,
        default: false
    },
    referrerPoints: {
        type: Number,
        required: true,
        default: 1000 // Default referrer bonus
    },
    refereePoints: {
        type: Number,
        required: true,
        default: 500 // Default referee bonus
    },
    expiryDate: {
        type: Date,
        required: true,
        default: () => new Date(+new Date() + 30 * 24 * 60 * 60 * 1000) // 30 days from creation
    },
    completedDate: {
        type: Date
    },
    firstBooking: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Booking'
    },
    referralTier: {
        type: String,
        enum: ['standard', 'silver', 'gold', 'platinum'],
        default: 'standard'
    },
    bonusMultiplier: {
        type: Number,
        default: 1
    },
    metadata: {
        source: String,
        campaign: String,
        notes: String
    }
}, {
    timestamps: true
});

// Generate unique referral code
referralSchema.statics.generateReferralCode = async function(userId) {
    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    let code;
    let isUnique = false;

    while (!isUnique) {
        code = '';
        for (let i = 0; i < 8; i++) {
            code += characters.charAt(Math.floor(Math.random() * characters.length));
        }
        
        // Check if code exists
        const existingCode = await this.findOne({ code });
        if (!existingCode) {
            isUnique = true;
        }
    }

    return code;
};

// Check if referral is valid
referralSchema.methods.isValid = function() {
    return this.status === 'pending' && this.expiryDate > new Date();
};

// Complete referral
referralSchema.methods.complete = async function(bookingId) {
    if (!this.isValid()) {
        throw new Error('Referral is no longer valid');
    }

    this.status = 'completed';
    this.completedDate = new Date();
    this.firstBooking = bookingId;

    if (!this.bonusPointsAwarded) {
        try {
            const LoyaltyProgram = mongoose.model('LoyaltyProgram');

            // Award points to referrer
            const referrerLoyalty = await LoyaltyProgram.findOne({ user: this.referrerId });
            if (referrerLoyalty) {
                const referrerBonus = this.referrerPoints * this.bonusMultiplier;
                await referrerLoyalty.addPoints(
                    referrerBonus,
                    'referral',
                    bookingId,
                    `Referral bonus for successful referral (Code: ${this.code})`
                );

                // Update referral count and check for milestones
                referrerLoyalty.referralCount += 1;
                await referrerLoyalty.checkMilestones();
            }

            // Award points to referee
            const refereeLoyalty = await LoyaltyProgram.findOne({ user: this.refereeId });
            if (refereeLoyalty) {
                const refereeBonus = this.refereePoints * this.bonusMultiplier;
                await refereeLoyalty.addPoints(
                    refereeBonus,
                    'referral',
                    bookingId,
                    `Welcome bonus for joining through referral (Code: ${this.code})`
                );
            }

            this.bonusPointsAwarded = true;

            // Send completion emails
            const emailService = require('../services/email.service');
            await Promise.all([
                emailService.sendReferralCompletionEmail(this.referrerId, this),
                emailService.sendReferralWelcomeEmail(this.refereeId, this)
            ]);
        } catch (error) {
            console.error('Error processing referral completion:', error);
            throw error;
        }
    }

    return this.save();
};

// Expire referral
referralSchema.methods.expire = async function() {
    if (this.status === 'pending') {
        this.status = 'expired';
        await this.save();

        // Notify referrer of expiration
        try {
            const emailService = require('../services/email.service');
            await emailService.sendReferralExpirationEmail(this.referrerId, this);
        } catch (error) {
            console.error('Error sending referral expiration email:', error);
        }
    }
};

// Static method to get referral statistics
referralSchema.statics.getStats = async function(startDate, endDate) {
    const match = {};
    if (startDate || endDate) {
        match.createdAt = {};
        if (startDate) match.createdAt.$gte = new Date(startDate);
        if (endDate) match.createdAt.$lte = new Date(endDate);
    }

    return this.aggregate([
        { $match: match },
        {
            $group: {
                _id: null,
                totalReferrals: { $sum: 1 },
                completedReferrals: {
                    $sum: { $cond: [{ $eq: ['$status', 'completed'] }, 1, 0] }
                },
                expiredReferrals: {
                    $sum: { $cond: [{ $eq: ['$status', 'expired'] }, 1, 0] }
                },
                totalPointsAwarded: {
                    $sum: {
                        $cond: [
                            { $eq: ['$bonusPointsAwarded', true] },
                            { $add: ['$referrerPoints', '$refereePoints'] },
                            0
                        ]
                    }
                }
            }
        }
    ]);
};

// Static method to get top referrers
referralSchema.statics.getTopReferrers = async function(limit = 10) {
    return this.aggregate([
        { $match: { status: 'completed' } },
        {
            $group: {
                _id: '$referrerId',
                totalReferrals: { $sum: 1 },
                totalPoints: {
                    $sum: { $multiply: ['$referrerPoints', '$bonusMultiplier'] }
                }
            }
        },
        {
            $lookup: {
                from: 'users',
                localField: '_id',
                foreignField: '_id',
                as: 'referrer'
            }
        },
        { $unwind: '$referrer' },
        {
            $project: {
                _id: 1,
                totalReferrals: 1,
                totalPoints: 1,
                'referrer.name': 1,
                'referrer.email': 1
            }
        },
        { $sort: { totalReferrals: -1 } },
        { $limit: limit }
    ]);
};

// Create indexes
referralSchema.index({ code: 1 }, { unique: true });
referralSchema.index({ referrerId: 1 });
referralSchema.index({ refereeId: 1 });
referralSchema.index({ status: 1 });
referralSchema.index({ createdAt: 1 });

const Referral = mongoose.model('Referral', referralSchema);
module.exports = Referral;

================
File: src/models/Refund.js
================
const mongoose = require('mongoose');

const refundSchema = new mongoose.Schema({
    payment: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Payment',
        required: true
    },
    booking: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Booking',
        required: true
    },
    guest: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Guest',
        required: true
    },
    hotel: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Hotel',
        required: true
    },
    amount: {
        type: Number,
        required: true,
        min: 0
    },
    currency: {
        type: String,
        required: true,
        default: 'USD'
    },
    reason: {
        type: String,
        required: true,
        enum: [
            'CANCELLATION',
            'MODIFICATION',
            'SERVICE_ISSUE',
            'DUPLICATE_CHARGE',
            'OVERCHARGE',
            'GUEST_REQUEST',
            'OTHER'
        ]
    },
    status: {
        type: String,
        enum: ['PENDING', 'PROCESSING', 'COMPLETED', 'FAILED', 'CANCELLED'],
        default: 'PENDING'
    },
    refundMethod: {
        type: String,
        enum: ['ORIGINAL_PAYMENT', 'BANK_TRANSFER', 'CREDIT_CARD', 'WALLET', 'LOYALTY_POINTS'],
        required: true
    },
    paymentGateway: {
        type: String,
        enum: ['STRIPE', 'PAYPAL', 'RAZORPAY', 'MANUAL', 'OTHER'],
        required: true
    },
    transactionId: {
        type: String,
        unique: true,
        sparse: true
    },
    refundDetails: {
        cardLast4: String,
        cardBrand: String,
        bankName: String,
        accountNumber: String,
        accountHolderName: String,
        bankCode: String,
        walletId: String
    },
    notes: {
        type: String,
        maxLength: 1000
    },
    metadata: {
        createdBy: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User',
            required: true
        },
        lastModifiedBy: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User'
        },
        source: {
            type: String,
            enum: ['WEB', 'MOBILE', 'POS', 'API'],
            default: 'WEB'
        },
        ipAddress: String,
        userAgent: String
    }
}, {
    timestamps: true
});

// Indexes
refundSchema.index({ payment: 1, status: 1 });
refundSchema.index({ booking: 1, status: 1 });
refundSchema.index({ guest: 1, status: 1 });
refundSchema.index({ hotel: 1, createdAt: -1 });
refundSchema.index({ transactionId: 1 }, { unique: true, sparse: true });

// Methods
refundSchema.methods.markAsCompleted = async function(userId) {
    this.status = 'COMPLETED';
    this.metadata.lastModifiedBy = userId;
    await this.save();
};

refundSchema.methods.markAsFailed = async function(userId, reason) {
    this.status = 'FAILED';
    this.notes = reason;
    this.metadata.lastModifiedBy = userId;
    await this.save();
};

refundSchema.methods.cancel = async function(userId, reason) {
    if (this.status === 'COMPLETED') {
        throw new Error('Cannot cancel a completed refund');
    }
    this.status = 'CANCELLED';
    this.notes = reason;
    this.metadata.lastModifiedBy = userId;
    await this.save();
};

// Statics
refundSchema.statics.findByPayment = function(paymentId) {
    return this.find({ payment: paymentId }).sort({ createdAt: -1 });
};

refundSchema.statics.findByBooking = function(bookingId) {
    return this.find({ booking: bookingId }).sort({ createdAt: -1 });
};

refundSchema.statics.findByGuest = function(guestId, status) {
    const query = { guest: guestId };
    if (status) {
        query.status = status;
    }
    return this.find(query).sort({ createdAt: -1 });
};

refundSchema.statics.findPendingRefunds = function(hotelId) {
    return this.find({
        hotel: hotelId,
        status: 'PENDING'
    }).sort({ createdAt: 1 });
};

// Pre-save middleware
refundSchema.pre('save', async function(next) {
    if (this.isNew) {
        const Payment = mongoose.model('Payment');
        const payment = await Payment.findById(this.payment);
        if (!payment) {
            throw new Error('Payment not found');
        }
        if (this.amount > payment.amount) {
            throw new Error('Refund amount cannot be greater than payment amount');
        }
    }
    next();
});

const Refund = mongoose.model('Refund', refundSchema);

module.exports = Refund;

================
File: src/models/Review.js
================
const mongoose = require('mongoose');

// Check if model exists before defining
if (mongoose.models.Review) {
    module.exports = mongoose.models.Review;
} else {
    const reviewSchema = new mongoose.Schema({
        user: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User',
            required: true
        },
        booking: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'Booking',
            required: true
        },
        hotel: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'Hotel',
            required: true
        },
        rating: {
            type: Number,
            required: true,
            min: 1,
            max: 5
        },
        title: {
            type: String,
            required: true,
            trim: true,
            maxlength: 100
        },
        comment: {
            type: String,
            required: true,
            trim: true,
            maxlength: 1000
        },
        stayDate: {
            type: Date,
            required: true
        },
        categories: {
            cleanliness: {
                type: Number,
                min: 1,
                max: 5
            },
            comfort: {
                type: Number,
                min: 1,
                max: 5
            },
            location: {
                type: Number,
                min: 1,
                max: 5
            },
            facilities: {
                type: Number,
                min: 1,
                max: 5
            },
            staff: {
                type: Number,
                min: 1,
                max: 5
            },
            valueForMoney: {
                type: Number,
                min: 1,
                max: 5
            }
        },
        photos: [{
            url: String,
            caption: String
        }],
        status: {
            type: String,
            enum: ['pending', 'approved', 'rejected'],
            default: 'pending'
        },
        loyaltyPointsAwarded: {
            type: Boolean,
            default: false
        },
        pointsEarned: {
            type: Number,
            default: 0
        },
        response: {
            content: String,
            respondedBy: {
                type: mongoose.Schema.Types.ObjectId,
                ref: 'User'
            },
            respondedAt: Date
        },
        helpful: [{
            user: {
                type: mongoose.Schema.Types.ObjectId,
                ref: 'User'
            },
            date: {
                type: Date,
                default: Date.now
            }
        }],
        reported: [{
            user: {
                type: mongoose.Schema.Types.ObjectId,
                ref: 'User'
            },
            reason: String,
            date: {
                type: Date,
                default: Date.now
            }
        }]
    }, {
        timestamps: true
    });

    // Calculate average rating across all categories
    reviewSchema.methods.calculateAverageRating = function() {
        const categories = this.categories;
        const ratings = [
            this.rating,
            categories.cleanliness,
            categories.comfort,
            categories.location,
            categories.facilities,
            categories.staff,
            categories.valueForMoney
        ].filter(rating => rating !== undefined);

        return ratings.reduce((sum, rating) => sum + rating, 0) / ratings.length;
    };

    // Award loyalty points for review
    reviewSchema.methods.awardLoyaltyPoints = async function() {
        if (!this.loyaltyPointsAwarded) {
            try {
                const LoyaltyProgram = mongoose.model('LoyaltyProgram');
                const userLoyalty = await LoyaltyProgram.findOne({ user: this.user });

                if (userLoyalty) {
                    // Base points for review
                    let points = 100;

                    // Bonus points for detailed review
                    if (this.comment.length >= 100) points += 50;
                    if (this.photos.length > 0) points += 50;

                    // Add points to user's loyalty program
                    await userLoyalty.addPoints(
                        points,
                        'review',
                        this.booking,
                        `Points awarded for hotel review (ID: ${this._id})`
                    );

                    this.loyaltyPointsAwarded = true;
                    this.pointsEarned = points;
                    await this.save();
                }
            } catch (error) {
                console.error('Error awarding loyalty points for review:', error);
                throw error;
            }
        }
    };

    // Pre-save middleware to handle review approval
    reviewSchema.pre('save', async function(next) {
        if (this.isModified('status') && this.status === 'approved') {
            try {
                await this.awardLoyaltyPoints();
            } catch (error) {
                next(error);
            }
        }
        next();
    });

    // Indexes
    reviewSchema.index({ user: 1, booking: 1 }, { unique: true });
    reviewSchema.index({ hotel: 1 });
    reviewSchema.index({ status: 1 });
    reviewSchema.index({ createdAt: -1 });

    const Review = mongoose.model('Review', reviewSchema);
    module.exports = Review;
}

================
File: src/models/Reward.js
================
const mongoose = require('mongoose');

const rewardSchema = new mongoose.Schema({
    name: {
        type: String,
        required: true
    },
    description: {
        type: String,
        required: true
    },
    pointsCost: {
        type: Number,
        required: true,
        min: 0
    },
    type: {
        type: String,
        enum: ['ROOM_DISCOUNT', 'FREE_NIGHT', 'ROOM_UPGRADE', 'AMENITY', 'DINING', 'SPA'],
        required: true
    },
    discountValue: {
        type: Number,
        min: 0,
        max: 100 // for percentage discounts
    },
    validityDays: {
        type: Number,
        required: true,
        min: 1
    },
    minimumTier: {
        type: String,
        enum: ['Bronze', 'Silver', 'Gold', 'Platinum'],
        default: 'Bronze'
    },
    isActive: {
        type: Boolean,
        default: true
    },
    termsAndConditions: [String],
    redemptions: [{
        user: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User',
            required: true
        },
        redeemedAt: {
            type: Date,
            default: Date.now
        },
        expiresAt: Date,
        used: {
            type: Boolean,
            default: false
        },
        usedAt: Date,
        booking: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'Booking'
        }
    }],
    totalRedemptions: {
        type: Number,
        default: 0
    },
    maxRedemptionsPerUser: {
        type: Number,
        default: 1
    }
}, {
    timestamps: true
});

// Check if user can redeem this reward
rewardSchema.methods.canBeRedeemedBy = function(user, userLoyalty) {
    // Check if reward is active
    if (!this.isActive) return false;

    // Check if user has minimum tier
    if (userLoyalty.tier < this.minimumTier) return false;

    // Check if user has already redeemed maximum allowed
    const userRedemptions = this.redemptions.filter(r => r.user.equals(user._id)).length;
    if (userRedemptions >= this.maxRedemptionsPerUser) return false;

    return true;
};

// Create redemption for user
rewardSchema.methods.createRedemption = async function(user) {
    const expiresAt = new Date();
    expiresAt.setDate(expiresAt.getDate() + this.validityDays);

    this.redemptions.push({
        user: user._id,
        expiresAt
    });

    this.totalRedemptions += 1;
    await this.save();

    return this.redemptions[this.redemptions.length - 1];
};

const Reward = mongoose.model('Reward', rewardSchema);
module.exports = Reward;

================
File: src/models/Role.js
================
const mongoose = require('mongoose');

const roleSchema = new mongoose.Schema({
    name: {
        type: String,
        required: true,
        unique: true,
        trim: true,
        uppercase: true
    },
    description: {
        type: String,
        required: true
    },
    permissions: [{
        module: {
            type: String,
            required: true,
            enum: [
                'DASHBOARD',
                'BOOKINGS',
                'GUESTS',
                'ROOMS',
                'HOUSEKEEPING',
                'MAINTENANCE',
                'INVENTORY',
                'STAFF',
                'REPORTS',
                'SETTINGS',
                'BILLING',
                'LOYALTY',
                'MARKETING',
                'CHANNEL_MANAGER',
                'API_ACCESS'
            ]
        },
        actions: [{
            type: String,
            enum: ['VIEW', 'CREATE', 'EDIT', 'DELETE', 'APPROVE', 'EXPORT']
        }]
    }],
    isSystem: {
        type: Boolean,
        default: false
    },
    isActive: {
        type: Boolean,
        default: true
    },
    metadata: {
        createdBy: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User',
            required: true
        },
        lastModifiedBy: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User'
        }
    }
}, {
    timestamps: true
});

// Indexes
roleSchema.index({ name: 1 }, { unique: true });
roleSchema.index({ isSystem: 1, isActive: 1 });

// Methods
roleSchema.methods.hasPermission = function(module, action) {
    const modulePermission = this.permissions.find(p => p.module === module);
    return modulePermission ? modulePermission.actions.includes(action) : false;
};

roleSchema.methods.addPermission = async function(module, actions, userId) {
    let modulePermission = this.permissions.find(p => p.module === module);
    if (modulePermission) {
        modulePermission.actions = [...new Set([...modulePermission.actions, ...actions])];
    } else {
        this.permissions.push({ module, actions });
    }
    this.metadata.lastModifiedBy = userId;
    await this.save();
};

roleSchema.methods.removePermission = async function(module, actions, userId) {
    const modulePermission = this.permissions.find(p => p.module === module);
    if (modulePermission) {
        modulePermission.actions = modulePermission.actions.filter(a => !actions.includes(a));
        if (modulePermission.actions.length === 0) {
            this.permissions = this.permissions.filter(p => p.module !== module);
        }
        this.metadata.lastModifiedBy = userId;
        await this.save();
    }
};

// Statics
roleSchema.statics.findActiveRoles = function() {
    return this.find({ isActive: true }).sort({ name: 1 });
};

roleSchema.statics.findSystemRoles = function() {
    return this.find({ isSystem: true }).sort({ name: 1 });
};

// Pre-save middleware
roleSchema.pre('save', function(next) {
    if (this.isSystem && this.isModified('isSystem')) {
        const err = new Error('Cannot modify system role flag');
        next(err);
    }
    next();
});

// Create default system roles
roleSchema.statics.createDefaultRoles = async function(userId) {
    const roles = [
        {
            name: 'SUPER_ADMIN',
            description: 'Full system access with all permissions',
            permissions: [
                {
                    module: 'DASHBOARD',
                    actions: ['VIEW']
                },
                {
                    module: 'BOOKINGS',
                    actions: ['VIEW', 'CREATE', 'EDIT', 'DELETE', 'APPROVE', 'EXPORT']
                },
                {
                    module: 'GUESTS',
                    actions: ['VIEW', 'CREATE', 'EDIT', 'DELETE', 'EXPORT']
                },
                {
                    module: 'ROOMS',
                    actions: ['VIEW', 'CREATE', 'EDIT', 'DELETE']
                },
                {
                    module: 'HOUSEKEEPING',
                    actions: ['VIEW', 'CREATE', 'EDIT', 'DELETE']
                },
                {
                    module: 'MAINTENANCE',
                    actions: ['VIEW', 'CREATE', 'EDIT', 'DELETE']
                },
                {
                    module: 'INVENTORY',
                    actions: ['VIEW', 'CREATE', 'EDIT', 'DELETE', 'APPROVE']
                },
                {
                    module: 'STAFF',
                    actions: ['VIEW', 'CREATE', 'EDIT', 'DELETE']
                },
                {
                    module: 'REPORTS',
                    actions: ['VIEW', 'EXPORT']
                },
                {
                    module: 'SETTINGS',
                    actions: ['VIEW', 'EDIT']
                },
                {
                    module: 'BILLING',
                    actions: ['VIEW', 'CREATE', 'EDIT', 'DELETE', 'APPROVE']
                },
                {
                    module: 'LOYALTY',
                    actions: ['VIEW', 'CREATE', 'EDIT', 'DELETE']
                },
                {
                    module: 'MARKETING',
                    actions: ['VIEW', 'CREATE', 'EDIT', 'DELETE']
                },
                {
                    module: 'CHANNEL_MANAGER',
                    actions: ['VIEW', 'CREATE', 'EDIT', 'DELETE']
                },
                {
                    module: 'API_ACCESS',
                    actions: ['VIEW', 'CREATE', 'EDIT', 'DELETE']
                }
            ],
            isSystem: true,
            metadata: {
                createdBy: userId
            }
        },
        {
            name: 'MANAGER',
            description: 'Hotel manager with access to most features except system settings',
            permissions: [
                {
                    module: 'DASHBOARD',
                    actions: ['VIEW']
                },
                {
                    module: 'BOOKINGS',
                    actions: ['VIEW', 'CREATE', 'EDIT', 'DELETE', 'APPROVE']
                },
                {
                    module: 'GUESTS',
                    actions: ['VIEW', 'CREATE', 'EDIT']
                },
                {
                    module: 'ROOMS',
                    actions: ['VIEW', 'EDIT']
                },
                {
                    module: 'HOUSEKEEPING',
                    actions: ['VIEW', 'CREATE', 'EDIT']
                },
                {
                    module: 'MAINTENANCE',
                    actions: ['VIEW', 'CREATE', 'EDIT']
                },
                {
                    module: 'INVENTORY',
                    actions: ['VIEW', 'CREATE', 'EDIT', 'APPROVE']
                },
                {
                    module: 'STAFF',
                    actions: ['VIEW']
                },
                {
                    module: 'REPORTS',
                    actions: ['VIEW', 'EXPORT']
                },
                {
                    module: 'BILLING',
                    actions: ['VIEW', 'CREATE', 'EDIT', 'APPROVE']
                },
                {
                    module: 'LOYALTY',
                    actions: ['VIEW', 'EDIT']
                },
                {
                    module: 'MARKETING',
                    actions: ['VIEW', 'CREATE', 'EDIT']
                },
                {
                    module: 'CHANNEL_MANAGER',
                    actions: ['VIEW', 'EDIT']
                }
            ],
            isSystem: true,
            metadata: {
                createdBy: userId
            }
        },
        {
            name: 'STAFF',
            description: 'Regular staff with basic operational access',
            permissions: [
                {
                    module: 'DASHBOARD',
                    actions: ['VIEW']
                },
                {
                    module: 'BOOKINGS',
                    actions: ['VIEW', 'CREATE']
                },
                {
                    module: 'GUESTS',
                    actions: ['VIEW']
                },
                {
                    module: 'ROOMS',
                    actions: ['VIEW']
                },
                {
                    module: 'HOUSEKEEPING',
                    actions: ['VIEW', 'CREATE']
                },
                {
                    module: 'MAINTENANCE',
                    actions: ['VIEW', 'CREATE']
                },
                {
                    module: 'INVENTORY',
                    actions: ['VIEW']
                }
            ],
            isSystem: true,
            metadata: {
                createdBy: userId
            }
        }
    ];

    for (const role of roles) {
        await this.findOneAndUpdate(
            { name: role.name },
            role,
            { upsert: true, new: true }
        );
    }
};

const Role = mongoose.model('Role', roleSchema);

module.exports = Role;

================
File: src/models/Room.js
================
const mongoose = require('mongoose');

// Check if model exists before defining
if (mongoose.models.Room) {
    module.exports = mongoose.models.Room;
} else {
    const roomSchema = new mongoose.Schema({
        number: {
            type: String,
            required: true
        },
        type: {
            type: String,
            enum: ['standard', 'deluxe', 'suite', 'executive', 'presidential'],
            required: true
        },
        hotel: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'Hotel',
            required: true
        },
        floor: {
            type: Number,
            required: true
        },
        capacity: {
            adults: {
                type: Number,
                required: true,
                min: 1
            },
            children: {
                type: Number,
                default: 0
            }
        },
        amenities: [{
            type: String,
            enum: [
                'wifi',
                'tv',
                'minibar',
                'safe',
                'aircon',
                'desk',
                'balcony',
                'bathtub',
                'shower',
                'coffee_maker',
                'iron',
                'hairdryer'
            ]
        }],
        baseRate: {
            type: Number,
            required: true,
            min: 0
        },
        seasonalRates: [{
            startDate: Date,
            endDate: Date,
            rate: Number
        }],
        loyaltyBenefits: {
            upgradeable: {
                type: Boolean,
                default: true
            },
            pointsMultiplier: {
                type: Number,
                default: 1
            },
            tierAccess: [{
                tier: {
                    type: String,
                    enum: ['Bronze', 'Silver', 'Gold', 'Platinum']
                },
                discount: {
                    type: Number,
                    min: 0,
                    max: 100
                }
            }]
        },
        status: {
            isAvailable: {
                type: Boolean,
                default: true
            },
            isClean: {
                type: Boolean,
                default: true
            },
            needsMaintenance: {
                type: Boolean,
                default: false
            },
            maintenanceNotes: String
        },
        images: [{
            url: String,
            caption: String
        }],
        description: {
            type: String,
            required: true
        },
        features: [{
            name: String,
            description: String
        }],
        view: {
            type: String,
            enum: ['city', 'garden', 'pool', 'ocean', 'mountain', 'none'],
            default: 'none'
        },
        bedConfiguration: {
            type: String,
            enum: ['single', 'twin', 'double', 'queen', 'king'],
            required: true
        },
        size: {
            squareFeet: Number,
            squareMeters: Number
        }
    }, {
        timestamps: true
    });

    // Calculate current rate based on season and loyalty tier
    roomSchema.methods.getCurrentRate = async function(date, loyaltyTier) {
        // Get base rate
        let currentRate = this.baseRate;

        // Check seasonal rates
        const today = date || new Date();
        const seasonalRate = this.seasonalRates.find(rate => 
            today >= rate.startDate && today <= rate.endDate
        );
        if (seasonalRate) {
            currentRate = seasonalRate.rate;
        }

        // Apply loyalty discount if applicable
        if (loyaltyTier) {
            const tierDiscount = this.loyaltyBenefits.tierAccess.find(t => t.tier === loyaltyTier);
            if (tierDiscount) {
                currentRate = currentRate * (1 - (tierDiscount.discount / 100));
            }
        }

        return currentRate;
    };

    // Check if room can be upgraded for loyalty member
    roomSchema.methods.canUpgrade = async function(loyaltyTier) {
        if (!this.loyaltyBenefits.upgradeable) return false;

        const tierLevels = {
            'Bronze': 1,
            'Silver': 2,
            'Gold': 3,
            'Platinum': 4
        };

        const roomTypes = {
            'standard': 1,
            'deluxe': 2,
            'suite': 3,
            'executive': 4,
            'presidential': 5
        };

        const tierLevel = tierLevels[loyaltyTier] || 0;
        const roomLevel = roomTypes[this.type] || 0;

        // Can upgrade if tier level is high enough
        return tierLevel >= roomLevel;
    };

    // Index for searching
    roomSchema.index({
        'number': 1,
        'type': 1,
        'hotel': 1
    });

    const Room = mongoose.model('Room', roomSchema);
    module.exports = Room;
}

================
File: src/models/Supplier.js
================
const mongoose = require('mongoose');

const supplierSchema = new mongoose.Schema({
    name: {
        type: String,
        required: true,
        trim: true,
        unique: true
    },
    contactPerson: {
        name: {
            type: String,
            required: true,
            trim: true
        },
        email: {
            type: String,
            required: true,
            trim: true,
            lowercase: true
        },
        phone: {
            type: String,
            required: true,
            trim: true
        },
        position: {
            type: String,
            trim: true
        }
    },
    company: {
        address: {
            street: {
                type: String,
                required: true,
                trim: true
            },
            city: {
                type: String,
                required: true,
                trim: true
            },
            state: {
                type: String,
                required: true,
                trim: true
            },
            zipCode: {
                type: String,
                required: true,
                trim: true
            },
            country: {
                type: String,
                required: true,
                trim: true
            }
        },
        phone: {
            type: String,
            required: true,
            trim: true
        },
        email: {
            type: String,
            required: true,
            trim: true,
            lowercase: true
        },
        website: {
            type: String,
            trim: true
        },
        taxId: {
            type: String,
            trim: true
        }
    },
    paymentTerms: {
        type: String,
        required: true,
        trim: true,
        enum: ['NET30', 'NET60', 'NET90', 'Immediate']
    },
    currency: {
        type: String,
        required: true,
        trim: true,
        default: 'USD'
    },
    rating: {
        score: {
            type: Number,
            min: 0,
            max: 5,
            default: 0
        },
        reviews: [{
            rating: {
                type: Number,
                required: true,
                min: 1,
                max: 5
            },
            comment: String,
            date: {
                type: Date,
                default: Date.now
            },
            reviewer: {
                type: mongoose.Schema.Types.ObjectId,
                ref: 'User',
                required: true
            }
        }]
    },
    status: {
        type: String,
        enum: ['active', 'inactive', 'blacklisted'],
        default: 'active'
    },
    categories: [{
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Category'
    }],
    documents: [{
        type: {
            type: String,
            required: true,
            enum: ['contract', 'license', 'certification', 'insurance']
        },
        number: {
            type: String,
            required: true
        },
        issueDate: {
            type: Date,
            required: true
        },
        expiryDate: {
            type: Date,
            required: true
        },
        file: {
            type: String, // URL or path to stored document
            required: true
        },
        status: {
            type: String,
            enum: ['valid', 'expired', 'pending'],
            default: 'valid'
        }
    }],
    performance: {
        totalOrders: {
            type: Number,
            default: 0
        },
        completedOrders: {
            type: Number,
            default: 0
        },
        cancelledOrders: {
            type: Number,
            default: 0
        },
        returnedOrders: {
            type: Number,
            default: 0
        },
        averageDeliveryTime: {
            type: Number, // in days
            default: 0
        },
        lastOrderDate: Date,
        qualityIssues: [{
            date: {
                type: Date,
                required: true
            },
            issue: {
                type: String,
                required: true
            },
            resolution: String,
            resolvedDate: Date
        }]
    },
    notes: [{
        content: {
            type: String,
            required: true
        },
        date: {
            type: Date,
            default: Date.now
        },
        author: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User',
            required: true
        }
    }],
    isActive: {
        type: Boolean,
        default: true
    },
    createdBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    updatedBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User'
    }
}, {
    timestamps: true
});

// Calculate and update rating score when reviews change
supplierSchema.pre('save', function(next) {
    if (this.isModified('rating.reviews')) {
        const totalReviews = this.rating.reviews.length;
        if (totalReviews > 0) {
            const sum = this.rating.reviews.reduce((acc, review) => acc + review.rating, 0);
            this.rating.score = Math.round((sum / totalReviews) * 10) / 10;
        } else {
            this.rating.score = 0;
        }
    }
    next();
});

// Update performance metrics when adding a new order
supplierSchema.methods.updatePerformanceMetrics = async function(orderStatus) {
    this.performance.totalOrders++;
    this.performance.lastOrderDate = new Date();

    switch (orderStatus) {
        case 'completed':
            this.performance.completedOrders++;
            break;
        case 'cancelled':
            this.performance.cancelledOrders++;
            break;
        case 'returned':
            this.performance.returnedOrders++;
            break;
    }

    // Calculate completion rate
    if (this.performance.totalOrders > 0) {
        this.performance.completionRate = 
            (this.performance.completedOrders / this.performance.totalOrders) * 100;
    }

    await this.save();
};

// Add quality issue
supplierSchema.methods.addQualityIssue = async function(issue) {
    this.performance.qualityIssues.push({
        date: new Date(),
        issue: issue
    });
    await this.save();
};

// Resolve quality issue
supplierSchema.methods.resolveQualityIssue = async function(issueId, resolution) {
    const issue = this.performance.qualityIssues.id(issueId);
    if (issue) {
        issue.resolution = resolution;
        issue.resolvedDate = new Date();
        await this.save();
    }
};

// Add note
supplierSchema.methods.addNote = async function(content, userId) {
    this.notes.push({
        content,
        author: userId
    });
    await this.save();
};

const Supplier = mongoose.model('Supplier', supplierSchema);
module.exports = Supplier;

================
File: src/models/supplier.model.js
================
const mongoose = require('mongoose');

const supplierSchema = new mongoose.Schema({
    name: {
        type: String,
        required: true,
        trim: true,
        unique: true
    },
    contactPerson: {
        name: {
            type: String,
            required: true,
            trim: true
        },
        email: {
            type: String,
            required: true,
            trim: true,
            lowercase: true
        },
        phone: {
            type: String,
            required: true,
            trim: true
        },
        position: {
            type: String,
            trim: true
        }
    },
    company: {
        address: {
            street: String,
            city: String,
            state: String,
            country: String,
            zipCode: String
        },
        registrationNumber: {
            type: String,
            trim: true
        },
        website: {
            type: String,
            trim: true
        }
    },
    paymentTerms: {
        type: String,
        enum: ['immediate', 'net15', 'net30', 'net45', 'net60'],
        default: 'net30'
    },
    status: {
        type: String,
        enum: ['active', 'inactive', 'blacklisted'],
        default: 'active'
    },
    rating: {
        quality: {
            type: Number,
            min: 1,
            max: 5,
            default: 3
        },
        reliability: {
            type: Number,
            min: 1,
            max: 5,
            default: 3
        },
        pricing: {
            type: Number,
            min: 1,
            max: 5,
            default: 3
        }
    },
    metadata: {
        totalOrders: {
            type: Number,
            default: 0
        },
        lastOrderDate: Date,
        averageLeadTime: {
            type: Number, // in days
            default: 7
        },
        totalSpent: {
            type: Number,
            default: 0
        },
        preferredCommunication: {
            type: String,
            enum: ['email', 'phone', 'portal'],
            default: 'email'
        }
    },
    notes: [{
        content: String,
        createdBy: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User'
        },
        createdAt: {
            type: Date,
            default: Date.now
        }
    }],
    documents: [{
        type: {
            type: String,
            enum: ['contract', 'invoice', 'certification', 'other'],
            required: true
        },
        name: String,
        url: String,
        uploadedBy: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User'
        },
        uploadedAt: {
            type: Date,
            default: Date.now
        }
    }]
}, {
    timestamps: true
});

// Virtual for items supplied by this supplier
supplierSchema.virtual('items', {
    ref: 'InventoryItem',
    localField: '_id',
    foreignField: 'supplier'
});

// Pre-save middleware to update associated items when supplier becomes inactive
supplierSchema.pre('save', async function(next) {
    if (this.isModified('status') && this.status !== 'active') {
        await mongoose.model('InventoryItem').updateMany(
            { supplier: this._id },
            { status: 'discontinued' }
        );
    }
    next();
});

// Method to calculate average rating
supplierSchema.methods.getAverageRating = function() {
    const { quality, reliability, pricing } = this.rating;
    return (quality + reliability + pricing) / 3;
};

// Method to check supplier reliability
supplierSchema.methods.isReliable = function() {
    return this.rating.reliability >= 4 && this.status === 'active';
};

// Static method to get top suppliers by rating
supplierSchema.statics.getTopSuppliers = function(limit = 5) {
    return this.aggregate([
        { $match: { status: 'active' } },
        {
            $addFields: {
                averageRating: {
                    $avg: ['$rating.quality', '$rating.reliability', '$rating.pricing']
                }
            }
        },
        { $sort: { averageRating: -1 } },
        { $limit: limit }
    ]);
};

// Static method to update supplier metadata
supplierSchema.statics.updateMetadata = async function(supplierId, orderData) {
    const update = {
        $inc: {
            'metadata.totalOrders': 1,
            'metadata.totalSpent': orderData.total
        },
        $set: {
            'metadata.lastOrderDate': new Date(),
            'metadata.averageLeadTime': orderData.leadTime
        }
    };

    await this.findByIdAndUpdate(supplierId, update);
};

// Ensure indexes
supplierSchema.index({ name: 1 }, { unique: true });
supplierSchema.index({ status: 1 });
supplierSchema.index({ 'contactPerson.email': 1 });
supplierSchema.index({ 'company.registrationNumber': 1 });

const Supplier = mongoose.model('Supplier', supplierSchema);

module.exports = Supplier;

================
File: src/models/SystemSettings.js
================
const mongoose = require('mongoose');

const systemSettingsSchema = new mongoose.Schema({
    hotel: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Hotel',
        required: true
    },
    general: {
        timezone: {
            type: String,
            default: 'UTC'
        },
        dateFormat: {
            type: String,
            default: 'YYYY-MM-DD'
        },
        timeFormat: {
            type: String,
            enum: ['12', '24'],
            default: '24'
        },
        currency: {
            type: String,
            default: 'USD'
        },
        language: {
            type: String,
            default: 'en'
        }
    },
    booking: {
        checkInTime: {
            type: String,
            default: '14:00'
        },
        checkOutTime: {
            type: String,
            default: '11:00'
        },
        minAdvanceBookingDays: {
            type: Number,
            default: 0
        },
        maxAdvanceBookingDays: {
            type: Number,
            default: 365
        },
        cancellationPolicyDays: {
            type: Number,
            default: 1
        },
        cancellationCharge: {
            type: Number,
            default: 0
        },
        allowOverbooking: {
            type: Boolean,
            default: false
        },
        autoApproveBookings: {
            type: Boolean,
            default: false
        }
    },
    payment: {
        enabledGateways: [{
            type: String,
            enum: ['STRIPE', 'PAYPAL', 'RAZORPAY']
        }],
        defaultGateway: {
            type: String,
            enum: ['STRIPE', 'PAYPAL', 'RAZORPAY']
        },
        autoCapture: {
            type: Boolean,
            default: true
        },
        depositPercentage: {
            type: Number,
            default: 0
        }
    },
    notification: {
        email: {
            enabled: {
                type: Boolean,
                default: true
            },
            provider: {
                type: String,
                enum: ['SMTP', 'SENDGRID', 'AWS_SES'],
                default: 'SMTP'
            },
            fromEmail: String,
            fromName: String
        },
        sms: {
            enabled: {
                type: Boolean,
                default: false
            },
            provider: {
                type: String,
                enum: ['TWILIO', 'AWS_SNS'],
                default: 'TWILIO'
            }
        },
        push: {
            enabled: {
                type: Boolean,
                default: false
            },
            provider: {
                type: String,
                enum: ['FIREBASE', 'AWS_SNS'],
                default: 'FIREBASE'
            }
        }
    },
    housekeeping: {
        autoAssignTasks: {
            type: Boolean,
            default: false
        },
        cleaningTimeBuffer: {
            type: Number,
            default: 30
        },
        roomInspectionEnabled: {
            type: Boolean,
            default: true
        }
    },
    maintenance: {
        preventiveMaintenance: {
            enabled: {
                type: Boolean,
                default: true
            },
            reminderDays: {
                type: Number,
                default: 7
            }
        },
        autoAssignTasks: {
            type: Boolean,
            default: false
        }
    },
    security: {
        passwordPolicy: {
            minLength: {
                type: Number,
                default: 8
            },
            requireUppercase: {
                type: Boolean,
                default: true
            },
            requireLowercase: {
                type: Boolean,
                default: true
            },
            requireNumbers: {
                type: Boolean,
                default: true
            },
            requireSpecialChars: {
                type: Boolean,
                default: true
            },
            expiryDays: {
                type: Number,
                default: 90
            }
        },
        sessionTimeout: {
            type: Number,
            default: 30
        },
        maxLoginAttempts: {
            type: Number,
            default: 5
        },
        twoFactorAuth: {
            enabled: {
                type: Boolean,
                default: false
            },
            method: {
                type: String,
                enum: ['EMAIL', 'SMS', 'AUTHENTICATOR'],
                default: 'EMAIL'
            }
        }
    },
    integration: {
        channelManager: {
            enabled: {
                type: Boolean,
                default: false
            },
            autoSync: {
                type: Boolean,
                default: true
            },
            syncInterval: {
                type: Number,
                default: 30
            }
        },
        pms: {
            enabled: {
                type: Boolean,
                default: false
            },
            provider: String,
            autoSync: {
                type: Boolean,
                default: true
            }
        },
        accounting: {
            enabled: {
                type: Boolean,
                default: false
            },
            provider: String,
            autoSync: {
                type: Boolean,
                default: false
            }
        }
    },
    metadata: {
        lastModifiedBy: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User'
        }
    }
}, {
    timestamps: true
});

// Indexes
systemSettingsSchema.index({ hotel: 1 }, { unique: true });

// Methods
systemSettingsSchema.methods.updateSettings = async function(section, settings, userId) {
    if (this[section]) {
        Object.assign(this[section], settings);
        this.metadata.lastModifiedBy = userId;
        await this.save();
    }
};

// Statics
systemSettingsSchema.statics.getHotelSettings = async function(hotelId) {
    let settings = await this.findOne({ hotel: hotelId });
    if (!settings) {
        settings = await this.create({ hotel: hotelId });
    }
    return settings;
};

const SystemSettings = mongoose.model('SystemSettings', systemSettingsSchema);

module.exports = SystemSettings;

================
File: src/models/Task.js
================
const mongoose = require('mongoose');

const taskSchema = new mongoose.Schema({
    title: {
        type: String,
        required: [true, 'Task title is required']
    },
    description: {
        type: String,
        required: [true, 'Task description is required']
    },
    status: {
        type: String,
        enum: ['pending', 'in-progress', 'completed', 'cancelled'],
        default: 'pending'
    },
    priority: {
        type: String,
        enum: ['low', 'medium', 'high', 'urgent'],
        default: 'medium'
    },
    assignedTo: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: [true, 'Task must be assigned to a staff member']
    },
    assignedBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: [true, 'Task assigner is required']
    },
    dueDate: {
        type: Date,
        required: [true, 'Task due date is required']
    },
    completedAt: {
        type: Date
    },
    completedBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User'
    },
    category: {
        type: String,
        enum: ['housekeeping', 'maintenance', 'front-desk', 'restaurant', 'other'],
        required: [true, 'Task category is required']
    },
    location: {
        type: String,
        required: [true, 'Task location is required']
    },
    notes: [{
        content: String,
        createdBy: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User'
        },
        createdAt: {
            type: Date,
            default: Date.now
        }
    }],
    attachments: [{
        filename: String,
        path: String,
        uploadedBy: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User'
        },
        uploadedAt: {
            type: Date,
            default: Date.now
        }
    }],
    isRecurring: {
        type: Boolean,
        default: false
    },
    recurringPattern: {
        frequency: {
            type: String,
            enum: ['daily', 'weekly', 'monthly'],
            required: function() { return this.isRecurring; }
        },
        interval: {
            type: Number,
            min: 1,
            required: function() { return this.isRecurring; }
        },
        endDate: {
            type: Date
        }
    }
}, {
    timestamps: true
});

// Indexes
taskSchema.index({ status: 1, dueDate: 1 });
taskSchema.index({ assignedTo: 1, status: 1 });
taskSchema.index({ category: 1, status: 1 });

// Pre-save middleware to handle task completion
taskSchema.pre('save', function(next) {
    if (this.isModified('status') && this.status === 'completed' && !this.completedAt) {
        this.completedAt = new Date();
    }
    next();
});

// Instance method to add a note
taskSchema.methods.addNote = function(content, userId) {
    this.notes.push({
        content,
        createdBy: userId
    });
    return this.save();
};

// Instance method to add an attachment
taskSchema.methods.addAttachment = function(filename, path, userId) {
    this.attachments.push({
        filename,
        path,
        uploadedBy: userId
    });
    return this.save();
};

// Static method to get overdue tasks
taskSchema.statics.getOverdueTasks = function() {
    return this.find({
        status: { $ne: 'completed' },
        dueDate: { $lt: new Date() }
    }).populate('assignedTo', 'name email');
};

// Static method to get tasks by priority
taskSchema.statics.getTasksByPriority = function(priority) {
    return this.find({
        priority,
        status: { $ne: 'completed' }
    }).populate('assignedTo', 'name email');
};

// Static method to get tasks by category
taskSchema.statics.getTasksByCategory = function(category) {
    return this.find({
        category,
        status: { $ne: 'completed' }
    }).populate('assignedTo', 'name email');
};

const Task = mongoose.model('Task', taskSchema);

module.exports = Task;

================
File: src/models/Tier.js
================
const mongoose = require('mongoose');

const tierSchema = new mongoose.Schema({
    name: {
        type: String,
        required: true,
        unique: true,
        enum: ['Bronze', 'Silver', 'Gold', 'Platinum']
    },
    minimumPoints: {
        type: Number,
        required: true
    },
    pointsMultiplier: {
        type: Number,
        required: true,
        default: 1
    },
    benefits: [{
        type: String,
        required: true
    }],
    exclusiveRewards: [{
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Reward'
    }],
    upgradeBonusPoints: {
        type: Number,
        default: 0
    },
    isActive: {
        type: Boolean,
        default: true
    },
    color: {
        type: String,
        required: true
    },
    icon: {
        type: String,
        required: true
    }
}, {
    timestamps: true
});

// Static method to get tier by points
tierSchema.statics.getTierByPoints = async function(points) {
    const tiers = await this.find({ isActive: true })
        .sort({ minimumPoints: -1 });
    
    return tiers.find(tier => points >= tier.minimumPoints);
};

// Static method to get next tier
tierSchema.statics.getNextTier = async function(currentTier) {
    const tiers = await this.find({ isActive: true })
        .sort({ minimumPoints: 1 });
    
    const currentIndex = tiers.findIndex(tier => tier.name === currentTier);
    return currentIndex < tiers.length - 1 ? tiers[currentIndex + 1] : null;
};

// Static method to calculate points needed for next tier
tierSchema.statics.getPointsForNextTier = async function(currentPoints) {
    const tiers = await this.find({ isActive: true })
        .sort({ minimumPoints: 1 });
    
    const nextTier = tiers.find(tier => tier.minimumPoints > currentPoints);
    return nextTier ? nextTier.minimumPoints - currentPoints : 0;
};

const Tier = mongoose.model('Tier', tierSchema);
module.exports = Tier;

================
File: src/models/Transaction.js
================
const mongoose = require('mongoose');

const transactionSchema = new mongoose.Schema({
    invoice: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Invoice',
        required: true,
        index: true
    },
    user: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true,
        index: true
    },
    hotel: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Hotel',
        required: true,
        index: true
    },
    transactionId: {
        type: String,
        required: true,
        unique: true,
        index: true
    },
    type: {
        type: String,
        enum: ['payment', 'refund', 'loyalty_redemption', 'loyalty_earning', 'adjustment'],
        required: true,
        index: true
    },
    amount: {
        type: Number,
        required: true
    },
    currency: {
        type: String,
        default: 'USD'
    },
    paymentMethod: {
        type: String,
        enum: ['credit_card', 'debit_card', 'cash', 'bank_transfer', 'loyalty_points'],
        required: true
    },
    status: {
        type: String,
        enum: ['pending', 'processing', 'completed', 'failed', 'reversed'],
        default: 'pending',
        index: true
    },
    loyaltyImpact: {
        points: {
            type: Number,
            default: 0
        },
        action: {
            type: String,
            enum: ['earn', 'redeem', 'adjust', 'none'],
            default: 'none',
            index: true
        },
        tier: {
            type: String,
            enum: ['Bronze', 'Silver', 'Gold', 'Platinum', 'none'],
            default: 'none'
        }
    },
    metadata: {
        cardLast4: String,
        authorizationCode: String,
        paymentGatewayResponse: Object,
        deviceId: String,
        ipAddress: String,
        userAgent: String
    },
    notes: String,
    processedBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User'
    }
}, {
    timestamps: true
});

// Generate transaction ID
transactionSchema.pre('save', async function(next) {
    if (!this.transactionId) {
        const currentDate = new Date();
        const timestamp = currentDate.getTime().toString();
        const random = Math.floor(Math.random() * 1000).toString().padStart(3, '0');
        this.transactionId = `TXN-${timestamp}-${random}`;
    }
    next();
});

// Process loyalty points after transaction completion
transactionSchema.post('save', async function(doc) {
    if (doc.status === 'completed' && doc.loyaltyImpact.points !== 0) {
        try {
            const LoyaltyProgram = mongoose.model('LoyaltyProgram');
            const loyalty = await LoyaltyProgram.findOne({ user: doc.user });
            
            if (loyalty) {
                if (doc.loyaltyImpact.action === 'earn') {
                    await loyalty.addPoints(
                        doc.loyaltyImpact.points,
                        'transaction',
                        doc._id,
                        `Points earned from transaction ${doc.transactionId}`
                    );
                } else if (doc.loyaltyImpact.action === 'redeem') {
                    await loyalty.redeemPoints(
                        doc.loyaltyImpact.points,
                        'transaction',
                        doc._id,
                        `Points redeemed for transaction ${doc.transactionId}`
                    );
                } else if (doc.loyaltyImpact.action === 'adjust') {
                    await loyalty.adjustPoints(
                        doc.loyaltyImpact.points,
                        'adjustment',
                        doc._id,
                        `Points adjusted for transaction ${doc.transactionId}`
                    );
                }
            }
        } catch (error) {
            console.error('Error processing loyalty points:', error);
        }
    }
});

// Method to process refund
transactionSchema.methods.processRefund = async function(amount, reason) {
    if (this.status !== 'completed') {
        throw new Error('Cannot refund a transaction that is not completed');
    }

    if (amount > this.amount) {
        throw new Error('Refund amount cannot exceed original transaction amount');
    }

    const refundTransaction = new this.constructor({
        invoice: this.invoice,
        user: this.user,
        hotel: this.hotel,
        type: 'refund',
        amount: -amount,
        currency: this.currency,
        paymentMethod: this.paymentMethod,
        loyaltyImpact: {
            points: this.loyaltyImpact.points > 0 ? -Math.floor(amount * this.loyaltyImpact.points / this.amount) : 0,
            action: this.loyaltyImpact.points > 0 ? 'adjust' : 'none',
            tier: this.loyaltyImpact.tier
        },
        metadata: {
            originalTransaction: this._id,
            refundReason: reason
        },
        processedBy: this.processedBy
    });

    this.status = 'reversed';
    await this.save();

    return refundTransaction.save();
};

// Create index for createdAt
transactionSchema.index({ createdAt: 1 });

const Transaction = mongoose.model('Transaction', transactionSchema);
module.exports = Transaction;

================
File: src/models/User.js
================
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

const userSchema = new mongoose.Schema({
    name: {
        type: String,
        required: true,
        trim: true,
        index: true
    },
    email: {
        type: String,
        required: true,
        trim: true,
        lowercase: true,
        unique: true,
        index: true
    },
    password: {
        type: String,
        required: true,
        minlength: 6,
        select: false // Don't include password by default
    },
    role: {
        type: String,
        enum: ['user', 'admin', 'staff'],
        default: 'user',
        index: true
    },
    isAdmin: {
        type: Boolean,
        default: false
    },
    isActive: {
        type: Boolean,
        default: true,
        index: true
    },
    phoneNumber: {
        type: String,
        trim: true
    },
    address: {
        street: String,
        city: String,
        state: String,
        country: String,
        zipCode: String
    },
    profileImage: {
        type: String
    },
    preferences: {
        language: {
            type: String,
            default: 'en'
        },
        currency: {
            type: String,
            default: 'USD'
        },
        notifications: {
            email: {
                type: Boolean,
                default: true
            },
            sms: {
                type: Boolean,
                default: false
            }
        }
    },
    lastLogin: {
        type: Date,
        index: true
    },
    loyaltyProgram: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'LoyaltyProgram'
    }
}, {
    timestamps: true
});

// Hash password before saving
userSchema.pre('save', async function(next) {
    const user = this;
    if (user.isModified('password')) {
        const salt = await bcrypt.genSalt(10);
        user.password = await bcrypt.hash(user.password, salt);
    }
    next();
});

// Compare password
userSchema.methods.comparePassword = async function(candidatePassword) {
    const user = this;
    return bcrypt.compare(candidatePassword, user.password);
};

// Generate auth token
userSchema.methods.generateAuthToken = async function() {
    const user = this;
    const token = jwt.sign(
        { userId: user._id.toString() },
        process.env.JWT_SECRET || 'your-secret-key-123',
        { expiresIn: '7d' }
    );
    return token;
};

// Find user by credentials
userSchema.statics.findByCredentials = async (email, password) => {
    const user = await User.findOne({ email }).select('+password');
    if (!user) {
        throw new Error('Invalid login credentials');
    }
    
    const isMatch = await user.comparePassword(password);
    if (!isMatch) {
        throw new Error('Invalid login credentials');
    }
    
    return user;
};

// Remove sensitive data when converting to JSON
userSchema.methods.toJSON = function() {
    const user = this;
    const userObject = user.toObject();
    
    delete userObject.password;
    
    return userObject;
};

const User = mongoose.model('User', userSchema);
module.exports = User;

================
File: src/public/css/style.css
================
/* General styles */
body {
    background-color: #f8f9fa;
}

/* Card styles */
.card {
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    border: none;
}

.card-header {
    background-color: #fff;
    border-bottom: 1px solid #eee;
}

/* Form styles */
.form-label {
    font-weight: 500;
}

.form-control:focus {
    border-color: #80bdff;
    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
}

/* Section headers */
h4 {
    color: #2c3e50;
    margin-bottom: 1.5rem;
    padding-bottom: 0.5rem;
    border-bottom: 2px solid #eee;
}

/* Submit button */
.btn-primary {
    padding: 0.5rem 2rem;
}

/* Checkbox styles */
.form-check {
    margin-bottom: 0.5rem;
}

/* Responsive adjustments */
@media (max-width: 768px) {
    .col-md-8.offset-md-2 {
        padding: 0 15px;
    }
}

================
File: src/public/js/websocket.js
================
// WebSocket connection handler
class HotelWebSocket {
    constructor() {
        this.socket = null;
        this.reconnectAttempts = 0;
        this.maxReconnectAttempts = 5;
        this.listeners = new Map();
    }

    connect() {
        const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        const wsUrl = `${protocol}//${window.location.host}/ws`;

        this.socket = new WebSocket(wsUrl);

        this.socket.onopen = () => {
            console.log('WebSocket connected');
            this.reconnectAttempts = 0;
            this.emit('connection', { status: 'connected' });
        };

        this.socket.onmessage = (event) => {
            const data = JSON.parse(event.data);
            this.handleMessage(data);
        };

        this.socket.onclose = () => {
            console.log('WebSocket disconnected');
            this.handleReconnect();
        };

        this.socket.onerror = (error) => {
            console.error('WebSocket error:', error);
        };
    }

    handleReconnect() {
        if (this.reconnectAttempts < this.maxReconnectAttempts) {
            this.reconnectAttempts++;
            setTimeout(() => this.connect(), 2000 * this.reconnectAttempts);
        } else {
            this.emit('error', { message: 'Failed to reconnect to server' });
        }
    }

    handleMessage(data) {
        switch (data.type) {
            case 'ROOM_STATUS_UPDATE':
                this.updateRoomStatus(data.payload);
                break;
            case 'CHECK_IN_OUT':
                this.updateCheckInOut(data.payload);
                break;
            case 'NEW_BOOKING':
                this.handleNewBooking(data.payload);
                break;
            case 'INVENTORY_ALERT':
                this.handleInventoryAlert(data.payload);
                break;
            case 'MAINTENANCE_REQUEST':
                this.handleMaintenanceRequest(data.payload);
                break;
            default:
                console.log('Unhandled message type:', data.type);
        }

        // Emit event for any custom listeners
        this.emit(data.type, data.payload);
    }

    updateRoomStatus(data) {
        const roomElement = document.querySelector(`#room-${data.roomId}`);
        if (roomElement) {
            roomElement.className = `room-status ${data.status.toLowerCase()}`;
            roomElement.querySelector('.status-text').textContent = data.status;
        }

        // Update room status dashboard if present
        const statusChart = window.roomStatusChart;
        if (statusChart) {
            statusChart.update();
        }

        // Show notification
        this.showNotification('Room Status Update', `Room ${data.roomNumber} is now ${data.status}`);
    }

    updateCheckInOut(data) {
        // Update check-in/out lists
        const listId = data.type === 'CHECK_IN' ? 'checkInList' : 'checkOutList';
        const list = document.getElementById(listId);
        if (list) {
            // Update the list with new data
            this.updateCheckList(list, data);
        }

        // Show notification
        const message = data.type === 'CHECK_IN' 
            ? `New check-in: Room ${data.roomNumber}`
            : `New check-out: Room ${data.roomNumber}`;
        this.showNotification('Check-in/out Update', message);
    }

    handleNewBooking(data) {
        // Update booking calendar if present
        const calendar = window.bookingCalendar;
        if (calendar) {
            calendar.addEvent({
                title: `Booking: ${data.guestName}`,
                start: data.checkIn,
                end: data.checkOut,
                roomId: data.roomId
            });
        }

        // Update booking list if present
        const bookingList = document.getElementById('upcomingBookings');
        if (bookingList) {
            this.updateBookingList(bookingList, data);
        }

        // Show notification
        this.showNotification('New Booking', `New booking received for ${data.guestName}`);
    }

    handleInventoryAlert(data) {
        // Update inventory dashboard if present
        const inventoryElement = document.querySelector(`#inventory-${data.itemId}`);
        if (inventoryElement) {
            inventoryElement.querySelector('.stock-level').textContent = data.currentStock;
            if (data.currentStock <= data.threshold) {
                inventoryElement.classList.add('low-stock');
            }
        }

        // Show notification for low stock
        if (data.currentStock <= data.threshold) {
            this.showNotification('Low Stock Alert', 
                `${data.itemName} is running low (${data.currentStock} remaining)`);
        }
    }

    handleMaintenanceRequest(data) {
        // Update maintenance dashboard if present
        const maintenanceList = document.getElementById('maintenanceRequests');
        if (maintenanceList) {
            this.updateMaintenanceList(maintenanceList, data);
        }

        // Show notification
        this.showNotification('Maintenance Request', 
            `New maintenance request for Room ${data.roomNumber}: ${data.issue}`);
    }

    updateCheckList(list, data) {
        const template = document.getElementById('checkListItemTemplate');
        if (template) {
            const clone = template.content.cloneNode(true);
            // Fill in the template with data
            clone.querySelector('.guest-name').textContent = data.guestName;
            clone.querySelector('.room-number').textContent = data.roomNumber;
            clone.querySelector('.time').textContent = new Date(data.time).toLocaleTimeString();
            
            // Add to list
            list.insertBefore(clone, list.firstChild);
        }
    }

    updateBookingList(list, data) {
        const template = document.getElementById('bookingListItemTemplate');
        if (template) {
            const clone = template.content.cloneNode(true);
            // Fill in the template with data
            clone.querySelector('.guest-name').textContent = data.guestName;
            clone.querySelector('.check-in').textContent = new Date(data.checkIn).toLocaleDateString();
            clone.querySelector('.check-out').textContent = new Date(data.checkOut).toLocaleDateString();
            clone.querySelector('.room-type').textContent = data.roomType;
            
            // Add to list
            list.insertBefore(clone, list.firstChild);
        }
    }

    updateMaintenanceList(list, data) {
        const template = document.getElementById('maintenanceListItemTemplate');
        if (template) {
            const clone = template.content.cloneNode(true);
            // Fill in the template with data
            clone.querySelector('.room-number').textContent = data.roomNumber;
            clone.querySelector('.issue').textContent = data.issue;
            clone.querySelector('.priority').textContent = data.priority;
            clone.querySelector('.status').textContent = data.status;
            
            // Add to list
            list.insertBefore(clone, list.firstChild);
        }
    }

    showNotification(title, message) {
        // Check if the browser supports notifications
        if (!("Notification" in window)) {
            console.log("This browser does not support desktop notifications");
            return;
        }

        // Check if we have permission
        if (Notification.permission === "granted") {
            new Notification(title, { body: message });
        }
        // If we need to ask for permission
        else if (Notification.permission !== "denied") {
            Notification.requestPermission().then(function (permission) {
                if (permission === "granted") {
                    new Notification(title, { body: message });
                }
            });
        }

        // Also show toast notification
        Swal.fire({
            title: title,
            text: message,
            icon: 'info',
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 3000
        });
    }

    on(event, callback) {
        if (!this.listeners.has(event)) {
            this.listeners.set(event, []);
        }
        this.listeners.get(event).push(callback);
    }

    emit(event, data) {
        if (this.listeners.has(event)) {
            this.listeners.get(event).forEach(callback => callback(data));
        }
    }

    send(type, payload) {
        if (this.socket && this.socket.readyState === WebSocket.OPEN) {
            this.socket.send(JSON.stringify({ type, payload }));
        }
    }
}

// Initialize WebSocket connection
const hotelWS = new HotelWebSocket();
hotelWS.connect();

// Request notification permission on page load
document.addEventListener('DOMContentLoaded', () => {
    if ("Notification" in window && Notification.permission !== "granted") {
        Notification.requestPermission();
    }
});

================
File: src/routes/admin.routes.js
================
const express = require('express');
const router = express.Router();
const { protect, authorize } = require('../middleware/auth');

// Import controllers
const adminController = require('../controllers/admin.controller');
const bookingController = require('../controllers/admin/booking.controller');
const calendarController = require('../controllers/admin/calendar.controller');
const guestController = require('../controllers/admin/guest.controller');
const housekeepingController = require('../controllers/admin/housekeeping.controller');
const inventoryController = require('../controllers/admin/inventory.controller');
const loyaltyController = require('../controllers/admin/loyalty.controller');
const settingsController = require('../controllers/admin/settings.controller');
const channelManagerController = require('../controllers/admin/channel-manager.controller');
const checkInOutController = require('../controllers/admin/check-in-out.controller');
const analyticsController = require('../controllers/admin/analytics.controller');

// Dashboard Routes
router.get('/', protect, authorize('admin'), adminController.getDashboard);
router.get('/dashboard', protect, authorize('admin'), adminController.getDashboard);

// Booking Routes
router.get('/bookings', protect, authorize('admin'), bookingController.getAllBookings);
router.get('/bookings/calendar', protect, authorize('admin'), calendarController.getCalendarView);
router.get('/bookings/new', protect, authorize('admin'), bookingController.getNewBookingForm);
router.post('/bookings', protect, authorize('admin'), bookingController.createBooking);
router.get('/bookings/current', protect, authorize('admin'), bookingController.getCurrentBookings);
router.get('/bookings/upcoming', protect, authorize('admin'), bookingController.getUpcomingBookings);
router.get('/bookings/past', protect, authorize('admin'), bookingController.getPastBookings);
router.get('/bookings/:id', protect, authorize('admin'), bookingController.getBookingDetails);
router.put('/bookings/:id', protect, authorize('admin'), bookingController.updateBooking);
router.delete('/bookings/:id', protect, authorize('admin'), bookingController.deleteBooking);

// Calendar API Routes
router.get('/api/rooms', protect, authorize('admin'), calendarController.getRooms);
router.get('/api/bookings/calendar', protect, authorize('admin'), calendarController.getBookings);
router.put('/api/bookings/:id', protect, authorize('admin'), calendarController.updateBooking);

// Guest Routes
router.get('/guests', protect, authorize('admin'), guestController.getAllGuests);
router.get('/guests/analytics', protect, authorize('admin'), guestController.getGuestAnalytics);
router.get('/guests/:id', protect, authorize('admin'), guestController.getGuestDetails);
router.put('/guests/:id', protect, authorize('admin'), guestController.updateGuest);

// Housekeeping Routes
router.get('/housekeeping', protect, authorize('admin'), housekeepingController.getDashboard);
router.get('/housekeeping/tasks', protect, authorize('admin'), housekeepingController.getAllTasks);
router.post('/housekeeping/tasks', protect, authorize('admin'), housekeepingController.createTask);
router.put('/housekeeping/tasks/:id', protect, authorize('admin'), housekeepingController.updateTask);
router.delete('/housekeeping/tasks/:id', protect, authorize('admin'), housekeepingController.deleteTask);

// Inventory Routes
router.get('/inventory', protect, authorize('admin'), inventoryController.getInventory);
router.get('/inventory/items', protect, authorize('admin'), inventoryController.getInventory);
router.post('/inventory/items', protect, authorize('admin'), inventoryController.createItem);
router.put('/inventory/items/:id', protect, authorize('admin'), inventoryController.updateItem);
router.delete('/inventory/items/:id', protect, authorize('admin'), inventoryController.deleteItem);

// Channel Manager Routes
router.get('/channel-manager', protect, authorize('admin'), channelManagerController.getDashboard);
router.get('/channel-manager/analytics', protect, authorize('admin'), channelManagerController.getAnalytics);
router.get('/channel-manager/bookings', protect, authorize('admin'), channelManagerController.getBookings);
router.get('/channel-manager/rates', protect, authorize('admin'), channelManagerController.getRates);
router.put('/channel-manager/rates', protect, authorize('admin'), channelManagerController.updateRates);
router.get('/channel-manager/inventory', protect, authorize('admin'), channelManagerController.getInventory);
router.put('/channel-manager/inventory', protect, authorize('admin'), channelManagerController.updateInventory);
router.post('/channel-manager/sync', protect, authorize('admin'), channelManagerController.syncAvailability);
router.put('/channel-manager/pricing', protect, authorize('admin'), channelManagerController.updatePricing);

// Check-in/Check-out Routes
router.get('/check-in-out', protect, authorize('admin'), checkInOutController.getDashboard);
router.get('/check-in-out/pending', protect, authorize('admin'), checkInOutController.getPendingCheckIns);
router.post('/check-in-out/check-in/:bookingId', protect, authorize('admin'), checkInOutController.processCheckIn);
router.post('/check-in-out/check-out/:bookingId', protect, authorize('admin'), checkInOutController.processCheckOut);

// Analytics Routes
router.get('/analytics/occupancy', protect, authorize('admin'), analyticsController.getOccupancyAnalytics);
router.get('/analytics/revenue', protect, authorize('admin'), analyticsController.getRevenueAnalytics);
router.get('/analytics/guests', protect, authorize('admin'), analyticsController.getGuestAnalytics);
router.get('/analytics/staff', protect, authorize('admin'), analyticsController.getStaffAnalytics);

// Settings Routes
router.get('/settings/hotel', protect, authorize('admin'), settingsController.getHotelSettings);
router.put('/settings/hotel', protect, authorize('admin'), settingsController.updateHotelSettings);
router.get('/settings/roles', protect, authorize('admin'), settingsController.getRoles);
router.post('/settings/roles', protect, authorize('admin'), settingsController.createRole);
router.put('/settings/roles/:id', protect, authorize('admin'), settingsController.updateRole);
router.delete('/settings/roles/:id', protect, authorize('admin'), settingsController.deleteRole);
router.get('/settings/permissions', protect, authorize('admin'), settingsController.getPermissions);
router.post('/settings/permissions', protect, authorize('admin'), settingsController.createPermission);
router.put('/settings/permissions/:id', protect, authorize('admin'), settingsController.updatePermission);
router.delete('/settings/permissions/:id', protect, authorize('admin'), settingsController.deletePermission);
router.get('/settings/staff', protect, authorize('admin'), settingsController.getStaff);
router.post('/settings/staff', protect, authorize('admin'), settingsController.createStaff);
router.put('/settings/staff/:id', protect, authorize('admin'), settingsController.updateStaff);
router.delete('/settings/staff/:id', protect, authorize('admin'), settingsController.deleteStaff);

// Loyalty Routes
router.get('/loyalty/members', protect, authorize('admin'), loyaltyController.getAllMembers);
router.get('/loyalty/members/:id', protect, authorize('admin'), loyaltyController.getMemberDetails);
router.put('/loyalty/members/:id', protect, authorize('admin'), loyaltyController.updateMember);
router.get('/loyalty/tiers', protect, authorize('admin'), loyaltyController.getTiers);
router.post('/loyalty/tiers', protect, authorize('admin'), loyaltyController.createTier);
router.put('/loyalty/tiers/:id', protect, authorize('admin'), loyaltyController.updateTier);
router.delete('/loyalty/tiers/:id', protect, authorize('admin'), loyaltyController.deleteTier);
router.get('/loyalty/rewards', protect, authorize('admin'), loyaltyController.getRewards);
router.post('/loyalty/rewards', protect, authorize('admin'), loyaltyController.createReward);
router.put('/loyalty/rewards/:id', protect, authorize('admin'), loyaltyController.updateReward);
router.delete('/loyalty/rewards/:id', protect, authorize('admin'), loyaltyController.deleteReward);

module.exports = router;

================
File: src/routes/admin/rewards.routes.js
================
const express = require('express');
const router = express.Router();
const { protect, authorize } = require('../../middleware/auth');
const Reward = require('../../models/Reward');
const Loyalty = require('../../models/Loyalty');

// Get all rewards
router.get('/', protect, authorize('admin'), async (req, res) => {
    try {
        const rewards = await Reward.find()
            .sort({ createdAt: -1 });

        res.json({
            success: true,
            data: rewards
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            message: error.message
        });
    }
});

// Create new reward
router.post('/', protect, authorize('admin'), async (req, res) => {
    try {
        const reward = await Reward.create(req.body);
        
        res.status(201).json({
            success: true,
            data: reward
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            message: error.message
        });
    }
});

// Update reward
router.put('/:id', protect, authorize('admin'), async (req, res) => {
    try {
        const reward = await Reward.findByIdAndUpdate(
            req.params.id,
            req.body,
            { new: true, runValidators: true }
        );

        if (!reward) {
            return res.status(404).json({
                success: false,
                message: 'Reward not found'
            });
        }

        res.json({
            success: true,
            data: reward
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            message: error.message
        });
    }
});

// Delete reward
router.delete('/:id', protect, authorize('admin'), async (req, res) => {
    try {
        const reward = await Reward.findById(req.params.id);
        
        if (!reward) {
            return res.status(404).json({
                success: false,
                message: 'Reward not found'
            });
        }

        // Check if reward has any redemptions
        if (reward.totalRedemptions > 0) {
            // Instead of deleting, just deactivate
            reward.isActive = false;
            await reward.save();

            return res.json({
                success: true,
                message: 'Reward deactivated successfully'
            });
        }

        await reward.remove();

        res.json({
            success: true,
            message: 'Reward deleted successfully'
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            message: error.message
        });
    }
});

// Get reward redemption statistics
router.get('/statistics', protect, authorize('admin'), async (req, res) => {
    try {
        const stats = await Reward.aggregate([
            {
                $group: {
                    _id: '$type',
                    totalRewards: { $sum: 1 },
                    totalRedemptions: { $sum: '$totalRedemptions' },
                    averagePointsCost: { $avg: '$pointsCost' }
                }
            }
        ]);

        const userTierStats = await Loyalty.aggregate([
            {
                $group: {
                    _id: '$tier',
                    userCount: { $sum: 1 },
                    averagePoints: { $avg: '$points' },
                    totalPointsEarned: { $sum: '$totalPointsEarned' },
                    totalPointsRedeemed: { $sum: '$totalPointsRedeemed' }
                }
            }
        ]);

        res.json({
            success: true,
            data: {
                rewardStats: stats,
                userTierStats
            }
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            message: error.message
        });
    }
});

// Get specific reward redemption history
router.get('/:id/redemptions', protect, authorize('admin'), async (req, res) => {
    try {
        const reward = await Reward.findById(req.params.id)
            .populate({
                path: 'redemptions.user',
                select: 'name email'
            })
            .populate('redemptions.booking');

        if (!reward) {
            return res.status(404).json({
                success: false,
                message: 'Reward not found'
            });
        }

        res.json({
            success: true,
            data: reward.redemptions
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            message: error.message
        });
    }
});

module.exports = router;

================
File: src/routes/api/check-in-out.routes.js
================
const express = require('express');
const router = express.Router();
const checkInOutController = require('../../controllers/check-in-out.controller');
const { authenticate, authorize } = require('../../middleware/auth');
const { asyncHandler } = require('../../middleware/async');
const { roles } = require('../../config/roles');

// Protect all routes
router.use(authenticate);

// Get check-in details
router.get('/check-in/:bookingId',
    authorize([roles.ADMIN, roles.MANAGER, roles.STAFF]),
    asyncHandler(async (req, res) => {
        const details = await checkInOutController.getCheckInDetails(req.params.bookingId);
        res.json(details);
    })
);

// Process check-in
router.post('/check-in/:bookingId',
    authorize([roles.ADMIN, roles.MANAGER, roles.STAFF]),
    asyncHandler(async (req, res) => {
        const booking = await checkInOutController.processCheckIn(req.params.bookingId, req.body);
        res.json(booking);
    })
);

// Get check-out details
router.get('/check-out/:bookingId',
    authorize([roles.ADMIN, roles.MANAGER, roles.STAFF]),
    asyncHandler(async (req, res) => {
        const details = await checkInOutController.getCheckOutDetails(req.params.bookingId);
        res.json(details);
    })
);

// Process check-out
router.post('/check-out/:bookingId',
    authorize([roles.ADMIN, roles.MANAGER, roles.STAFF]),
    asyncHandler(async (req, res) => {
        const booking = await checkInOutController.processCheckOut(req.params.bookingId, req.body);
        res.json(booking);
    })
);

module.exports = router;

================
File: src/routes/api/financial.routes.js
================
const express = require('express');
const router = express.Router();
const financialController = require('../../controllers/financial.controller');
const { authenticate, authorize } = require('../../middleware/auth');
const { asyncHandler } = require('../../middleware/async');
const { roles } = require('../../config/roles');

// Protect all routes
router.use(authenticate);
router.use(authorize([roles.ADMIN, roles.MANAGER])); // Restrict to admin and manager roles

// Get revenue overview
router.get('/revenue/:hotelId',
    asyncHandler(async (req, res) => {
        const dateRange = {
            start: req.query.startDate,
            end: req.query.endDate
        };
        const overview = await financialController.getRevenueOverview(req.params.hotelId, dateRange);
        res.json(overview);
    })
);

// Get occupancy report
router.get('/occupancy/:hotelId',
    asyncHandler(async (req, res) => {
        const dateRange = {
            start: req.query.startDate,
            end: req.query.endDate
        };
        const report = await financialController.getOccupancyReport(req.params.hotelId, dateRange);
        res.json(report);
    })
);

// Get tax report
router.get('/tax/:hotelId',
    asyncHandler(async (req, res) => {
        const dateRange = {
            start: req.query.startDate,
            end: req.query.endDate
        };
        const report = await financialController.getTaxReport(req.params.hotelId, dateRange);
        res.json(report);
    })
);

// Get loyalty program financial impact
router.get('/loyalty/:hotelId',
    asyncHandler(async (req, res) => {
        const dateRange = {
            start: req.query.startDate,
            end: req.query.endDate
        };
        const report = await financialController.getLoyaltyFinancialReport(req.params.hotelId, dateRange);
        res.json(report);
    })
);

// Export financial reports
router.get('/export/:hotelId',
    asyncHandler(async (req, res) => {
        const dateRange = {
            start: req.query.startDate,
            end: req.query.endDate
        };

        // Get all reports
        const [revenue, occupancy, tax, loyalty] = await Promise.all([
            financialController.getRevenueOverview(req.params.hotelId, dateRange),
            financialController.getOccupancyReport(req.params.hotelId, dateRange),
            financialController.getTaxReport(req.params.hotelId, dateRange),
            financialController.getLoyaltyFinancialReport(req.params.hotelId, dateRange)
        ]);

        // Format data for CSV
        const csvData = {
            revenue: {
                total: revenue.totalRevenue,
                roomRevenue: revenue.roomRevenue.reduce((total, room) => total + room.revenue, 0),
                additionalCharges: revenue.additionalCharges.reduce((total, charge) => total + charge.total, 0),
                loyaltyRedemptions: revenue.loyaltyRedemptions.total
            },
            occupancy: {
                totalRooms: occupancy.totalRooms,
                averageOccupancy: occupancy.occupancyRate.reduce((total, day) => total + day.rate, 0) / occupancy.occupancyRate.length,
                averageStayDuration: occupancy.averageStayDuration
            },
            tax: {
                taxableRevenue: tax.taxableRevenue.taxableAmount,
                totalTax: tax.taxByCategory.reduce((total, category) => total + category.totalTax, 0),
                refundedTaxes: tax.refundedTaxes
            },
            loyalty: {
                pointsIssued: loyalty.pointsValue.issued,
                pointsRedeemed: loyalty.pointsValue.redeemed,
                referralRevenue: loyalty.referralRevenue.revenue
            }
        };

        // Convert to CSV format
        const fields = [
            'Category',
            'Metric',
            'Value'
        ];

        const rows = [];
        Object.entries(csvData).forEach(([category, metrics]) => {
            Object.entries(metrics).forEach(([metric, value]) => {
                rows.push(`${category},${metric},${value}`);
            });
        });

        const csv = [fields.join(','), ...rows].join('\n');

        // Send CSV file
        res.setHeader('Content-Type', 'text/csv');
        res.setHeader('Content-Disposition', `attachment; filename=financial_report_${dateRange.start}_${dateRange.end}.csv`);
        res.send(csv);
    })
);

module.exports = router;

================
File: src/routes/api/guest-profile.routes.js
================
const express = require('express');
const router = express.Router();
const guestProfileController = require('../../controllers/guest-profile.controller');
const { authenticate, authorize } = require('../../middleware/auth');
const { asyncHandler } = require('../../middleware/async');
const { roles } = require('../../config/roles');

// Protect all routes
router.use(authenticate);

// Get guest profile
router.get('/:userId',
    authorize([roles.ADMIN, roles.MANAGER, roles.STAFF, roles.GUEST]),
    asyncHandler(async (req, res) => {
        // Allow guests to view only their own profile
        if (req.user.role === roles.GUEST && req.user._id.toString() !== req.params.userId) {
            return res.status(403).json({ message: 'Access denied' });
        }
        const profile = await guestProfileController.getGuestProfile(req.params.userId);
        res.json(profile);
    })
);

// Update guest preferences
router.put('/:userId/preferences',
    authorize([roles.ADMIN, roles.MANAGER, roles.GUEST]),
    asyncHandler(async (req, res) => {
        // Allow guests to update only their own preferences
        if (req.user.role === roles.GUEST && req.user._id.toString() !== req.params.userId) {
            return res.status(403).json({ message: 'Access denied' });
        }
        const user = await guestProfileController.updateGuestPreferences(req.params.userId, req.body);
        res.json(user);
    })
);

// Get guest stay history
router.get('/:userId/stays',
    authorize([roles.ADMIN, roles.MANAGER, roles.STAFF, roles.GUEST]),
    asyncHandler(async (req, res) => {
        // Allow guests to view only their own stay history
        if (req.user.role === roles.GUEST && req.user._id.toString() !== req.params.userId) {
            return res.status(403).json({ message: 'Access denied' });
        }
        const filters = {
            startDate: req.query.startDate,
            endDate: req.query.endDate,
            hotel: req.query.hotel,
            status: req.query.status
        };
        const stays = await guestProfileController.getGuestStayHistory(req.params.userId, filters);
        res.json(stays);
    })
);

// Get guest spending analysis
router.get('/:userId/spending',
    authorize([roles.ADMIN, roles.MANAGER, roles.GUEST]),
    asyncHandler(async (req, res) => {
        // Allow guests to view only their own spending analysis
        if (req.user.role === roles.GUEST && req.user._id.toString() !== req.params.userId) {
            return res.status(403).json({ message: 'Access denied' });
        }
        const dateRange = {
            startDate: req.query.startDate,
            endDate: req.query.endDate
        };
        const analysis = await guestProfileController.getGuestSpendingAnalysis(req.params.userId, dateRange);
        res.json(analysis);
    })
);

// Export guest data (for GDPR compliance)
router.get('/:userId/export',
    authorize([roles.GUEST]),
    asyncHandler(async (req, res) => {
        // Only allow guests to export their own data
        if (req.user._id.toString() !== req.params.userId) {
            return res.status(403).json({ message: 'Access denied' });
        }

        // Get all guest data
        const [profile, stays, spending] = await Promise.all([
            guestProfileController.getGuestProfile(req.params.userId),
            guestProfileController.getGuestStayHistory(req.params.userId),
            guestProfileController.getGuestSpendingAnalysis(req.params.userId)
        ]);

        // Format data for export
        const exportData = {
            personalInformation: {
                name: profile.profile.name,
                email: profile.profile.email,
                phone: profile.profile.phone,
                address: profile.profile.address
            },
            loyaltyProgram: {
                tier: profile.profile.loyaltyTier,
                points: profile.profile.loyaltyPoints,
                totalSpent: profile.profile.totalSpent,
                averageStayDuration: profile.profile.averageStayDuration
            },
            preferences: profile.preferences,
            stayHistory: stays.map(stay => ({
                hotel: stay.hotel.name,
                room: stay.room.type,
                dates: {
                    checkIn: stay.dates.checkIn,
                    checkOut: stay.dates.checkOut
                },
                totalPrice: stay.totalPrice,
                review: stay.review
            })),
            spendingAnalysis: {
                overview: spending.overview,
                breakdown: spending.breakdown
            }
        };

        // Convert to CSV format
        const fields = [
            'Category',
            'Subcategory',
            'Data'
        ];

        const rows = [];
        Object.entries(exportData).forEach(([category, data]) => {
            if (typeof data === 'object') {
                Object.entries(data).forEach(([subcategory, value]) => {
                    rows.push(`${category},${subcategory},${JSON.stringify(value)}`);
                });
            } else {
                rows.push(`${category},,${JSON.stringify(data)}`);
            }
        });

        const csv = [fields.join(','), ...rows].join('\n');

        // Send CSV file
        res.setHeader('Content-Type', 'text/csv');
        res.setHeader('Content-Disposition', `attachment; filename=guest_data_${req.params.userId}.csv`);
        res.send(csv);
    })
);

module.exports = router;

================
File: src/routes/api/housekeeping.routes.js
================
const express = require('express');
const router = express.Router();
const housekeepingController = require('../../controllers/housekeeping.controller');
const { authenticate, authorize } = require('../../middleware/auth');
const { asyncHandler } = require('../../middleware/async');
const { roles } = require('../../config/roles');
const multer = require('multer');
const upload = multer({ dest: 'uploads/' });

// Protect all routes
router.use(authenticate);

// Get housekeeping dashboard stats
router.get('/stats',
    authorize([roles.ADMIN, roles.MANAGER, roles.STAFF]),
    asyncHandler(async (req, res) => {
        const stats = await housekeepingController.getDashboardStats();
        res.json(stats);
    })
);

// Get all housekeeping tasks with filters
router.get('/',
    authorize([roles.ADMIN, roles.MANAGER, roles.STAFF]),
    asyncHandler(async (req, res) => {
        const filters = {
            status: req.query.status,
            priority: req.query.priority,
            room: req.query.room,
            assignedTo: req.query.assignedTo,
            date: req.query.date,
            sort: req.query.sort
        };
        const tasks = await housekeepingController.getTasks(filters);
        res.json(tasks);
    })
);

// Get single housekeeping task
router.get('/:id',
    authorize([roles.ADMIN, roles.MANAGER, roles.STAFF]),
    asyncHandler(async (req, res) => {
        const task = await housekeepingController.getTaskById(req.params.id);
        res.json(task);
    })
);

// Create new housekeeping task
router.post('/',
    authorize([roles.ADMIN, roles.MANAGER]),
    asyncHandler(async (req, res) => {
        const task = await housekeepingController.createTask(req.body);
        res.status(201).json(task);
    })
);

// Update housekeeping task
router.put('/:id',
    authorize([roles.ADMIN, roles.MANAGER, roles.STAFF]),
    asyncHandler(async (req, res) => {
        const task = await housekeepingController.updateTask(req.params.id, req.body);
        res.json(task);
    })
);

// Delete housekeeping task
router.delete('/:id',
    authorize([roles.ADMIN, roles.MANAGER]),
    asyncHandler(async (req, res) => {
        const result = await housekeepingController.deleteTask(req.params.id);
        res.json(result);
    })
);

// Add note to task
router.post('/:id/notes',
    authorize([roles.ADMIN, roles.MANAGER, roles.STAFF]),
    asyncHandler(async (req, res) => {
        const task = await housekeepingController.addNote(
            req.params.id,
            req.body.content,
            req.user._id
        );
        res.json(task);
    })
);

// Update checklist item
router.put('/:id/checklist/:itemIndex',
    authorize([roles.ADMIN, roles.MANAGER, roles.STAFF]),
    asyncHandler(async (req, res) => {
        const task = await housekeepingController.updateChecklist(
            req.params.id,
            parseInt(req.params.itemIndex),
            req.body.completed,
            req.user._id
        );
        res.json(task);
    })
);

// Add photo to task
router.post('/:id/photos',
    authorize([roles.ADMIN, roles.MANAGER, roles.STAFF]),
    upload.single('photo'),
    asyncHandler(async (req, res) => {
        // Handle file upload to cloud storage here
        const photoUrl = `uploads/${req.file.filename}`; // Replace with actual cloud storage URL
        const task = await housekeepingController.addPhoto(
            req.params.id,
            photoUrl,
            req.body.caption,
            req.user._id
        );
        res.json(task);
    })
);

// Add feedback to task
router.post('/:id/feedback',
    authorize([roles.ADMIN, roles.MANAGER, roles.STAFF, roles.GUEST]),
    asyncHandler(async (req, res) => {
        const task = await housekeepingController.addFeedback(
            req.params.id,
            req.body.rating,
            req.body.comment,
            req.user._id
        );
        res.json(task);
    })
);

// Get staff performance report
router.get('/reports/staff-performance',
    authorize([roles.ADMIN, roles.MANAGER]),
    asyncHandler(async (req, res) => {
        const filters = {
            startDate: req.query.startDate,
            endDate: req.query.endDate
        };
        const report = await housekeepingController.getStaffPerformance(filters);
        res.json(report);
    })
);

// Get room cleaning report
router.get('/reports/room-cleaning',
    authorize([roles.ADMIN, roles.MANAGER]),
    asyncHandler(async (req, res) => {
        const filters = {
            startDate: req.query.startDate,
            endDate: req.query.endDate
        };
        const report = await housekeepingController.getRoomCleaningReport(filters);
        res.json(report);
    })
);

// Export housekeeping data
router.get('/export',
    authorize([roles.ADMIN, roles.MANAGER]),
    asyncHandler(async (req, res) => {
        const tasks = await housekeepingController.getTasks(req.query);
        
        // Convert tasks to CSV format
        const fields = ['room.number', 'description', 'priority', 'status', 'assignedTo.name', 'scheduledDate', 'completedDate', 'feedback.rating'];
        const csv = tasks.map(task => {
            return fields.map(field => {
                const value = field.includes('.') ? 
                    field.split('.').reduce((obj, key) => obj[key], task) : 
                    task[field];
                return `"${value || ''}"`;
            }).join(',');
        }).join('\n');

        res.setHeader('Content-Type', 'text/csv');
        res.setHeader('Content-Disposition', 'attachment; filename=housekeeping-tasks.csv');
        res.send(`${fields.join(',')}\n${csv}`);
    })
);

module.exports = router;

================
File: src/routes/api/inventory.routes.js
================
const express = require('express');
const router = express.Router();
const inventoryController = require('../../controllers/inventory.controller');
const { authenticate, authorize } = require('../../middleware/auth');
const { asyncHandler } = require('../../middleware/async');
const { roles } = require('../../config/roles');

// Protect all routes
router.use(authenticate);

// Get inventory dashboard stats
router.get('/stats', 
    authorize([roles.ADMIN, roles.MANAGER, roles.STAFF]),
    asyncHandler(async (req, res) => {
        const stats = await inventoryController.getDashboardStats();
        res.json(stats);
    })
);

// Get all inventory items with filters
router.get('/',
    authorize([roles.ADMIN, roles.MANAGER, roles.STAFF]),
    asyncHandler(async (req, res) => {
        const filters = {
            category: req.query.category,
            status: req.query.status,
            search: req.query.search,
            sort: req.query.sort
        };
        const items = await inventoryController.getInventoryItems(filters);
        res.json(items);
    })
);

// Get single inventory item
router.get('/:id',
    authorize([roles.ADMIN, roles.MANAGER, roles.STAFF]),
    asyncHandler(async (req, res) => {
        const item = await inventoryController.getInventoryItemById(req.params.id);
        res.json(item);
    })
);

// Create new inventory item
router.post('/',
    authorize([roles.ADMIN, roles.MANAGER]),
    asyncHandler(async (req, res) => {
        const item = await inventoryController.createInventoryItem(req.body);
        res.status(201).json(item);
    })
);

// Update inventory item
router.put('/:id',
    authorize([roles.ADMIN, roles.MANAGER]),
    asyncHandler(async (req, res) => {
        const item = await inventoryController.updateInventoryItem(req.params.id, req.body);
        res.json(item);
    })
);

// Delete inventory item
router.delete('/:id',
    authorize([roles.ADMIN]),
    asyncHandler(async (req, res) => {
        const result = await inventoryController.deleteInventoryItem(req.params.id);
        res.json(result);
    })
);

// Add stock to inventory item
router.post('/:id/add-stock',
    authorize([roles.ADMIN, roles.MANAGER, roles.STAFF]),
    asyncHandler(async (req, res) => {
        const { quantity, reason } = req.body;
        const item = await inventoryController.addStock(req.params.id, quantity, reason, req.user._id);
        res.json(item);
    })
);

// Remove stock from inventory item
router.post('/:id/remove-stock',
    authorize([roles.ADMIN, roles.MANAGER, roles.STAFF]),
    asyncHandler(async (req, res) => {
        const { quantity, reason } = req.body;
        const item = await inventoryController.removeStock(req.params.id, quantity, reason, req.user._id);
        res.json(item);
    })
);

// Get stock history for an item
router.get('/:id/history',
    authorize([roles.ADMIN, roles.MANAGER, roles.STAFF]),
    asyncHandler(async (req, res) => {
        const filters = {
            type: req.query.type,
            startDate: req.query.startDate,
            endDate: req.query.endDate
        };
        const history = await inventoryController.getStockHistory(req.params.id, filters);
        res.json(history);
    })
);

// Get low stock alerts
router.get('/alerts/low-stock',
    authorize([roles.ADMIN, roles.MANAGER, roles.STAFF]),
    asyncHandler(async (req, res) => {
        const alerts = await inventoryController.getLowStockAlerts();
        res.json(alerts);
    })
);

// Get inventory value report
router.get('/reports/value',
    authorize([roles.ADMIN, roles.MANAGER]),
    asyncHandler(async (req, res) => {
        const report = await inventoryController.getInventoryValueReport();
        res.json(report);
    })
);

// Get supplier report
router.get('/reports/suppliers',
    authorize([roles.ADMIN, roles.MANAGER]),
    asyncHandler(async (req, res) => {
        const report = await inventoryController.getSupplierReport();
        res.json(report);
    })
);

// Export inventory data
router.get('/export',
    authorize([roles.ADMIN, roles.MANAGER]),
    asyncHandler(async (req, res) => {
        const items = await inventoryController.getInventoryItems();
        
        // Convert items to CSV format
        const fields = ['name', 'category', 'sku', 'currentStock', 'minimumStock', 'reorderPoint', 'cost', 'supplier.name', 'location', 'status'];
        const csv = items.map(item => {
            return fields.map(field => {
                const value = field.includes('.') ? 
                    field.split('.').reduce((obj, key) => obj[key], item) : 
                    item[field];
                return `"${value}"`;
            }).join(',');
        }).join('\n');

        res.setHeader('Content-Type', 'text/csv');
        res.setHeader('Content-Disposition', 'attachment; filename=inventory.csv');
        res.send(`${fields.join(',')}\n${csv}`);
    })
);

// Generate purchase orders for low stock items
router.post('/generate-purchase-orders',
    authorize([roles.ADMIN, roles.MANAGER]),
    asyncHandler(async (req, res) => {
        const lowStockItems = await inventoryController.getLowStockAlerts();
        
        // Group items by supplier
        const supplierOrders = new Map();
        lowStockItems.forEach(item => {
            const supplier = item.supplier.name;
            if (!supplierOrders.has(supplier)) {
                supplierOrders.set(supplier, []);
            }
            const orderQuantity = item.reorderPoint - item.currentStock;
            if (orderQuantity > 0) {
                supplierOrders.get(supplier).push({
                    item: item.name,
                    sku: item.sku,
                    quantity: orderQuantity,
                    unit: item.unit,
                    currentStock: item.currentStock,
                    reorderPoint: item.reorderPoint
                });
            }
        });

        // Generate PDF purchase orders
        // This is a placeholder - implement actual PDF generation
        const orders = Array.from(supplierOrders.entries()).map(([supplier, items]) => ({
            supplier,
            items,
            orderDate: new Date(),
            orderNumber: Math.random().toString(36).substr(2, 9).toUpperCase()
        }));

        res.json(orders);
    })
);

module.exports = router;

================
File: src/routes/auth.routes.js
================
const express = require('express');
const router = express.Router();
const passport = require('passport');
const authService = require('../services/auth.service');

// Web routes for rendering pages
router.get('/login', (req, res) => {
    res.render('auth/login', {
        title: 'Login',
        error: req.query.error,
        success: req.query.success,
        layout: 'auth'
    });
});

router.get('/register', (req, res) => {
    res.render('auth/register', {
        title: 'Register',
        layout: 'auth'
    });
});

// Handle login form submission
router.post('/login', async (req, res) => {
    try {
        const { email, password } = req.body;

        if (!email || !password) {
            throw new Error('Please provide email and password');
        }

        // Login through auth service
        const { user, token, loyaltyStatus } = await authService.login(email, password);
        
        // Set JWT as HTTP-only cookie
        res.cookie('token', token, {
            httpOnly: true,
            secure: process.env.NODE_ENV === 'production',
            sameSite: 'lax',
            maxAge: 24 * 60 * 60 * 1000 // 24 hours
        });

        // Check if it's an AJAX request
        if (req.xhr || req.headers.accept.includes('application/json')) {
            return res.json({
                success: true,
                message: 'Login successful',
                data: { user, loyaltyStatus }
            });
        }
        
        // For regular form submissions, redirect based on role
        if (user.role === 'admin') {
            res.redirect('/admin/dashboard');
        } else {
            res.redirect('/');
        }
    } catch (error) {
        console.error('Login error:', error);

        // Check if it's an AJAX request
        if (req.xhr || req.headers.accept.includes('application/json')) {
            return res.status(401).json({
                success: false,
                message: error.message
            });
        }

        // For regular form submissions
        res.render('auth/login', {
            title: 'Login',
            error: error.message,
            layout: 'auth'
        });
    }
});

// Handle register form submission
router.post('/register', async (req, res) => {
    try {
        const { user, token } = await authService.register(req.body);
        
        // Set JWT as HTTP-only cookie
        res.cookie('token', token, {
            httpOnly: true,
            secure: process.env.NODE_ENV === 'production',
            sameSite: 'lax',
            maxAge: 24 * 60 * 60 * 1000 // 24 hours
        });

        // Check if it's an AJAX request
        if (req.xhr || req.headers.accept.includes('application/json')) {
            return res.status(201).json({
                success: true,
                message: 'Registration successful',
                data: { user }
            });
        }

        // For regular form submissions, redirect to login
        res.redirect('/auth/login?success=Account created successfully! Please log in.');
    } catch (error) {
        console.error('Registration error:', error);

        // Check if it's an AJAX request
        if (req.xhr || req.headers.accept.includes('application/json')) {
            return res.status(400).json({
                success: false,
                message: error.message
            });
        }

        // For regular form submissions
        res.render('auth/register', {
            title: 'Register',
            error: error.message,
            layout: 'auth'
        });
    }
});

// Handle logout
router.post('/logout', (req, res) => {
    res.cookie('token', 'none', {
        expires: new Date(Date.now() + 10 * 1000), // 10 seconds
        httpOnly: true
    });

    // Check if it's an AJAX request
    if (req.xhr || req.headers.accept.includes('application/json')) {
        return res.status(200).json({
            success: true,
            message: 'Logged out successfully'
        });
    }

    // For regular form submissions
    res.redirect('/auth/login');
});

// Handle password reset request
router.post('/forgot-password', async (req, res) => {
    try {
        const { email } = req.body;
        
        if (!email) {
            throw new Error('Please provide an email address');
        }

        await authService.sendPasswordResetEmail(email);

        // Check if it's an AJAX request
        if (req.xhr || req.headers.accept.includes('application/json')) {
            return res.status(200).json({
                success: true,
                message: 'Password reset email sent'
            });
        }

        // For regular form submissions
        res.redirect('/auth/login?success=Password reset email sent');
    } catch (error) {
        // Check if it's an AJAX request
        if (req.xhr || req.headers.accept.includes('application/json')) {
            return res.status(400).json({
                success: false,
                message: error.message
            });
        }

        // For regular form submissions
        res.render('auth/forgot-password', {
            title: 'Forgot Password',
            error: error.message,
            layout: 'auth'
        });
    }
});

// Handle password reset
router.post('/reset-password/:token', async (req, res) => {
    try {
        const { token } = req.params;
        const { password } = req.body;

        await authService.resetPassword(token, password);

        // Check if it's an AJAX request
        if (req.xhr || req.headers.accept.includes('application/json')) {
            return res.status(200).json({
                success: true,
                message: 'Password reset successful'
            });
        }

        // For regular form submissions
        res.redirect('/auth/login?success=Password reset successful. Please login with your new password.');
    } catch (error) {
        // Check if it's an AJAX request
        if (req.xhr || req.headers.accept.includes('application/json')) {
            return res.status(400).json({
                success: false,
                message: error.message
            });
        }

        // For regular form submissions
        res.render('auth/reset-password', {
            title: 'Reset Password',
            error: error.message,
            token,
            layout: 'auth'
        });
    }
});

module.exports = router;

================
File: src/routes/billing.routes.js
================
const express = require('express');
const router = express.Router();
const { protect, authorize } = require('../middlewares/auth.middleware');
const Invoice = require('../models/Invoice');
const Transaction = require('../models/Transaction');
const LoyaltyProgram = require('../models/LoyaltyProgram');
const { validateObjectId } = require('../middlewares/validation.middleware');

// Get all invoices (admin only)
router.get('/invoices', protect, authorize(['admin']), async (req, res) => {
    try {
        const { status, startDate, endDate, search } = req.query;
        let query = {};

        // Filter by status
        if (status) {
            query.status = status;
        }

        // Filter by date range
        if (startDate || endDate) {
            query.createdAt = {};
            if (startDate) query.createdAt.$gte = new Date(startDate);
            if (endDate) query.createdAt.$lte = new Date(endDate);
        }

        // Search by invoice number or guest name
        if (search) {
            query.$or = [
                { invoiceNumber: { $regex: search, $options: 'i' } },
                { 'guest.name': { $regex: search, $options: 'i' } }
            ];
        }

        const invoices = await Invoice.find(query)
            .populate('guest', 'name email')
            .populate('booking', 'checkInDate checkOutDate')
            .sort({ createdAt: -1 });

        res.json(invoices);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

// Get guest's invoices
router.get('/my-invoices', protect, async (req, res) => {
    try {
        const invoices = await Invoice.find({ guest: req.user._id })
            .populate('booking', 'checkInDate checkOutDate')
            .sort({ createdAt: -1 });

        res.json(invoices);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

// Get single invoice
router.get('/invoices/:id', protect, validateObjectId('id'), async (req, res) => {
    try {
        const invoice = await Invoice.findById(req.params.id)
            .populate('guest', 'name email')
            .populate('booking', 'checkInDate checkOutDate roomType');

        if (!invoice) {
            return res.status(404).json({ message: 'Invoice not found' });
        }

        // Check if user is authorized to view this invoice
        if (!req.user.roles.includes('admin') && invoice.guest.toString() !== req.user._id.toString()) {
            return res.status(403).json({ message: 'Not authorized to view this invoice' });
        }

        res.json(invoice);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

// Create new invoice (admin only)
router.post('/invoices', protect, authorize(['admin']), async (req, res) => {
    try {
        const invoice = new Invoice({
            ...req.body,
            status: 'draft'
        });

        await invoice.save();
        res.status(201).json(invoice);
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
});

// Update invoice (admin only)
router.put('/invoices/:id', protect, authorize(['admin']), validateObjectId('id'), async (req, res) => {
    try {
        const invoice = await Invoice.findById(req.params.id);
        if (!invoice) {
            return res.status(404).json({ message: 'Invoice not found' });
        }

        // Don't allow updating certain fields if invoice is paid
        if (invoice.status === 'paid' && (req.body.items || req.body.subtotal || req.body.tax || req.body.total)) {
            return res.status(400).json({ message: 'Cannot modify amounts of a paid invoice' });
        }

        Object.assign(invoice, req.body);
        await invoice.save();
        res.json(invoice);
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
});

// Process payment for an invoice
router.post('/invoices/:id/pay', protect, validateObjectId('id'), async (req, res) => {
    try {
        const { method, amount, paymentDetails } = req.body;
        const invoice = await Invoice.findById(req.params.id);

        if (!invoice) {
            return res.status(404).json({ message: 'Invoice not found' });
        }

        // Create transaction
        const transaction = new Transaction({
            invoice: invoice._id,
            guest: invoice.guest,
            hotel: invoice.hotel,
            amount,
            type: 'payment',
            method,
            paymentDetails,
            status: 'completed'
        });

        await transaction.save();

        // Update invoice status
        const totalPaid = amount;
        invoice.status = totalPaid >= invoice.total ? 'paid' : 'partially_paid';
        await invoice.save();

        res.json({ invoice, transaction });
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
});

// Process refund for a transaction
router.post('/transactions/:id/refund', protect, authorize(['admin']), validateObjectId('id'), async (req, res) => {
    try {
        const { amount, reason } = req.body;
        const transaction = await Transaction.findById(req.params.id);

        if (!transaction) {
            return res.status(404).json({ message: 'Transaction not found' });
        }

        if (transaction.status !== 'completed') {
            return res.status(400).json({ message: 'Can only refund completed transactions' });
        }

        // Create refund transaction
        const refund = new Transaction({
            invoice: transaction.invoice,
            guest: transaction.guest,
            hotel: transaction.hotel,
            amount: -amount,
            type: 'refund',
            method: transaction.method,
            paymentDetails: transaction.paymentDetails,
            refundReason: reason,
            status: 'completed'
        });

        await refund.save();

        // Update original transaction
        transaction.status = 'refunded';
        await transaction.save();

        // Update invoice status
        const invoice = await Invoice.findById(transaction.invoice);
        if (invoice) {
            invoice.status = 'refunded';
            await invoice.save();
        }

        res.json({ transaction: refund });
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
});

// Get transactions for an invoice
router.get('/invoices/:id/transactions', protect, validateObjectId('id'), async (req, res) => {
    try {
        const transactions = await Transaction.find({ invoice: req.params.id })
            .sort({ createdAt: -1 });

        res.json(transactions);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

module.exports = router;

================
File: src/routes/booking.routes.js
================
const express = require('express');
const router = express.Router();
const bookingController = require('../controllers/booking.controller');
const { protect, authorize } = require('../middleware/auth');

/**
 * @swagger
 * /api/bookings:
 *   post:
 *     summary: Create a new booking
 *     tags: [Bookings]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - hotelId
 *               - roomId
 *               - checkIn
 *               - checkOut
 *               - guests
 *             properties:
 *               hotelId:
 *                 type: string
 *               roomId:
 *                 type: string
 *               checkIn:
 *                 type: string
 *                 format: date
 *               checkOut:
 *                 type: string
 *                 format: date
 *               guests:
 *                 type: object
 *                 properties:
 *                   adults:
 *                     type: number
 *                   children:
 *                     type: number
 *               specialRequests:
 *                 type: string
 *     responses:
 *       201:
 *         description: Booking created successfully
 *       400:
 *         description: Invalid input data
 *       404:
 *         description: Hotel or room not found
 */
router.post('/', protect, bookingController.createBooking);

/**
 * @swagger
 * /api/bookings/user:
 *   get:
 *     summary: Get all bookings for the authenticated user
 *     tags: [Bookings]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *       - in: query
 *         name: status
 *         schema:
 *           type: string
 *           enum: [pending, confirmed, cancelled, completed]
 *     responses:
 *       200:
 *         description: List of bookings
 */
router.get('/user', protect, bookingController.getUserBookings);

/**
 * @swagger
 * /api/bookings/{id}:
 *   get:
 *     summary: Get booking by ID
 *     tags: [Bookings]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Booking details
 *       404:
 *         description: Booking not found
 */
router.get('/:id', protect, bookingController.getBookingById);

/**
 * @swagger
 * /api/bookings/{id}/status:
 *   patch:
 *     summary: Update booking status
 *     tags: [Bookings]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - status
 *             properties:
 *               status:
 *                 type: string
 *                 enum: [pending, confirmed, cancelled, completed]
 *               cancellationReason:
 *                 type: string
 *     responses:
 *       200:
 *         description: Booking status updated
 *       404:
 *         description: Booking not found
 */
router.patch('/:id/status', protect, bookingController.updateBookingStatus);

/**
 * @swagger
 * /api/bookings/hotel/{hotelId}:
 *   get:
 *     summary: Get all bookings for a hotel (Admin only)
 *     tags: [Bookings]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: hotelId
 *         required: true
 *         schema:
 *           type: string
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *       - in: query
 *         name: status
 *         schema:
 *           type: string
 *           enum: [pending, confirmed, cancelled, completed]
 *     responses:
 *       200:
 *         description: List of hotel bookings
 *       403:
 *         description: Not authorized
 */
router.get('/hotel/:hotelId', protect, authorize('admin'), bookingController.getHotelBookings);

module.exports = router;

================
File: src/routes/channel-manager.routes.js
================
const express = require('express');
const router = express.Router();
const { protect, authorize } = require('../middlewares/auth.middleware');
const channelManagerController = require('../controllers/channel-manager.controller');

// Dashboard routes
router.get('/dashboard', protect, authorize('admin', 'manager'), channelManagerController.getDashboard);

// Sync routes
router.post('/sync-all', protect, authorize('admin', 'manager'), channelManagerController.syncAllChannels);
router.post('/update-rates', protect, authorize('admin', 'manager'), channelManagerController.updateAllRates);
router.post('/check-bookings', protect, authorize('admin', 'manager'), channelManagerController.checkNewBookings);

module.exports = router;

================
File: src/routes/checkInOut.routes.js
================
const express = require('express');
const router = express.Router();
const { protect, authorize } = require('../middleware/auth');
const checkInOutController = require('../controllers/admin/check-in-out.controller');

// Protect all routes
// router.use(authenticateUser);

// Check-in routes
router.post('/check-in/:bookingId', 
    protect,
    authorize('admin', 'receptionist'), 
    checkInOutController.processCheckIn
);

// Check-out routes
router.post('/check-out/:bookingId',
    protect,
    authorize('admin', 'receptionist'),
    checkInOutController.processCheckOut
);

// Get check-in/out details
router.get('/details/:bookingId',
    protect,
    authorize('admin', 'receptionist'),
    checkInOutController.getCheckInDetails
);

module.exports = router;

================
File: src/routes/corporate.routes.js
================
const express = require('express');
const router = express.Router();
const {
    createCorporateAccount,
    getCorporateAccounts,
    getCorporateAccount,
    updateCorporateAccount,
    deleteCorporateAccount,
    getCorporateRate
} = require('../controllers/corporate.controller');
const { protect, authorize } = require('../middleware/auth.middleware');

router.use(protect);

router
    .route('/')
    .post(authorize('admin'), createCorporateAccount)
    .get(authorize('admin'), getCorporateAccounts);

router
    .route('/:id')
    .get(authorize('admin'), getCorporateAccount)
    .put(authorize('admin'), updateCorporateAccount)
    .delete(authorize('admin'), deleteCorporateAccount);

router.get('/:id/rate/:roomType', getCorporateRate);

module.exports = router;

================
File: src/routes/forgotPassword.routes.js
================
const express = require('express');
const router = express.Router();
const User = require('../models/User');
const nodemailer = require('nodemailer');
const crypto = require('crypto');

// Configure nodemailer
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASSWORD
  }
});

// Request password reset
router.post('/forgot-password', async (req, res) => {
  try {
    const { email } = req.body;
    const user = await User.findOne({ email });
    
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }

    // Generate reset token
    const resetToken = crypto.randomBytes(32).toString('hex');
    user.resetPasswordToken = resetToken;
    user.resetPasswordExpires = Date.now() + 3600000; // 1 hour
    await user.save();

    // Send email
    const resetUrl = `${process.env.FRONTEND_URL}/reset-password/${resetToken}`;
    const mailOptions = {
      to: user.email,
      subject: 'Password Reset Request',
      html: `
        <p>You requested a password reset</p>
        <p>Click this <a href="${resetUrl}">link</a> to reset your password</p>
        <p>This link will expire in 1 hour</p>
      `
    };

    await transporter.sendMail(mailOptions);
    res.json({ success: true, message: 'Reset link sent to email' });
  } catch (error) {
    console.error('Forgot password error:', error);
    res.status(500).json({ success: false, message: 'Error in password reset request' });
  }
});

// Reset password with token
router.post('/reset-password/:token', async (req, res) => {
  try {
    const { password } = req.body;
    const user = await User.findOne({
      resetPasswordToken: req.params.token,
      resetPasswordExpires: { $gt: Date.now() }
    });

    if (!user) {
      return res.status(400).json({ success: false, message: 'Invalid or expired reset token' });
    }

    user.password = password;
    user.resetPasswordToken = undefined;
    user.resetPasswordExpires = undefined;
    await user.save();

    res.json({ success: true, message: 'Password successfully reset' });
  } catch (error) {
    console.error('Reset password error:', error);
    res.status(500).json({ success: false, message: 'Error resetting password' });
  }
});

module.exports = router;

================
File: src/routes/group.routes.js
================
const express = require('express');
const router = express.Router();
const {
    createGroupBooking,
    getGroupBookings,
    getGroupBooking,
    updateGroupBooking,
    deleteGroupBooking,
    addGuest,
    updateGuestStatus,
    addPayment
} = require('../controllers/group.controller');
const { protect, authorize } = require('../middleware/auth.middleware');

router.use(protect);
router.use(authorize('admin'));

router
    .route('/')
    .post(createGroupBooking)
    .get(getGroupBookings);

router
    .route('/:id')
    .get(getGroupBooking)
    .put(updateGroupBooking)
    .delete(deleteGroupBooking);

router.post('/:id/guests', addGuest);
router.put('/:id/guests/:guestId', updateGuestStatus);
router.post('/:id/payments', addPayment);

module.exports = router;

================
File: src/routes/guest-portal.routes.js
================
const express = require('express');
const router = express.Router();
const User = require('../models/User');
const Booking = require('../models/Booking');
const Room = require('../models/Room');
const Hotel = require('../models/Hotel');
const Maintenance = require('../models/Maintenance');
const AmenityRequest = require('../models/AmenityRequest');
const Inventory = require('../models/Inventory');
const { protect } = require('../middlewares/auth.middleware');
const bcrypt = require('bcryptjs');

// Guest Dashboard
router.get('/dashboard', protect, async (req, res) => {
    try {
        // Get current booking if any
        const currentBooking = await Booking.findOne({
            user: req.user._id,
            status: { $in: ['confirmed', 'checked-in'] }
        }).populate('hotel room');

        // Get upcoming bookings
        const upcomingBookings = await Booking.find({
            user: req.user._id,
            checkIn: { $gt: new Date() },
            status: 'confirmed'
        }).populate('hotel room');

        // Get past bookings (limited to last 5)
        const pastBookings = await Booking.find({
            user: req.user._id,
            status: 'completed'
        })
        .sort('-checkOut')
        .limit(5)
        .populate('hotel room');

        // Get active maintenance requests
        const activeRequests = await Maintenance.find({
            guest: req.user._id,
            status: { $in: ['pending', 'in-progress'] }
        }).populate('hotel');

        res.render('guest/dashboard', {
            title: 'Guest Dashboard',
            currentBooking,
            upcomingBookings,
            pastBookings,
            activeRequests,
            layout: 'main'
        });
    } catch (error) {
        console.error('Error loading guest dashboard:', error);
        res.status(500).send('Error loading dashboard');
    }
});

// Profile Management
router.get('/profile', protect, async (req, res) => {
    try {
        const user = await User.findById(req.user._id).select('-password');
        res.render('guest/profile', {
            title: 'My Profile',
            user,
            layout: 'main'
        });
    } catch (error) {
        console.error('Error loading profile:', error);
        res.status(500).send('Error loading profile');
    }
});

router.put('/profile', protect, async (req, res) => {
    try {
        const { name, email, phone } = req.body;
        const user = await User.findByIdAndUpdate(
            req.user._id,
            { name, email, phone },
            { new: true, runValidators: true }
        ).select('-password');

        res.json({
            success: true,
            data: user
        });
    } catch (error) {
        console.error('Error updating profile:', error);
        res.status(500).json({
            success: false,
            message: error.message || 'Error updating profile'
        });
    }
});

router.put('/change-password', protect, async (req, res) => {
    try {
        const { currentPassword, newPassword } = req.body;
        const user = await User.findById(req.user._id);

        // Verify current password
        const isMatch = await bcrypt.compare(currentPassword, user.password);
        if (!isMatch) {
            return res.status(400).json({
                success: false,
                message: 'Current password is incorrect'
            });
        }

        // Update password
        user.password = newPassword;
        await user.save();

        res.json({
            success: true,
            message: 'Password updated successfully'
        });
    } catch (error) {
        console.error('Error changing password:', error);
        res.status(500).json({
            success: false,
            message: error.message || 'Error changing password'
        });
    }
});

// Booking Management
router.get('/bookings', protect, async (req, res) => {
    try {
        const page = parseInt(req.query.page) || 1;
        const limit = 10;
        const skip = (page - 1) * limit;

        const [bookings, total] = await Promise.all([
            Booking.find({ user: req.user._id })
                .sort('-createdAt')
                .skip(skip)
                .limit(limit)
                .populate('hotel room'),
            Booking.countDocuments({ user: req.user._id })
        ]);

        const totalPages = Math.ceil(total / limit);
        const pagination = {
            page,
            totalPages,
            hasPrev: page > 1,
            hasNext: page < totalPages
        };

        res.render('guest/bookings', {
            title: 'My Bookings',
            bookings,
            pagination,
            layout: 'main'
        });
    } catch (error) {
        console.error('Error loading bookings:', error);
        res.status(500).send('Error loading bookings');
    }
});

// Cancel booking
router.put('/bookings/:id/cancel', protect, async (req, res) => {
    try {
        const booking = await Booking.findOne({
            _id: req.params.id,
            user: req.user._id
        });

        if (!booking) {
            return res.status(404).json({
                success: false,
                message: 'Booking not found'
            });
        }

        // Check if booking can be cancelled
        const checkInDate = new Date(booking.checkIn);
        const today = new Date();
        const hoursDiff = (checkInDate - today) / (1000 * 60 * 60);

        if (hoursDiff < 24) {
            return res.status(400).json({
                success: false,
                message: 'Bookings can only be cancelled at least 24 hours before check-in'
            });
        }

        booking.status = 'cancelled';
        await booking.save();

        // Release the room
        await Room.findByIdAndUpdate(booking.room, {
            $pull: { bookings: booking._id }
        });

        res.json({
            success: true,
            message: 'Booking cancelled successfully'
        });
    } catch (error) {
        console.error('Error cancelling booking:', error);
        res.status(500).json({
            success: false,
            message: error.message || 'Error cancelling booking'
        });
    }
});

// Request early check-in/late check-out
router.post('/bookings/:id/request-timing', protect, async (req, res) => {
    try {
        const { type, time } = req.body;
        const booking = await Booking.findOne({
            _id: req.params.id,
            user: req.user._id
        });

        if (!booking) {
            return res.status(404).json({
                success: false,
                message: 'Booking not found'
            });
        }

        if (type === 'early-checkin') {
            booking.earlyCheckInRequested = true;
            booking.requestedCheckInTime = time;
        } else {
            booking.lateCheckOutRequested = true;
            booking.requestedCheckOutTime = time;
        }

        await booking.save();

        res.json({
            success: true,
            message: `${type === 'early-checkin' ? 'Early check-in' : 'Late check-out'} request submitted`
        });
    } catch (error) {
        console.error('Error submitting timing request:', error);
        res.status(500).json({
            success: false,
            message: error.message || 'Error submitting request'
        });
    }
});

// Guest Services
router.post('/services/request', protect, async (req, res) => {
    try {
        const { type, description, preferredTime } = req.body;

        // Check if guest has active booking
        const activeBooking = await Booking.findOne({
            user: req.user._id,
            status: 'checked-in'
        }).populate('hotel room');

        if (!activeBooking) {
            return res.status(403).json({
                success: false,
                message: 'You must be checked in to request services'
            });
        }

        // Create service request
        const request = await Maintenance.create({
            type,
            serviceType: type === 'housekeeping' ? 'regular-service' : 'guest-request',
            description,
            preferredTime,
            guest: req.user._id,
            hotel: activeBooking.hotel._id,
            location: {
                room: activeBooking.room._id
            },
            status: 'pending'
        });

        res.json({
            success: true,
            data: request
        });
    } catch (error) {
        console.error('Error creating service request:', error);
        res.status(500).json({
            success: false,
            message: error.message || 'Error creating service request'
        });
    }
});

// Request amenities and supplies
router.post('/amenity-request', protect, async (req, res) => {
    try {
        const { items, notes } = req.body;
        const guest = req.user;

        // Get guest's active booking
        const activeBooking = await Booking.findOne({
            guest: guest._id,
            status: 'checked_in',
            checkOutDate: { $gt: new Date() }
        }).populate('room hotel');

        if (!activeBooking) {
            return res.status(400).json({
                success: false,
                message: 'No active booking found'
            });
        }

        // Create amenity request
        const amenityRequest = await AmenityRequest.create({
            guest: guest._id,
            booking: activeBooking._id,
            room: activeBooking.room._id,
            hotel: activeBooking.hotel._id,
            items: items.map(item => ({
                item: item.id,
                quantity: item.quantity,
                notes: item.notes
            })),
            status: 'pending',
            notes,
            requestDate: new Date()
        });

        // Update inventory transactions for requested items
        for (const item of items) {
            await Inventory.findByIdAndUpdate(item.id, {
                $push: {
                    transactions: {
                        type: 'consumption',
                        quantity: item.quantity,
                        date: new Date(),
                        reference: {
                            type: 'amenity_request',
                            id: amenityRequest._id
                        }
                    }
                }
            });
        }

        res.json({
            success: true,
            data: amenityRequest
        });
    } catch (error) {
        console.error('Error creating amenity request:', error);
        res.status(500).json({
            success: false,
            message: 'Error creating amenity request'
        });
    }
});

// Get available amenities
router.get('/available-amenities', protect, async (req, res) => {
    try {
        const guest = req.user;

        // Get guest's active booking
        const activeBooking = await Booking.findOne({
            guest: guest._id,
            status: 'checked_in',
            checkOutDate: { $gt: new Date() }
        }).populate('hotel');

        if (!activeBooking) {
            return res.status(400).json({
                success: false,
                message: 'No active booking found'
            });
        }

        // Get available amenities from inventory
        const amenities = await Inventory.find({
            hotel: activeBooking.hotel._id,
            category: { $in: ['amenities', 'toiletries'] },
            currentStock: { $gt: 0 },
            status: 'active'
        }).select('name description unit cost currentStock image');

        res.json({
            success: true,
            data: amenities
        });
    } catch (error) {
        console.error('Error fetching available amenities:', error);
        res.status(500).json({
            success: false,
            message: 'Error fetching available amenities'
        });
    }
});

// Get guest's amenity request history
router.get('/amenity-requests', protect, async (req, res) => {
    try {
        const guest = req.user;
        const requests = await AmenityRequest.find({ guest: guest._id })
            .populate('items.item', 'name unit')
            .sort('-requestDate');

        res.json({
            success: true,
            data: requests
        });
    } catch (error) {
        console.error('Error fetching amenity requests:', error);
        res.status(500).json({
            success: false,
            message: 'Error fetching amenity requests'
        });
    }
});

module.exports = router;

================
File: src/routes/guest.routes.js
================
const express = require('express');
const router = express.Router();
const guestController = require('../controllers/guest.controller');
const { protect, authorize } = require('../middleware/auth');

/**
 * @swagger
 * /api/guests:
 *   get:
 *     summary: Get all guests (Admin only)
 *     tags: [Guests]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *       - in: query
 *         name: search
 *         schema:
 *           type: string
 *       - in: query
 *         name: status
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: List of guests
 *       403:
 *         description: Not authorized
 */
router.get('/', protect, authorize('admin'), guestController.getAllGuests);

/**
 * @swagger
 * /api/guests:
 *   post:
 *     summary: Create a new guest (Admin only)
 *     tags: [Guests]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - name
 *               - email
 *             properties:
 *               name:
 *                 type: string
 *               email:
 *                 type: string
 *                 format: email
 *               phone:
 *                 type: string
 *               address:
 *                 type: string
 *               preferences:
 *                 type: object
 *     responses:
 *       201:
 *         description: Guest created successfully
 *       400:
 *         description: Invalid input data
 */
router.post('/', protect, authorize('admin'), guestController.createGuest);

/**
 * @swagger
 * /api/guests/{id}:
 *   get:
 *     summary: Get guest by ID (Admin only)
 *     tags: [Guests]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Guest details
 *       404:
 *         description: Guest not found
 */
router.get('/:id', protect, authorize('admin'), guestController.getGuestById);

/**
 * @swagger
 * /api/guests/{id}:
 *   put:
 *     summary: Update guest (Admin only)
 *     tags: [Guests]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               name:
 *                 type: string
 *               email:
 *                 type: string
 *                 format: email
 *               phone:
 *                 type: string
 *               address:
 *                 type: string
 *               preferences:
 *                 type: object
 *     responses:
 *       200:
 *         description: Guest updated successfully
 *       404:
 *         description: Guest not found
 */
router.put('/:id', protect, authorize('admin'), guestController.updateGuest);

/**
 * @swagger
 * /api/guests/{id}:
 *   delete:
 *     summary: Delete guest (Admin only)
 *     tags: [Guests]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Guest deleted successfully
 *       404:
 *         description: Guest not found
 */
router.delete('/:id', protect, authorize('admin'), guestController.deleteGuest);

module.exports = router;

================
File: src/routes/home.routes.js
================
const express = require('express');
const router = express.Router();
const homeController = require('../controllers/home.controller');

// Home page
router.get('/', homeController.getHomePage);

module.exports = router;

================
File: src/routes/hotel.routes.js
================
const express = require('express');
const router = express.Router();
const hotelController = require('../controllers/hotel.controller');
const { protect, authorize } = require('../middleware/auth');

/**
 * @swagger
 * components:
 *   schemas:
 *     Room:
 *       type: object
 *       required:
 *         - type
 *         - price
 *         - capacity
 *       properties:
 *         type:
 *           type: string
 *           enum: [single, double, suite, deluxe]
 *         price:
 *           type: number
 *         capacity:
 *           type: number
 *         amenities:
 *           type: array
 *           items:
 *             type: string
 *         available:
 *           type: boolean
 *           default: true
 *     Hotel:
 *       type: object
 *       required:
 *         - name
 *         - description
 *         - address
 *       properties:
 *         name:
 *           type: string
 *         description:
 *           type: string
 *         address:
 *           type: object
 *           properties:
 *             street:
 *               type: string
 *             city:
 *               type: string
 *             state:
 *               type: string
 *             country:
 *               type: string
 *             zipCode:
 *               type: string
 *         rating:
 *           type: number
 *         images:
 *           type: array
 *           items:
 *             type: object
 *             properties:
 *               url:
 *                 type: string
 *               caption:
 *                 type: string
 *         amenities:
 *           type: array
 *           items:
 *             type: string
 *         rooms:
 *           type: array
 *           items:
 *             $ref: '#/components/schemas/Room'
 *         contactInfo:
 *           type: object
 *           properties:
 *             phone:
 *               type: string
 *             email:
 *               type: string
 *             website:
 *               type: string
 *         policies:
 *           type: object
 *           properties:
 *             checkInTime:
 *               type: string
 *             checkOutTime:
 *               type: string
 *             cancellationPolicy:
 *               type: string
 */

/**
 * @swagger
 * /api/admin/hotels:
 *   post:
 *     summary: Create a new hotel (Admin only)
 *     tags: [Hotels]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Hotel'
 *     responses:
 *       201:
 *         description: Hotel created successfully
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Hotel'
 *       401:
 *         description: Not authorized
 *       403:
 *         description: Not admin
 */
router.post('/admin/hotels', protect, authorize('admin'), hotelController.createHotel);

/**
 * @swagger
 * /api/hotels:
 *   get:
 *     summary: Get all hotels
 *     tags: [Hotels]
 *     parameters:
 *       - in: query
 *         name: city
 *         schema:
 *           type: string
 *         description: Filter hotels by city
 *     responses:
 *       200:
 *         description: List of hotels
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/Hotel'
 */
router.get('/hotels', hotelController.getAllHotels);

/**
 * @swagger
 * /api/hotels/{id}:
 *   get:
 *     summary: Get hotel by ID
 *     tags: [Hotels]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Hotel details
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Hotel'
 *       404:
 *         description: Hotel not found
 */
router.get('/hotels/:id', hotelController.getHotelById);

/**
 * @swagger
 * /api/admin/hotels/{id}:
 *   put:
 *     summary: Update hotel (Admin only)
 *     tags: [Hotels]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Hotel'
 *     responses:
 *       200:
 *         description: Hotel updated successfully
 *       401:
 *         description: Not authorized
 *       403:
 *         description: Not admin
 *       404:
 *         description: Hotel not found
 */
router.put('/admin/hotels/:id', protect, authorize('admin'), hotelController.updateHotel);

/**
 * @swagger
 * /api/admin/hotels/{id}:
 *   delete:
 *     summary: Delete hotel (Admin only)
 *     tags: [Hotels]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Hotel deleted successfully
 *       401:
 *         description: Not authorized
 *       403:
 *         description: Not admin
 *       404:
 *         description: Hotel not found
 */
router.delete('/admin/hotels/:id', protect, authorize('admin'), hotelController.deleteHotel);

/**
 * @swagger
 * /api/admin/hotels/{id}/toggle-status:
 *   patch:
 *     summary: Toggle hotel active status
 *     tags: [Hotels]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Hotel status updated successfully
 *       404:
 *         description: Hotel not found
 */
router.patch('/admin/hotels/:id/toggle-status', protect, authorize('admin'), async (req, res) => {
    try {
        const hotel = await Hotel.findById(req.params.id);
        
        if (!hotel) {
            return res.status(404).json({
                success: false,
                message: 'Hotel not found'
            });
        }

        hotel.isActive = !hotel.isActive;
        await hotel.save();

        res.json({
            success: true,
            message: 'Hotel status updated successfully',
            data: { isActive: hotel.isActive }
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            message: 'Error updating hotel status',
            error: error.message
        });
    }
});

/**
 * @swagger
 * /api/admin/hotels/{hotelId}/rooms:
 *   post:
 *     summary: Add a room to hotel (Admin only)
 *     tags: [Rooms]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: hotelId
 *         required: true
 *         schema:
 *           type: string
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Room'
 *     responses:
 *       201:
 *         description: Room added successfully
 *       401:
 *         description: Not authorized
 *       403:
 *         description: Not admin
 *       404:
 *         description: Hotel not found
 */
router.post('/admin/hotels/:hotelId/rooms', protect, authorize('admin'), hotelController.addRoom);

/**
 * @swagger
 * /api/admin/hotels/{hotelId}/rooms/{roomId}:
 *   put:
 *     summary: Update a room (Admin only)
 *     tags: [Rooms]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: hotelId
 *         required: true
 *         schema:
 *           type: string
 *       - in: path
 *         name: roomId
 *         required: true
 *         schema:
 *           type: string
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Room'
 *     responses:
 *       200:
 *         description: Room updated successfully
 *       401:
 *         description: Not authorized
 *       403:
 *         description: Not admin
 *       404:
 *         description: Hotel or room not found
 */
router.put('/admin/hotels/:hotelId/rooms/:roomId', protect, authorize('admin'), hotelController.updateRoom);

/**
 * @swagger
 * /api/admin/hotels/{hotelId}/rooms/{roomId}:
 *   delete:
 *     summary: Delete a room (Admin only)
 *     tags: [Rooms]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: hotelId
 *         required: true
 *         schema:
 *           type: string
 *       - in: path
 *         name: roomId
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Room deleted successfully
 *       401:
 *         description: Not authorized
 *       403:
 *         description: Not admin
 *       404:
 *         description: Hotel or room not found
 */
router.delete('/admin/hotels/:hotelId/rooms/:roomId', protect, authorize('admin'), hotelController.deleteRoom);

module.exports = router;

================
File: src/routes/housekeeping.routes.js
================
const express = require('express');
const router = express.Router();
const { protect, authorize } = require('../middlewares/auth.middleware');
const Room = require('../models/Room');
const HousekeepingTask = require('../models/HousekeepingTask');
const Notification = require('../models/Notification');
const LoyaltyProgram = require('../models/LoyaltyProgram');

// Get all housekeeping tasks
router.get('/', protect, authorize('admin', 'staff'), async (req, res) => {
    try {
        const { status, priority, roomNumber } = req.query;
        const query = {};
        
        if (status) query.status = status;
        if (priority) query.priority = priority;
        if (roomNumber) query.roomNumber = roomNumber;

        const tasks = await HousekeepingTask.find(query)
            .populate('room', 'number type')
            .populate('assignedTo', 'name')
            .sort({ priority: -1, createdAt: -1 });

        res.render('admin/housekeeping/tasks', {
            title: 'Housekeeping Tasks',
            tasks,
            active: 'housekeeping'
        });
    } catch (error) {
        console.error('Error fetching housekeeping tasks:', error);
        res.status(500).render('error', { message: 'Error fetching housekeeping tasks' });
    }
});

// Create new housekeeping task
router.post('/', protect, authorize('admin', 'staff'), async (req, res) => {
    try {
        const { roomId, description, priority, scheduledDate } = req.body;
        
        const task = await HousekeepingTask.create({
            room: roomId,
            description,
            priority,
            scheduledDate,
            status: 'pending',
            createdBy: req.user._id
        });

        // Create notification for housekeeping staff
        await Notification.create({
            type: 'HOUSEKEEPING_TASK',
            title: 'New Housekeeping Task',
            message: `New task assigned for Room ${task.room.number}`,
            priority: task.priority,
            recipients: ['housekeeping'],
            relatedModel: 'HousekeepingTask',
            relatedId: task._id
        });

        res.status(201).json({
            success: true,
            data: task
        });
    } catch (error) {
        console.error('Error creating housekeeping task:', error);
        res.status(500).json({
            success: false,
            message: 'Error creating housekeeping task'
        });
    }
});

// Update housekeeping task status
router.put('/:id', protect, authorize('admin', 'staff'), async (req, res) => {
    try {
        const { status, notes } = req.body;
        const task = await HousekeepingTask.findByIdAndUpdate(
            req.params.id,
            {
                status,
                notes,
                completedAt: status === 'completed' ? Date.now() : null,
                completedBy: status === 'completed' ? req.user._id : null
            },
            { new: true }
        );

        if (status === 'completed') {
            // Update room status
            await Room.findByIdAndUpdate(task.room, { status: 'clean' });
            
            // Create notification for front desk
            await Notification.create({
                type: 'HOUSEKEEPING_COMPLETE',
                title: 'Room Cleaning Complete',
                message: `Room ${task.room.number} has been cleaned and is ready`,
                priority: 'normal',
                recipients: ['front-desk'],
                relatedModel: 'Room',
                relatedId: task.room
            });
        }

        res.json({
            success: true,
            data: task
        });
    } catch (error) {
        console.error('Error updating housekeeping task:', error);
        res.status(500).json({
            success: false,
            message: 'Error updating housekeeping task'
        });
    }
});

// Get housekeeping dashboard stats
router.get('/stats', protect, authorize('admin', 'staff'), async (req, res) => {
    try {
        const [pending, inProgress, completed] = await Promise.all([
            HousekeepingTask.countDocuments({ status: 'pending' }),
            HousekeepingTask.countDocuments({ status: 'in-progress' }),
            HousekeepingTask.countDocuments({ status: 'completed' })
        ]);

        const highPriority = await HousekeepingTask.countDocuments({
            status: { $ne: 'completed' },
            priority: 'high'
        });

        res.json({
            success: true,
            data: {
                pending,
                inProgress,
                completed,
                highPriority
            }
        });
    } catch (error) {
        console.error('Error fetching housekeeping stats:', error);
        res.status(500).json({
            success: false,
            message: 'Error fetching housekeeping stats'
        });
    }
});

module.exports = router;

================
File: src/routes/index.routes.js
================
const express = require('express');
const router = express.Router();
const Hotel = require('../models/Hotel');
const { protect } = require('../middleware/auth');

// Home page
router.get('/', async (req, res) => {
    try {
        // Get featured hotels
        const featuredHotels = await Hotel.find({ featured: true })
            .select('name description imageUrl startingPrice')
            .limit(3);

        res.render('index', {
            title: 'Welcome to Hotel Management System',
            featuredHotels,
            user: req.user
        });
    } catch (error) {
        console.error('Home page error:', error);
        res.status(500).render('error', {
            message: 'Error loading home page'
        });
    }
});

// Search hotels
router.get('/search', async (req, res) => {
    try {
        const { location, checkIn, checkOut, guests } = req.query;
        
        // Build query
        const query = {};
        if (location) {
            query['location.city'] = { $regex: location, $options: 'i' };
        }

        // Get hotels matching search criteria
        const hotels = await Hotel.find(query)
            .select('name description images rating location price')
            .limit(20);

        res.render('search', {
            title: 'Search Hotels',
            hotels,
            searchParams: req.query,
            user: req.user
        });
    } catch (error) {
        console.error('Error searching hotels:', error);
        res.status(500).render('error', {
            message: 'Error searching hotels'
        });
    }
});

// Hotel details
router.get('/hotels/:id', async (req, res) => {
    try {
        const hotel = await Hotel.findById(req.params.id)
            .populate('rooms');

        if (!hotel) {
            return res.status(404).render('error', {
                message: 'Hotel not found'
            });
        }

        res.render('hotel-details', {
            title: hotel.name,
            hotel,
            user: req.user
        });
    } catch (error) {
        console.error('Error loading hotel details:', error);
        res.status(500).render('error', {
            message: 'Error loading hotel details'
        });
    }
});

// Redirect to login
router.get('/login', (req, res) => {
    res.redirect('/auth/login');
});

// Redirect to admin dashboard
router.get('/admin', protect, (req, res) => {
    res.redirect('/admin/dashboard');
});

module.exports = router;

================
File: src/routes/inventory.routes.js
================
const express = require('express');
const router = express.Router();
const { protect, authorize } = require('../middlewares/auth.middleware');
const Inventory = require('../models/Inventory');
const Hotel = require('../models/Hotel');
const LoyaltyProgram = require('../models/LoyaltyProgram');
const Reward = require('../models/Reward');

// Get inventory dashboard
router.get('/', protect, authorize('admin'), async (req, res) => {
    try {
        const { hotel, category, status, search, page = 1 } = req.query;
        const limit = 10;
        const skip = (page - 1) * limit;

        // Build filter
        const filter = {};
        if (hotel) filter.hotel = hotel;
        if (category) filter.category = category;
        if (status) filter.status = status;
        if (search) {
            filter.$or = [
                { name: { $regex: search, $options: 'i' } },
                { description: { $regex: search, $options: 'i' } }
            ];
        }

        // Get inventory stats
        const stats = await Promise.all([
            Inventory.countDocuments({ ...filter, status: 'in_stock' }),
            Inventory.countDocuments({ ...filter, status: 'low_stock' }),
            Inventory.countDocuments({ ...filter, status: 'out_of_stock' }),
            Inventory.aggregate([
                { $match: filter },
                { $group: {
                    _id: null,
                    totalValue: { $sum: { $multiply: ['$currentStock', '$cost'] } }
                }}
            ])
        ]);

        // Get inventory items with pagination
        const [items, total, hotels] = await Promise.all([
            Inventory.find(filter)
                .sort('category name')
                .skip(skip)
                .limit(limit)
                .populate('hotel', 'name'),
            Inventory.countDocuments(filter),
            Hotel.find().select('name').sort('name')
        ]);

        // Calculate pagination
        const totalPages = Math.ceil(total / limit);
        const pagination = {
            page: parseInt(page),
            totalPages,
            hasPrev: page > 1,
            hasNext: page < totalPages
        };

        res.render('admin/inventory/list', {
            title: 'Inventory Management',
            items,
            hotels,
            pagination,
            query: req.query,
            stats: {
                inStock: stats[0],
                lowStock: stats[1],
                outOfStock: stats[2],
                totalValue: stats[3][0]?.totalValue || 0
            }
        });
    } catch (error) {
        console.error('Error loading inventory:', error);
        res.status(500).send('Error loading inventory');
    }
});

// Create new inventory item
router.post('/', protect, authorize('admin'), async (req, res) => {
    try {
        const item = await Inventory.create({
            ...req.body,
            transactions: [{
                type: 'restock',
                quantity: req.body.currentStock,
                performedBy: req.user._id,
                notes: 'Initial stock'
            }]
        });

        res.json({
            success: true,
            data: item
        });
    } catch (error) {
        console.error('Error creating inventory item:', error);
        res.status(500).json({
            success: false,
            message: error.message || 'Error creating inventory item'
        });
    }
});

// Get single inventory item
router.get('/:id', protect, authorize('admin'), async (req, res) => {
    try {
        const item = await Inventory.findById(req.params.id)
            .populate('hotel', 'name')
            .populate('transactions.performedBy', 'name');

        if (!item) {
            return res.status(404).json({
                success: false,
                message: 'Inventory item not found'
            });
        }

        res.json({
            success: true,
            data: item
        });
    } catch (error) {
        console.error('Error fetching inventory item:', error);
        res.status(500).json({
            success: false,
            message: 'Error fetching inventory item'
        });
    }
});

// Update inventory item
router.put('/:id', protect, authorize('admin'), async (req, res) => {
    try {
        const { currentStock, ...updateData } = req.body;
        const item = await Inventory.findById(req.params.id);

        if (!item) {
            return res.status(404).json({
                success: false,
                message: 'Inventory item not found'
            });
        }

        // If stock changed, add transaction
        if (currentStock !== undefined && currentStock !== item.currentStock) {
            const difference = currentStock - item.currentStock;
            item.transactions.push({
                type: 'adjustment',
                quantity: difference,
                performedBy: req.user._id,
                notes: req.body.adjustmentNotes || 'Stock adjustment'
            });
        }

        // Update the item
        Object.assign(item, updateData);
        if (currentStock !== undefined) {
            item.currentStock = currentStock;
        }

        await item.save();

        res.json({
            success: true,
            data: item
        });
    } catch (error) {
        console.error('Error updating inventory item:', error);
        res.status(500).json({
            success: false,
            message: error.message || 'Error updating inventory item'
        });
    }
});

// Record inventory transaction
router.post('/:id/transaction', protect, authorize('admin'), async (req, res) => {
    try {
        const { type, quantity, notes } = req.body;
        const item = await Inventory.findById(req.params.id);

        if (!item) {
            return res.status(404).json({
                success: false,
                message: 'Inventory item not found'
            });
        }

        // Update stock based on transaction type
        if (type === 'restock') {
            item.currentStock += quantity;
            item.lastRestocked = new Date();
        } else if (type === 'consumption') {
            if (item.currentStock < quantity) {
                return res.status(400).json({
                    success: false,
                    message: 'Insufficient stock'
                });
            }
            item.currentStock -= quantity;
        }

        // Add transaction record
        item.transactions.push({
            type,
            quantity,
            performedBy: req.user._id,
            notes
        });

        await item.save();

        res.json({
            success: true,
            data: item
        });
    } catch (error) {
        console.error('Error recording transaction:', error);
        res.status(500).json({
            success: false,
            message: error.message || 'Error recording transaction'
        });
    }
});

// Get low stock report
router.get('/reports/low-stock', protect, authorize('admin'), async (req, res) => {
    try {
        const items = await Inventory.find({
            status: { $in: ['low_stock', 'out_of_stock'] }
        })
        .populate('hotel', 'name')
        .sort('hotel status name');

        res.json({
            success: true,
            data: items
        });
    } catch (error) {
        console.error('Error generating report:', error);
        res.status(500).json({
            success: false,
            message: 'Error generating report'
        });
    }
});

// Get inventory valuation report
router.get('/reports/valuation', protect, authorize('admin'), async (req, res) => {
    try {
        const valuation = await Inventory.aggregate([
            {
                $group: {
                    _id: '$category',
                    totalItems: { $sum: 1 },
                    totalValue: { $sum: { $multiply: ['$currentStock', '$cost'] } },
                    averageCost: { $avg: '$cost' }
                }
            },
            { $sort: { _id: 1 } }
        ]);

        res.json({
            success: true,
            data: valuation
        });
    } catch (error) {
        console.error('Error generating report:', error);
        res.status(500).json({
            success: false,
            message: 'Error generating report'
        });
    }
});

// Export inventory data
router.get('/export', protect, authorize('admin'), async (req, res) => {
    try {
        const { hotel, category, status } = req.query;

        // Build filter
        const filter = {};
        if (hotel) filter.hotel = hotel;
        if (category) filter.category = category;
        if (status) filter.status = status;

        // Get inventory items
        const items = await Inventory.find(filter)
            .populate('hotel', 'name')
            .sort('hotel category name');

        // Create CSV content
        const csvRows = [
            // Headers
            [
                'Item Name',
                'Category',
                'Hotel',
                'Current Stock',
                'Minimum Stock',
                'Reorder Point',
                'Unit',
                'Cost per Unit',
                'Total Value',
                'Status',
                'Last Restocked',
                'Storage Location',
                'Supplier Name',
                'Supplier Contact',
                'Supplier Email',
                'Supplier Phone'
            ].join(',')
        ];

        // Add data rows
        items.forEach(item => {
            csvRows.push([
                `"${item.name}"`,
                item.category,
                `"${item.hotel.name}"`,
                item.currentStock,
                item.minimumStock,
                item.reorderPoint,
                item.unit,
                item.cost,
                item.currentStock * item.cost,
                item.status,
                item.lastRestocked ? new Date(item.lastRestocked).toLocaleDateString() : '',
                `"${[item.location.building, item.location.floor, item.location.room].filter(Boolean).join(' - ')}"`,
                `"${item.supplier.name || ''}"`,
                `"${item.supplier.contact || ''}"`,
                `"${item.supplier.email || ''}"`,
                `"${item.supplier.phone || ''}"`,
            ].join(','));
        });

        // Set headers for file download
        res.setHeader('Content-Type', 'text/csv');
        res.setHeader('Content-Disposition', 'attachment; filename=inventory-report.csv');

        // Send CSV content
        res.send(csvRows.join('\n'));
    } catch (error) {
        console.error('Error exporting inventory:', error);
        res.status(500).send('Error exporting inventory');
    }
});

// Get consumption report
router.get('/reports/consumption', protect, authorize('admin'), async (req, res) => {
    try {
        const { startDate, endDate, hotel } = req.query;
        
        const filter = {
            'transactions.type': 'consumption'
        };
        
        if (hotel) filter.hotel = hotel;
        if (startDate || endDate) {
            filter['transactions.date'] = {};
            if (startDate) filter['transactions.date'].$gte = new Date(startDate);
            if (endDate) filter['transactions.date'].$lte = new Date(endDate);
        }

        const consumptionReport = await Inventory.aggregate([
            { $match: filter },
            { $unwind: '$transactions' },
            { $match: { 'transactions.type': 'consumption' } },
            {
                $group: {
                    _id: {
                        itemId: '$_id',
                        name: '$name',
                        category: '$category'
                    },
                    totalQuantity: { $sum: '$transactions.quantity' },
                    totalCost: { $sum: { $multiply: ['$transactions.quantity', '$cost'] } },
                    transactions: { $push: '$transactions' }
                }
            },
            { $sort: { '_id.category': 1, '_id.name': 1 } }
        ]);

        res.json({
            success: true,
            data: consumptionReport
        });
    } catch (error) {
        console.error('Error generating consumption report:', error);
        res.status(500).json({
            success: false,
            message: 'Error generating consumption report'
        });
    }
});

// Get restock schedule
router.get('/reports/restock-schedule', protect, authorize('admin'), async (req, res) => {
    try {
        const items = await Inventory.find({
            $or: [
                { status: 'low_stock' },
                { currentStock: { $lte: { $multiply: ['$reorderPoint', 1.1] } } }
            ]
        })
        .populate('hotel', 'name')
        .sort('hotel category name');

        // Calculate restock quantities and estimated costs
        const restockSchedule = items.map(item => ({
            _id: item._id,
            name: item.name,
            hotel: item.hotel.name,
            category: item.category,
            currentStock: item.currentStock,
            reorderPoint: item.reorderPoint,
            suggestedReorder: Math.max(item.reorderPoint * 2 - item.currentStock, 0),
            estimatedCost: Math.max(item.reorderPoint * 2 - item.currentStock, 0) * item.cost,
            supplier: item.supplier,
            lastRestocked: item.lastRestocked
        }));

        res.json({
            success: true,
            data: restockSchedule
        });
    } catch (error) {
        console.error('Error generating restock schedule:', error);
        res.status(500).json({
            success: false,
            message: 'Error generating restock schedule'
        });
    }
});

// Get inventory trends
router.get('/reports/trends', protect, authorize('admin'), async (req, res) => {
    try {
        const { hotel, category, period = 'daily' } = req.query;
        
        const filter = {};
        if (hotel) filter.hotel = hotel;
        if (category) filter.category = category;

        // Calculate date range based on period
        const endDate = new Date();
        const startDate = new Date();
        if (period === 'weekly') {
            startDate.setDate(startDate.getDate() - 7);
        } else if (period === 'monthly') {
            startDate.setMonth(startDate.getMonth() - 1);
        } else {
            startDate.setDate(startDate.getDate() - 30); // Default to last 30 days
        }

        const trends = await Inventory.aggregate([
            { $match: filter },
            { $unwind: '$transactions' },
            {
                $match: {
                    'transactions.date': { $gte: startDate, $lte: endDate }
                }
            },
            {
                $group: {
                    _id: {
                        date: {
                            $dateToString: {
                                format: period === 'daily' ? '%Y-%m-%d' : '%Y-%m-%d',
                                date: '$transactions.date'
                            }
                        },
                        type: '$transactions.type'
                    },
                    totalQuantity: { $sum: '$transactions.quantity' }
                }
            },
            { $sort: { '_id.date': 1 } }
        ]);

        res.json({
            success: true,
            data: trends
        });
    } catch (error) {
        console.error('Error generating trends report:', error);
        res.status(500).json({
            success: false,
            message: 'Error generating trends report'
        });
    }
});

module.exports = router;

================
File: src/routes/loyalty.routes.js
================
const express = require('express');
const router = express.Router();
const LoyaltyProgram = require('../models/LoyaltyProgram');
const { protect, authorize } = require('../middleware/auth');

// Get loyalty program status
router.get('/status', protect, async (req, res) => {
    try {
        const loyaltyProgram = await LoyaltyProgram.findOne({ user: req.user._id })
            .populate('pointsHistory.bookingId')
            .populate('rewards.bookingId');

        if (!loyaltyProgram) {
            return res.status(404).json({
                success: false,
                message: 'Loyalty program not found'
            });
        }

        res.json({
            success: true,
            data: loyaltyProgram
        });
    } catch (error) {
        console.error('Error fetching loyalty status:', error);
        res.status(500).json({
            success: false,
            message: 'Error fetching loyalty status'
        });
    }
});

// Get points history
router.get('/points-history', protect, async (req, res) => {
    try {
        const loyaltyProgram = await LoyaltyProgram.findOne({ user: req.user._id })
            .select('pointsHistory')
            .populate('pointsHistory.bookingId');

        res.json({
            success: true,
            data: loyaltyProgram ? loyaltyProgram.pointsHistory : []
        });
    } catch (error) {
        console.error('Error fetching points history:', error);
        res.status(500).json({
            success: false,
            message: 'Error fetching points history'
        });
    }
});

// Get available rewards
router.get('/rewards', protect, async (req, res) => {
    try {
        const loyaltyProgram = await LoyaltyProgram.findOne({ user: req.user._id })
            .select('rewards points membershipTier');

        res.json({
            success: true,
            data: {
                points: loyaltyProgram ? loyaltyProgram.points : 0,
                tier: loyaltyProgram ? loyaltyProgram.membershipTier : 'Bronze',
                rewards: loyaltyProgram ? loyaltyProgram.rewards.filter(r => r.status === 'available') : []
            }
        });
    } catch (error) {
        console.error('Error fetching rewards:', error);
        res.status(500).json({
            success: false,
            message: 'Error fetching rewards'
        });
    }
});

// Redeem points for reward
router.post('/redeem', protect, async (req, res) => {
    try {
        const { rewardType, points } = req.body;
        
        const loyaltyProgram = await LoyaltyProgram.findOne({ user: req.user._id });
        
        if (!loyaltyProgram) {
            return res.status(404).json({
                success: false,
                message: 'Loyalty program not found'
            });
        }

        await loyaltyProgram.redeemPoints(points, rewardType, null, `Redeemed ${points} points for ${rewardType}`);

        res.json({
            success: true,
            message: 'Points redeemed successfully',
            data: {
                points: loyaltyProgram.points,
                reward: loyaltyProgram.rewards[loyaltyProgram.rewards.length - 1]
            }
        });
    } catch (error) {
        console.error('Error redeeming points:', error);
        res.status(500).json({
            success: false,
            message: error.message || 'Error redeeming points'
        });
    }
});

// Update preferences
router.put('/preferences', protect, async (req, res) => {
    try {
        const loyaltyProgram = await LoyaltyProgram.findOneAndUpdate(
            { user: req.user._id },
            { preferences: req.body },
            { new: true }
        );

        if (!loyaltyProgram) {
            return res.status(404).json({
                success: false,
                message: 'Loyalty program not found'
            });
        }

        res.json({
            success: true,
            data: loyaltyProgram.preferences
        });
    } catch (error) {
        console.error('Error updating preferences:', error);
        res.status(500).json({
            success: false,
            message: 'Error updating preferences'
        });
    }
});

// Get referral code
router.get('/referral-code', protect, async (req, res) => {
    try {
        const loyaltyProgram = await LoyaltyProgram.findOne({ user: req.user._id });
        
        if (!loyaltyProgram) {
            return res.status(404).json({
                success: false,
                message: 'Loyalty program not found'
            });
        }

        if (!loyaltyProgram.referralCode) {
            loyaltyProgram.referralCode = await LoyaltyProgram.generateReferralCode(req.user._id);
            await loyaltyProgram.save();
        }

        res.json({
            success: true,
            data: {
                referralCode: loyaltyProgram.referralCode,
                referralCount: loyaltyProgram.referralCount
            }
        });
    } catch (error) {
        console.error('Error getting referral code:', error);
        res.status(500).json({
            success: false,
            message: 'Error getting referral code'
        });
    }
});

// Admin routes
router.get('/admin/members', protect, authorize('admin'), async (req, res) => {
    try {
        const page = parseInt(req.query.page) || 1;
        const limit = parseInt(req.query.limit) || 10;
        const skip = (page - 1) * limit;

        const query = {};
        if (req.query.tier) query.membershipTier = req.query.tier;
        if (req.query.minPoints) query.points = { $gte: parseInt(req.query.minPoints) };

        const [members, total] = await Promise.all([
            LoyaltyProgram.find(query)
                .populate('user', 'name email')
                .sort('-points')
                .skip(skip)
                .limit(limit),
            LoyaltyProgram.countDocuments(query)
        ]);

        res.json({
            success: true,
            data: members,
            pagination: {
                page,
                limit,
                total,
                pages: Math.ceil(total / limit)
            }
        });
    } catch (error) {
        console.error('Error fetching loyalty members:', error);
        res.status(500).json({
            success: false,
            message: 'Error fetching loyalty members'
        });
    }
});

module.exports = router;

================
File: src/routes/maintenance.routes.js
================
const express = require('express');
const router = express.Router();
const Maintenance = require('../models/Maintenance');
const Booking = require('../models/Booking');
const Hotel = require('../models/Hotel'); 
const { protect } = require('../middleware/auth.middleware');

// Guest maintenance dashboard
router.get('/', protect, async (req, res) => {
    try {
        // Get active booking for the user
        const activeBooking = await Booking.findOne({
            user: req.user._id,
            status: 'checked-in'
        }).populate('hotel room');

        const page = parseInt(req.query.page) || 1;
        const limit = 10;
        const skip = (page - 1) * limit;

        let requests = [];
        let total = 0;

        if (activeBooking) {
            // Get maintenance requests for the user's current booking
            [requests, total] = await Promise.all([
                Maintenance.find({
                    guest: req.user._id,
                    hotel: activeBooking.hotel._id,
                    'location.room': activeBooking.room._id
                })
                    .sort('-createdAt')
                    .skip(skip)
                    .limit(limit)
                    .populate('hotel', 'name')
                    .populate('location.room', 'number')
                    .select('-assignedTo'),
                Maintenance.countDocuments({
                    guest: req.user._id,
                    hotel: activeBooking.hotel._id,
                    'location.room': activeBooking.room._id
                })
            ]);
        }

        // Calculate pagination
        const totalPages = Math.ceil(total / limit);
        const pagination = {
            page,
            totalPages,
            hasPrev: page > 1,
            hasNext: page < totalPages
        };

        res.render('maintenance/my-requests', {
            title: 'My Maintenance Requests',
            activeBooking,
            requests,
            pagination,
            layout: 'main'
        });
    } catch (error) {
        console.error('Error loading maintenance requests:', error);
        res.status(500).send('Error loading maintenance requests');
    }
});

// Get my maintenance requests (API)
router.get('/my-requests', protect, async (req, res) => {
    try {
        const page = parseInt(req.query.page) || 1;
        const limit = 10;
        const skip = (page - 1) * limit;

        // Get active booking for the user
        const activeBooking = await Booking.findOne({
            user: req.user._id,
            status: 'checked-in'
        }).populate('hotel room');

        if (!activeBooking) {
            return res.status(403).json({
                success: false,
                message: 'You must be checked in to view maintenance requests'
            });
        }

        // Get maintenance requests for the user's current booking
        const [requests, total] = await Promise.all([
            Maintenance.find({
                guest: req.user._id,
                hotel: activeBooking.hotel._id,
                'location.room': activeBooking.room._id
            })
                .sort('-createdAt')
                .skip(skip)
                .limit(limit)
                .populate('hotel', 'name')
                .populate('location.room', 'number')
                .select('-assignedTo'),
            Maintenance.countDocuments({
                guest: req.user._id,
                hotel: activeBooking.hotel._id,
                'location.room': activeBooking.room._id
            })
        ]);

        // Calculate pagination
        const totalPages = Math.ceil(total / limit);

        res.json({
            success: true,
            data: {
                requests,
                pagination: {
                    page,
                    totalPages,
                    total,
                    hasNext: page < totalPages,
                    hasPrev: page > 1
                }
            }
        });
    } catch (error) {
        console.error('Error fetching maintenance requests:', error);
        res.status(500).json({
            success: false,
            message: 'Error fetching maintenance requests'
        });
    }
});

// Create maintenance request
router.post('/request', protect, async (req, res) => {
    try {
        // Check if user is checked in
        const activeBooking = await Booking.findOne({
            user: req.user._id,
            status: 'checked-in'
        }).populate('hotel room');

        if (!activeBooking) {
            return res.status(403).json({
                success: false,
                message: 'You must be checked in to create maintenance requests'
            });
        }

        // Create maintenance request
        const request = await Maintenance.create({
            requestType: req.body.requestType || 'maintenance',
            serviceType: req.body.serviceType || 'guest-request',
            description: req.body.description,
            priority: req.body.priority || 'medium',
            status: 'pending',
            hotel: activeBooking.hotel._id,
            location: {
                room: activeBooking.room._id,
                description: `Room ${activeBooking.room.number}`
            },
            guest: req.user._id,
            requestedBy: req.user._id
        });

        // Populate necessary fields
        await request.populate([
            { path: 'hotel', select: 'name' },
            { path: 'location.room', select: 'number' }
        ]);

        res.status(201).json({
            success: true,
            data: request
        });
    } catch (error) {
        console.error('Error creating maintenance request:', error);
        res.status(500).json({
            success: false,
            message: error.message || 'Error creating maintenance request'
        });
    }
});

// Get request details
router.get('/request/:id', protect, async (req, res) => {
    try {
        const request = await Maintenance.findOne({
            _id: req.params.id,
            guest: req.user._id
        })
            .populate('hotel', 'name')
            .populate('location.room', 'number')
            .select('-assignedTo');

        if (!request) {
            return res.status(404).json({
                success: false,
                message: 'Maintenance request not found'
            });
        }

        res.json({
            success: true,
            data: request
        });
    } catch (error) {
        console.error('Error fetching maintenance request:', error);
        res.status(500).json({
            success: false,
            message: 'Error fetching maintenance request'
        });
    }
});

// Cancel request
router.patch('/request/:id/cancel', protect, async (req, res) => {
    try {
        const request = await Maintenance.findOne({
            _id: req.params.id,
            guest: req.user._id,
            status: 'pending' // Can only cancel pending requests
        });

        if (!request) {
            return res.status(404).json({
                success: false,
                message: 'Maintenance request not found or cannot be cancelled'
            });
        }

        request.status = 'cancelled';
        await request.save();

        res.json({
            success: true,
            data: request
        });
    } catch (error) {
        console.error('Error cancelling maintenance request:', error);
        res.status(500).json({
            success: false,
            message: 'Error cancelling maintenance request'
        });
    }
});

// Admin maintenance dashboard
router.get('/admin/maintenance', protect, async (req, res) => {
    try {
        // Get query parameters for filtering
        const { type, serviceType, status, priority, hotel, page = 1 } = req.query;
        const limit = 10;
        const skip = (page - 1) * limit;

        // Build filter object
        const filter = {};
        if (type) filter.type = type;
        if (serviceType) filter.serviceType = serviceType;
        if (status) filter.status = status;
        if (priority) filter.priority = priority;
        if (hotel) filter.hotel = hotel;

        // Get maintenance statistics
        const stats = await Promise.all([
            Maintenance.countDocuments({ ...filter, status: 'pending' }),
            Maintenance.countDocuments({ ...filter, status: 'in-progress' }),
            Maintenance.countDocuments({ ...filter, status: 'completed' }),
            Maintenance.countDocuments(filter)
        ]);

        // Calculate trend data for the last 7 days
        const today = new Date();
        today.setHours(23, 59, 59, 999);
        const last7Days = Array.from({ length: 7 }, (_, i) => {
            const date = new Date(today);
            date.setDate(date.getDate() - i);
            return date;
        }).reverse();

        const trendData = await Promise.all(
            last7Days.map(async (date) => {
                const nextDay = new Date(date);
                nextDay.setDate(date.getDate() + 1);
                
                const [pending, inProgress, completed] = await Promise.all([
                    Maintenance.countDocuments({
                        ...filter,
                        status: 'pending',
                        createdAt: { $lt: nextDay, $gte: date }
                    }),
                    Maintenance.countDocuments({
                        ...filter,
                        status: 'in-progress',
                        createdAt: { $lt: nextDay, $gte: date }
                    }),
                    Maintenance.countDocuments({
                        ...filter,
                        status: 'completed',
                        createdAt: { $lt: nextDay, $gte: date }
                    })
                ]);

                return {
                    date: date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' }),
                    pending,
                    inProgress,
                    completed
                };
            })
        );

        // Get maintenance requests with pagination
        const [requests, total, hotels] = await Promise.all([
            Maintenance.find(filter)
                .sort('-createdAt')
                .skip(skip)
                .limit(limit)
                .populate('hotel', 'name')
                .populate('location.room', 'number')
                .populate('guest', 'name email')
                .populate('assignedTo', 'name'),
            Maintenance.countDocuments(filter),
            Hotel.find().select('name').sort('name')
        ]);

        // Calculate pagination
        const totalPages = Math.ceil(total / limit);
        const pagination = {
            page: parseInt(page),
            totalPages,
            hasPrev: page > 1,
            hasNext: page < totalPages
        };

        res.render('admin/maintenance/list', {
            title: 'Maintenance Requests',
            requests,
            hotels,
            pagination,
            query: req.query,
            stats: {
                pending: stats[0],
                inProgress: stats[1],
                completed: stats[2],
                total: stats[3]
            },
            trendData: JSON.stringify(trendData),
            layout: 'admin'
        });
    } catch (error) {
        console.error('Error loading maintenance dashboard:', error);
        res.status(500).send('Error loading maintenance dashboard');
    }
});

module.exports = router;

================
File: src/routes/marketing.routes.js
================
const express = require('express');
const router = express.Router();
const { protect, authorize } = require('../middlewares/auth.middleware');
const Promotion = require('../models/Promotion');
const EmailCampaign = require('../models/EmailCampaign');
const User = require('../models/User');
const LoyaltyProgram = require('../models/LoyaltyProgram');
const Referral = require('../models/Referral');
const emailService = require('../services/email.service');

// Get all promotions
router.get('/promotions', protect, authorize('admin', 'marketing'), async (req, res) => {
    try {
        const promotions = await Promotion.find()
            .sort({ startDate: -1 });

        res.render('admin/marketing/promotions', {
            title: 'Promotions',
            active: 'marketing',
            promotions
        });
    } catch (error) {
        console.error('Error fetching promotions:', error);
        res.status(500).render('error', { message: 'Error fetching promotions' });
    }
});

// Create new promotion
router.post('/promotions', protect, authorize('admin', 'marketing'), async (req, res) => {
    try {
        const {
            name,
            code,
            type,
            value,
            minBookingAmount,
            maxDiscount,
            startDate,
            endDate,
            description,
            terms,
            applicableRoomTypes,
            userType
        } = req.body;

        const promotion = await Promotion.create({
            name,
            code,
            type,
            value,
            minBookingAmount,
            maxDiscount,
            startDate,
            endDate,
            description,
            terms,
            applicableRoomTypes,
            userType,
            createdBy: req.user._id
        });

        res.status(201).json({
            success: true,
            data: promotion
        });
    } catch (error) {
        console.error('Error creating promotion:', error);
        res.status(500).json({
            success: false,
            message: 'Error creating promotion'
        });
    }
});

// Email Campaigns
router.get('/campaigns', protect, authorize('admin', 'marketing'), async (req, res) => {
    try {
        const campaigns = await EmailCampaign.find()
            .sort({ createdAt: -1 });

        res.render('admin/marketing/campaigns', {
            title: 'Email Campaigns',
            active: 'marketing',
            campaigns
        });
    } catch (error) {
        console.error('Error fetching campaigns:', error);
        res.status(500).render('error', { message: 'Error fetching campaigns' });
    }
});

// Create new email campaign
router.post('/campaigns', protect, authorize('admin', 'marketing'), async (req, res) => {
    try {
        const {
            name,
            subject,
            template,
            targetAudience,
            scheduledDate,
            content
        } = req.body;

        // Create campaign
        const campaign = await EmailCampaign.create({
            name,
            subject,
            template,
            targetAudience,
            scheduledDate,
            content,
            status: 'scheduled',
            createdBy: req.user._id
        });

        // If campaign is scheduled for immediate sending
        if (!scheduledDate || new Date(scheduledDate) <= new Date()) {
            // Get target recipients based on audience
            let recipients = [];
            switch (targetAudience) {
                case 'all_guests':
                    recipients = await User.find({ role: 'guest' }).select('email');
                    break;
                case 'loyalty_members':
                    recipients = await User.find({ 
                        role: 'guest',
                        isLoyaltyMember: true 
                    }).select('email');
                    break;
                case 'recent_guests':
                    const thirtyDaysAgo = new Date();
                    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
                    recipients = await User.find({
                        role: 'guest',
                        lastStayDate: { $gte: thirtyDaysAgo }
                    }).select('email');
                    break;
            }

            // Send emails
            for (const recipient of recipients) {
                await emailService.sendMarketingEmail(
                    recipient.email,
                    subject,
                    template,
                    content
                );
            }

            // Update campaign status
            campaign.status = 'sent';
            campaign.sentAt = new Date();
            campaign.recipientCount = recipients.length;
            await campaign.save();
        }

        res.status(201).json({
            success: true,
            data: campaign
        });
    } catch (error) {
        console.error('Error creating campaign:', error);
        res.status(500).json({
            success: false,
            message: 'Error creating campaign'
        });
    }
});

// Get marketing dashboard stats
router.get('/stats', protect, authorize('admin', 'marketing'), async (req, res) => {
    try {
        const today = new Date();
        const thirtyDaysAgo = new Date(today);
        thirtyDaysAgo.setDate(today.getDate() - 30);

        const [
            activePromotions,
            totalCampaigns,
            recentCampaignStats,
            promotionUsage
        ] = await Promise.all([
            Promotion.countDocuments({
                startDate: { $lte: today },
                endDate: { $gte: today }
            }),
            EmailCampaign.countDocuments(),
            EmailCampaign.aggregate([
                {
                    $match: {
                        sentAt: { $gte: thirtyDaysAgo }
                    }
                },
                {
                    $group: {
                        _id: null,
                        totalSent: { $sum: '$recipientCount' },
                        totalOpened: { $sum: '$openCount' },
                        totalClicked: { $sum: '$clickCount' }
                    }
                }
            ]),
            Promotion.aggregate([
                {
                    $match: {
                        'redemptions.date': { $gte: thirtyDaysAgo }
                    }
                },
                {
                    $group: {
                        _id: null,
                        totalRedemptions: { $sum: { $size: '$redemptions' } },
                        totalDiscount: { $sum: '$totalDiscountAmount' }
                    }
                }
            ])
        ]);

        res.json({
            success: true,
            data: {
                activePromotions,
                totalCampaigns,
                recentCampaignStats: recentCampaignStats[0] || {
                    totalSent: 0,
                    totalOpened: 0,
                    totalClicked: 0
                },
                promotionUsage: promotionUsage[0] || {
                    totalRedemptions: 0,
                    totalDiscount: 0
                }
            }
        });
    } catch (error) {
        console.error('Error fetching marketing stats:', error);
        res.status(500).json({
            success: false,
            message: 'Error fetching marketing stats'
        });
    }
});

module.exports = router;

================
File: src/routes/notifications.routes.js
================
const express = require('express');
const router = express.Router();
const { protect, authorize } = require('../middlewares/auth.middleware');
const Notification = require('../models/Notification');
const User = require('../models/User');
const LoyaltyProgram = require('../models/LoyaltyProgram');

// Get user's notifications
router.get('/', protect, async (req, res) => {
    try {
        const notifications = await Notification.find({
            $or: [
                { recipients: req.user.role },
                { recipients: req.user._id }
            ],
            createdAt: { 
                $gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) // Last 30 days
            }
        })
        .sort('-createdAt')
        .limit(50);

        res.json({
            success: true,
            data: notifications
        });
    } catch (error) {
        console.error('Error fetching notifications:', error);
        res.status(500).json({
            success: false,
            message: 'Error fetching notifications'
        });
    }
});

// Mark notification as read
router.put('/:id/read', protect, async (req, res) => {
    try {
        const notification = await Notification.findByIdAndUpdate(
            req.params.id,
            {
                $addToSet: { readBy: req.user._id }
            },
            { new: true }
        );

        res.json({
            success: true,
            data: notification
        });
    } catch (error) {
        console.error('Error marking notification as read:', error);
        res.status(500).json({
            success: false,
            message: 'Error marking notification as read'
        });
    }
});

// Mark all notifications as read
router.put('/read-all', protect, async (req, res) => {
    try {
        await Notification.updateMany(
            {
                $or: [
                    { recipients: req.user.role },
                    { recipients: req.user._id }
                ],
                readBy: { $ne: req.user._id }
            },
            {
                $addToSet: { readBy: req.user._id }
            }
        );

        res.json({
            success: true,
            message: 'All notifications marked as read'
        });
    } catch (error) {
        console.error('Error marking all notifications as read:', error);
        res.status(500).json({
            success: false,
            message: 'Error marking all notifications as read'
        });
    }
});

// Get notification preferences
router.get('/preferences', protect, async (req, res) => {
    try {
        const user = await User.findById(req.user._id)
            .select('notificationPreferences');

        res.json({
            success: true,
            data: user.notificationPreferences
        });
    } catch (error) {
        console.error('Error fetching notification preferences:', error);
        res.status(500).json({
            success: false,
            message: 'Error fetching notification preferences'
        });
    }
});

// Update notification preferences
router.put('/preferences', protect, async (req, res) => {
    try {
        const { preferences } = req.body;
        const user = await User.findByIdAndUpdate(
            req.user._id,
            {
                notificationPreferences: preferences
            },
            { new: true }
        ).select('notificationPreferences');

        res.json({
            success: true,
            data: user.notificationPreferences
        });
    } catch (error) {
        console.error('Error updating notification preferences:', error);
        res.status(500).json({
            success: false,
            message: 'Error updating notification preferences'
        });
    }
});

// Get unread notification count
router.get('/unread-count', protect, async (req, res) => {
    try {
        const count = await Notification.countDocuments({
            $or: [
                { recipients: req.user.role },
                { recipients: req.user._id }
            ],
            readBy: { $ne: req.user._id },
            createdAt: { 
                $gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) // Last 30 days
            }
        });

        res.json({
            success: true,
            data: { count }
        });
    } catch (error) {
        console.error('Error fetching unread notification count:', error);
        res.status(500).json({
            success: false,
            message: 'Error fetching unread notification count'
        });
    }
});

// Delete notification (admin only)
router.delete('/:id', protect, authorize('admin'), async (req, res) => {
    try {
        await Notification.findByIdAndDelete(req.params.id);

        res.json({
            success: true,
            message: 'Notification deleted successfully'
        });
    } catch (error) {
        console.error('Error deleting notification:', error);
        res.status(500).json({
            success: false,
            message: 'Error deleting notification'
        });
    }
});

module.exports = router;

================
File: src/routes/ota.routes.js
================
const express = require('express');
const router = express.Router();
const { protect, authorize } = require('../middlewares/auth.middleware');
const otaController = require('../controllers/ota.controller');

// OTA Channel Management Routes
router.get('/channels', protect, authorize('admin', 'manager'), otaController.listChannels);
router.post('/channels', protect, authorize('admin', 'manager'), otaController.createChannel);
router.put('/channels/:id', protect, authorize('admin', 'manager'), otaController.updateChannel);
router.delete('/channels/:id', protect, authorize('admin', 'manager'), otaController.deleteChannel);

// OTA Channel Operations
router.post('/channels/:id/sync', protect, authorize('admin', 'manager'), otaController.syncChannel);
router.get('/channels/:id/logs', protect, authorize('admin', 'manager'), otaController.getChannelLogs);
router.get('/channels/:id/stats', protect, authorize('admin', 'manager'), otaController.getChannelStats);

// Get OTA bookings
router.get('/bookings', protect, authorize('admin', 'manager'), async (req, res) => {
    try {
        const { status, channel, startDate, endDate } = req.query;
        const query = { hotel: req.hotel._id };

        if (status) query.status = status;
        if (channel) query.channel = channel;
        if (startDate || endDate) {
            query['bookingDetails.checkIn'] = {};
            if (startDate) query['bookingDetails.checkIn'].$gte = new Date(startDate);
            if (endDate) query['bookingDetails.checkIn'].$lte = new Date(endDate);
        }

        const bookings = await OTABooking.find(query)
            .populate('channel', 'name')
            .populate('localBooking', 'status')
            .sort('-createdAt');

        res.json({ success: true, data: bookings });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

// Webhook endpoint for OTA notifications
router.post('/webhook/:channelId', async (req, res) => {
    try {
        const channel = await OTAChannel.findById(req.params.channelId);
        if (!channel) {
            return res.status(404).json({ success: false, error: 'Channel not found' });
        }

        // Verify webhook signature
        // Implementation varies by OTA
        
        const otaService = await OTAService.getChannelInstance(channel._id);
        await otaService.handleOTABooking(req.body);

        res.json({ success: true, message: 'Webhook processed successfully' });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

// Get OTA booking statistics
router.get('/statistics', protect, authorize('admin', 'manager'), async (req, res) => {
    try {
        const { startDate, endDate } = req.query;
        const query = { hotel: req.hotel._id };

        if (startDate || endDate) {
            query.createdAt = {};
            if (startDate) query.createdAt.$gte = new Date(startDate);
            if (endDate) query.createdAt.$lte = new Date(endDate);
        }

        const stats = await OTABooking.aggregate([
            { $match: query },
            { $group: {
                _id: '$channel',
                totalBookings: { $sum: 1 },
                confirmedBookings: {
                    $sum: { $cond: [{ $eq: ['$status', 'confirmed'] }, 1, 0] }
                },
                cancelledBookings: {
                    $sum: { $cond: [{ $eq: ['$status', 'cancelled'] }, 1, 0] }
                },
                totalRevenue: {
                    $sum: { $cond: [{ $eq: ['$status', 'confirmed'] }, '$bookingDetails.otaPrice', 0] }
                }
            }},
            { $lookup: {
                from: 'otachannels',
                localField: '_id',
                foreignField: '_id',
                as: 'channelInfo'
            }},
            { $unwind: '$channelInfo' },
            { $project: {
                channelName: '$channelInfo.name',
                totalBookings: 1,
                confirmedBookings: 1,
                cancelledBookings: 1,
                totalRevenue: 1,
                conversionRate: {
                    $multiply: [
                        { $divide: ['$confirmedBookings', '$totalBookings'] },
                        100
                    ]
                }
            }}
        ]);

        res.json({ success: true, data: stats });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

module.exports = router;

================
File: src/routes/redemption.routes.js
================
const express = require('express');
const router = express.Router();
const { protect } = require('../middleware/auth');
const redemptionController = require('../controllers/redemption.controller');

// Redemption routes
router.post('/redeem', protect, redemptionController.redeemReward);
router.get('/list', protect, redemptionController.getMemberRedemptions);
router.get('/stats', protect, redemptionController.getRedemptionStats);
router.get('/:id', protect, redemptionController.getRedemptionDetails);
router.post('/:id/rate', protect, redemptionController.addRatingAndFeedback);
router.post('/:id/cancel', protect, redemptionController.cancelRedemption);

module.exports = router;

================
File: src/routes/referral.routes.js
================
const express = require('express');
const router = express.Router();
const { protect, authorize } = require('../middleware/auth');
const referralController = require('../controllers/referral.controller');

// Member routes
router.post('/generate', protect, referralController.generateReferralCode);
router.post('/apply', protect, referralController.applyReferralCode);
router.get('/list', protect, referralController.getUserReferrals);

// Admin routes
router.get('/stats', protect, authorize('admin'), referralController.getReferralStats);
router.post('/process-expired', protect, authorize('admin'), referralController.processExpiredReferrals);

module.exports = router;

================
File: src/routes/reviews.routes.js
================
const express = require('express');
const router = express.Router();
const { protect, authorize } = require('../middlewares/auth.middleware');
const Review = require('../models/Review');
const Booking = require('../models/Booking');
const Notification = require('../models/Notification');
const LoyaltyProgram = require('../models/LoyaltyProgram');
const User = require('../models/User');

// Get all reviews (admin view)
router.get('/admin', protect, authorize('admin'), async (req, res) => {
    try {
        const { status, rating, sort = '-createdAt' } = req.query;
        const query = {};
        
        if (status) query.status = status;
        if (rating) query.rating = rating;

        const reviews = await Review.find(query)
            .populate('booking', 'roomNumber checkInDate checkOutDate')
            .populate('guest', 'name email')
            .sort(sort);

        // Get review statistics
        const stats = await Review.aggregate([
            {
                $group: {
                    _id: null,
                    averageRating: { $avg: '$rating' },
                    totalReviews: { $sum: 1 },
                    ratings: {
                        $push: '$rating'
                    }
                }
            }
        ]);

        // Calculate rating distribution
        const ratingDistribution = stats.length > 0 ? {
            5: stats[0].ratings.filter(r => r === 5).length,
            4: stats[0].ratings.filter(r => r === 4).length,
            3: stats[0].ratings.filter(r => r === 3).length,
            2: stats[0].ratings.filter(r => r === 2).length,
            1: stats[0].ratings.filter(r => r === 1).length
        } : {};

        res.render('admin/reviews', {
            title: 'Guest Reviews',
            active: 'reviews',
            reviews,
            stats: stats[0] || {},
            ratingDistribution
        });
    } catch (error) {
        console.error('Error fetching reviews:', error);
        res.status(500).render('error', { message: 'Error fetching reviews' });
    }
});

// Submit a review (guest)
router.post('/', protect, async (req, res) => {
    try {
        const { bookingId, rating, cleanliness, comfort, service, location, comment } = req.body;

        // Verify booking belongs to user
        const booking = await Booking.findOne({
            _id: bookingId,
            guest: req.user._id,
            status: 'completed'
        });

        if (!booking) {
            return res.status(404).json({
                success: false,
                message: 'Booking not found or not eligible for review'
            });
        }

        // Check if review already exists
        const existingReview = await Review.findOne({ booking: bookingId });
        if (existingReview) {
            return res.status(400).json({
                success: false,
                message: 'Review already submitted for this booking'
            });
        }

        // Create review
        const review = await Review.create({
            booking: bookingId,
            guest: req.user._id,
            rating,
            categories: {
                cleanliness,
                comfort,
                service,
                location
            },
            comment,
            status: 'pending'
        });

        // Create notification for admin
        await Notification.create({
            type: 'NEW_REVIEW',
            title: 'New Review Submitted',
            message: `New ${rating}-star review submitted for booking #${booking.bookingNumber}`,
            priority: rating <= 3 ? 'high' : 'normal',
            recipients: ['admin'],
            relatedModel: 'Review',
            relatedId: review._id
        });

        res.status(201).json({
            success: true,
            data: review
        });
    } catch (error) {
        console.error('Error submitting review:', error);
        res.status(500).json({
            success: false,
            message: 'Error submitting review'
        });
    }
});

// Respond to review (admin)
router.post('/:id/respond', protect, authorize('admin'), async (req, res) => {
    try {
        const { response } = req.body;
        const review = await Review.findByIdAndUpdate(
            req.params.id,
            {
                adminResponse: {
                    text: response,
                    date: new Date(),
                    by: req.user._id
                },
                status: 'responded'
            },
            { new: true }
        );

        // Send notification to guest
        await emailService.sendReviewResponseNotification(
            review.guest.email,
            review.booking.bookingNumber
        );

        res.json({
            success: true,
            data: review
        });
    } catch (error) {
        console.error('Error responding to review:', error);
        res.status(500).json({
            success: false,
            message: 'Error responding to review'
        });
    }
});

// Get review statistics
router.get('/stats', protect, authorize('admin'), async (req, res) => {
    try {
        const [
            overallStats,
            monthlyTrends,
            categoryAverages,
            responseRate
        ] = await Promise.all([
            Review.aggregate([
                {
                    $group: {
                        _id: null,
                        averageRating: { $avg: '$rating' },
                        totalReviews: { $sum: 1 },
                        positiveReviews: {
                            $sum: { $cond: [{ $gte: ['$rating', 4] }, 1, 0] }
                        }
                    }
                }
            ]),
            Review.aggregate([
                {
                    $group: {
                        _id: {
                            year: { $year: '$createdAt' },
                            month: { $month: '$createdAt' }
                        },
                        averageRating: { $avg: '$rating' },
                        count: { $sum: 1 }
                    }
                },
                { $sort: { '_id.year': -1, '_id.month': -1 } },
                { $limit: 12 }
            ]),
            Review.aggregate([
                {
                    $group: {
                        _id: null,
                        avgCleanliness: { $avg: '$categories.cleanliness' },
                        avgComfort: { $avg: '$categories.comfort' },
                        avgService: { $avg: '$categories.service' },
                        avgLocation: { $avg: '$categories.location' }
                    }
                }
            ]),
            Review.aggregate([
                {
                    $group: {
                        _id: null,
                        total: { $sum: 1 },
                        responded: {
                            $sum: { $cond: [{ $eq: ['$status', 'responded'] }, 1, 0] }
                        }
                    }
                }
            ])
        ]);

        res.json({
            success: true,
            data: {
                overall: overallStats[0] || {
                    averageRating: 0,
                    totalReviews: 0,
                    positiveReviews: 0
                },
                monthlyTrends,
                categoryAverages: categoryAverages[0] || {
                    avgCleanliness: 0,
                    avgComfort: 0,
                    avgService: 0,
                    avgLocation: 0
                },
                responseRate: responseRate[0] ? 
                    (responseRate[0].responded / responseRate[0].total) * 100 : 0
            }
        });
    } catch (error) {
        console.error('Error fetching review statistics:', error);
        res.status(500).json({
            success: false,
            message: 'Error fetching review statistics'
        });
    }
});

module.exports = router;

================
File: src/routes/tier.routes.js
================
const express = require('express');
const router = express.Router();
const { protect, authorize } = require('../middleware/auth');
const adminTierController = require('../controllers/admin.tier.controller');

// Admin routes for tier management
router.get('/', protect, authorize('admin'), adminTierController.getTiers);
router.post('/', protect, authorize('admin'), adminTierController.createTier);
router.put('/:id', protect, authorize('admin'), adminTierController.updateTier);
router.post('/:id/toggle', protect, authorize('admin'), adminTierController.toggleTier);
router.get('/stats', protect, authorize('admin'), adminTierController.getTierStats);
router.post('/process-upgrades', protect, authorize('admin'), adminTierController.processTierUpgrades);

module.exports = router;

================
File: src/routes/user.routes.js
================
const express = require('express');
const router = express.Router();
const userController = require('../controllers/user.controller');
const { protect, authorize } = require('../middlewares/auth.middleware');

router.use(protect); // Protect all routes

/**
 * @swagger
 * /api/users:
 *   get:
 *     summary: Get all users (Admin only)
 *     tags: [Users]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: List of all users
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 type: object
 *                 properties:
 *                   _id:
 *                     type: string
 *                   name:
 *                     type: string
 *                   email:
 *                     type: string
 *                   role:
 *                     type: string
 *       401:
 *         description: Not authenticated
 *       403:
 *         description: Not authorized
 */
router.route('/')
    .get(authorize('admin'), userController.getAllUsers);

/**
 * @swagger
 * /api/users/me:
 *   get:
 *     summary: Get current authenticated user
 *     tags: [Users]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Current user retrieved successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 message:
 *                   type: string
 *                   example: Current user retrieved successfully
 *                 data:
 *                   type: object
 *                   properties:
 *                     _id:
 *                       type: string
 *                       example: 5f7d3a2e9d3e2a1b3c4d5e6f
 *                     name:
 *                       type: string
 *                       example: John Doe
 *                     email:
 *                       type: string
 *                       example: john@example.com
 *                     role:
 *                       type: string
 *                       enum: [user, admin]
 *                       example: user
 *                     googleId:
 *                       type: string
 *                       example: 123456789
 *                     isEmailVerified:
 *                       type: boolean
 *                       example: true
 *                     createdAt:
 *                       type: string
 *                       format: date-time
 *                     updatedAt:
 *                       type: string
 *                       format: date-time
 *       401:
 *         description: Not authenticated
 *       404:
 *         description: User not found
 */
router.get('/me', protect, userController.getCurrentUser);

/**
 * @swagger
 * /api/users/{id}:
 *   get:
 *     summary: Get user by ID
 *     tags: [Users]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: User ID
 *     responses:
 *       200:
 *         description: User details
 *       404:
 *         description: User not found
 *   put:
 *     summary: Update user
 *     tags: [Users]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: User ID
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               name:
 *                 type: string
 *               email:
 *                 type: string
 *                 format: email
 *     responses:
 *       200:
 *         description: User updated successfully
 *       404:
 *         description: User not found
 */
router.route('/:id')
    .get(userController.getUserById)
    .put(userController.updateUser);

/**
 * @swagger
 * /api/users/{id}/approve-admin:
 *   post:
 *     summary: Approve a user as admin
 *     tags: [Users]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: ID of the user to be approved as admin
 *     responses:
 *       200:
 *         description: User has been approved as admin successfully
 *       400:
 *         description: User is already an admin
 *       404:
 *         description: User not found
 */
router.post('/:id/approve-admin', protect, userController.approveAdmin);

module.exports = router;

================
File: src/routes/view.routes.js
================
const express = require('express');
const router = express.Router();
const jwt = require('jsonwebtoken');
const User = require('../models/User');
const Hotel = require('../models/Hotel');
const Room = require('../models/Room');
const Booking = require('../models/Booking');
const LoyaltyProgram = require('../models/LoyaltyProgram');
const Reward = require('../models/Reward');
const Referral = require('../models/Referral');
const { protect, authorize } = require('../middlewares/auth.middleware');

// Middleware to check if user is logged in for templates
const checkAuth = async (req, res, next) => {
    try {
        const token = req.cookies.token || req.headers.authorization?.split(' ')[1];
        
        if (token) {
            const decoded = jwt.verify(token, process.env.JWT_SECRET);
            const user = await User.findById(decoded.id).select('-password');
            if (user) {
                res.locals.user = user;
            }
        }
    } catch (error) {
        console.error('Auth check error:', error);
    }
    next();
};

// Middleware to redirect if already logged in
const redirectIfAuthenticated = async (req, res, next) => {
    try {
        const token = req.cookies.token || req.headers.authorization?.split(' ')[1];
        
        if (token) {
            const decoded = jwt.verify(token, process.env.JWT_SECRET);
            const user = await User.findById(decoded.id).select('-password');
            if (user) {
                if (user.role === 'admin') {
                    return res.redirect('/admin/dashboard');
                }
                return res.redirect('/');
            }
        }
        next();
    } catch (error) {
        next();
    }
};

router.use(checkAuth);

// Auth routes
router.get('/login', redirectIfAuthenticated, (req, res) => {
    res.render('auth/login');
});

// Admin dashboard
router.get('/admin/dashboard', protect, authorize('admin'), (req, res) => {
    res.render('admin/dashboard');
});

// Admin hotel management
router.get('/admin/hotels', protect, authorize('admin'), async (req, res) => {
    try {
        const hotels = await Hotel.find()
            .populate({
                path: 'owner',
                select: 'name email'
            })
            .lean();
            
        res.render('hotels/list', { 
            hotels,
            title: 'Manage Hotels',
            user: req.user,
            isAdmin: true
        });
    } catch (error) {
        console.error('Error fetching hotels:', error);
        res.render('error', { 
            title: 'Error',
            message: 'Unable to fetch hotels',
            error: error,
            user: req.user
        });
    }
});

// Add hotel page (admin only)
router.get('/admin/hotels/add', protect, authorize('admin'), (req, res) => {
    res.render('hotels/add', {
        title: 'Add New Hotel',
        user: req.user
    });
});

// View hotel details
router.get('/admin/hotels/:id', protect, authorize('admin'), async (req, res) => {
    try {
        const hotel = await Hotel.findById(req.params.id)
            .populate({
                path: 'owner',
                select: 'name email'
            })
            .lean();

        if (!hotel) {
            return res.render('error', {
                title: 'Error',
                message: 'Hotel not found',
                user: req.user
            });
        }

        res.render('hotels/view', {
            title: hotel.name,
            hotel,
            user: req.user
        });
    } catch (error) {
        console.error('Error fetching hotel:', error);
        res.render('error', {
            title: 'Error',
            message: 'Unable to fetch hotel details',
            error: error,
            user: req.user
        });
    }
});

// Edit hotel page
router.get('/admin/hotels/:id/edit', protect, authorize('admin'), async (req, res) => {
    try {
        const hotel = await Hotel.findById(req.params.id)
            .populate({
                path: 'owner',
                select: 'name email'
            })
            .lean();

        if (!hotel) {
            return res.render('error', {
                title: 'Error',
                message: 'Hotel not found',
                user: req.user
            });
        }

        res.render('hotels/edit', {
            title: `Edit ${hotel.name}`,
            hotel,
            user: req.user
        });
    } catch (error) {
        console.error('Error fetching hotel:', error);
        res.render('error', {
            title: 'Error',
            message: 'Unable to fetch hotel for editing',
            error: error,
            user: req.user
        });
    }
});

// Admin User Management Routes
router.get('/admin/users', protect, authorize('admin'), async (req, res) => {
    try {
        const page = parseInt(req.query.page) || 1;
        const limit = parseInt(req.query.limit) || 10;
        const search = req.query.search || '';
        const role = req.query.role;
        const status = req.query.status;

        // Build query
        let query = {};
        if (search) {
            query.$or = [
                { name: { $regex: search, $options: 'i' } },
                { email: { $regex: search, $options: 'i' } }
            ];
        }
        if (role === 'admin') query.isAdmin = true;
        if (role === 'user') query.isAdmin = false;
        if (status === 'active') query.isActive = true;
        if (status === 'inactive') query.isActive = false;

        const total = await User.countDocuments(query);
        const users = await User.find(query)
            .sort({ createdAt: -1 })
            .skip((page - 1) * limit)
            .limit(limit);

        // Calculate pagination
        const totalPages = Math.ceil(total / limit);
        const pagination = {
            page,
            limit,
            total,
            pages: Array.from({ length: totalPages }, (_, i) => ({
                page: i + 1,
                isCurrent: i + 1 === page
            })),
            hasPrevPage: page > 1,
            hasNextPage: page < totalPages,
            prevPage: page - 1,
            nextPage: page + 1
        };

        res.render('admin/users', {
            users,
            pagination,
            search,
            role,
            status
        });
    } catch (error) {
        console.error('Error fetching users:', error);
        res.render('error', { message: 'Error fetching users' });
    }
});

router.get('/admin/users/:id', protect, authorize('admin'), async (req, res) => {
    try {
        const user = await User.findById(req.params.id);
        if (!user) {
            return res.render('error', { message: 'User not found' });
        }

        // Get user's statistics
        const [hotels, bookings, reviews] = await Promise.all([
            Hotel.find({ owner: user._id }),
            Booking.find({ user: user._id })
                .sort({ createdAt: -1 })
                .limit(5)
                .populate('hotel', 'name'),
            Review.countDocuments({ user: user._id })
        ]);

        const userData = {
            ...user.toObject(),
            hotels,
            recentBookings: bookings,
            hotelCount: hotels.length,
            bookingCount: await Booking.countDocuments({ user: user._id }),
            reviewCount: reviews
        };

        res.render('admin/user-details', { user: userData });
    } catch (error) {
        console.error('Error fetching user details:', error);
        res.render('error', { message: 'Error fetching user details' });
    }
});

// Booking routes
router.get('/bookings/create/:hotelId/:roomId', protect, async (req, res) => {
    try {
        const hotel = await Hotel.findById(req.params.hotelId);
        const room = await Room.findById(req.params.roomId);
        
        if (!hotel || !room) {
            return res.status(404).render('error', {
                message: 'Hotel or room not found'
            });
        }

        res.render('bookings/create', {
            hotel,
            room,
            today: new Date().toISOString().split('T')[0]
        });
    } catch (error) {
        res.status(500).render('error', {
            message: 'Error loading booking page'
        });
    }
});

router.get('/bookings', protect, async (req, res) => {
    try {
        const page = parseInt(req.query.page) || 1;
        const limit = 10;
        const status = req.query.status;

        const query = { user: req.user._id };
        if (status) {
            query.status = status;
        }

        const bookings = await Booking.find(query)
            .populate('hotel')
            .populate('room')
            .sort({ createdAt: -1 })
            .skip((page - 1) * limit)
            .limit(limit);

        const total = await Booking.countDocuments(query);
        const pages = Math.ceil(total / limit);

        const pagination = {
            pages: Array.from({ length: pages }, (_, i) => ({
                page: i + 1,
                isCurrent: i + 1 === page
            })),
            prevPage: page > 1 ? page - 1 : null,
            nextPage: page < pages ? page + 1 : null,
            hasPrevPage: page > 1,
            hasNextPage: page < pages
        };

        res.render('bookings/list', {
            bookings,
            pagination,
            status
        });
    } catch (error) {
        res.status(500).render('error', {
            message: 'Error loading bookings'
        });
    }
});

router.get('/bookings/:id', protect, async (req, res) => {
    try {
        const booking = await Booking.findById(req.params.id)
            .populate('hotel')
            .populate('room');

        if (!booking) {
            return res.status(404).render('error', {
                message: 'Booking not found'
            });
        }

        // Check if user owns the booking or is admin
        if (!booking.user.equals(req.user._id) && !req.user.isAdmin) {
            return res.status(403).render('error', {
                message: 'Not authorized to view this booking'
            });
        }

        // Calculate number of nights
        const checkIn = new Date(booking.checkIn);
        const checkOut = new Date(booking.checkOut);
        booking.numberOfNights = Math.ceil((checkOut - checkIn) / (1000 * 60 * 60 * 24));

        res.render('bookings/details', { booking });
    } catch (error) {
        res.status(500).render('error', {
            message: 'Error loading booking details'
        });
    }
});

// Home page
router.get('/', (req, res) => {
    res.render('home');
});

module.exports = router;

================
File: src/scripts/create-admin.js
================
require('dotenv').config();
const mongoose = require('mongoose');
const authService = require('../services/auth.service');

async function createAdmin() {
    try {
        await mongoose.connect(process.env.MONGODB_URI);
        console.log('Connected to MongoDB');

        const admin = await authService.createAdmin();
        console.log('Admin user created:', admin);

        process.exit(0);
    } catch (error) {
        console.error('Error creating admin:', error);
        process.exit(1);
    }
}

createAdmin();

================
File: src/scripts/create-hotels.js
================
const mongoose = require('mongoose');
const Hotel = require('../models/Hotel');
require('dotenv').config();

const hotels = [
    {
        name: "Pentouz Lavel Road",
        description: "Located in the heart of the city, Pentouz Lavel Road offers luxury accommodations with modern amenities.",
        address: "123 Lavel Road, City Center",
        city: "Bangalore",
        state: "Karnataka",
        pincode: "560001",
        email: "lavelroad@pentouz.com",
        phone: "+91 80 4567 8901",
        amenities: ["WiFi", "Pool", "Spa", "Restaurant", "Gym", "Parking", "Room Service"],
        status: "operational",
        rooms: Array(12).fill().map((_, index) => ({
            roomNumber: `L${(index + 1).toString().padStart(2, '0')}`,
            roomType: ['standard', 'deluxe', 'suite'][index % 3],
            price: [5000, 7500, 12000][index % 3],
            capacity: [2, 3, 4][index % 3],
            amenities: [
                "WiFi",
                "TV",
                "AC",
                ...(index % 3 === 2 ? ["Minibar", "Safe", "Balcony"] : 
                   index % 3 === 1 ? ["Minibar", "Safe"] : [])
            ],
            status: "available"
        }))
    },
    {
        name: "Pentouz Indiranagar",
        description: "Experience urban luxury at Pentouz Indiranagar, situated in Bangalore's most vibrant neighborhood.",
        address: "456 100ft Road, Indiranagar",
        city: "Bangalore",
        state: "Karnataka",
        pincode: "560038",
        email: "indiranagar@pentouz.com",
        phone: "+91 80 4567 8902",
        amenities: ["WiFi", "Pool", "Restaurant", "Gym", "Parking", "Room Service"],
        status: "operational",
        rooms: Array(12).fill().map((_, index) => ({
            roomNumber: `I${(index + 1).toString().padStart(2, '0')}`,
            roomType: ['standard', 'deluxe', 'suite'][index % 3],
            price: [4500, 7000, 11000][index % 3],
            capacity: [2, 3, 4][index % 3],
            amenities: [
                "WiFi",
                "TV",
                "AC",
                ...(index % 3 === 2 ? ["Minibar", "Safe", "Balcony"] : 
                   index % 3 === 1 ? ["Minibar"] : [])
            ],
            status: "available"
        }))
    },
    {
        name: "Pentouz Ooty",
        description: "A serene mountain retreat offering breathtaking views of the Nilgiri hills.",
        address: "789 Hill View Road",
        city: "Ooty",
        state: "Tamil Nadu",
        pincode: "643001",
        email: "ooty@pentouz.com",
        phone: "+91 423 456 7890",
        amenities: ["WiFi", "Restaurant", "Garden", "Bonfire", "Parking", "Room Service", "Mountain View"],
        status: "operational",
        rooms: Array(12).fill().map((_, index) => ({
            roomNumber: `O${(index + 1).toString().padStart(2, '0')}`,
            roomType: ['standard', 'deluxe', 'suite'][index % 3],
            price: [6000, 8500, 15000][index % 3],
            capacity: [2, 3, 4][index % 3],
            amenities: [
                "WiFi",
                "TV",
                "AC",
                "Mountain View",
                ...(index % 3 === 2 ? ["Minibar", "Safe", "Balcony", "Fireplace"] : 
                   index % 3 === 1 ? ["Minibar", "Safe"] : [])
            ],
            status: "available"
        }))
    }
];

async function createHotels() {
    try {
        // Connect to MongoDB
        await mongoose.connect(process.env.MONGODB_URI);
        console.log('Connected to MongoDB');

        // Delete existing hotels
        await Hotel.deleteMany({});
        console.log('Cleared existing hotels');

        // Create new hotels
        const createdHotels = await Hotel.create(hotels);
        console.log('Created hotels:', createdHotels.map(h => h.name).join(', '));

        console.log('Total rooms created:', createdHotels.reduce((acc, hotel) => acc + hotel.rooms.length, 0));

        await mongoose.disconnect();
        console.log('Disconnected from MongoDB');
    } catch (error) {
        console.error('Error:', error);
    }
}

createHotels();

================
File: src/scripts/create-test-data.js
================
const mongoose = require('mongoose');
const User = require('../models/User');
const Hotel = require('../models/Hotel');
const Room = require('../models/Room');
const LoyaltyProgram = require('../models/LoyaltyProgram');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

async function createTestData() {
    try {
        await mongoose.connect('mongodb://localhost:27017/hotel-management');
        console.log('Connected to MongoDB');

        // Create test admin user
        const hashedPassword = await bcrypt.hash('admin123', 10);
        let admin = await User.findOne({ email: 'admin@hotel.com' });
        
        if (!admin) {
            admin = await User.create({
                name: 'Admin',
                email: 'admin@hotel.com',
                password: hashedPassword,
                role: 'admin',
                isAdmin: true,
                isActive: true
            });
            console.log('Created new admin user');
        } else {
            console.log('Using existing admin user');
        }

        // Generate token
        const token = jwt.sign(
            { userId: admin._id.toString() },
            process.env.JWT_SECRET || 'your-jwt-secret',
            { expiresIn: '7d' }
        );

        // Update admin's tokens
        if (!admin.tokens) {
            admin.tokens = [];
        }
        admin.tokens = admin.tokens.concat(token);
        await admin.save();

        // Create test hotel
        let hotel = await Hotel.findOne({ name: 'Test Hotel' });
        if (!hotel) {
            hotel = await Hotel.create({
                name: 'Test Hotel',
                description: 'A beautiful test hotel with modern amenities',
                location: {
                    address: '123 Test Street',
                    city: 'Test City',
                    state: 'Test State',
                    country: 'Test Country',
                    zipCode: '12345',
                    coordinates: {
                        latitude: 40.7128,
                        longitude: -74.0060
                    }
                },
                amenities: ['pool', 'spa', 'gym', 'restaurant', 'wifi'],
                rating: {
                    average: 4.5,
                    count: 100
                },
                policies: {
                    checkInTime: '14:00',
                    checkOutTime: '12:00',
                    cancellationDeadline: 24,
                    cancellationFee: 50,
                    petFriendly: true
                },
                loyaltyBenefits: {
                    pointsMultiplier: 1.5,
                    memberDiscounts: [
                        { tier: 'Bronze', discount: 5 },
                        { tier: 'Silver', discount: 10 },
                        { tier: 'Gold', discount: 15 },
                        { tier: 'Platinum', discount: 20 }
                    ],
                    specialPerks: [
                        { tier: 'Bronze', perks: ['Late checkout'] },
                        { tier: 'Silver', perks: ['Late checkout', 'Welcome drink'] },
                        { tier: 'Gold', perks: ['Late checkout', 'Welcome drink', 'Room upgrade'] },
                        { tier: 'Platinum', perks: ['Late checkout', 'Welcome drink', 'Room upgrade', 'Spa access'] }
                    ]
                },
                status: 'active',
                manager: admin._id,
                contacts: {
                    phone: '+1-555-0123',
                    email: 'info@testhotel.com',
                    website: 'www.testhotel.com'
                }
            });
            console.log('Created new test hotel');
        } else {
            console.log('Using existing test hotel');
        }

        // Create test rooms
        let rooms = await Room.find({ hotel: hotel._id });
        if (rooms.length === 0) {
            rooms = await Room.create([
                {
                    number: '101',
                    type: 'standard',
                    hotel: hotel._id,
                    floor: 1,
                    capacity: {
                        adults: 2,
                        children: 1
                    },
                    amenities: ['wifi', 'tv', 'aircon', 'desk'],
                    baseRate: 100,
                    seasonalRates: [
                        {
                            startDate: new Date('2025-06-01'),
                            endDate: new Date('2025-08-31'),
                            rate: 150
                        }
                    ],
                    loyaltyBenefits: {
                        upgradeable: true,
                        pointsMultiplier: 1,
                        tierAccess: [
                            { tier: 'Bronze', discount: 5 },
                            { tier: 'Silver', discount: 10 },
                            { tier: 'Gold', discount: 15 },
                            { tier: 'Platinum', discount: 20 }
                        ]
                    },
                    status: {
                        isAvailable: true,
                        isClean: true
                    },
                    description: 'Comfortable standard room with city view',
                    bedConfiguration: 'queen',
                    view: 'city',
                    size: {
                        squareFeet: 300,
                        squareMeters: 28
                    }
                },
                {
                    number: '201',
                    type: 'deluxe',
                    hotel: hotel._id,
                    floor: 2,
                    capacity: {
                        adults: 2,
                        children: 2
                    },
                    amenities: ['wifi', 'tv', 'minibar', 'safe', 'aircon', 'desk', 'bathtub'],
                    baseRate: 200,
                    seasonalRates: [
                        {
                            startDate: new Date('2025-06-01'),
                            endDate: new Date('2025-08-31'),
                            rate: 250
                        }
                    ],
                    loyaltyBenefits: {
                        upgradeable: true,
                        pointsMultiplier: 1.2,
                        tierAccess: [
                            { tier: 'Bronze', discount: 5 },
                            { tier: 'Silver', discount: 10 },
                            { tier: 'Gold', discount: 15 },
                            { tier: 'Platinum', discount: 20 }
                        ]
                    },
                    status: {
                        isAvailable: true,
                        isClean: true
                    },
                    description: 'Spacious deluxe room with modern amenities',
                    bedConfiguration: 'king',
                    view: 'city',
                    size: {
                        squareFeet: 400,
                        squareMeters: 37
                    }
                }
            ]);
            console.log('Created new test rooms');
        } else {
            console.log('Using existing test rooms');
        }

        // Create test guest
        let guest = await User.findOne({ email: 'guest@test.com' });
        if (!guest) {
            guest = await User.create({
                name: 'Test Guest',
                email: 'guest@test.com',
                password: await bcrypt.hash('guest123', 10),
                role: 'user',
                isActive: true,
                phoneNumber: '987-654-3210'
            });
            console.log('Created new test guest');
        } else {
            console.log('Using existing test guest');
        }

        // Create or update loyalty program for guest
        let loyaltyProgram = await LoyaltyProgram.findOne({ user: guest._id });
        if (!loyaltyProgram) {
            loyaltyProgram = await LoyaltyProgram.create({
                user: guest._id,
                membershipTier: 'Bronze',
                points: 100,
                lifetimePoints: 100,
                pointsHistory: [{
                    points: 100,
                    type: 'earned',
                    source: 'promotion',
                    description: 'Welcome bonus',
                    date: new Date()
                }],
                rewards: [{
                    name: 'Welcome Reward',
                    type: 'late_checkout',
                    pointsCost: 50,
                    expiryDate: new Date('2025-12-31'),
                    status: 'available'
                }],
                preferences: {
                    roomType: 'deluxe',
                    floorPreference: 'high',
                    pillowType: 'soft',
                    newspaper: 'digital',
                    dietaryRestrictions: ['vegetarian'],
                    specialRequests: 'Extra pillows please',
                    communicationPreferences: {
                        email: true,
                        sms: true,
                        promotions: true,
                        newsletter: true
                    }
                },
                milestones: [{
                    type: 'points_earned',
                    description: 'Welcome milestone',
                    rewardPoints: 100,
                    status: 'awarded'
                }]
            });
            console.log('Created new loyalty program');
        } else {
            console.log('Using existing loyalty program');
        }

        // Update guest with loyalty program if needed
        if (!guest.loyaltyProgram) {
            guest.loyaltyProgram = loyaltyProgram._id;
            await guest.save();
            console.log('Updated guest with loyalty program');
        }

        // Update hotel with rooms if needed
        if (!hotel.rooms || hotel.rooms.length === 0) {
            hotel.rooms = rooms.map(room => room._id);
            await hotel.save();
            console.log('Updated hotel with rooms');
        }

        console.log('Test data setup completed successfully');
        console.log('Admin token:', token);
        console.log('Hotel ID:', hotel._id);
        console.log('Room IDs:', rooms.map(room => room._id));
        console.log('Guest ID:', guest._id);
        console.log('Guest Loyalty Program ID:', loyaltyProgram._id);

        await mongoose.disconnect();
        console.log('Disconnected from MongoDB');
    } catch (error) {
        console.error('Error creating test data:', error);
        process.exit(1);
    }
}

createTestData();

================
File: src/scripts/createAdmin.js
================
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const User = require('../models/User');

async function createAdmin() {
    try {
        // Connect to MongoDB
        await mongoose.connect('mongodb://localhost:27017/hotel-management', {
            useNewUrlParser: true,
            useUnifiedTopology: true
        });
        console.log('Connected to MongoDB');

        // Delete existing admin user
        await User.deleteOne({ email: 'admin@hotel.com' });
        console.log('Deleted existing admin user');

        // Create new admin user with plain password
        const admin = new User({
            name: 'Admin',
            email: 'admin@hotel.com',
            password: 'admin123', // Will be hashed by the pre-save middleware
            role: 'admin',
            isEmailVerified: true
        });

        await admin.save();
        console.log('Admin user created successfully');

        // Verify the admin user
        const savedAdmin = await User.findOne({ email: 'admin@hotel.com' }).select('+password');
        console.log('Saved admin user:', {
            id: savedAdmin._id,
            email: savedAdmin.email,
            role: savedAdmin.role,
            hasPassword: !!savedAdmin.password
        });

        // Test password comparison
        const isMatch = await savedAdmin.comparePassword('admin123');
        console.log('Password verification:', isMatch ? 'successful' : 'failed');

        process.exit(0);
    } catch (error) {
        console.error('Error:', error);
        process.exit(1);
    }
}

createAdmin();

================
File: src/scripts/seed-inventory.js
================
const mongoose = require('mongoose');
const Category = require('../models/Category');
const Supplier = require('../models/Supplier');
const InventoryItem = require('../models/InventoryItem');

async function seedInventory() {
    try {
        await mongoose.connect('mongodb://localhost:27017/hotel-management');
        console.log('Connected to MongoDB');

        // Create categories
        const categories = await Category.create([
            {
                name: 'Dining',
                description: 'Restaurant and room service supplies',
                status: 'active',
                loyaltyProgram: {
                    isEligible: true,
                    basePoints: 10,
                    bonusMultiplier: 1.5
                }
            },
            {
                name: 'Spa',
                description: 'Spa and wellness supplies',
                status: 'active',
                loyaltyProgram: {
                    isEligible: true,
                    basePoints: 15,
                    bonusMultiplier: 2
                }
            },
            {
                name: 'Housekeeping',
                description: 'Room cleaning and maintenance supplies',
                status: 'active'
            }
        ]);

        // Create suppliers
        const suppliers = await Supplier.create([
            {
                name: 'Global Foods Ltd',
                contactPerson: {
                    name: 'John Smith',
                    email: 'john@globalfoods.com',
                    phone: '+1-555-0123',
                    position: 'Sales Manager'
                },
                status: 'active',
                rating: {
                    quality: 4.5,
                    reliability: 4.8,
                    pricing: 4.2
                }
            },
            {
                name: 'Wellness Supplies Co',
                contactPerson: {
                    name: 'Sarah Johnson',
                    email: 'sarah@wellnesssupplies.com',
                    phone: '+1-555-0124',
                    position: 'Account Executive'
                },
                status: 'active',
                rating: {
                    quality: 4.7,
                    reliability: 4.5,
                    pricing: 4.0
                }
            }
        ]);

        // Create inventory items
        const items = await InventoryItem.create([
            {
                name: 'Premium Coffee Beans',
                sku: 'COFFEE-001',
                category: categories[0]._id,
                supplier: suppliers[0]._id,
                stock: 100,
                minStock: 20,
                unitPrice: 15.99,
                unit: 'kg',
                status: 'active'
            },
            {
                name: 'Organic Essential Oils Set',
                sku: 'SPA-001',
                category: categories[1]._id,
                supplier: suppliers[1]._id,
                stock: 50,
                minStock: 10,
                unitPrice: 45.99,
                unit: 'set',
                status: 'active'
            },
            {
                name: 'Luxury Bath Towels',
                sku: 'HOUSE-001',
                category: categories[2]._id,
                supplier: suppliers[1]._id,
                stock: 200,
                minStock: 50,
                unitPrice: 24.99,
                unit: 'piece',
                status: 'active'
            },
            {
                name: 'Gourmet Tea Selection',
                sku: 'TEA-001',
                category: categories[0]._id,
                supplier: suppliers[0]._id,
                stock: 75,
                minStock: 15,
                unitPrice: 12.99,
                unit: 'box',
                status: 'active'
            },
            {
                name: 'Massage Oil',
                sku: 'SPA-002',
                category: categories[1]._id,
                supplier: suppliers[1]._id,
                stock: 30,
                minStock: 8,
                unitPrice: 29.99,
                unit: 'bottle',
                status: 'active'
            }
        ]);

        console.log('Seed data created successfully');
        console.log(`Created ${categories.length} categories`);
        console.log(`Created ${suppliers.length} suppliers`);
        console.log(`Created ${items.length} inventory items`);

        await mongoose.disconnect();
        console.log('Disconnected from MongoDB');
    } catch (error) {
        console.error('Error seeding data:', error);
        process.exit(1);
    }
}

seedInventory();

================
File: src/scripts/setup-admin.js
================
const mongoose = require('mongoose');
const User = require('../models/User');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

async function setupAdmin() {
    try {
        await mongoose.connect('mongodb://localhost:27017/hotel-management');
        console.log('Connected to MongoDB');

        // Check if admin exists
        let admin = await User.findOne({ email: 'admin@hotel.com' });

        if (!admin) {
            // Create new admin user
            const hashedPassword = await bcrypt.hash('admin123', 10);
            admin = await User.create({
                name: 'Admin',
                email: 'admin@hotel.com',
                password: hashedPassword,
                role: 'admin',
                isAdmin: true,
                isActive: true
            });
        }

        // Generate token
        const token = jwt.sign(
            { userId: admin._id.toString() },
            process.env.JWT_SECRET || 'your-jwt-secret',
            { expiresIn: '7d' }
        );

        // Update user's tokens array
        if (!admin.tokens) {
            admin.tokens = [];
        }
        admin.tokens = admin.tokens.concat(token);
        await admin.save();

        console.log('Admin user setup complete');
        console.log('Admin credentials:');
        console.log('Email: admin@hotel.com');
        console.log('Password: admin123');
        console.log('Token:', token);

        await mongoose.disconnect();
        console.log('Disconnected from MongoDB');
    } catch (error) {
        console.error('Error setting up admin:', error);
        process.exit(1);
    }
}

setupAdmin();

================
File: src/seeders/admin.seeder.js
================
const bcrypt = require('bcryptjs');
const User = require('../models/User');
const Role = require('../models/Role');
const Permission = require('../models/Permission');

const seedAdmin = async () => {
    try {
        // Create default admin user if it doesn't exist
        let adminUser = await User.findOne({ email: 'admin@example.com' });
        if (!adminUser) {
            const hashedPassword = await bcrypt.hash('admin123', 10);
            adminUser = await User.create({
                name: 'System Admin',
                email: 'admin@example.com',
                password: hashedPassword,
                isAdmin: true,
                isActive: true
            });
            console.log('Default admin user created');
        }

        // Create admin role if it doesn't exist
        let adminRole = await Role.findOne({ name: 'SUPER_ADMIN' });
        if (!adminRole) {
            adminRole = await Role.create({
                name: 'SUPER_ADMIN',
                description: 'Administrator role with full system access',
                permissions: [
                    {
                        module: 'DASHBOARD',
                        actions: ['VIEW']
                    },
                    {
                        module: 'BOOKINGS',
                        actions: ['VIEW', 'CREATE', 'EDIT', 'DELETE', 'APPROVE', 'EXPORT']
                    },
                    {
                        module: 'GUESTS',
                        actions: ['VIEW', 'CREATE', 'EDIT', 'DELETE', 'EXPORT']
                    },
                    {
                        module: 'ROOMS',
                        actions: ['VIEW', 'CREATE', 'EDIT', 'DELETE']
                    },
                    {
                        module: 'HOUSEKEEPING',
                        actions: ['VIEW', 'CREATE', 'EDIT', 'DELETE']
                    },
                    {
                        module: 'MAINTENANCE',
                        actions: ['VIEW', 'CREATE', 'EDIT', 'DELETE']
                    },
                    {
                        module: 'INVENTORY',
                        actions: ['VIEW', 'CREATE', 'EDIT', 'DELETE', 'APPROVE']
                    },
                    {
                        module: 'STAFF',
                        actions: ['VIEW', 'CREATE', 'EDIT', 'DELETE']
                    },
                    {
                        module: 'REPORTS',
                        actions: ['VIEW', 'EXPORT']
                    },
                    {
                        module: 'SETTINGS',
                        actions: ['VIEW', 'EDIT']
                    },
                    {
                        module: 'BILLING',
                        actions: ['VIEW', 'CREATE', 'EDIT', 'DELETE', 'APPROVE']
                    },
                    {
                        module: 'LOYALTY',
                        actions: ['VIEW', 'CREATE', 'EDIT', 'DELETE']
                    },
                    {
                        module: 'MARKETING',
                        actions: ['VIEW', 'CREATE', 'EDIT', 'DELETE']
                    },
                    {
                        module: 'CHANNEL_MANAGER',
                        actions: ['VIEW', 'CREATE', 'EDIT', 'DELETE']
                    },
                    {
                        module: 'API_ACCESS',
                        actions: ['VIEW', 'CREATE', 'EDIT', 'DELETE']
                    }
                ],
                isSystem: true,
                metadata: {
                    createdBy: adminUser._id
                }
            });
            console.log('Admin role created');
        }

        // Update admin user with role if not set
        if (!adminUser.role) {
            adminUser.role = adminRole._id;
            await adminUser.save();
            console.log('Admin user role updated');
        }

        // Create default permissions if they don't exist
        const defaultPermissions = [
            { name: 'manage_users', description: 'Can manage users' },
            { name: 'manage_bookings', description: 'Can manage bookings' },
            { name: 'manage_rooms', description: 'Can manage rooms' },
            { name: 'manage_inventory', description: 'Can manage inventory' },
            { name: 'manage_housekeeping', description: 'Can manage housekeeping' },
            { name: 'manage_maintenance', description: 'Can manage maintenance' },
            { name: 'manage_settings', description: 'Can manage system settings' },
            { name: 'view_reports', description: 'Can view reports' }
        ];

        for (const perm of defaultPermissions) {
            await Permission.findOneAndUpdate(
                { name: perm.name },
                { ...perm, createdBy: adminUser._id },
                { upsert: true, new: true }
            );
        }

        console.log('Admin seeding completed successfully');
    } catch (error) {
        console.error('Error seeding admin:', error);
        throw error;
    }
};

module.exports = seedAdmin;

================
File: src/seeders/index.js
================
const mongoose = require('mongoose');
const seedAdmin = require('./admin.seeder');
require('dotenv').config();

const runSeeders = async () => {
    try {
        // Connect to MongoDB
        await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/hotel-management');
        console.log('Connected to MongoDB');

        // Run seeders
        await seedAdmin();

        console.log('All seeders completed successfully');
        process.exit(0);
    } catch (error) {
        console.error('Error running seeders:', error);
        process.exit(1);
    }
};

// Run seeders if this file is executed directly
if (require.main === module) {
    runSeeders();
}

module.exports = runSeeders;

================
File: src/services/auth.service.js
================
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/User'); 
const LoyaltyProgram = require('../models/LoyaltyProgram'); 
const emailService = require('./email.service');

// Helper function to generate JWT token
function generateToken(userId) {
    return jwt.sign(
        { userId: userId.toString() },
        process.env.JWT_SECRET || 'your-secret-key-123',
        { expiresIn: '30d' }
    );
}

// Helper function to calculate next tier progress
async function calculateNextTierProgress(loyaltyProgram) {
    const tierThresholds = {
        bronze: { min: 0, max: 999 },
        silver: { min: 1000, max: 4999 },
        gold: { min: 5000, max: 9999 },
        platinum: { min: 10000, max: null }
    };

    const currentTier = loyaltyProgram.tier;
    const currentPoints = loyaltyProgram.points;
    
    if (currentTier === 'platinum') {
        return {
            nextTier: null,
            progress: 100,
            pointsNeeded: 0
        };
    }

    const tiers = ['bronze', 'silver', 'gold', 'platinum'];
    const nextTier = tiers[tiers.indexOf(currentTier) + 1];
    const pointsNeeded = tierThresholds[nextTier].min - currentPoints;
    const progress = Math.min(100, Math.round((currentPoints - tierThresholds[currentTier].min) / 
        (tierThresholds[nextTier].min - tierThresholds[currentTier].min) * 100));

    return {
        nextTier,
        progress,
        pointsNeeded: Math.max(0, pointsNeeded)
    };
}

// Register new user
exports.register = async (userData) => {
    try {
        const { email, password, name, phone, joinLoyalty } = userData;

        // Check if user exists
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            throw new Error('User already exists');
        }

        // Create user
        const user = new User({
            email,
            password,
            name,
            phone
        });

        // Create loyalty program if requested
        if (joinLoyalty) {
            const loyaltyProgram = new LoyaltyProgram({
                user: user._id,
                tier: 'bronze',
                points: 0,
                pointsHistory: [{
                    type: 'enrollment',
                    points: 0,
                    description: 'Program enrollment',
                    date: new Date()
                }]
            });
            await loyaltyProgram.save();
            user.loyaltyProgram = loyaltyProgram._id;
        }

        await user.save();

        // Send welcome email
        await emailService.sendWelcomeEmail(user.email, {
            name: user.name,
            loyaltyEnrolled: joinLoyalty
        });

        return {
            user: user.toJSON(),
            token: generateToken(user._id)
        };
    } catch (error) {
        console.error('Error in register:', error);
        throw error;
    }
};

// Login user
exports.login = async (email, password) => {
    try {
        console.log('Login attempt for:', email);

        // Find user
        const user = await User.findOne({ email }).select('+password');
        console.log('Found user:', user ? 'yes' : 'no');

        if (!user) {
            // If admin doesn't exist and this is an admin login attempt, create admin
            if (email === 'admin@hotel.com') {
                console.log('Creating admin user...');
                const hashedPassword = await bcrypt.hash('admin123', 10);
                const admin = new User({
                    name: 'Admin',
                    email: 'admin@hotel.com',
                    password: hashedPassword,
                    role: 'admin',
                    isAdmin: true,
                    isEmailVerified: true
                });
                await admin.save();
                console.log('Admin user created successfully');

                // Now try to log in again
                return exports.login(email, password);
            }
            throw new Error('Invalid credentials');
        }

        // Compare passwords
        console.log('Comparing passwords...');
        const isMatch = await bcrypt.compare(password, user.password);
        console.log('Password match:', isMatch ? 'yes' : 'no');

        if (!isMatch) {
            throw new Error('Invalid credentials');
        }

        // Get loyalty status if enrolled
        let loyaltyStatus = null;
        if (user.loyaltyProgram) {
            const loyaltyProgram = await LoyaltyProgram.findById(user.loyaltyProgram);
            if (loyaltyProgram) {
                loyaltyStatus = {
                    tier: loyaltyProgram.tier,
                    points: loyaltyProgram.points,
                    nextTierProgress: await calculateNextTierProgress(loyaltyProgram)
                };
            }
        }

        // Update last login
        user.lastLogin = new Date();
        await user.save();

        // Remove password from response
        const userResponse = user.toJSON();
        delete userResponse.password;

        console.log('Login successful for:', email);
        return {
            user: userResponse,
            loyaltyStatus,
            token: generateToken(user._id)
        };
    } catch (error) {
        console.error('Error in login:', error);
        throw error;
    }
};

// Reset password
exports.resetPassword = async (token, newPassword) => {
    try {
        const decoded = jwt.verify(token, process.env.JWT_RESET_SECRET);
        const user = await User.findById(decoded.id);

        if (!user) {
            throw new Error('Invalid token');
        }

        user.password = await bcrypt.hash(newPassword, 10);
        await user.save();

        // Send password change notification
        await emailService.sendPasswordChangeEmail(user.email, user.name);

        return true;
    } catch (error) {
        console.error('Error in resetPassword:', error);
        throw error;
    }
};

// Handle Google Auth callback
exports.handleGoogleAuthCallback = async (profile) => {
    let user = await User.findOne({ email: profile.email });

    if (!user) {
        // Create new user from Google profile
        user = await User.create({
            name: profile.displayName,
            email: profile.email,
            googleId: profile.id,
            isEmailVerified: true
        });
    } else if (!user.googleId) {
        // Link Google account to existing user
        user.googleId = profile.id;
        await user.save();
    }

    const token = generateToken(user._id);
    return { user, token };
};

module.exports = exports;

================
File: src/services/booking.service.js
================
const Booking = require('../models/Booking');
const Room = require('../models/Room');
const Hotel = require('../models/Hotel');
const User = require('../models/User');
const LoyaltyProgram = require('../models/LoyaltyProgram');
const emailService = require('./email.service');

// Create booking with loyalty points calculation
exports.createBooking = async (bookingData, userId) => {
    try {
        const { roomId, checkIn, checkOut, guests, specialRequests } = bookingData;

        // Get room and validate availability
        const room = await Room.findById(roomId).populate('hotel');
        if (!room) {
            throw new Error('Room not found');
        }

        // Check room availability
        const isAvailable = await checkRoomAvailability(roomId, checkIn, checkOut);
        if (!isAvailable) {
            throw new Error('Room not available for selected dates');
        }

        // Get user with loyalty program
        const user = await User.findById(userId).populate('loyaltyProgram');
        if (!user) {
            throw new Error('User not found');
        }

        // Calculate total price with loyalty discount
        let totalPrice = room.price;
        let appliedDiscounts = [];
        if (user.loyaltyProgram) {
            const discountPercent = getLoyaltyDiscount(user.loyaltyProgram.tier);
            if (discountPercent > 0) {
                const discountAmount = (totalPrice * discountPercent) / 100;
                totalPrice -= discountAmount;
                appliedDiscounts.push({
                    type: 'loyalty',
                    percent: discountPercent,
                    amount: discountAmount
                });
            }
        }

        // Create booking
        const booking = new Booking({
            user: userId,
            room: roomId,
            hotel: room.hotel._id,
            checkIn,
            checkOut,
            guests,
            specialRequests,
            totalPrice,
            appliedDiscounts,
            status: 'confirmed'
        });

        await booking.save();

        // Update room status
        room.status = 'booked';
        await room.save();

        // Calculate and award loyalty points if enrolled
        if (user.loyaltyProgram) {
            const basePoints = Math.floor(totalPrice * 10); // 10 points per currency unit
            const tierMultiplier = getTierPointsMultiplier(user.loyaltyProgram.tier);
            const totalPoints = Math.floor(basePoints * tierMultiplier);

            await user.loyaltyProgram.addPoints(
                totalPoints,
                'booking',
                `Booking at ${room.hotel.name} - Room ${room.number}`,
                booking._id
            );

            // Check for tier upgrade
            await checkAndUpdateTier(user.loyaltyProgram);
        }

        // Send booking confirmation email
        await emailService.sendBookingConfirmationEmail(user.email, {
            userName: user.name,
            hotelName: room.hotel.name,
            roomNumber: room.number,
            checkIn,
            checkOut,
            totalPrice,
            appliedDiscounts,
            loyaltyPoints: user.loyaltyProgram ? totalPoints : 0
        });

        return booking;
    } catch (error) {
        console.error('Error in createBooking:', error);
        throw error;
    }
};

// Cancel booking with points refund
exports.cancelBooking = async (bookingId, userId) => {
    try {
        const booking = await Booking.findOne({ _id: bookingId, user: userId })
            .populate('room')
            .populate('user')
            .populate({
                path: 'user',
                populate: {
                    path: 'loyaltyProgram'
                }
            });

        if (!booking) {
            throw new Error('Booking not found');
        }

        // Check cancellation policy
        const cancellationFee = calculateCancellationFee(booking);
        
        // Update booking status
        booking.status = 'cancelled';
        booking.cancellationDetails = {
            date: new Date(),
            fee: cancellationFee
        };
        await booking.save();

        // Update room status
        const room = booking.room;
        room.status = 'available';
        await room.save();

        // Handle loyalty points refund if applicable
        if (booking.user.loyaltyProgram) {
            const pointsToRefund = Math.floor((booking.totalPrice - cancellationFee) * 10);
            
            await booking.user.loyaltyProgram.addPoints(
                pointsToRefund,
                'booking_refund',
                `Refund for cancelled booking at ${room.hotel.name} - Room ${room.number}`,
                booking._id
            );
        }

        // Send cancellation confirmation email
        await emailService.sendBookingCancellationEmail(booking.user.email, {
            userName: booking.user.name,
            bookingId: booking._id,
            cancellationFee,
            pointsRefunded: pointsToRefund || 0
        });

        return {
            booking,
            cancellationFee,
            pointsRefunded: pointsToRefund || 0
        };
    } catch (error) {
        console.error('Error in cancelBooking:', error);
        throw error;
    }
};

// Get user bookings with loyalty info
exports.getUserBookings = async (userId) => {
    try {
        const bookings = await Booking.find({ user: userId })
            .populate('room')
            .populate('hotel')
            .populate({
                path: 'user',
                populate: {
                    path: 'loyaltyProgram'
                }
            })
            .sort({ checkIn: -1 });

        // Add loyalty information to each booking
        const enhancedBookings = bookings.map(booking => {
            const bookingObj = booking.toJSON();
            if (booking.user.loyaltyProgram) {
                const pointsEarned = Math.floor(booking.totalPrice * 10 * 
                    getTierPointsMultiplier(booking.user.loyaltyProgram.tier));
                bookingObj.loyaltyInfo = {
                    pointsEarned,
                    tierAtBooking: booking.user.loyaltyProgram.tier
                };
            }
            return bookingObj;
        });

        return enhancedBookings;
    } catch (error) {
        console.error('Error in getUserBookings:', error);
        throw error;
    }
};

// Helper function to check room availability
async function checkRoomAvailability(roomId, checkIn, checkOut) {
    const conflictingBookings = await Booking.find({
        room: roomId,
        status: { $ne: 'cancelled' },
        $or: [
            {
                checkIn: { $lte: checkOut },
                checkOut: { $gte: checkIn }
            }
        ]
    });

    return conflictingBookings.length === 0;
}

// Helper function to get loyalty discount
function getLoyaltyDiscount(tier) {
    const discounts = {
        bronze: 0,
        silver: 5,
        gold: 10,
        platinum: 15
    };
    return discounts[tier] || 0;
}

// Helper function to get tier points multiplier
function getTierPointsMultiplier(tier) {
    const multipliers = {
        bronze: 1,
        silver: 1.2,
        gold: 1.5,
        platinum: 2
    };
    return multipliers[tier] || 1;
}

// Helper function to calculate cancellation fee
function calculateCancellationFee(booking) {
    const now = new Date();
    const checkIn = new Date(booking.checkIn);
    const daysUntilCheckIn = Math.ceil((checkIn - now) / (1000 * 60 * 60 * 24));

    // Platinum members get free cancellation up to 24 hours before
    if (booking.user.loyaltyProgram && 
        booking.user.loyaltyProgram.tier === 'platinum' && 
        daysUntilCheckIn >= 1) {
        return 0;
    }

    // Gold members get free cancellation up to 48 hours before
    if (booking.user.loyaltyProgram && 
        booking.user.loyaltyProgram.tier === 'gold' && 
        daysUntilCheckIn >= 2) {
        return 0;
    }

    // Standard cancellation fees
    if (daysUntilCheckIn >= 7) {
        return 0;
    } else if (daysUntilCheckIn >= 3) {
        return booking.totalPrice * 0.3;
    } else if (daysUntilCheckIn >= 1) {
        return booking.totalPrice * 0.5;
    } else {
        return booking.totalPrice;
    }
}

// Helper function to check and update tier
async function checkAndUpdateTier(loyaltyProgram) {
    const currentPoints = loyaltyProgram.points;
    let newTier = loyaltyProgram.tier;

    if (currentPoints >= 10000) {
        newTier = 'platinum';
    } else if (currentPoints >= 5000) {
        newTier = 'gold';
    } else if (currentPoints >= 1000) {
        newTier = 'silver';
    }

    if (newTier !== loyaltyProgram.tier) {
        loyaltyProgram.tier = newTier;
        await loyaltyProgram.save();

        // Send tier upgrade email
        await emailService.sendTierUpgradeEmail(loyaltyProgram.user.email, {
            userName: loyaltyProgram.user.name,
            newTier,
            benefits: await calculateLoyaltyBenefits(newTier)
        });
    }
}

// Helper function to calculate loyalty benefits
async function calculateLoyaltyBenefits(tier) {
    const benefits = {
        bronze: {
            pointsMultiplier: 1,
            lateCheckout: false,
            roomUpgrades: false,
            welcomeDrink: true
        },
        silver: {
            pointsMultiplier: 1.2,
            lateCheckout: true,
            roomUpgrades: false,
            welcomeDrink: true,
            breakfastDiscount: 10
        },
        gold: {
            pointsMultiplier: 1.5,
            lateCheckout: true,
            roomUpgrades: true,
            welcomeDrink: true,
            breakfastDiscount: 20,
            spaDiscount: 15
        },
        platinum: {
            pointsMultiplier: 2,
            lateCheckout: true,
            roomUpgrades: true,
            welcomeDrink: true,
            breakfastDiscount: 30,
            spaDiscount: 25,
            airportTransfer: true
        }
    };

    return benefits[tier] || benefits.bronze;
}

================
File: src/services/cache.service.js
================
const Redis = require('redis');
const { promisify } = require('util');

class CacheService {
    constructor() {
        this.client = Redis.createClient(process.env.REDIS_URL || 'redis://localhost:6379');
        this.getAsync = promisify(this.client.get).bind(this.client);
        this.setAsync = promisify(this.client.set).bind(this.client);
        this.delAsync = promisify(this.client.del).bind(this.client);

        this.client.on('error', (error) => {
            console.error('Redis Cache Error:', error);
        });
    }

    // Cache keys
    static KEYS = {
        INVENTORY: (hotelId) => `inventory:${hotelId}`,
        RATES: (hotelId) => `rates:${hotelId}`,
        AVAILABILITY: (hotelId, date) => `availability:${hotelId}:${date}`,
        CHANNEL_MAPPING: (channelId) => `channel:${channelId}:mapping`
    };

    // Cache durations (in seconds)
    static DURATIONS = {
        INVENTORY: 3600, // 1 hour
        RATES: 1800,     // 30 minutes
        AVAILABILITY: 300, // 5 minutes
        MAPPING: 86400    // 24 hours
    };

    async get(key) {
        try {
            const data = await this.getAsync(key);
            return data ? JSON.parse(data) : null;
        } catch (error) {
            console.error('Cache get error:', error);
            return null;
        }
    }

    async set(key, value, duration = 3600) {
        try {
            await this.setAsync(key, JSON.stringify(value), 'EX', duration);
            return true;
        } catch (error) {
            console.error('Cache set error:', error);
            return false;
        }
    }

    async delete(key) {
        try {
            await this.delAsync(key);
            return true;
        } catch (error) {
            console.error('Cache delete error:', error);
            return false;
        }
    }

    // Inventory caching
    async getInventory(hotelId) {
        return this.get(CacheService.KEYS.INVENTORY(hotelId));
    }

    async setInventory(hotelId, inventory) {
        return this.set(
            CacheService.KEYS.INVENTORY(hotelId),
            inventory,
            CacheService.DURATIONS.INVENTORY
        );
    }

    // Rate caching
    async getRates(hotelId) {
        return this.get(CacheService.KEYS.RATES(hotelId));
    }

    async setRates(hotelId, rates) {
        return this.set(
            CacheService.KEYS.RATES(hotelId),
            rates,
            CacheService.DURATIONS.RATES
        );
    }

    // Availability caching
    async getAvailability(hotelId, date) {
        return this.get(CacheService.KEYS.AVAILABILITY(hotelId, date));
    }

    async setAvailability(hotelId, date, availability) {
        return this.set(
            CacheService.KEYS.AVAILABILITY(hotelId, date),
            availability,
            CacheService.DURATIONS.AVAILABILITY
        );
    }

    // Channel mapping caching
    async getChannelMapping(channelId) {
        return this.get(CacheService.KEYS.CHANNEL_MAPPING(channelId));
    }

    async setChannelMapping(channelId, mapping) {
        return this.set(
            CacheService.KEYS.CHANNEL_MAPPING(channelId),
            mapping,
            CacheService.DURATIONS.MAPPING
        );
    }

    // Batch operations
    async batchGet(keys) {
        try {
            const multi = this.client.multi();
            keys.forEach(key => multi.get(key));
            const results = await promisify(multi.exec).bind(multi)();
            return results.map(result => result ? JSON.parse(result) : null);
        } catch (error) {
            console.error('Batch get error:', error);
            return keys.map(() => null);
        }
    }

    async batchSet(keyValuePairs, duration = 3600) {
        try {
            const multi = this.client.multi();
            keyValuePairs.forEach(({ key, value }) => {
                multi.set(key, JSON.stringify(value), 'EX', duration);
            });
            await promisify(multi.exec).bind(multi)();
            return true;
        } catch (error) {
            console.error('Batch set error:', error);
            return false;
        }
    }
}

module.exports = new CacheService();

================
File: src/services/channel-manager.service.js
================
const RateManager = require('../models/RateManager');
const OTAChannel = require('../models/OTAChannel');
const OTABooking = require('../models/OTABooking');
const Room = require('../models/Room');
const Hotel = require('../models/Hotel');
const notificationService = require('./notification.service');

class ChannelManagerService {
    constructor() {
        this.initializeChannels();
    }

    initializeChannels() {
        // Initialize API clients for different channels
        this.channels = {
            'BOOKING_COM': {
                name: 'Booking.com',
                enabled: true,
                syncInterval: 30 * 60 * 1000 // 30 minutes
            },
            'EXPEDIA': {
                name: 'Expedia',
                enabled: true,
                syncInterval: 30 * 60 * 1000
            },
            'AIRBNB': {
                name: 'Airbnb',
                enabled: true,
                syncInterval: 30 * 60 * 1000
            }
        };
    }

    async getRateManagerDashboard(hotelId) {
        try {
            const rates = await RateManager.find({ hotel: hotelId })
                .populate('roomType')
                .lean();

            const channels = await OTAChannel.find({ hotel: hotelId })
                .select('name status lastSync')
                .lean();

            const recentBookings = await OTABooking.find({ hotel: hotelId })
                .sort({ createdAt: -1 })
                .limit(10)
                .populate('room')
                .lean();

            return {
                rates,
                channels,
                recentBookings,
                channelStatus: this.getChannelStatus()
            };
        } catch (error) {
            console.error('Error getting rate manager dashboard:', error);
            throw error;
        }
    }

    async syncRates(hotelId) {
        try {
            const rates = await RateManager.find({ hotel: hotelId });
            const results = {
                success: [],
                failed: []
            };

            for (const rate of rates) {
                try {
                    await this.syncRateToChannels(rate);
                    results.success.push(rate._id);
                } catch (error) {
                    console.error(`Error syncing rate ${rate._id}:`, error);
                    results.failed.push({
                        rateId: rate._id,
                        error: error.message
                    });
                }
            }

            return results;
        } catch (error) {
            console.error('Error syncing rates:', error);
            throw error;
        }
    }

    async syncRateToChannels(rate) {
        for (const [channelKey, channel] of Object.entries(this.channels)) {
            if (!channel.enabled) continue;

            try {
                const channelRate = await this.formatRateForChannel(rate, channelKey);
                await this.pushRateToChannel(channelRate, channelKey);

                // Update sync status
                rate.lastSync = {
                    status: 'SUCCESS',
                    timestamp: new Date(),
                    channel: channelKey
                };
            } catch (error) {
                console.error(`Error syncing rate to ${channelKey}:`, error);
                rate.lastSync = {
                    status: 'FAILED',
                    timestamp: new Date(),
                    channel: channelKey,
                    error: error.message
                };
            }
        }

        await rate.save();
    }

    async formatRateForChannel(rate, channel) {
        // Format rate data according to channel specifications
        const baseRate = {
            roomTypeId: rate.roomType,
            baseRate: rate.baseRate,
            currency: 'USD', // Get from hotel settings
            restrictions: rate.restrictions
        };

        switch (channel) {
            case 'BOOKING_COM':
                return {
                    ...baseRate,
                    ratePlan: 'STANDARD',
                    mealPlan: 'ROOM_ONLY'
                };
            case 'EXPEDIA':
                return {
                    ...baseRate,
                    rateCode: 'STD',
                    boardBasis: 'RO'
                };
            case 'AIRBNB':
                return {
                    ...baseRate,
                    cleaningFee: 0,
                    serviceFee: 0
                };
            default:
                throw new Error(`Unsupported channel: ${channel}`);
        }
    }

    async pushRateToChannel(rate, channel) {
        // Implement channel-specific API calls
        console.log(`Pushing rate to ${channel}:`, rate);
        // This would be replaced with actual API calls
    }

    getChannelStatus() {
        return Object.entries(this.channels).map(([key, channel]) => ({
            id: key,
            name: channel.name,
            status: channel.enabled ? 'CONNECTED' : 'DISCONNECTED',
            lastSync: new Date()
        }));
    }

    async updateRateRestrictions(rateId, restrictions) {
        try {
            const rate = await RateManager.findById(rateId);
            if (!rate) {
                throw new Error('Rate not found');
            }

            rate.restrictions = {
                ...rate.restrictions,
                ...restrictions
            };

            await rate.save();
            await this.syncRateToChannels(rate);

            return rate;
        } catch (error) {
            console.error('Error updating rate restrictions:', error);
            throw error;
        }
    }

    async createPromotion(rateId, promotionData) {
        try {
            const rate = await RateManager.findById(rateId);
            if (!rate) {
                throw new Error('Rate not found');
            }

            rate.promotions.push({
                ...promotionData,
                status: 'ACTIVE'
            });

            await rate.save();
            await this.syncRateToChannels(rate);

            return rate;
        } catch (error) {
            console.error('Error creating promotion:', error);
            throw error;
        }
    }

    async getChannelPerformance(hotelId, startDate, endDate) {
        try {
            const bookings = await OTABooking.find({
                hotel: hotelId,
                createdAt: { $gte: startDate, $lte: endDate }
            });

            const performance = {};
            for (const [channelKey, channel] of Object.entries(this.channels)) {
                const channelBookings = bookings.filter(b => b.channel === channelKey);
                performance[channelKey] = {
                    name: channel.name,
                    bookings: channelBookings.length,
                    revenue: channelBookings.reduce((sum, b) => sum + b.totalAmount, 0),
                    averageRate: channelBookings.length > 0
                        ? channelBookings.reduce((sum, b) => sum + b.rateAmount, 0) / channelBookings.length
                        : 0
                };
            }

            return performance;
        } catch (error) {
            console.error('Error getting channel performance:', error);
            throw error;
        }
    }
}

module.exports = new ChannelManagerService();

================
File: src/services/email.service.js
================
const nodemailer = require('nodemailer');

// Create reusable transporter
const createTransporter = () => {
    // For development, use Ethereal (fake SMTP service)
    if (process.env.NODE_ENV === 'development') {
        return nodemailer.createTransport({
            host: 'smtp.ethereal.email',
            port: 587,
            secure: false,
            auth: {
                user: process.env.SMTP_USER,
                pass: process.env.SMTP_PASS
            }
        });
    }

    // For production, use real SMTP service
    return nodemailer.createTransport({
        host: process.env.SMTP_HOST,
        port: process.env.SMTP_PORT,
        secure: process.env.SMTP_SECURE === 'true',
        auth: {
            user: process.env.SMTP_USER,
            pass: process.env.SMTP_PASS
        }
    });
};

const sendEmail = async ({ to, subject, html }) => {
    try {
        const transporter = createTransporter();

        const mailOptions = {
            from: process.env.SMTP_FROM || '"Hotel Management" <noreply@hotelmanagement.com>',
            to,
            subject,
            html
        };

        const info = await transporter.sendMail(mailOptions);

        if (process.env.NODE_ENV === 'development') {
            console.log('Preview URL: %s', nodemailer.getTestMessageUrl(info));
        }

        return info;
    } catch (error) {
        console.error('Email service error:', error);
        throw new Error('Failed to send email');
    }
};

// Email templates
const templates = {
    welcomeGuest: (name, email, password) => ({
        subject: 'Welcome to Hotel Management System',
        html: `
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 20px; text-align: center;">
                    <h1 style="color: white; margin: 0;">Welcome to Hotel Management System</h1>
                </div>
                <div style="padding: 20px; border: 1px solid #ddd; border-top: none;">
                    <p style="font-size: 16px;">Dear ${name},</p>
                    <p>Your account has been created successfully. Here are your login credentials:</p>
                    <div style="background: #f8f9fa; padding: 15px; border-radius: 5px; margin: 20px 0;">
                        <p style="margin: 5px 0;"><strong>Email:</strong> ${email}</p>
                        <p style="margin: 5px 0;"><strong>Password:</strong> ${password}</p>
                    </div>
                    <p style="color: #dc3545;"><strong>Important:</strong> Please change your password after your first login.</p>
                    <div style="margin-top: 30px;">
                        <a href="${process.env.APP_URL}/auth/login" 
                           style="background: #764ba2; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">
                            Login to Your Account
                        </a>
                    </div>
                    <p style="margin-top: 30px; font-size: 14px; color: #666;">
                        If you have any questions or need assistance, please don't hesitate to contact our support team.
                    </p>
                    <hr style="border: none; border-top: 1px solid #ddd; margin: 20px 0;">
                    <p style="font-size: 12px; color: #666; text-align: center;">
                        This is an automated message, please do not reply to this email.
                    </p>
                </div>
            </div>
        `
    }),

    resetPassword: (name, resetUrl) => ({
        subject: 'Reset Your Password',
        html: `
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 20px; text-align: center;">
                    <h1 style="color: white; margin: 0;">Reset Your Password</h1>
                </div>
                <div style="padding: 20px; border: 1px solid #ddd; border-top: none;">
                    <p style="font-size: 16px;">Dear ${name},</p>
                    <p>We received a request to reset your password. Click the button below to create a new password:</p>
                    <div style="margin: 30px 0; text-align: center;">
                        <a href="${resetUrl}" 
                           style="background: #764ba2; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">
                            Reset Password
                        </a>
                    </div>
                    <p style="color: #dc3545;"><strong>Note:</strong> This link will expire in 10 minutes.</p>
                    <p>If you didn't request this, please ignore this email. Your password will stay safe and won't be changed.</p>
                    <hr style="border: none; border-top: 1px solid #ddd; margin: 20px 0;">
                    <p style="font-size: 12px; color: #666; text-align: center;">
                        This is an automated message, please do not reply to this email.
                    </p>
                </div>
            </div>
        `
    }),

    passwordReset: (email, resetToken) => {
        const resetUrl = `${process.env.APP_URL}/auth/reset-password/${resetToken}`;
        
        return {
            subject: 'Password Reset Request',
            html: `
                <h1>Password Reset Request</h1>
                <p>You are receiving this email because you (or someone else) has requested to reset your password.</p>
                <p>Please click on the following link to reset your password:</p>
                <a href="${resetUrl}" style="display: inline-block; padding: 10px 20px; background-color: #007bff; color: white; text-decoration: none; border-radius: 5px;">Reset Password</a>
                <p>If you did not request this, please ignore this email and your password will remain unchanged.</p>
                <p>This link will expire in 1 hour.</p>
            `
        }
    }
};

module.exports = {
    sendEmail,
    templates
};

================
File: src/services/hotel.service.js
================
const Hotel = require('../models/Hotel');
const Room = require('../models/Room');
const LoyaltyProgram = require('../models/LoyaltyProgram');
const Booking = require('../models/Booking');
const emailService = require('./email.service');

exports.createHotel = async (hotelData) => {
    const hotel = await Hotel.create(hotelData);
    return hotel;
};

exports.getAllHotels = async (query = {}) => {
    const { search, location, priceRange, amenities, rating, page = 1, limit = 10 } = query;

    let filter = {};

    // Search by name or description
    if (search) {
        filter.$or = [
            { name: { $regex: search, $options: 'i' } },
            { description: { $regex: search, $options: 'i' } }
        ];
    }

    // Filter by location
    if (location) {
        filter['location.city'] = { $regex: location, $options: 'i' };
    }

    // Filter by price range
    if (priceRange) {
        const [min, max] = priceRange.split('-').map(Number);
        filter['rooms.price'] = { $gte: min, $lte: max };
    }

    // Filter by amenities
    if (amenities) {
        const amenitiesList = amenities.split(',');
        filter.amenities = { $all: amenitiesList };
    }

    // Filter by rating
    if (rating) {
        filter.rating = { $gte: Number(rating) };
    }

    const skip = (page - 1) * limit;

    const [hotels, total] = await Promise.all([
        Hotel.find(filter)
            .skip(skip)
            .limit(limit)
            .populate('rooms'),
        Hotel.countDocuments(filter)
    ]);

    return {
        hotels,
        page: Number(page),
        totalPages: Math.ceil(total / limit),
        total
    };
};

exports.getHotelById = async (id, userId = null) => {
    const hotel = await Hotel.findById(id).populate('rooms');
    if (!hotel) {
        throw new Error('Hotel not found');
    }

    // If userId is provided, get loyalty program info
    let loyaltyInfo = null;
    if (userId) {
        const loyaltyProgram = await LoyaltyProgram.findOne({ user: userId });
        if (loyaltyProgram) {
            loyaltyInfo = {
                tier: loyaltyProgram.tier,
                points: loyaltyProgram.points,
                discount: getLoyaltyDiscount(loyaltyProgram.tier)
            };

            // Apply loyalty discount to room prices
            hotel.rooms = hotel.rooms.map(room => ({
                ...room.toObject(),
                originalPrice: room.price,
                discountedPrice: room.price * (1 - loyaltyInfo.discount)
            }));
        }
    }

    return { hotel, loyaltyInfo };
};

exports.updateHotel = async (id, updateData) => {
    const hotel = await Hotel.findByIdAndUpdate(
        id,
        { $set: updateData },
        { new: true, runValidators: true }
    ).populate('rooms');

    if (!hotel) {
        throw new Error('Hotel not found');
    }
    return hotel;
};

exports.deleteHotel = async (id) => {
    const hotel = await Hotel.findByIdAndDelete(id);
    if (!hotel) {
        throw new Error('Hotel not found');
    }
    
    // Delete associated rooms
    await Room.deleteMany({ hotel: id });
    
    return hotel;
};

// Room management
exports.addRoom = async (hotelId, roomData) => {
    const hotel = await Hotel.findById(hotelId);
    if (!hotel) {
        throw new Error('Hotel not found');
    }

    const room = await Room.create({
        ...roomData,
        hotel: hotelId
    });

    hotel.rooms.push(room._id);
    await hotel.save();

    return await Hotel.findById(hotelId).populate('rooms');
};

exports.updateRoom = async (hotelId, roomId, roomData) => {
    const [hotel, room] = await Promise.all([
        Hotel.findById(hotelId),
        Room.findById(roomId)
    ]);

    if (!hotel || !room) {
        throw new Error('Hotel or room not found');
    }

    if (room.hotel.toString() !== hotelId) {
        throw new Error('Room does not belong to this hotel');
    }

    Object.assign(room, roomData);
    await room.save();

    return await Hotel.findById(hotelId).populate('rooms');
};

exports.deleteRoom = async (hotelId, roomId) => {
    const [hotel, room] = await Promise.all([
        Hotel.findById(hotelId),
        Room.findById(roomId)
    ]);

    if (!hotel || !room) {
        throw new Error('Hotel or room not found');
    }

    if (room.hotel.toString() !== hotelId) {
        throw new Error('Room does not belong to this hotel');
    }

    // Remove room reference from hotel
    hotel.rooms = hotel.rooms.filter(r => r.toString() !== roomId);
    await Promise.all([
        hotel.save(),
        Room.findByIdAndDelete(roomId)
    ]);

    return await Hotel.findById(hotelId).populate('rooms');
};

// Get room with loyalty benefits
exports.getRoomWithLoyaltyBenefits = async (roomId, userId) => {
    try {
        const room = await Room.findById(roomId);
        if (!room) {
            throw new Error('Room not found');
        }

        // Get user's loyalty program
        const loyalty = await LoyaltyProgram.findOne({ user: userId });
        if (!loyalty) {
            return room;
        }

        // Apply loyalty benefits
        const benefits = {
            price: room.price,
            originalPrice: room.price,
            upgrades: [],
            discounts: []
        };

        // Apply tier-based discounts
        switch (loyalty.tier) {
            case 'platinum':
                benefits.price *= 0.85; // 15% discount
                benefits.discounts.push({
                    type: 'tier_discount',
                    percentage: 15,
                    description: 'Platinum tier discount'
                });
                benefits.upgrades.push({
                    type: 'guaranteed_upgrade',
                    description: 'Guaranteed room upgrade when available'
                });
                break;
            case 'gold':
                benefits.price *= 0.90; // 10% discount
                benefits.discounts.push({
                    type: 'tier_discount',
                    percentage: 10,
                    description: 'Gold tier discount'
                });
                benefits.upgrades.push({
                    type: 'priority_upgrade',
                    description: 'Priority room upgrade subject to availability'
                });
                break;
            case 'silver':
                benefits.price *= 0.95; // 5% discount
                benefits.discounts.push({
                    type: 'tier_discount',
                    percentage: 5,
                    description: 'Silver tier discount'
                });
                break;
        }

        // Add points earning preview
        benefits.pointsEarning = {
            basePoints: Math.floor(room.price * 10),
            tierMultiplier: getTierPointsMultiplier(loyalty.tier),
            totalPoints: Math.floor(room.price * 10 * getTierPointsMultiplier(loyalty.tier))
        };

        return { ...room.toJSON(), benefits };
    } catch (error) {
        console.error('Error in getRoomWithLoyaltyBenefits:', error);
        throw error;
    }
};

// Get available upgrades for booking
exports.getAvailableUpgrades = async (bookingId) => {
    try {
        const booking = await Booking.findById(bookingId)
            .populate('user')
            .populate('room')
            .populate({
                path: 'user',
                populate: {
                    path: 'loyaltyProgram'
                }
            });

        if (!booking) {
            throw new Error('Booking not found');
        }

        // Get rooms better than current room
        const upgrades = await Room.find({
            hotel: booking.hotel,
            type: { $gt: booking.room.type },
            status: 'available'
        }).sort({ type: 1 });

        // Calculate upgrade costs and points
        const upgradeOptions = upgrades.map(upgrade => {
            const priceDifference = upgrade.price - booking.room.price;
            const pointsCost = Math.floor(priceDifference * 100); // 100 points per currency unit
            
            return {
                room: upgrade,
                priceDifference,
                pointsCost,
                eligibleForFreeUpgrade: isEligibleForFreeUpgrade(booking.user.loyaltyProgram, priceDifference)
            };
        });

        return upgradeOptions;
    } catch (error) {
        console.error('Error in getAvailableUpgrades:', error);
        throw error;
    }
};

// Process room upgrade
exports.processRoomUpgrade = async (bookingId, newRoomId, usePoints = false) => {
    try {
        const booking = await Booking.findById(bookingId)
            .populate('user')
            .populate('room')
            .populate({
                path: 'user',
                populate: {
                    path: 'loyaltyProgram'
                }
            });

        if (!booking) {
            throw new Error('Booking not found');
        }

        const newRoom = await Room.findById(newRoomId);
        if (!newRoom) {
            throw new Error('New room not found');
        }

        const priceDifference = newRoom.price - booking.room.price;
        const pointsCost = Math.floor(priceDifference * 100);

        // Handle points-based upgrade
        if (usePoints) {
            if (!booking.user.loyaltyProgram) {
                throw new Error('User not enrolled in loyalty program');
            }

            if (booking.user.loyaltyProgram.points < pointsCost) {
                throw new Error('Insufficient points for upgrade');
            }

            // Deduct points
            await booking.user.loyaltyProgram.deductPoints(
                pointsCost,
                'room_upgrade',
                `Room upgrade from ${booking.room.number} to ${newRoom.number}`
            );
        }

        // Update booking
        const oldRoom = booking.room;
        booking.room = newRoom._id;
        await booking.save();

        // Update room status
        oldRoom.status = 'available';
        newRoom.status = 'occupied';
        await Promise.all([oldRoom.save(), newRoom.save()]);

        // Send upgrade confirmation email
        await emailService.sendUpgradeConfirmationEmail(booking.user.email, {
            userName: booking.user.name,
            oldRoom: oldRoom.number,
            newRoom: newRoom.number,
            usePoints,
            pointsUsed: usePoints ? pointsCost : 0
        });

        return booking;
    } catch (error) {
        console.error('Error in processRoomUpgrade:', error);
        throw error;
    }
};

// Helper function to get loyalty discount percentage
function getLoyaltyDiscount(tier) {
    switch (tier) {
        case 'Platinum':
            return 0.15; // 15% discount
        case 'Gold':
            return 0.10; // 10% discount
        case 'Silver':
            return 0.05; // 5% discount
        default:
            return 0;
    }
}

// Helper function to get tier points multiplier
function getTierPointsMultiplier(tier) {
    const multipliers = {
        bronze: 1,
        silver: 1.2,
        gold: 1.5,
        platinum: 2
    };
    return multipliers[tier] || 1;
}

// Helper function to check free upgrade eligibility
function isEligibleForFreeUpgrade(loyaltyProgram, priceDifference) {
    if (!loyaltyProgram) return false;

    const maxUpgradeValues = {
        platinum: 100,
        gold: 50,
        silver: 0,
        bronze: 0
    };

    return priceDifference <= maxUpgradeValues[loyaltyProgram.tier];
}

================
File: src/services/integration.service.js
================
const axios = require('axios');
const config = require('../config/env');
const Guest = require('../models/Guest');
const Booking = require('../models/Booking');
const notificationService = require('./notification.service');
const stripe = config.stripe?.secretKey ? require('stripe')(config.stripe.secretKey) : null;
const Razorpay = require('razorpay');

class IntegrationService {
    constructor() {
        this.initializeAPIs();
        if (config.razorpay?.keyId && config.razorpay?.keySecret) {
            this.razorpay = new Razorpay({
                key_id: config.razorpay.keyId,
                key_secret: config.razorpay.keySecret
            });
        }
    }

    initializeAPIs() {
        // Initialize API clients
        this.bookingAPIs = {
            booking: config.bookingAPI?.token ? axios.create({
                baseURL: config.bookingAPI.baseURL,
                headers: { 'Authorization': `Bearer ${config.bookingAPI.token}` }
            }) : null,
            expedia: config.expediaAPI?.token ? axios.create({
                baseURL: config.expediaAPI.baseURL,
                headers: { 'Authorization': `Bearer ${config.expediaAPI.token}` }
            }) : null,
            airbnb: config.airbnbAPI?.token ? axios.create({
                baseURL: config.airbnbAPI.baseURL,
                headers: { 'Authorization': `Bearer ${config.airbnbAPI.token}` }
            }) : null
        };
    }

    // Payment Gateway Integration Methods
    async createStripePayment(amount, currency, description, customer) {
        try {
            if (!stripe) {
                throw new Error('Stripe is not configured');
            }

            const paymentIntent = await stripe.paymentIntents.create({
                amount,
                currency,
                description,
                customer,
                payment_method_types: ['card']
            });

            return paymentIntent;
        } catch (error) {
            console.error('Stripe payment creation error:', error);
            throw error;
        }
    }

    async createRazorpayPayment(amount, currency, description) {
        try {
            if (!this.razorpay) {
                throw new Error('Razorpay is not configured');
            }

            const order = await this.razorpay.orders.create({
                amount,
                currency,
                notes: { description }
            });

            return order;
        } catch (error) {
            console.error('Razorpay payment creation error:', error);
            throw error;
        }
    }

    // OTA Integration Methods
    async syncBookings() {
        try {
            const [bookingComBookings, expediaBookings, airbnbBookings] = await Promise.all([
                this.fetchBookingComBookings(),
                this.fetchExpediaBookings(),
                this.fetchAirbnbBookings()
            ]);

            // Process and store bookings
            await this.processOTABookings([
                ...bookingComBookings,
                ...expediaBookings,
                ...airbnbBookings
            ]);

            return true;
        } catch (error) {
            console.error('Booking sync error:', error);
            throw error;
        }
    }

    async fetchBookingComBookings() {
        try {
            if (!this.bookingAPIs.booking) {
                console.log('Booking.com API not configured');
                return [];
            }

            const response = await this.bookingAPIs.booking.get('/bookings');
            return response.data;
        } catch (error) {
            console.error('Booking.com API error:', error);
            return [];
        }
    }

    async fetchExpediaBookings() {
        try {
            if (!this.bookingAPIs.expedia) {
                console.log('Expedia API not configured');
                return [];
            }

            const response = await this.bookingAPIs.expedia.get('/bookings');
            return response.data;
        } catch (error) {
            console.error('Expedia API error:', error);
            return [];
        }
    }

    async fetchAirbnbBookings() {
        try {
            if (!this.bookingAPIs.airbnb) {
                console.log('Airbnb API not configured');
                return [];
            }

            const response = await this.bookingAPIs.airbnb.get('/bookings');
            return response.data;
        } catch (error) {
            console.error('Airbnb API error:', error);
            return [];
        }
    }

    async processOTABookings(bookings) {
        for (const booking of bookings) {
            try {
                // Check if booking already exists
                const existingBooking = await Booking.findOne({
                    otaBookingId: booking.id,
                    otaProvider: booking.provider
                });

                if (!existingBooking) {
                    // Create guest if not exists
                    let guest = await Guest.findOne({ email: booking.guestEmail });
                    if (!guest) {
                        guest = await Guest.create({
                            name: booking.guestName,
                            email: booking.guestEmail,
                            phone: booking.guestPhone
                        });
                    }

                    // Create booking
                    const newBooking = await Booking.create({
                        guest: guest._id,
                        otaBookingId: booking.id,
                        otaProvider: booking.provider,
                        checkIn: booking.checkIn,
                        checkOut: booking.checkOut,
                        roomType: booking.roomType,
                        totalAmount: booking.totalAmount,
                        status: 'confirmed'
                    });

                    // Notify about new booking
                    await notificationService.notifyUser('admin', {
                        type: 'new_booking',
                        message: `New booking received from ${booking.provider}`,
                        booking: newBooking._id
                    });
                }
            } catch (error) {
                console.error(`Error processing booking ${booking.id}:`, error);
            }
        }
    }

    // Social Media Integration Methods
    async postToSocialMedia(content, platforms = ['facebook', 'twitter', 'instagram']) {
        const posts = [];

        if (platforms.includes('facebook') && config.facebook?.accessToken) {
            try {
                const response = await axios.post(
                    `https://graph.facebook.com/v12.0/me/feed`,
                    {
                        message: content.text,
                        link: content.link
                    },
                    {
                        headers: {
                            Authorization: `Bearer ${config.facebook.accessToken}`
                        }
                    }
                );
                posts.push({ platform: 'facebook', success: true, id: response.data.id });
            } catch (error) {
                console.error('Facebook post error:', error);
                posts.push({ platform: 'facebook', success: false, error: error.message });
            }
        }

        if (platforms.includes('twitter') && config.twitter?.bearerToken) {
            try {
                const response = await axios.post(
                    'https://api.twitter.com/2/tweets',
                    {
                        text: content.text
                    },
                    {
                        headers: {
                            Authorization: `Bearer ${config.twitter.bearerToken}`
                        }
                    }
                );
                posts.push({ platform: 'twitter', success: true, id: response.data.id });
            } catch (error) {
                console.error('Twitter post error:', error);
                posts.push({ platform: 'twitter', success: false, error: error.message });
            }
        }

        if (platforms.includes('instagram') && config.instagram?.accessToken) {
            try {
                const response = await axios.post(
                    `https://graph.instagram.com/me/media`,
                    {
                        caption: content.text,
                        image_url: content.image
                    },
                    {
                        headers: {
                            Authorization: `Bearer ${config.instagram.accessToken}`
                        }
                    }
                );
                posts.push({ platform: 'instagram', success: true, id: response.data.id });
            } catch (error) {
                console.error('Instagram post error:', error);
                posts.push({ platform: 'instagram', success: false, error: error.message });
            }
        }

        return posts;
    }
}

module.exports = new IntegrationService();

================
File: src/services/notification.service.js
================
const WebSocket = require('ws');
const jwt = require('jsonwebtoken');
const Guest = require('../models/Guest');
const User = require('../models/User');
const config = require('../config/env');

class NotificationService {
    constructor() {
        this.connections = new Map(); // userId -> WebSocket
        this.guestConnections = new Map(); // guestId -> WebSocket
    }

    initialize(server) {
        this.wss = new WebSocket.Server({ server });

        this.wss.on('connection', async (ws, req) => {
            try {
                // Get token from query string
                const token = new URL(req.url, 'http://localhost').searchParams.get('token');
                if (!token) {
                    ws.close(4001, 'Authentication required');
                    return;
                }

                // Verify token
                const decoded = jwt.verify(token, config.jwtSecret);
                const userId = decoded.id;

                // Get user details
                const user = await User.findById(userId);
                if (!user) {
                    ws.close(4004, 'User not found');
                    return;
                }

                // Store connection
                if (user.role === 'guest') {
                    const guest = await Guest.findOne({ user: userId });
                    if (guest) {
                        this.guestConnections.set(guest._id.toString(), ws);
                    }
                }
                this.connections.set(userId, ws);

                // Handle messages
                ws.on('message', async (message) => {
                    try {
                        const data = JSON.parse(message);
                        await this.handleMessage(userId, data);
                    } catch (error) {
                        console.error('Error handling message:', error);
                    }
                });

                // Handle disconnection
                ws.on('close', () => {
                    this.connections.delete(userId);
                    if (user.role === 'guest') {
                        const guestId = Array.from(this.guestConnections.entries())
                            .find(([_, conn]) => conn === ws)?.[0];
                        if (guestId) {
                            this.guestConnections.delete(guestId);
                        }
                    }
                });

                // Send welcome message
                ws.send(JSON.stringify({
                    type: 'CONNECTED',
                    message: 'Connected to notification service'
                }));

            } catch (error) {
                console.error('WebSocket connection error:', error);
                ws.close(4000, 'Connection error');
            }
        });
    }

    async handleMessage(userId, data) {
        switch (data.type) {
            case 'CHAT_MESSAGE':
                await this.handleChatMessage(userId, data);
                break;
            case 'READ_NOTIFICATION':
                await this.markNotificationRead(userId, data.notificationId);
                break;
            // Add more message handlers as needed
        }
    }

    async sendToUser(userId, data) {
        const connection = this.connections.get(userId);
        if (connection && connection.readyState === WebSocket.OPEN) {
            connection.send(JSON.stringify(data));
        }
    }

    async sendToGuest(guestId, data) {
        const connection = this.guestConnections.get(guestId);
        if (connection && connection.readyState === WebSocket.OPEN) {
            connection.send(JSON.stringify(data));
        }
    }

    async broadcastToStaff(data) {
        for (const [userId, connection] of this.connections) {
            if (connection.readyState === WebSocket.OPEN) {
                const user = await User.findById(userId);
                if (user && user.role !== 'guest') {
                    connection.send(JSON.stringify(data));
                }
            }
        }
    }

    // Notification Methods

    async notifyBookingConfirmation(guestId, bookingData) {
        await this.sendToGuest(guestId, {
            type: 'BOOKING_CONFIRMATION',
            data: bookingData
        });
    }

    async notifySpecialOffer(guestId, offerData) {
        await this.sendToGuest(guestId, {
            type: 'SPECIAL_OFFER',
            data: offerData
        });
    }

    async notifyLoyaltyUpdate(guestId, loyaltyData) {
        await this.sendToGuest(guestId, {
            type: 'LOYALTY_UPDATE',
            data: loyaltyData
        });
    }

    async notifyStaffAssignment(staffId, assignmentData) {
        await this.sendToUser(staffId, {
            type: 'STAFF_ASSIGNMENT',
            data: assignmentData
        });
    }

    async notifyGuestRequest(guestId, requestData) {
        // Notify guest
        await this.sendToGuest(guestId, {
            type: 'REQUEST_RECEIVED',
            data: requestData
        });

        // Notify relevant staff
        await this.broadcastToStaff({
            type: 'NEW_GUEST_REQUEST',
            data: {
                ...requestData,
                guestId
            }
        });
    }

    // Chat Methods

    async handleChatMessage(userId, data) {
        const { recipientId, message } = data;
        
        // Store message in database
        // Implement message storage logic here

        // Send to recipient
        await this.sendToUser(recipientId, {
            type: 'CHAT_MESSAGE',
            data: {
                senderId: userId,
                message,
                timestamp: new Date()
            }
        });
    }

    async markNotificationRead(userId, notificationId) {
        // Update notification status in database
        // Implement notification status update logic here
    }
}

module.exports = new NotificationService();

================
File: src/services/ota.service.js
================
const axios = require('axios');
const BookingComService = require('./ota/booking.com.service');
const AirbnbService = require('./ota/airbnb.service');
const ExpediaService = require('./ota/expedia.service');
const OTAChannel = require('../models/OTAChannel');
const OTABooking = require('../models/OTABooking');
const Room = require('../models/Room');
const Booking = require('../models/Booking');
const User = require('../models/User');

class OTAService {
    constructor(channel) {
        this.channel = channel;
        this.specificService = this._getSpecificService();
    }

    static async getChannelInstance(channelId) {
        const channel = await OTAChannel.findById(channelId);
        if (!channel) {
            throw new Error('OTA channel not found');
        }
        return new OTAService(channel);
    }

    _getSpecificService() {
        switch (this.channel.name) {
            case 'booking.com':
                return new BookingComService(this.channel);
            case 'airbnb':
                return new AirbnbService(this.channel);
            case 'expedia':
                return new ExpediaService(this.channel);
            default:
                throw new Error(`Unsupported OTA channel: ${this.channel.name}`);
        }
    }

    // Sync inventory with OTA
    async syncInventory() {
        try {
            const rooms = await Room.find({ hotel: this.channel.hotel });
            const mappedRooms = this.channel.mappings.roomTypes;

            await this.specificService.syncInventory(rooms, mappedRooms);

            // Update last sync time
            await OTAChannel.findByIdAndUpdate(this.channel._id, {
                'lastSync.inventory': new Date(),
                $push: {
                    syncLogs: {
                        type: 'inventory',
                        status: 'success',
                        message: 'Inventory sync completed'
                    }
                }
            });
        } catch (error) {
            await this._logSyncError('inventory', error);
            throw error;
        }
    }

    // Sync prices with OTA
    async syncPrices() {
        try {
            const rooms = await Room.find({ hotel: this.channel.hotel });
            await this.specificService.syncPrices(rooms);

            await OTAChannel.findByIdAndUpdate(this.channel._id, {
                'lastSync.prices': new Date(),
                $push: {
                    syncLogs: {
                        type: 'prices',
                        status: 'success',
                        message: 'Price sync completed'
                    }
                }
            });
        } catch (error) {
            await this._logSyncError('prices', error);
            throw error;
        }
    }

    // Sync availability with OTA
    async syncAvailability() {
        try {
            const rooms = await Room.find({ hotel: this.channel.hotel });
            const bookings = await Booking.find({
                hotel: this.channel.hotel,
                status: { $in: ['confirmed', 'checked_in'] }
            });

            await this.specificService.syncAvailability(rooms, bookings);

            await OTAChannel.findByIdAndUpdate(this.channel._id, {
                'lastSync.availability': new Date(),
                $push: {
                    syncLogs: {
                        type: 'availability',
                        status: 'success',
                        message: 'Availability sync completed'
                    }
                }
            });
        } catch (error) {
            await this._logSyncError('availability', error);
            throw error;
        }
    }

    // Handle incoming booking from OTA
    async handleOTABooking(bookingData) {
        try {
            // Verify webhook if signature is provided
            if (bookingData.signature) {
                const isValid = this.specificService.verifyWebhook(
                    bookingData.signature,
                    JSON.stringify(bookingData.payload)
                );
                if (!isValid) {
                    throw new Error('Invalid webhook signature');
                }
                bookingData = bookingData.payload;
            }

            // Create or get guest
            const guest = await this._createOrGetGuest(bookingData.otaGuestDetails);

            // Create OTA booking record
            const otaBooking = await OTABooking.create({
                channel: this.channel._id,
                otaBookingId: bookingData.otaBookingId,
                hotel: this.channel.hotel,
                otaGuestDetails: bookingData.otaGuestDetails,
                bookingDetails: bookingData.bookingDetails,
                status: bookingData.status || 'pending',
                otaMetadata: bookingData.metadata
            });

            // Create local booking
            const localBooking = await Booking.create({
                hotel: this.channel.hotel,
                guest: guest._id,
                room: bookingData.bookingDetails.roomType,
                checkInDate: bookingData.bookingDetails.checkIn,
                checkOutDate: bookingData.bookingDetails.checkOut,
                adults: bookingData.bookingDetails.adults,
                children: bookingData.bookingDetails.children,
                specialRequests: bookingData.bookingDetails.specialRequests,
                source: `ota_${this.channel.name}`,
                status: 'confirmed',
                totalAmount: bookingData.bookingDetails.otaPrice
            });

            // Update OTA booking with local booking reference
            await OTABooking.findByIdAndUpdate(otaBooking._id, {
                localBooking: localBooking._id,
                status: 'confirmed',
                syncStatus: 'synced'
            });

            return { otaBooking, localBooking };
        } catch (error) {
            console.error('Error handling OTA booking:', error);
            throw error;
        }
    }

    // Private helper methods
    async _logSyncError(type, error) {
        await OTAChannel.findByIdAndUpdate(this.channel._id, {
            $push: {
                syncLogs: {
                    type,
                    status: 'failed',
                    message: error.message
                }
            }
        });
    }

    async _createOrGetGuest(guestDetails) {
        // Try to find existing guest by email
        let guest = await User.findOne({ email: guestDetails.email });

        if (!guest) {
            // Create new guest
            guest = await User.create({
                name: guestDetails.name,
                email: guestDetails.email,
                phone: guestDetails.phone,
                roles: ['guest'],
                otaIds: [{
                    channel: this.channel.name,
                    id: guestDetails.otaGuestId
                }]
            });
        } else {
            // Update existing guest's OTA IDs if needed
            const hasOtaId = guest.otaIds?.some(
                ota => ota.channel === this.channel.name
            );
            if (!hasOtaId && guestDetails.otaGuestId) {
                await User.findByIdAndUpdate(guest._id, {
                    $push: {
                        otaIds: {
                            channel: this.channel.name,
                            id: guestDetails.otaGuestId
                        }
                    }
                });
            }
        }

        return guest;
    }
}

module.exports = OTAService;

================
File: src/services/ota/airbnb.service.js
================
const axios = require('axios');
const crypto = require('crypto');

class AirbnbService {
    constructor(channel) {
        this.channel = channel;
        this.baseUrl = 'https://api.airbnb.com/v2';
        this.headers = {
            'Authorization': `Bearer ${this.channel.credentials.apiKey}`,
            'Content-Type': 'application/json',
            'X-Airbnb-API-Key': this.channel.credentials.apiSecret
        };
    }

    // Inventory Management
    async syncInventory(rooms, mappedRooms) {
        try {
            const payload = this._buildInventoryPayload(rooms, mappedRooms);
            const response = await axios.put(
                `${this.baseUrl}/listings/${this.channel.credentials.propertyId}`,
                payload,
                { headers: this.headers }
            );
            return response.data;
        } catch (error) {
            throw new Error(`Airbnb inventory sync failed: ${error.message}`);
        }
    }

    // Price Management
    async syncPrices(rooms) {
        try {
            const payload = this._buildPricePayload(rooms);
            const response = await axios.put(
                `${this.baseUrl}/listings/${this.channel.credentials.propertyId}/pricing`,
                payload,
                { headers: this.headers }
            );
            return response.data;
        } catch (error) {
            throw new Error(`Airbnb price sync failed: ${error.message}`);
        }
    }

    // Availability Management
    async syncAvailability(rooms, bookings) {
        try {
            const payload = this._buildAvailabilityPayload(rooms, bookings);
            const response = await axios.put(
                `${this.baseUrl}/listings/${this.channel.credentials.propertyId}/calendar`,
                payload,
                { headers: this.headers }
            );
            return response.data;
        } catch (error) {
            throw new Error(`Airbnb availability sync failed: ${error.message}`);
        }
    }

    // Booking Management
    async getNewBookings() {
        try {
            const response = await axios.get(
                `${this.baseUrl}/reservations?listing_id=${this.channel.credentials.propertyId}&status=pending`,
                { headers: this.headers }
            );
            return this._parseBookings(response.data);
        } catch (error) {
            throw new Error(`Airbnb reservation fetch failed: ${error.message}`);
        }
    }

    // Webhook Verification
    verifyWebhook(signature, payload) {
        const computedSignature = crypto
            .createHmac('sha256', this.channel.webhookSecret)
            .update(payload)
            .digest('hex');
        return signature === computedSignature;
    }

    // Private helper methods
    _buildInventoryPayload(rooms, mappedRooms) {
        const mappedRoom = mappedRooms[0]; // Airbnb typically has one listing per property
        const room = rooms.find(r => r._id.toString() === mappedRoom.localRoomId.toString());

        return {
            listing: {
                name: room.name,
                description: room.description,
                property_type: "Hotel room",
                room_type: "Entire home/apt",
                accommodates: room.maxOccupancy,
                bedrooms: 1,
                beds: room.beds || 1,
                bathrooms: room.bathrooms || 1,
                amenities: this._mapAmenitiesForAirbnb(room.amenities),
                house_rules: room.rules || "",
                check_in_time: "14:00",
                check_out_time: "11:00"
            }
        };
    }

    _buildPricePayload(rooms) {
        const today = new Date();
        const thirtyDaysFromNow = new Date(today);
        thirtyDaysFromNow.setDate(today.getDate() + 30);

        return {
            listing_price: {
                native_currency: "USD",
                default_daily_price: rooms[0].baseRate,
                cleaning_fee: rooms[0].cleaningFee || 0,
                calendar_prices: this._generateDailyPrices(
                    today,
                    thirtyDaysFromNow,
                    rooms[0].baseRate
                )
            }
        };
    }

    _buildAvailabilityPayload(rooms, bookings) {
        const today = new Date();
        const thirtyDaysFromNow = new Date(today);
        thirtyDaysFromNow.setDate(today.getDate() + 30);

        return {
            calendar_operations: this._generateAvailabilityUpdates(
                today,
                thirtyDaysFromNow,
                rooms,
                bookings
            )
        };
    }

    _generateDailyPrices(startDate, endDate, baseRate) {
        const prices = [];
        const currentDate = new Date(startDate);

        while (currentDate <= endDate) {
            prices.push({
                date: currentDate.toISOString().split('T')[0],
                price: baseRate,
                available: true
            });
            currentDate.setDate(currentDate.getDate() + 1);
        }

        return prices;
    }

    _generateAvailabilityUpdates(startDate, endDate, rooms, bookings) {
        const updates = [];
        const currentDate = new Date(startDate);

        while (currentDate <= endDate) {
            const dateStr = currentDate.toISOString().split('T')[0];
            const dayBookings = bookings.filter(booking => {
                const bookingDate = new Date(booking.checkInDate);
                return bookingDate.toISOString().split('T')[0] === dateStr;
            });

            const available = rooms[0].totalRooms - dayBookings.length > 0;

            updates.push({
                date: dateStr,
                available: available,
                notes: available ? "Available" : "Booked"
            });

            currentDate.setDate(currentDate.getDate() + 1);
        }

        return updates;
    }

    _mapAmenitiesForAirbnb(amenities) {
        // Map local amenities to Airbnb amenity IDs
        const amenityMapping = {
            'wifi': 1,
            'tv': 2,
            'air_conditioning': 3,
            'heating': 4,
            'kitchen': 5,
            // Add more mappings as needed
        };

        return amenities.map(amenity => amenityMapping[amenity]).filter(id => id);
    }

    _parseBookings(responseData) {
        return responseData.reservations.map(reservation => ({
            otaBookingId: reservation.confirmation_code,
            otaGuestDetails: {
                name: `${reservation.guest.first_name} ${reservation.guest.last_name}`,
                email: reservation.guest.email,
                phone: reservation.guest.phone,
                otaGuestId: reservation.guest.id
            },
            bookingDetails: {
                checkIn: new Date(reservation.check_in),
                checkOut: new Date(reservation.check_out),
                adults: reservation.guests,
                children: 0, // Airbnb doesn't differentiate
                roomType: this.channel.mappings.roomTypes[0].localRoomId,
                otaPrice: reservation.total_price,
                currency: reservation.native_currency,
                specialRequests: reservation.message || ''
            },
            status: this._mapAirbnbStatus(reservation.status)
        }));
    }

    _mapAirbnbStatus(airbnbStatus) {
        const statusMapping = {
            'pending': 'pending',
            'accepted': 'confirmed',
            'cancelled': 'cancelled',
            'declined': 'cancelled'
        };
        return statusMapping[airbnbStatus] || 'pending';
    }
}

module.exports = AirbnbService;

================
File: src/services/ota/booking.com.service.js
================
const axios = require('axios');
const crypto = require('crypto');

class BookingComService {
    constructor(channel) {
        this.channel = channel;
        this.baseUrl = 'https://distribution-xml.booking.com/2.0';
        this.headers = {
            'Authorization': `Basic ${Buffer.from(
                `${this.channel.credentials.apiKey}:${this.channel.credentials.apiSecret}`
            ).toString('base64')}`,
            'Content-Type': 'application/xml',
            'Accept': 'application/xml'
        };
    }

    // Inventory Management
    async syncInventory(rooms, mappedRooms) {
        try {
            const xml = this._buildInventoryXML(rooms, mappedRooms);
            const response = await axios.post(
                `${this.baseUrl}/hotels/${this.channel.credentials.propertyId}/rooms`,
                xml,
                { headers: this.headers }
            );
            return this._parseResponse(response);
        } catch (error) {
            throw new Error(`Booking.com inventory sync failed: ${error.message}`);
        }
    }

    // Price Management
    async syncPrices(rooms) {
        try {
            const xml = this._buildRateXML(rooms);
            const response = await axios.post(
                `${this.baseUrl}/hotels/${this.channel.credentials.propertyId}/rates`,
                xml,
                { headers: this.headers }
            );
            return this._parseResponse(response);
        } catch (error) {
            throw new Error(`Booking.com price sync failed: ${error.message}`);
        }
    }

    // Availability Management
    async syncAvailability(rooms, bookings) {
        try {
            const xml = this._buildAvailabilityXML(rooms, bookings);
            const response = await axios.post(
                `${this.baseUrl}/hotels/${this.channel.credentials.propertyId}/availability`,
                xml,
                { headers: this.headers }
            );
            return this._parseResponse(response);
        } catch (error) {
            throw new Error(`Booking.com availability sync failed: ${error.message}`);
        }
    }

    // Booking Management
    async getNewBookings() {
        try {
            const response = await axios.get(
                `${this.baseUrl}/hotels/${this.channel.credentials.propertyId}/reservations`,
                { headers: this.headers }
            );
            return this._parseBookings(response);
        } catch (error) {
            throw new Error(`Booking.com reservation fetch failed: ${error.message}`);
        }
    }

    // Webhook Verification
    verifyWebhook(signature, payload) {
        const computedSignature = crypto
            .createHmac('sha256', this.channel.webhookSecret)
            .update(payload)
            .digest('hex');
        return signature === computedSignature;
    }

    // Private helper methods
    _buildInventoryXML(rooms, mappedRooms) {
        // Build XML for room inventory update
        return `<?xml version="1.0" encoding="UTF-8"?>
        <request>
            <username>${this.channel.credentials.apiKey}</username>
            <hotel_id>${this.channel.credentials.propertyId}</hotel_id>
            <rooms>
                ${mappedRooms.map(mapping => {
                    const room = rooms.find(r => r._id.toString() === mapping.localRoomId.toString());
                    return `
                        <room>
                            <room_id>${mapping.otaRoomId}</room_id>
                            <name>${room.name}</name>
                            <description>${room.description}</description>
                            <max_occupancy>${room.maxOccupancy}</max_occupancy>
                            <amenities>
                                ${room.amenities.map(amenity => `<amenity>${amenity}</amenity>`).join('')}
                            </amenities>
                        </room>
                    `;
                }).join('')}
            </rooms>
        </request>`;
    }

    _buildRateXML(rooms) {
        // Build XML for rate update
        const today = new Date();
        return `<?xml version="1.0" encoding="UTF-8"?>
        <request>
            <username>${this.channel.credentials.apiKey}</username>
            <hotel_id>${this.channel.credentials.propertyId}</hotel_id>
            <rates>
                ${rooms.map(room => `
                    <rate>
                        <room_id>${this._getMappedRoomId(room._id)}</room_id>
                        <rate_plan_id>${this._getMappedRatePlanId(room._id)}</rate_plan_id>
                        <dates>
                            <date value="${today.toISOString().split('T')[0]}">
                                <rate>${room.baseRate}</rate>
                                <min_stay>1</min_stay>
                                <max_stay>30</max_stay>
                            </date>
                        </dates>
                    </rate>
                `).join('')}
            </rates>
        </request>`;
    }

    _buildAvailabilityXML(rooms, bookings) {
        // Build XML for availability update
        const today = new Date();
        return `<?xml version="1.0" encoding="UTF-8"?>
        <request>
            <username>${this.channel.credentials.apiKey}</username>
            <hotel_id>${this.channel.credentials.propertyId}</hotel_id>
            <availability>
                ${rooms.map(room => {
                    const roomBookings = bookings.filter(b => 
                        b.room.toString() === room._id.toString()
                    );
                    const availableRooms = room.totalRooms - roomBookings.length;
                    return `
                        <room>
                            <room_id>${this._getMappedRoomId(room._id)}</room_id>
                            <dates>
                                <date value="${today.toISOString().split('T')[0]}">
                                    <rooms>${availableRooms}</rooms>
                                </date>
                            </dates>
                        </room>
                    `;
                }).join('')}
            </availability>
        </request>`;
    }

    _parseResponse(response) {
        // Parse XML response from Booking.com
        // Implementation depends on the response format
        return response.data;
    }

    _parseBookings(response) {
        // Parse booking data from XML response
        // Implementation depends on the response format
        return response.data;
    }

    _getMappedRoomId(localRoomId) {
        const mapping = this.channel.mappings.roomTypes.find(
            m => m.localRoomId.toString() === localRoomId.toString()
        );
        return mapping ? mapping.otaRoomId : null;
    }

    _getMappedRatePlanId(localRoomId) {
        const mapping = this.channel.mappings.ratePlans.find(
            m => m.localRoomId.toString() === localRoomId.toString()
        );
        return mapping ? mapping.otaRatePlanId : null;
    }
}

module.exports = BookingComService;

================
File: src/services/ota/expedia.service.js
================
const axios = require('axios');
const crypto = require('crypto');
const cacheService = require('../cache.service');

class ExpediaService {
    constructor(channel) {
        this.channel = channel;
        this.baseUrl = 'https://api.expediaconnect.com/v3';
        this.headers = {
            'Authorization': `Basic ${Buffer.from(
                `${this.channel.credentials.apiKey}:${this.channel.credentials.apiSecret}`
            ).toString('base64')}`,
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        };
    }

    // Inventory Management
    async syncInventory(rooms, mappedRooms) {
        try {
            // Check cache first
            const cachedInventory = await cacheService.getInventory(this.channel.hotel);
            if (cachedInventory) {
                const needsUpdate = this._checkInventoryNeedsUpdate(rooms, cachedInventory);
                if (!needsUpdate) {
                    return cachedInventory;
                }
            }

            const payload = this._buildInventoryPayload(rooms, mappedRooms);
            const response = await axios.post(
                `${this.baseUrl}/properties/${this.channel.credentials.propertyId}/rooms`,
                payload,
                { headers: this.headers }
            );

            // Cache the new inventory data
            await cacheService.setInventory(this.channel.hotel, response.data);
            return response.data;
        } catch (error) {
            throw new Error(`Expedia inventory sync failed: ${error.message}`);
        }
    }

    // Price Management
    async syncPrices(rooms) {
        try {
            // Check cache first
            const cachedRates = await cacheService.getRates(this.channel.hotel);
            if (cachedRates) {
                const needsUpdate = this._checkRatesNeedUpdate(rooms, cachedRates);
                if (!needsUpdate) {
                    return cachedRates;
                }
            }

            const payload = this._buildRatesPayload(rooms);
            const response = await axios.post(
                `${this.baseUrl}/properties/${this.channel.credentials.propertyId}/rates`,
                payload,
                { headers: this.headers }
            );

            // Cache the new rates data
            await cacheService.setRates(this.channel.hotel, response.data);
            return response.data;
        } catch (error) {
            throw new Error(`Expedia rates sync failed: ${error.message}`);
        }
    }

    // Availability Management
    async syncAvailability(rooms, bookings) {
        try {
            const today = new Date().toISOString().split('T')[0];
            
            // Check cache first
            const cachedAvailability = await cacheService.getAvailability(
                this.channel.hotel,
                today
            );
            if (cachedAvailability) {
                const needsUpdate = this._checkAvailabilityNeedsUpdate(
                    rooms,
                    bookings,
                    cachedAvailability
                );
                if (!needsUpdate) {
                    return cachedAvailability;
                }
            }

            const payload = this._buildAvailabilityPayload(rooms, bookings);
            const response = await axios.post(
                `${this.baseUrl}/properties/${this.channel.credentials.propertyId}/availability`,
                payload,
                { headers: this.headers }
            );

            // Cache the new availability data
            await cacheService.setAvailability(
                this.channel.hotel,
                today,
                response.data
            );
            return response.data;
        } catch (error) {
            throw new Error(`Expedia availability sync failed: ${error.message}`);
        }
    }

    // Booking Management
    async getNewBookings() {
        try {
            const response = await axios.get(
                `${this.baseUrl}/properties/${this.channel.credentials.propertyId}/bookings`,
                { headers: this.headers }
            );
            return this._parseBookings(response.data);
        } catch (error) {
            throw new Error(`Expedia booking fetch failed: ${error.message}`);
        }
    }

    // Webhook verification
    verifyWebhook(signature, payload) {
        const computedSignature = crypto
            .createHmac('sha256', this.channel.webhookSecret)
            .update(payload)
            .digest('hex');
        return signature === computedSignature;
    }

    // Private helper methods
    _buildInventoryPayload(rooms, mappedRooms) {
        return {
            rooms: mappedRooms.map(mapping => {
                const room = rooms.find(r => r._id.toString() === mapping.localRoomId.toString());
                return {
                    roomTypeId: mapping.otaRoomId,
                    name: room.name,
                    description: room.description,
                    maxOccupancy: room.maxOccupancy,
                    bedConfiguration: {
                        type: room.bedType,
                        count: room.bedCount
                    },
                    amenities: this._mapAmenitiesForExpedia(room.amenities),
                    images: room.images.map(img => ({
                        url: img.url,
                        caption: img.caption
                    }))
                };
            })
        };
    }

    _buildRatesPayload(rooms) {
        const today = new Date();
        const thirtyDaysFromNow = new Date(today);
        thirtyDaysFromNow.setDate(today.getDate() + 30);

        return {
            rates: rooms.map(room => ({
                roomTypeId: this._getMappedRoomId(room._id),
                ratePlanId: this._getMappedRatePlanId(room._id),
                dates: this._generateDailyRates(today, thirtyDaysFromNow, room.baseRate)
            }))
        };
    }

    _buildAvailabilityPayload(rooms, bookings) {
        const today = new Date();
        const thirtyDaysFromNow = new Date(today);
        thirtyDaysFromNow.setDate(today.getDate() + 30);

        return {
            availability: rooms.map(room => ({
                roomTypeId: this._getMappedRoomId(room._id),
                dates: this._generateAvailabilityUpdates(
                    today,
                    thirtyDaysFromNow,
                    room,
                    bookings
                )
            }))
        };
    }

    _generateDailyRates(startDate, endDate, baseRate) {
        const dates = [];
        const currentDate = new Date(startDate);

        while (currentDate <= endDate) {
            dates.push({
                date: currentDate.toISOString().split('T')[0],
                baseRate: baseRate,
                taxRate: 0.1, // 10% tax
                currency: 'USD'
            });
            currentDate.setDate(currentDate.getDate() + 1);
        }

        return dates;
    }

    _generateAvailabilityUpdates(startDate, endDate, room, bookings) {
        const dates = [];
        const currentDate = new Date(startDate);

        while (currentDate <= endDate) {
            const dateStr = currentDate.toISOString().split('T')[0];
            const dayBookings = bookings.filter(booking => {
                const bookingDate = new Date(booking.checkInDate);
                return bookingDate.toISOString().split('T')[0] === dateStr;
            });

            dates.push({
                date: dateStr,
                availableRooms: room.totalRooms - dayBookings.length,
                restrictions: {
                    closed: false,
                    minLOS: 1,
                    maxLOS: 30
                }
            });

            currentDate.setDate(currentDate.getDate() + 1);
        }

        return dates;
    }

    _mapAmenitiesForExpedia(amenities) {
        // Map local amenities to Expedia amenity codes
        const amenityMapping = {
            'wifi': 'WIFI',
            'tv': 'TV',
            'air_conditioning': 'AIR_CONDITIONING',
            'heating': 'HEATING',
            'kitchen': 'KITCHEN'
            // Add more mappings as needed
        };

        return amenities
            .map(amenity => amenityMapping[amenity])
            .filter(code => code);
    }

    _getMappedRoomId(localRoomId) {
        const mapping = this.channel.mappings.roomTypes.find(
            m => m.localRoomId.toString() === localRoomId.toString()
        );
        return mapping ? mapping.otaRoomId : null;
    }

    _getMappedRatePlanId(localRoomId) {
        const mapping = this.channel.mappings.ratePlans.find(
            m => m.localRoomId.toString() === localRoomId.toString()
        );
        return mapping ? mapping.otaRatePlanId : null;
    }

    _parseBookings(responseData) {
        return responseData.bookings.map(booking => ({
            otaBookingId: booking.id,
            otaGuestDetails: {
                name: `${booking.guest.firstName} ${booking.guest.lastName}`,
                email: booking.guest.email,
                phone: booking.guest.phone,
                otaGuestId: booking.guest.id
            },
            bookingDetails: {
                checkIn: new Date(booking.checkIn),
                checkOut: new Date(booking.checkOut),
                adults: booking.numberOfAdults,
                children: booking.numberOfChildren,
                roomType: this._getLocalRoomId(booking.roomTypeId),
                otaPrice: booking.totalPrice,
                currency: booking.currency,
                specialRequests: booking.specialRequests
            },
            status: this._mapExpediaStatus(booking.status)
        }));
    }

    _mapExpediaStatus(expediaStatus) {
        const statusMapping = {
            'PENDING': 'pending',
            'CONFIRMED': 'confirmed',
            'CANCELLED': 'cancelled',
            'MODIFIED': 'modified'
        };
        return statusMapping[expediaStatus] || 'pending';
    }

    // Cache validation methods
    _checkInventoryNeedsUpdate(rooms, cachedInventory) {
        // Compare room details with cached data
        // Return true if update is needed
        return true; // Implement actual comparison logic
    }

    _checkRatesNeedUpdate(rooms, cachedRates) {
        // Compare rates with cached data
        // Return true if update is needed
        return true; // Implement actual comparison logic
    }

    _checkAvailabilityNeedsUpdate(rooms, bookings, cachedAvailability) {
        // Compare availability with cached data
        // Return true if update is needed
        return true; // Implement actual comparison logic
    }
}

module.exports = ExpediaService;

================
File: src/services/rate-manager.service.js
================
const RateManager = require('../models/RateManager');
const Room = require('../models/Room');
const Hotel = require('../models/Hotel');
const Booking = require('../models/Booking');
const notificationService = require('./notification.service');

class RateManagerService {
    constructor() {
        this.initializeRateRules();
    }

    initializeRateRules() {
        this.rateRules = {
            OCCUPANCY: {
                name: 'Occupancy-based Pricing',
                evaluate: (occupancy, rule) => {
                    switch (rule.operator) {
                        case 'GREATER_THAN':
                            return occupancy > rule.value;
                        case 'LESS_THAN':
                            return occupancy < rule.value;
                        case 'BETWEEN':
                            return occupancy >= rule.value[0] && occupancy <= rule.value[1];
                        default:
                            return false;
                    }
                }
            },
            SEASON: {
                name: 'Seasonal Pricing',
                evaluate: (date, rule) => {
                    const currentMonth = date.getMonth() + 1;
                    return rule.value.includes(currentMonth);
                }
            },
            DAY_OF_WEEK: {
                name: 'Day of Week Pricing',
                evaluate: (date, rule) => {
                    const dayOfWeek = date.getDay();
                    return rule.value.includes(dayOfWeek);
                }
            },
            ADVANCE_BOOKING: {
                name: 'Advance Booking Pricing',
                evaluate: (daysInAdvance, rule) => {
                    switch (rule.operator) {
                        case 'GREATER_THAN':
                            return daysInAdvance > rule.value;
                        case 'LESS_THAN':
                            return daysInAdvance < rule.value;
                        case 'BETWEEN':
                            return daysInAdvance >= rule.value[0] && daysInAdvance <= rule.value[1];
                        default:
                            return false;
                    }
                }
            },
            LENGTH_OF_STAY: {
                name: 'Length of Stay Pricing',
                evaluate: (nights, rule) => {
                    switch (rule.operator) {
                        case 'GREATER_THAN':
                            return nights > rule.value;
                        case 'LESS_THAN':
                            return nights < rule.value;
                        case 'BETWEEN':
                            return nights >= rule.value[0] && nights <= rule.value[1];
                        default:
                            return false;
                    }
                }
            }
        };
    }

    async getRateManagerDashboard(hotelId) {
        try {
            const rates = await RateManager.find({ hotel: hotelId })
                .populate('roomType')
                .lean();

            const occupancyStats = await this.calculateOccupancyStats(hotelId);
            const revenueStats = await this.calculateRevenueStats(hotelId);
            const competitorRates = await this.getCompetitorRates(hotelId);

            return {
                rates,
                occupancyStats,
                revenueStats,
                competitorRates
            };
        } catch (error) {
            console.error('Error getting rate manager dashboard:', error);
            throw error;
        }
    }

    async calculateOccupancyStats(hotelId) {
        const today = new Date();
        const thirtyDaysAgo = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000);

        const bookings = await Booking.find({
            hotel: hotelId,
            checkIn: { $gte: thirtyDaysAgo },
            status: { $ne: 'CANCELLED' }
        });

        const rooms = await Room.countDocuments({ hotel: hotelId });
        const occupiedRooms = new Set(bookings.map(b => b.room.toString())).size;

        return {
            currentOccupancy: (occupiedRooms / rooms) * 100,
            thirtyDayAverage: await this.calculateAverageOccupancy(hotelId, thirtyDaysAgo),
            forecast: await this.forecastOccupancy(hotelId)
        };
    }

    async calculateRevenueStats(hotelId) {
        const today = new Date();
        const thirtyDaysAgo = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000);

        const bookings = await Booking.find({
            hotel: hotelId,
            createdAt: { $gte: thirtyDaysAgo },
            status: { $ne: 'CANCELLED' }
        });

        const revenue = bookings.reduce((sum, booking) => sum + booking.totalAmount, 0);
        const rooms = bookings.length;

        return {
            totalRevenue: revenue,
            averageRoomRate: rooms > 0 ? revenue / rooms : 0,
            revPAR: await this.calculateRevPAR(hotelId, thirtyDaysAgo)
        };
    }

    async getCompetitorRates(hotelId) {
        // This would integrate with a rate shopping service
        return {
            averageCompetitorRate: 0,
            ratePosition: 0,
            recommendations: []
        };
    }

    async calculateAverageOccupancy(hotelId, startDate) {
        const bookings = await Booking.find({
            hotel: hotelId,
            checkIn: { $gte: startDate },
            status: { $ne: 'CANCELLED' }
        });

        const rooms = await Room.countDocuments({ hotel: hotelId });
        const dailyOccupancy = {};

        bookings.forEach(booking => {
            const checkIn = new Date(booking.checkIn);
            const checkOut = new Date(booking.checkOut);
            
            for (let d = checkIn; d < checkOut; d.setDate(d.getDate() + 1)) {
                const date = d.toISOString().split('T')[0];
                dailyOccupancy[date] = (dailyOccupancy[date] || 0) + 1;
            }
        });

        const occupancyRates = Object.values(dailyOccupancy).map(occupied => (occupied / rooms) * 100);
        return occupancyRates.reduce((sum, rate) => sum + rate, 0) / occupancyRates.length;
    }

    async calculateRevPAR(hotelId, startDate) {
        const bookings = await Booking.find({
            hotel: hotelId,
            createdAt: { $gte: startDate },
            status: { $ne: 'CANCELLED' }
        });

        const revenue = bookings.reduce((sum, booking) => sum + booking.totalAmount, 0);
        const rooms = await Room.countDocuments({ hotel: hotelId });
        const days = 30; // Assuming 30-day period

        return revenue / (rooms * days);
    }

    async forecastOccupancy(hotelId) {
        const futureDates = [];
        const today = new Date();
        
        for (let i = 1; i <= 30; i++) {
            const date = new Date(today);
            date.setDate(date.getDate() + i);
            
            const bookings = await Booking.countDocuments({
                hotel: hotelId,
                checkIn: { $lte: date },
                checkOut: { $gt: date },
                status: { $ne: 'CANCELLED' }
            });

            const rooms = await Room.countDocuments({ hotel: hotelId });
            
            futureDates.push({
                date: date.toISOString().split('T')[0],
                occupancy: (bookings / rooms) * 100
            });
        }

        return futureDates;
    }

    async updateRates(rateId, updates) {
        try {
            const rate = await RateManager.findById(rateId);
            if (!rate) {
                throw new Error('Rate not found');
            }

            Object.assign(rate, updates);
            await rate.save();

            // Notify relevant staff
            await notificationService.notifyRateChange(rate);

            return rate;
        } catch (error) {
            console.error('Error updating rates:', error);
            throw error;
        }
    }

    async createRateRule(rateId, ruleData) {
        try {
            const rate = await RateManager.findById(rateId);
            if (!rate) {
                throw new Error('Rate not found');
            }

            if (!rate.dynamicPricing.enabled) {
                rate.dynamicPricing.enabled = true;
            }

            rate.dynamicPricing.rules.push(ruleData);
            await rate.save();

            return rate;
        } catch (error) {
            console.error('Error creating rate rule:', error);
            throw error;
        }
    }

    async evaluateRateRules(rate, context) {
        if (!rate.dynamicPricing.enabled) {
            return rate.baseRate;
        }

        let finalRate = rate.baseRate;

        for (const rule of rate.dynamicPricing.rules) {
            const ruleType = this.rateRules[rule.condition];
            if (!ruleType) continue;

            const applies = ruleType.evaluate(context[rule.condition.toLowerCase()], rule);
            if (applies) {
                if (rule.adjustment.type === 'PERCENTAGE') {
                    finalRate *= (1 + rule.adjustment.value / 100);
                } else {
                    finalRate += rule.adjustment.value;
                }
            }
        }

        // Ensure rate is within bounds
        if (rate.dynamicPricing.minRate) {
            finalRate = Math.max(finalRate, rate.dynamicPricing.minRate);
        }
        if (rate.dynamicPricing.maxRate) {
            finalRate = Math.min(finalRate, rate.dynamicPricing.maxRate);
        }

        return Math.round(finalRate * 100) / 100;
    }
}

module.exports = new RateManagerService();

================
File: src/services/recommendation.service.js
================
const Guest = require('../models/Guest');
const Booking = require('../models/Booking');
const Room = require('../models/Room');
const { calculateSimilarity } = require('../utils/ml.utils');

class RecommendationService {
    constructor() {
        this.modelCache = new Map(); // Cache for trained models
        this.lastTrainingTime = null;
        this.TRAINING_INTERVAL = 24 * 60 * 60 * 1000; // 24 hours
    }

    async getGuestRecommendations(guestId) {
        try {
            const guest = await Guest.findById(guestId)
                .populate('bookingHistory.booking');

            // Get guest preferences and history
            const guestProfile = await this.buildGuestProfile(guest);
            
            // Get personalized recommendations
            const recommendations = await this.generateRecommendations(guestProfile);

            return recommendations;
        } catch (error) {
            console.error('Error getting guest recommendations:', error);
            throw error;
        }
    }

    async buildGuestProfile(guest) {
        try {
            // Extract preferences from booking history
            const bookingPreferences = guest.bookingHistory.map(history => ({
                roomType: history.booking.roomType,
                season: this.getSeason(history.booking.checkIn),
                duration: this.calculateDuration(history.booking.checkIn, history.booking.checkOut),
                amount: history.booking.totalAmount
            }));

            // Calculate average preferences
            const profile = {
                preferredRoomTypes: this.getTopPreferences(bookingPreferences, 'roomType'),
                preferredSeasons: this.getTopPreferences(bookingPreferences, 'season'),
                averageStayDuration: this.calculateAverage(bookingPreferences, 'duration'),
                averageSpending: this.calculateAverage(bookingPreferences, 'amount'),
                loyaltyTier: guest.loyaltyTier,
                specialRequests: guest.specialRequests || []
            };

            return profile;
        } catch (error) {
            console.error('Error building guest profile:', error);
            throw error;
        }
    }

    async generateRecommendations(guestProfile) {
        try {
            // Get available rooms
            const rooms = await Room.find({ status: 'available' });

            // Score each room based on guest preferences
            const scoredRooms = rooms.map(room => ({
                room,
                score: this.calculateRoomScore(room, guestProfile)
            }));

            // Sort by score and return top recommendations
            return scoredRooms
                .sort((a, b) => b.score - a.score)
                .slice(0, 5)
                .map(({ room }) => room);
        } catch (error) {
            console.error('Error generating recommendations:', error);
            throw error;
        }
    }

    calculateRoomScore(room, profile) {
        let score = 0;

        // Room type preference
        if (profile.preferredRoomTypes.includes(room.type)) {
            score += 5;
        }

        // Price range
        const priceScore = Math.max(0, 5 - Math.abs(room.price - profile.averageSpending) / 100);
        score += priceScore;

        // Amenities match
        const amenityScore = this.calculateAmenityScore(room.amenities, profile.specialRequests);
        score += amenityScore;

        // Loyalty tier bonus
        const tierMultiplier = {
            'platinum': 1.3,
            'gold': 1.2,
            'silver': 1.1,
            'bronze': 1.0
        };
        score *= tierMultiplier[profile.loyaltyTier] || 1.0;

        return score;
    }

    calculateAmenityScore(roomAmenities, guestPreferences) {
        const matchingAmenities = roomAmenities.filter(amenity =>
            guestPreferences.includes(amenity)
        );
        return matchingAmenities.length * 2;
    }

    // Helper methods
    getSeason(date) {
        const month = date.getMonth();
        if (month >= 2 && month <= 4) return 'spring';
        if (month >= 5 && month <= 7) return 'summer';
        if (month >= 8 && month <= 10) return 'autumn';
        return 'winter';
    }

    calculateDuration(checkIn, checkOut) {
        return Math.ceil((checkOut - checkIn) / (1000 * 60 * 60 * 24));
    }

    getTopPreferences(history, field) {
        const counts = history.reduce((acc, curr) => {
            acc[curr[field]] = (acc[curr[field]] || 0) + 1;
            return acc;
        }, {});

        return Object.entries(counts)
            .sort(([, a], [, b]) => b - a)
            .slice(0, 3)
            .map(([value]) => value);
    }

    calculateAverage(array, field) {
        if (array.length === 0) return 0;
        const sum = array.reduce((acc, curr) => acc + curr[field], 0);
        return sum / array.length;
    }
}

module.exports = new RecommendationService();

================
File: src/services/user.service.js
================
const User = require('../models/User');
const LoyaltyProgram = require('../models/LoyaltyProgram');
const Booking = require('../models/Booking');
const Referral = require('../models/Referral');
const emailService = require('./email.service');

// Get all users
exports.getAllUsers = async () => {
    return await User.find().select('-password');
};

// Get user by ID
exports.getUserById = async (userId) => {
    const user = await User.findById(userId).select('-password');
    if (!user) {
        throw new Error('User not found');
    }
    return user;
};

// Update user
exports.updateUser = async (userId, updateData) => {
    const user = await User.findByIdAndUpdate(
        userId,
        { $set: updateData },
        { new: true, runValidators: true }
    ).select('-password');
    
    if (!user) {
        throw new Error('User not found');
    }
    return user;
};

// Get current user
exports.getCurrentUser = async (userId) => {
    const user = await User.findById(userId)
        .select('-password')
        .select('-__v');
    
    if (!user) {
        throw new Error('User not found');
    }
    return user;
};

// Approve admin
exports.approveAdmin = async (userId) => {
    // Find and update the user to be admin
    const user = await User.findById(userId);
    if (!user) {
        throw new Error('User not found');
    }

    if (user.role === 'admin') {
        throw new Error('User is already an admin');
    }

    user.role = 'admin';
    await user.save();

    return user;
};

// Get user profile with loyalty information
exports.getUserProfile = async (userId) => {
    try {
        const user = await User.findById(userId)
            .populate('loyaltyProgram')
            .populate({
                path: 'referrals',
                select: 'referredUser status bonusPoints date'
            });
        
        if (!user) {
            throw new Error('User not found');
        }

        // Get loyalty tier benefits
        if (user.loyaltyProgram) {
            user.loyaltyProgram.benefits = await calculateLoyaltyBenefits(user.loyaltyProgram.tier);
        }

        return user;
    } catch (error) {
        console.error('Error in getUserProfile:', error);
        throw error;
    }
};

// Update user preferences
exports.updateUserPreferences = async (userId, preferences) => {
    try {
        const user = await User.findByIdAndUpdate(
            userId,
            { $set: { preferences } },
            { new: true }
        ).populate('loyaltyProgram');

        if (!user) {
            throw new Error('User not found');
        }

        // Send email notification for preference update
        await emailService.sendPreferenceUpdateEmail(user.email, user.name);

        return user;
    } catch (error) {
        console.error('Error in updateUserPreferences:', error);
        throw error;
    }
};

// Get user's loyalty status
exports.getUserLoyaltyStatus = async (userId) => {
    try {
        const loyalty = await LoyaltyProgram.findOne({ user: userId })
            .populate({
                path: 'pointsHistory',
                options: { sort: { date: -1 }, limit: 10 }
            });

        if (!loyalty) {
            return null;
        }

        // Calculate points needed for next tier
        const nextTierInfo = await calculateNextTierRequirements(loyalty.points, loyalty.tier);

        return {
            currentTier: loyalty.tier,
            points: loyalty.points,
            pointsHistory: loyalty.pointsHistory,
            nextTier: nextTierInfo.nextTier,
            pointsNeeded: nextTierInfo.pointsNeeded,
            benefits: await calculateLoyaltyBenefits(loyalty.tier)
        };
    } catch (error) {
        console.error('Error in getUserLoyaltyStatus:', error);
        throw error;
    }
};

// Get user's referral history
exports.getUserReferrals = async (userId) => {
    try {
        const referrals = await Referral.find({ referrer: userId })
            .populate('referredUser', 'name email')
            .sort({ date: -1 });

        const stats = {
            total: referrals.length,
            successful: referrals.filter(r => r.status === 'completed').length,
            pending: referrals.filter(r => r.status === 'pending').length,
            totalPoints: referrals.reduce((sum, r) => sum + (r.bonusPoints || 0), 0)
        };

        return { referrals, stats };
    } catch (error) {
        console.error('Error in getUserReferrals:', error);
        throw error;
    }
};

// Helper function to calculate loyalty benefits
async function calculateLoyaltyBenefits(tier) {
    const benefits = {
        bronze: {
            pointsMultiplier: 1,
            lateCheckout: false,
            roomUpgrades: false,
            welcomeDrink: true
        },
        silver: {
            pointsMultiplier: 1.2,
            lateCheckout: true,
            roomUpgrades: false,
            welcomeDrink: true,
            breakfastDiscount: 10
        },
        gold: {
            pointsMultiplier: 1.5,
            lateCheckout: true,
            roomUpgrades: true,
            welcomeDrink: true,
            breakfastDiscount: 20,
            spaDiscount: 15
        },
        platinum: {
            pointsMultiplier: 2,
            lateCheckout: true,
            roomUpgrades: true,
            welcomeDrink: true,
            breakfastDiscount: 30,
            spaDiscount: 25,
            airportTransfer: true
        }
    };

    return benefits[tier] || benefits.bronze;
}

// Helper function to calculate next tier requirements
async function calculateNextTierRequirements(currentPoints, currentTier) {
    const tierThresholds = {
        bronze: 0,
        silver: 1000,
        gold: 5000,
        platinum: 10000
    };

    const tiers = ['bronze', 'silver', 'gold', 'platinum'];
    const currentTierIndex = tiers.indexOf(currentTier);
    
    if (currentTierIndex === tiers.length - 1) {
        return {
            nextTier: null,
            pointsNeeded: 0
        };
    }

    const nextTier = tiers[currentTierIndex + 1];
    const pointsNeeded = tierThresholds[nextTier] - currentPoints;

    return {
        nextTier,
        pointsNeeded: Math.max(0, pointsNeeded)
    };
}

================
File: src/utils/email.js
================
const nodemailer = require('nodemailer');
const path = require('path');
const fs = require('fs');
const Handlebars = require('handlebars');

// Create transporter
const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASSWORD
    }
});

// Cache for compiled templates
const templateCache = {};

// Load and compile template
const getTemplate = (templateName) => {
    if (templateCache[templateName]) {
        return templateCache[templateName];
    }

    const templatePath = path.join(__dirname, '../views/emails', `${templateName}.hbs`);
    const templateContent = fs.readFileSync(templatePath, 'utf8');
    const template = Handlebars.compile(templateContent);
    templateCache[templateName] = template;
    return template;
};

/**
 * Send email using template
 * @param {Object} options
 * @param {string} options.to - Recipient email
 * @param {string} options.subject - Email subject
 * @param {string} options.template - Template name (without .hbs)
 * @param {Object} options.context - Template variables
 */
const sendEmail = async (options) => {
    try {
        const template = getTemplate(options.template);
        const html = template({
            ...options.context,
            appName: 'Hotel Management System',
            currentYear: new Date().getFullYear()
        });

        const mailOptions = {
            from: process.env.EMAIL_FROM || 'Hotel Management System',
            to: options.to,
            subject: options.subject,
            html
        };

        await transporter.sendMail(mailOptions);
    } catch (error) {
        console.error('Error sending email:', error);
        throw error;
    }
};

/**
 * Send loyalty program welcome email
 * @param {Object} member - Loyalty program member information
 */
const sendLoyaltyWelcomeEmail = async (member) => {
    try {
        await sendEmail({
            to: member.email,
            subject: 'Welcome to Our Loyalty Program',
            template: 'loyalty-welcome',
            context: {
                member,
                tier: member.membershipTier,
                points: member.points,
                benefits: getTierBenefits(member.membershipTier),
                pointsMultiplier: getPointsMultiplier(member.membershipTier),
                dashboardUrl: `${process.env.FRONTEND_URL}/loyalty/dashboard`,
                preferencesUrl: `${process.env.FRONTEND_URL}/loyalty/preferences`
            }
        });
    } catch (error) {
        console.error('Error sending loyalty welcome email:', error);
    }
};

/**
 * Send loyalty points notification email
 * @param {Object} member - Loyalty program member information
 * @param {number} points - Points earned/redeemed
 * @param {boolean} isEarned - Whether points were earned (true) or redeemed (false)
 * @param {string} description - Description of the transaction
 */
const sendLoyaltyPointsEmail = async (member, points, isEarned, description) => {
    try {
        const nextTier = getNextTier(member.membershipTier);
        const pointsToNextTier = nextTier ? getPointsRequiredForTier(nextTier) - member.lifetimePoints : 0;
        const tierProgress = nextTier ? (member.lifetimePoints / getPointsRequiredForTier(nextTier)) * 100 : 100;

        await sendEmail({
            to: member.email,
            subject: isEarned ? 'Points Earned!' : 'Points Redeemed',
            template: 'loyalty-points',
            context: {
                member,
                points,
                isEarned,
                description,
                currentTier: member.membershipTier,
                totalPoints: member.points,
                nextTier,
                pointsToNextTier,
                tierProgress,
                pointsMultiplier: getPointsMultiplier(member.membershipTier),
                dashboardUrl: `${process.env.FRONTEND_URL}/loyalty/dashboard`,
                preferencesUrl: `${process.env.FRONTEND_URL}/loyalty/preferences`
            }
        });
    } catch (error) {
        console.error('Error sending loyalty points email:', error);
    }
};

/**
 * Send tier upgrade notification email
 * @param {Object} member - Loyalty program member information
 * @param {string} newTier - New membership tier
 */
const sendTierUpgradeEmail = async (member, newTier) => {
    try {
        await sendEmail({
            to: member.email,
            subject: `Congratulations! You're Now a ${newTier} Member`,
            template: 'loyalty-tier-upgrade',
            context: {
                member,
                newTier,
                benefits: getTierBenefits(newTier),
                pointsMultiplier: getPointsMultiplier(newTier),
                totalPoints: member.points,
                yearlyPoints: member.pointsHistory
                    .filter(h => h.date.getFullYear() === new Date().getFullYear())
                    .reduce((sum, h) => sum + (h.type === 'earned' ? h.points : 0), 0),
                availableRewards: member.rewards.filter(r => r.status === 'available').length,
                dashboardUrl: `${process.env.FRONTEND_URL}/loyalty/dashboard`,
                preferencesUrl: `${process.env.FRONTEND_URL}/loyalty/preferences`
            }
        });
    } catch (error) {
        console.error('Error sending tier upgrade email:', error);
    }
};

// Helper functions for loyalty program
const getTierBenefits = (tier) => {
    const benefits = {
        Bronze: [
            { name: 'Points Earning', description: '1x points on all stays' },
            { name: 'Member Rates', description: 'Access to exclusive member rates' }
        ],
        Silver: [
            { name: 'Points Earning', description: '1.5x points on all stays' },
            { name: 'Early Check-in', description: 'Subject to availability' },
            { name: 'Welcome Drink', description: 'Complimentary welcome drink' }
        ],
        Gold: [
            { name: 'Points Earning', description: '2x points on all stays' },
            { name: 'Room Upgrade', description: 'Subject to availability' },
            { name: 'Late Check-out', description: 'Until 2 PM' },
            { name: 'Welcome Amenity', description: 'Choice of welcome gift' }
        ],
        Platinum: [
            { name: 'Points Earning', description: '3x points on all stays' },
            { name: 'Guaranteed Upgrade', description: 'When available at booking' },
            { name: 'Late Check-out', description: 'Until 4 PM' },
            { name: 'Lounge Access', description: 'Executive lounge access' },
            { name: 'Welcome Amenity', description: 'Premium welcome gift' }
        ]
    };
    return benefits[tier] || benefits.Bronze;
};

const getPointsMultiplier = (tier) => {
    const multipliers = {
        Bronze: 1,
        Silver: 1.5,
        Gold: 2,
        Platinum: 3
    };
    return multipliers[tier] || 1;
};

const getNextTier = (currentTier) => {
    const tiers = ['Bronze', 'Silver', 'Gold', 'Platinum'];
    const currentIndex = tiers.indexOf(currentTier);
    return currentIndex < tiers.length - 1 ? tiers[currentIndex + 1] : null;
};

const getPointsRequiredForTier = (tier) => {
    const requirements = {
        Bronze: 0,
        Silver: 10000,
        Gold: 25000,
        Platinum: 50000
    };
    return requirements[tier] || 0;
};

module.exports = {
    sendEmail,
    sendLoyaltyWelcomeEmail,
    sendLoyaltyPointsEmail,
    sendTierUpgradeEmail
};

================
File: src/utils/errorResponse.js
================
// Custom error response class
class ErrorResponse extends Error {
    constructor(message, statusCode) {
        super(message);
        this.statusCode = statusCode;
        Error.captureStackTrace(this, this.constructor);
    }
}

module.exports = ErrorResponse;

================
File: src/utils/errors.js
================
class NotFoundError extends Error {
    constructor(message) {
        super(message);
        this.name = 'NotFoundError';
        this.status = 404;
    }
}

class ValidationError extends Error {
    constructor(message) {
        super(message);
        this.name = 'ValidationError';
        this.status = 400;
    }
}

class AuthenticationError extends Error {
    constructor(message) {
        super(message);
        this.name = 'AuthenticationError';
        this.status = 401;
    }
}

class AuthorizationError extends Error {
    constructor(message) {
        super(message);
        this.name = 'AuthorizationError';
        this.status = 403;
    }
}

class DatabaseError extends Error {
    constructor(message) {
        super(message);
        this.name = 'DatabaseError';
        this.status = 500;
    }
}

module.exports = {
    NotFoundError,
    ValidationError,
    AuthenticationError,
    AuthorizationError,
    DatabaseError
};

================
File: src/utils/format.utils.js
================
// Format currency with locale support
const formatCurrency = (amount, currency = 'USD', locale = 'en-US') => {
    return new Intl.NumberFormat(locale, {
        style: 'currency',
        currency: currency
    }).format(amount);
};

// Calculate date range based on period
const calculateDateRange = (range) => {
    const endDate = new Date();
    const startDate = new Date();

    switch (range.toLowerCase()) {
        case 'week':
            startDate.setDate(endDate.getDate() - 7);
            break;
        case 'month':
            startDate.setMonth(endDate.getMonth() - 1);
            break;
        case 'quarter':
            startDate.setMonth(endDate.getMonth() - 3);
            break;
        case 'year':
            startDate.setFullYear(endDate.getFullYear() - 1);
            break;
        case 'ytd':
            startDate.setMonth(0);
            startDate.setDate(1);
            break;
        default:
            startDate.setMonth(endDate.getMonth() - 1); // Default to month
    }

    // Set time to start and end of day
    startDate.setHours(0, 0, 0, 0);
    endDate.setHours(23, 59, 59, 999);

    return { startDate, endDate };
};

// Format date to string
const formatDate = (date, format = 'short', locale = 'en-US') => {
    const options = {
        short: { 
            year: 'numeric', 
            month: 'short', 
            day: 'numeric' 
        },
        long: { 
            year: 'numeric', 
            month: 'long', 
            day: 'numeric',
            weekday: 'long'
        },
        time: {
            hour: '2-digit',
            minute: '2-digit'
        },
        full: {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            weekday: 'long',
            hour: '2-digit',
            minute: '2-digit'
        }
    };

    return new Date(date).toLocaleDateString(locale, options[format] || options.short);
};

// Format number with locale support
const formatNumber = (number, locale = 'en-US', options = {}) => {
    return new Intl.NumberFormat(locale, options).format(number);
};

// Format percentage
const formatPercentage = (number, decimals = 1, locale = 'en-US') => {
    return new Intl.NumberFormat(locale, {
        style: 'percent',
        minimumFractionDigits: decimals,
        maximumFractionDigits: decimals
    }).format(number / 100);
};

// Format duration in days/hours/minutes
const formatDuration = (minutes) => {
    if (minutes < 60) {
        return `${minutes}m`;
    } else if (minutes < 1440) {
        const hours = Math.floor(minutes / 60);
        const mins = minutes % 60;
        return mins > 0 ? `${hours}h ${mins}m` : `${hours}h`;
    } else {
        const days = Math.floor(minutes / 1440);
        const hours = Math.floor((minutes % 1440) / 60);
        return hours > 0 ? `${days}d ${hours}h` : `${days}d`;
    }
};

module.exports = {
    formatCurrency,
    calculateDateRange,
    formatDate,
    formatNumber,
    formatPercentage,
    formatDuration
};

================
File: src/utils/handlebars-helpers.js
================
const moment = require('moment');

module.exports = {
    // Basic comparison helpers
    eq: (v1, v2) => v1 === v2,
    ne: (v1, v2) => v1 !== v2,
    lt: (v1, v2) => v1 < v2,
    gt: (v1, v2) => v1 > v2,
    lte: (v1, v2) => v1 <= v2,
    gte: (v1, v2) => v1 >= v2,
    and: (...args) => args.slice(0, -1).every(Boolean),
    or: (...args) => args.slice(0, -1).some(Boolean),
    not: v => !v,

    // Date formatting helpers
    formatDate: (date, format = 'YYYY-MM-DD') => moment(date).format(format),
    formatDateTime: (date, format = 'YYYY-MM-DD HH:mm') => moment(date).format(format),
    fromNow: date => moment(date).fromNow(),
    
    // Number formatting helpers
    formatNumber: (num, decimals = 2) => Number(num).toFixed(decimals),
    formatCurrency: (num, currency = 'USD') => {
        return new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: currency
        }).format(num);
    },
    
    // String helpers
    lowercase: str => str.toLowerCase(),
    uppercase: str => str.toUpperCase(),
    capitalize: str => str.charAt(0).toUpperCase() + str.slice(1).toLowerCase(),
    truncate: (str, length = 30) => {
        if (str.length <= length) return str;
        return str.slice(0, length) + '...';
    },

    // Array helpers
    length: arr => arr ? arr.length : 0,
    isEmpty: arr => !arr || arr.length === 0,
    isNotEmpty: arr => arr && arr.length > 0,
    contains: (arr, item) => arr && arr.includes(item),
    
    // Booking status helpers
    formatBookingStatus: status => {
        const statusMap = {
            'confirmed': 'Confirmed',
            'pending': 'Pending',
            'checked_in': 'Checked In',
            'checked_out': 'Checked Out',
            'cancelled': 'Cancelled'
        };
        return statusMap[status] || status;
    },
    
    // Payment status helpers
    formatPaymentStatus: status => {
        const statusMap = {
            'paid': 'Paid',
            'pending': 'Pending',
            'failed': 'Failed',
            'refunded': 'Refunded',
            'partially_refunded': 'Partially Refunded'
        };
        return statusMap[status] || status;
    },
    
    // Phone number formatting
    formatPhone: phone => {
        if (!phone) return '';
        const cleaned = phone.replace(/\D/g, '');
        if (cleaned.length === 10) {
            return `(${cleaned.slice(0,3)}) ${cleaned.slice(3,6)}-${cleaned.slice(6)}`;
        }
        return phone;
    },
    
    // CSS class helpers
    statusColor: status => {
        const colorMap = {
            'confirmed': 'success',
            'pending': 'warning',
            'checked_in': 'info',
            'checked_out': 'secondary',
            'cancelled': 'danger'
        };
        return colorMap[status] || 'primary';
    },
    
    paymentStatusColor: status => {
        const colorMap = {
            'paid': 'success',
            'pending': 'warning',
            'failed': 'danger',
            'refunded': 'info',
            'partially_refunded': 'warning'
        };
        return colorMap[status] || 'primary';
    },
    
    // Math helpers
    add: (a, b) => a + b,
    subtract: (a, b) => a - b,
    multiply: (a, b) => a * b,
    divide: (a, b) => a / b,
    mod: (a, b) => a % b,
    
    // URL helpers
    addQueryParam: (url, key, value) => {
        const separator = url.includes('?') ? '&' : '?';
        return `${url}${separator}${key}=${encodeURIComponent(value)}`;
    },
    
    // Object helpers
    get: (obj, path) => {
        return path.split('.').reduce((acc, part) => acc && acc[part], obj);
    },
    
    // Conditional helpers
    when: (operand1, operator, operand2, options) => {
        const operators = {
            'eq': (l, r) => l === r,
            'ne': (l, r) => l !== r,
            'lt': (l, r) => l < r,
            'gt': (l, r) => l > r,
            'lte': (l, r) => l <= r,
            'gte': (l, r) => l >= r,
            'and': (l, r) => l && r,
            'or': (l, r) => l || r,
        };
        const result = operators[operator](operand1, operand2);
        return result ? options.fn(this) : options.inverse(this);
    }
};

================
File: src/utils/housekeeping-metrics.js
================
const HousekeepingTask = require('../models/HousekeepingTask');
const moment = require('moment');

/**
 * Calculate efficiency metrics for housekeeping staff
 * @param {string} staffId - ID of the staff member
 * @param {Date} startDate - Start date for metrics calculation
 * @param {Date} endDate - End date for metrics calculation
 * @returns {Object} Efficiency metrics
 */
async function calculateStaffEfficiency(staffId, startDate, endDate) {
    const tasks = await HousekeepingTask.find({
        assignedTo: staffId,
        completedAt: { $gte: startDate, $lte: endDate }
    });

    const totalTasks = tasks.length;
    if (totalTasks === 0) {
        return {
            tasksCompleted: 0,
            averageCompletionTime: 0,
            onTimeCompletion: 0,
            qualityRating: 0
        };
    }

    const completionTimes = tasks.map(task => task.actualDuration || 0);
    const averageCompletionTime = completionTimes.reduce((a, b) => a + b, 0) / totalTasks;

    const onTimeTasks = tasks.filter(task => {
        return moment(task.completedAt).isSameOrBefore(moment(task.scheduledFor));
    }).length;

    const ratings = tasks.filter(task => task.feedback?.rating).map(task => task.feedback.rating);
    const averageRating = ratings.length > 0 
        ? ratings.reduce((a, b) => a + b, 0) / ratings.length 
        : 0;

    return {
        tasksCompleted: totalTasks,
        averageCompletionTime: Math.round(averageCompletionTime),
        onTimeCompletion: Math.round((onTimeTasks / totalTasks) * 100),
        qualityRating: Math.round(averageRating * 100) / 100
    };
}

/**
 * Calculate room turnover metrics
 * @param {string} roomId - ID of the room
 * @param {Date} startDate - Start date for metrics calculation
 * @param {Date} endDate - End date for metrics calculation
 * @returns {Object} Room turnover metrics
 */
async function calculateRoomTurnover(roomId, startDate, endDate) {
    const tasks = await HousekeepingTask.find({
        room: roomId,
        taskType: 'CLEANING',
        status: 'COMPLETED',
        completedAt: { $gte: startDate, $lte: endDate }
    });

    const totalTurnovers = tasks.length;
    if (totalTurnovers === 0) {
        return {
            totalTurnovers: 0,
            averageTurnoverTime: 0,
            cleaningQuality: 0
        };
    }

    const turnoverTimes = tasks.map(task => task.actualDuration || 0);
    const averageTurnoverTime = turnoverTimes.reduce((a, b) => a + b, 0) / totalTurnovers;

    const ratings = tasks.filter(task => task.feedback?.rating).map(task => task.feedback.rating);
    const averageRating = ratings.length > 0 
        ? ratings.reduce((a, b) => a + b, 0) / ratings.length 
        : 0;

    return {
        totalTurnovers,
        averageTurnoverTime: Math.round(averageTurnoverTime),
        cleaningQuality: Math.round(averageRating * 100) / 100
    };
}

/**
 * Calculate department-wide metrics
 * @param {Date} startDate - Start date for metrics calculation
 * @param {Date} endDate - End date for metrics calculation
 * @returns {Object} Department metrics
 */
async function calculateDepartmentMetrics(startDate, endDate) {
    const tasks = await HousekeepingTask.find({
        status: 'COMPLETED',
        completedAt: { $gte: startDate, $lte: endDate }
    });

    const totalTasks = tasks.length;
    if (totalTasks === 0) {
        return {
            totalTasksCompleted: 0,
            taskCompletionRate: 0,
            averageResponseTime: 0,
            departmentRating: 0,
            taskDistribution: {}
        };
    }

    const totalScheduledTasks = await HousekeepingTask.countDocuments({
        scheduledFor: { $gte: startDate, $lte: endDate }
    });

    const responseTimes = tasks.map(task => {
        const created = moment(task.createdAt);
        const started = moment(task.status === 'COMPLETED' ? task.completedAt : new Date());
        return started.diff(created, 'minutes');
    });

    const averageResponseTime = responseTimes.reduce((a, b) => a + b, 0) / totalTasks;

    const ratings = tasks.filter(task => task.feedback?.rating).map(task => task.feedback.rating);
    const averageRating = ratings.length > 0 
        ? ratings.reduce((a, b) => a + b, 0) / ratings.length 
        : 0;

    const taskTypes = tasks.reduce((acc, task) => {
        acc[task.taskType] = (acc[task.taskType] || 0) + 1;
        return acc;
    }, {});

    return {
        totalTasksCompleted: totalTasks,
        taskCompletionRate: Math.round((totalTasks / totalScheduledTasks) * 100),
        averageResponseTime: Math.round(averageResponseTime),
        departmentRating: Math.round(averageRating * 100) / 100,
        taskDistribution: taskTypes
    };
}

/**
 * Calculate supply usage metrics
 * @param {Date} startDate - Start date for metrics calculation
 * @param {Date} endDate - End date for metrics calculation
 * @returns {Object} Supply usage metrics
 */
async function calculateSupplyUsage(startDate, endDate) {
    const tasks = await HousekeepingTask.find({
        status: 'COMPLETED',
        completedAt: { $gte: startDate, $lte: endDate },
        'supplies.0': { $exists: true }
    });

    const supplyUsage = {};
    tasks.forEach(task => {
        task.supplies.forEach(supply => {
            const item = supply.item;
            supplyUsage[item] = (supplyUsage[item] || 0) + supply.quantity;
        });
    });

    const totalRooms = await HousekeepingTask.distinct('room', {
        status: 'COMPLETED',
        completedAt: { $gte: startDate, $lte: endDate }
    }).countDocuments();

    const averagePerRoom = {};
    for (const [item, total] of Object.entries(supplyUsage)) {
        averagePerRoom[item] = totalRooms > 0 ? Math.round((total / totalRooms) * 100) / 100 : 0;
    }

    return {
        totalUsage: supplyUsage,
        averagePerRoom
    };
}

module.exports = {
    calculateStaffEfficiency,
    calculateRoomTurnover,
    calculateDepartmentMetrics,
    calculateSupplyUsage
};

================
File: src/utils/loyalty.utils.js
================
// Loyalty tier thresholds
const TIER_THRESHOLDS = {
    Bronze: 0,
    Silver: 10000,
    Gold: 25000,
    Platinum: 50000
};

// Calculate loyalty tier based on points
const calculateLoyaltyTier = (points) => {
    let tier = 'Bronze';
    for (const [tierName, threshold] of Object.entries(TIER_THRESHOLDS)) {
        if (points >= threshold) {
            tier = tierName;
        }
    }
    return tier;
};

// Calculate points for a booking
const calculateBookingPoints = (booking) => {
    const basePoints = booking.totalAmount * 10; // 10 points per unit of currency
    let bonusPoints = 0;

    // Add bonus points for longer stays
    if (booking.nights >= 7) {
        bonusPoints += 1000; // Weekly stay bonus
    } else if (booking.nights >= 30) {
        bonusPoints += 5000; // Monthly stay bonus
    }

    // Add bonus for room type
    const roomTypeBonus = {
        'standard': 0,
        'deluxe': 500,
        'suite': 1000,
        'presidential': 2000
    };
    bonusPoints += roomTypeBonus[booking.roomType.toLowerCase()] || 0;

    return basePoints + bonusPoints;
};

// Calculate referral bonus points
const calculateReferralBonus = (referralTier) => {
    const bonusPoints = {
        standard: {
            referrer: 1000,
            referee: 500
        },
        silver: {
            referrer: 1500,
            referee: 750
        },
        gold: {
            referrer: 2000,
            referee: 1000
        },
        platinum: {
            referrer: 3000,
            referee: 1500
        }
    };

    return bonusPoints[referralTier] || bonusPoints.standard;
};

// Check if points are about to expire
const checkPointsExpiry = (pointsHistory) => {
    const now = new Date();
    const expiryThreshold = new Date(now.setMonth(now.getMonth() - 24)); // Points expire after 24 months

    return pointsHistory.filter(entry => {
        return entry.type === 'earned' && 
               entry.date < expiryThreshold && 
               !entry.expired;
    });
};

// Calculate milestone rewards
const calculateMilestoneRewards = (lifetimePoints, currentTier, referralCount) => {
    const milestones = [];

    // Points milestones
    const pointsMilestones = [10000, 25000, 50000, 100000];
    for (const milestone of pointsMilestones) {
        if (lifetimePoints >= milestone) {
            milestones.push({
                type: 'points_earned',
                description: `Earned ${milestone.toLocaleString()} lifetime points`,
                rewardPoints: milestone * 0.01 // 1% bonus
            });
        }
    }

    // Tier upgrade milestones
    const tierUpgrades = ['Silver', 'Gold', 'Platinum'];
    const currentTierIndex = tierUpgrades.indexOf(currentTier);
    if (currentTierIndex !== -1) {
        for (let i = 0; i <= currentTierIndex; i++) {
            milestones.push({
                type: 'tier_upgrade',
                description: `Achieved ${tierUpgrades[i]} tier status`,
                rewardPoints: 1000 * (i + 1) // Increasing bonus for higher tiers
            });
        }
    }

    // Referral milestones
    const referralMilestones = [5, 10, 25, 50];
    for (const milestone of referralMilestones) {
        if (referralCount >= milestone) {
            milestones.push({
                type: 'referral_milestone',
                description: `Referred ${milestone} new members`,
                rewardPoints: milestone * 200 // 200 points per referral in milestone
            });
        }
    }

    return milestones;
};

module.exports = {
    TIER_THRESHOLDS,
    calculateLoyaltyTier,
    calculateBookingPoints,
    calculateReferralBonus,
    checkPointsExpiry,
    calculateMilestoneRewards
};

================
File: src/utils/ml.utils.js
================
/**
 * Calculate similarity score between two feature vectors
 * @param {Object} vector1 First feature vector
 * @param {Object} vector2 Second feature vector
 * @returns {number} Similarity score between 0 and 1
 */
function calculateCosineSimilarity(vector1, vector2) {
    const keys = new Set([...Object.keys(vector1), ...Object.keys(vector2)]);
    let dotProduct = 0;
    let norm1 = 0;
    let norm2 = 0;

    for (const key of keys) {
        const val1 = vector1[key] || 0;
        const val2 = vector2[key] || 0;
        dotProduct += val1 * val2;
        norm1 += val1 * val1;
        norm2 += val2 * val2;
    }

    if (norm1 === 0 || norm2 === 0) return 0;
    return dotProduct / (Math.sqrt(norm1) * Math.sqrt(norm2));
}

/**
 * Calculate similarity between two items based on their features
 * @param {Object} item1 First item
 * @param {Object} item2 Second item
 * @param {Object} weights Feature weights
 * @returns {number} Similarity score between 0 and 1
 */
function calculateSimilarity(item1, item2, weights = {}) {
    const features = {
        categorical: ['type', 'location', 'amenities'],
        numerical: ['price', 'rating'],
        array: ['tags', 'features']
    };

    let totalScore = 0;
    let totalWeight = 0;

    // Compare categorical features
    for (const feature of features.categorical) {
        if (item1[feature] && item2[feature]) {
            const weight = weights[feature] || 1;
            totalWeight += weight;
            totalScore += weight * (item1[feature] === item2[feature] ? 1 : 0);
        }
    }

    // Compare numerical features
    for (const feature of features.numerical) {
        if (item1[feature] !== undefined && item2[feature] !== undefined) {
            const weight = weights[feature] || 1;
            totalWeight += weight;
            const diff = Math.abs(item1[feature] - item2[feature]);
            const maxDiff = Math.max(item1[feature], item2[feature]);
            totalScore += weight * (1 - diff / maxDiff);
        }
    }

    // Compare array features
    for (const feature of features.array) {
        if (Array.isArray(item1[feature]) && Array.isArray(item2[feature])) {
            const weight = weights[feature] || 1;
            totalWeight += weight;
            const set1 = new Set(item1[feature]);
            const set2 = new Set(item2[feature]);
            const intersection = new Set([...set1].filter(x => set2.has(x)));
            const union = new Set([...set1, ...set2]);
            totalScore += weight * (intersection.size / union.size);
        }
    }

    return totalWeight > 0 ? totalScore / totalWeight : 0;
}

/**
 * Convert text to feature vector using TF-IDF
 * @param {string} text Text to convert
 * @param {Object} idfScores IDF scores for vocabulary
 * @returns {Object} Feature vector
 */
function textToVector(text, idfScores = {}) {
    const words = text.toLowerCase()
        .replace(/[^\w\s]/g, '')
        .split(/\s+/);
    
    const termFreq = {};
    for (const word of words) {
        termFreq[word] = (termFreq[word] || 0) + 1;
    }

    const vector = {};
    for (const [word, freq] of Object.entries(termFreq)) {
        const idf = idfScores[word] || Math.log(1000); // Default IDF
        vector[word] = freq * idf;
    }

    return vector;
}

/**
 * Calculate Euclidean distance between two points
 * @param {Array} point1 First point coordinates
 * @param {Array} point2 Second point coordinates
 * @returns {number} Euclidean distance
 */
function calculateEuclideanDistance(point1, point2) {
    if (point1.length !== point2.length) {
        throw new Error('Points must have same dimensions');
    }

    return Math.sqrt(
        point1.reduce((sum, value, index) => {
            const diff = value - point2[index];
            return sum + diff * diff;
        }, 0)
    );
}

/**
 * Normalize a value between 0 and 1
 * @param {number} value Value to normalize
 * @param {number} min Minimum value in range
 * @param {number} max Maximum value in range
 * @returns {number} Normalized value between 0 and 1
 */
function normalize(value, min, max) {
    if (max === min) return 0.5;
    return (value - min) / (max - min);
}

module.exports = {
    calculateSimilarity,
    calculateCosineSimilarity,
    textToVector,
    calculateEuclideanDistance,
    normalize
};

================
File: src/utils/response.util.js
================
exports.successResponse = (res, statusCode, message, data = null) => {
    return res.status(statusCode).json({
        success: true,
        message,
        data
    });
};

exports.errorResponse = (res, statusCode, message) => {
    return res.status(statusCode).json({
        success: false,
        message
    });
};

================
File: src/validators/housekeeping.validator.js
================
const { ValidationError } = require('../utils/errors');

const validateHousekeepingTask = (data, isUpdate = false) => {
    const errors = [];

    // Required fields check (skip for updates)
    if (!isUpdate) {
        const requiredFields = ['room', 'description', 'scheduledDate'];
        requiredFields.forEach(field => {
            if (!data[field]) {
                errors.push(`${field} is required`);
            }
        });
    }

    // Priority validation
    if (data.priority && !['high', 'normal', 'low'].includes(data.priority)) {
        errors.push('Invalid priority');
    }

    // Status validation
    if (data.status && !['pending', 'in-progress', 'completed', 'cancelled'].includes(data.status)) {
        errors.push('Invalid status');
    }

    // Scheduled date validation
    if (data.scheduledDate) {
        const scheduledDate = new Date(data.scheduledDate);
        if (isNaN(scheduledDate.getTime())) {
            errors.push('Invalid scheduled date');
        }
    }

    // Completed date validation
    if (data.completedDate) {
        const completedDate = new Date(data.completedDate);
        if (isNaN(completedDate.getTime())) {
            errors.push('Invalid completed date');
        }
    }

    // Notes validation
    if (data.notes) {
        data.notes.forEach((note, index) => {
            if (!note.content) {
                errors.push(`Note content is required at index ${index}`);
            }
            if (!note.addedBy) {
                errors.push(`Note addedBy is required at index ${index}`);
            }
        });
    }

    // Checklist validation
    if (data.checklist) {
        data.checklist.forEach((item, index) => {
            if (!item.item) {
                errors.push(`Checklist item is required at index ${index}`);
            }
            if (typeof item.completed !== 'undefined' && typeof item.completed !== 'boolean') {
                errors.push(`Invalid completed status at checklist index ${index}`);
            }
        });
    }

    // Supplies validation
    if (data.supplies) {
        data.supplies.forEach((supply, index) => {
            if (!supply.item) {
                errors.push(`Supply item is required at index ${index}`);
            }
            if (!supply.quantity || supply.quantity < 1) {
                errors.push(`Invalid supply quantity at index ${index}`);
            }
        });
    }

    // Recurring validation
    if (data.recurring) {
        if (typeof data.recurring.isRecurring !== 'boolean') {
            errors.push('Invalid recurring status');
        }
        if (data.recurring.isRecurring) {
            if (!data.recurring.frequency || !['daily', 'weekly', 'monthly'].includes(data.recurring.frequency)) {
                errors.push('Invalid recurring frequency');
            }
            if (data.recurring.daysOfWeek) {
                data.recurring.daysOfWeek.forEach((day, index) => {
                    if (typeof day !== 'number' || day < 0 || day > 6) {
                        errors.push(`Invalid day of week at index ${index}`);
                    }
                });
            }
            if (data.recurring.endDate) {
                const endDate = new Date(data.recurring.endDate);
                if (isNaN(endDate.getTime())) {
                    errors.push('Invalid recurring end date');
                }
            }
        }
    }

    // Photos validation
    if (data.photos) {
        data.photos.forEach((photo, index) => {
            if (!photo.url) {
                errors.push(`Photo URL is required at index ${index}`);
            }
            if (!photo.uploadedBy) {
                errors.push(`Photo uploadedBy is required at index ${index}`);
            }
        });
    }

    // Feedback validation
    if (data.feedback) {
        if (data.feedback.rating && (isNaN(data.feedback.rating) || data.feedback.rating < 1 || data.feedback.rating > 5)) {
            errors.push('Invalid feedback rating');
        }
        if (!data.feedback.givenBy) {
            errors.push('Feedback givenBy is required');
        }
    }

    if (errors.length > 0) {
        throw new ValidationError('Validation failed', errors);
    }

    // Clean and return validated data
    const validatedData = {};
    const allowedFields = [
        'room',
        'description',
        'priority',
        'status',
        'assignedTo',
        'scheduledDate',
        'completedDate',
        'completedBy',
        'notes',
        'checklist',
        'supplies',
        'recurring',
        'photos',
        'feedback',
        'isActive'
    ];

    allowedFields.forEach(field => {
        if (data[field] !== undefined) {
            validatedData[field] = data[field];
        }
    });

    return validatedData;
};

module.exports = {
    validateHousekeepingTask
};

================
File: src/validators/inventory.validator.js
================
const { ValidationError } = require('../utils/errors');

const validateInventoryItem = (data, isUpdate = false) => {
    const errors = [];

    // Required fields check (skip for updates)
    if (!isUpdate) {
        const requiredFields = ['name', 'category', 'sku', 'unit', 'currentStock', 'minimumStock', 'reorderPoint', 'cost', 'location', 'supplier'];
        requiredFields.forEach(field => {
            if (!data[field]) {
                errors.push(`${field} is required`);
            }
        });

        // Supplier required fields
        if (data.supplier && !data.supplier.name) {
            errors.push('Supplier name is required');
        }
    }

    // Category validation
    if (data.category && !['amenities', 'supplies', 'equipment', 'furniture', 'linens', 'cleaning', 'food_beverage', 'other'].includes(data.category)) {
        errors.push('Invalid category');
    }

    // SKU format validation (if provided)
    if (data.sku && !/^[A-Z0-9-]{4,}$/i.test(data.sku)) {
        errors.push('SKU must be at least 4 characters and contain only letters, numbers, and hyphens');
    }

    // Numeric fields validation
    const numericFields = ['currentStock', 'minimumStock', 'reorderPoint', 'cost'];
    numericFields.forEach(field => {
        if (data[field] !== undefined) {
            if (isNaN(data[field]) || data[field] < 0) {
                errors.push(`${field} must be a non-negative number`);
            }
        }
    });

    // Stock level validation
    if (data.minimumStock !== undefined && data.reorderPoint !== undefined) {
        if (data.minimumStock > data.reorderPoint) {
            errors.push('Minimum stock cannot be greater than reorder point');
        }
    }

    // Cost validation (if provided)
    if (data.cost !== undefined && data.cost <= 0) {
        errors.push('Cost must be greater than 0');
    }

    // Supplier validation (if provided)
    if (data.supplier) {
        if (data.supplier.email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(data.supplier.email)) {
            errors.push('Invalid supplier email format');
        }
        if (data.supplier.phone && !/^[\d\s-+()]{10,}$/.test(data.supplier.phone)) {
            errors.push('Invalid supplier phone format');
        }
        if (data.supplier.leadTime !== undefined && (isNaN(data.supplier.leadTime) || data.supplier.leadTime < 0)) {
            errors.push('Lead time must be a non-negative number');
        }
    }

    // Stock history validation (if provided)
    if (data.stockHistory) {
        data.stockHistory.forEach((record, index) => {
            if (!record.type || !['in', 'out'].includes(record.type)) {
                errors.push(`Invalid stock history type at index ${index}`);
            }
            if (!record.quantity || isNaN(record.quantity) || record.quantity <= 0) {
                errors.push(`Invalid stock history quantity at index ${index}`);
            }
            if (!record.performedBy) {
                errors.push(`Missing performedBy at index ${index}`);
            }
        });
    }

    if (errors.length > 0) {
        throw new ValidationError('Validation failed', errors);
    }

    // Clean and return validated data
    const validatedData = {};
    const allowedFields = [
        'name',
        'category',
        'sku',
        'description',
        'unit',
        'currentStock',
        'minimumStock',
        'reorderPoint',
        'cost',
        'supplier',
        'location',
        'lastRestocked',
        'stockHistory',
        'status',
        'isActive'
    ];

    allowedFields.forEach(field => {
        if (data[field] !== undefined) {
            validatedData[field] = data[field];
        }
    });

    return validatedData;
};

module.exports = {
    validateInventoryItem
};

================
File: src/views/admin/billing/invoice-details.hbs
================
{{> admin/header}}

<div class="container-fluid py-4">
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <div>
                            <h1 class="h3 mb-2">Invoice #{{invoice.invoiceNumber}}</h1>
                            <span class="badge bg-{{invoiceStatusColor invoice.status}}-soft text-{{invoiceStatusColor invoice.status}}">
                                {{formatInvoiceStatus invoice.status}}
                            </span>
                        </div>
                        <div class="btn-group">
                            <button class="btn btn-primary" onclick="printInvoice()">
                                <i class="fas fa-print me-2"></i>Print
                            </button>
                            <button class="btn btn-success" onclick="emailInvoice()">
                                <i class="fas fa-envelope me-2"></i>Email
                            </button>
                            {{#if (canEditInvoice invoice.status)}}
                            <button class="btn btn-secondary" onclick="editInvoice()">
                                <i class="fas fa-edit me-2"></i>Edit
                            </button>
                            {{/if}}
                        </div>
                    </div>

                    <div class="row mb-4">
                        <div class="col-md-6">
                            <h5 class="mb-3">Guest Information</h5>
                            <div class="d-flex align-items-center">
                                <div class="avatar-circle bg-primary bg-opacity-10 text-primary">
                                    {{firstLetter invoice.guest.name}}
                                </div>
                                <div class="ms-3">
                                    <h6 class="mb-1">{{invoice.guest.name}}</h6>
                                    <p class="mb-0 text-muted">{{invoice.guest.email}}</p>
                                    <p class="mb-0 text-muted">{{invoice.guest.phone}}</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6 text-md-end">
                            <h5 class="mb-3">Invoice Details</h5>
                            <p class="mb-1">
                                <strong>Invoice Date:</strong> {{formatDate invoice.createdAt}}
                            </p>
                            <p class="mb-1">
                                <strong>Due Date:</strong> {{formatDate invoice.dueDate}}
                            </p>
                            <p class="mb-0">
                                <strong>Payment Terms:</strong> {{invoice.paymentTerms}}
                            </p>
                        </div>
                    </div>

                    <div class="table-responsive mb-4">
                        <table class="table table-bordered">
                            <thead class="bg-light">
                                <tr>
                                    <th>Description</th>
                                    <th class="text-center">Quantity</th>
                                    <th class="text-end">Unit Price</th>
                                    <th class="text-end">Amount</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{#each invoice.items}}
                                <tr>
                                    <td>{{this.description}}</td>
                                    <td class="text-center">{{this.quantity}}</td>
                                    <td class="text-end">${{this.unitPrice}}</td>
                                    <td class="text-end">${{this.amount}}</td>
                                </tr>
                                {{/each}}
                            </tbody>
                            <tfoot>
                                <tr>
                                    <td colspan="3" class="text-end"><strong>Subtotal</strong></td>
                                    <td class="text-end">${{invoice.subtotal}}</td>
                                </tr>
                                <tr>
                                    <td colspan="3" class="text-end"><strong>Tax</strong></td>
                                    <td class="text-end">${{invoice.tax}}</td>
                                </tr>
                                <tr>
                                    <td colspan="3" class="text-end"><strong>Total</strong></td>
                                    <td class="text-end"><strong>${{invoice.total}}</strong></td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>

                    {{#if invoice.notes}}
                    <div class="mb-4">
                        <h5>Notes</h5>
                        <p class="mb-0">{{invoice.notes}}</p>
                    </div>
                    {{/if}}

                    <div class="card bg-light">
                        <div class="card-body">
                            <h5 class="mb-3">Payment History</h5>
                            <div class="table-responsive">
                                <table class="table mb-0">
                                    <thead>
                                        <tr>
                                            <th>Date</th>
                                            <th>Transaction ID</th>
                                            <th>Method</th>
                                            <th>Amount</th>
                                            <th>Status</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        {{#each transactions}}
                                        <tr>
                                            <td>{{formatDate this.createdAt}}</td>
                                            <td>{{this.transactionId}}</td>
                                            <td>{{formatPaymentMethod this.method}}</td>
                                            <td>${{this.amount}}</td>
                                            <td>
                                                <span class="badge bg-{{transactionStatusColor this.status}}-soft text-{{transactionStatusColor this.status}}">
                                                    {{formatTransactionStatus this.status}}
                                                </span>
                                            </td>
                                        </tr>
                                        {{/each}}
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
function printInvoice() {
    window.print();
}

function emailInvoice() {
    $.post('/api/billing/invoices/{{invoice._id}}/email', function(response) {
        showToast('Success', 'Invoice sent successfully');
    }).fail(function(xhr) {
        showToast('Error', xhr.responseJSON.message || 'Failed to send invoice');
    });
}

function editInvoice() {
    window.location.href = '/admin/billing/invoices/{{invoice._id}}/edit';
}

function showToast(title, message) {
    // Implement toast notification
}
</script>

<style>
@media print {
    .btn-group, .header, footer {
        display: none !important;
    }
    .card {
        border: none !important;
        box-shadow: none !important;
    }
}
</style>

================
File: src/views/admin/billing/invoices.hbs
================
{{> admin/header}}

<div class="container-fluid py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3 mb-0">Invoices</h1>
        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createInvoiceModal">
            <i class="fas fa-plus me-2"></i>Create Invoice
        </button>
    </div>

    <!-- Filters -->
    <div class="card shadow-sm mb-4">
        <div class="card-body">
            <form id="filterForm" class="row g-3">
                <div class="col-md-3">
                    <label class="form-label">Status</label>
                    <select class="form-select" name="status">
                        <option value="">All</option>
                        <option value="draft">Draft</option>
                        <option value="issued">Issued</option>
                        <option value="paid">Paid</option>
                        <option value="partially_paid">Partially Paid</option>
                        <option value="overdue">Overdue</option>
                        <option value="cancelled">Cancelled</option>
                        <option value="refunded">Refunded</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Start Date</label>
                    <input type="date" class="form-control" name="startDate">
                </div>
                <div class="col-md-3">
                    <label class="form-label">End Date</label>
                    <input type="date" class="form-control" name="endDate">
                </div>
                <div class="col-md-3">
                    <label class="form-label">Search</label>
                    <input type="text" class="form-control" name="search" placeholder="Invoice # or Guest Name">
                </div>
                <div class="col-12">
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-filter me-2"></i>Apply Filters
                    </button>
                    <button type="reset" class="btn btn-secondary">
                        <i class="fas fa-undo me-2"></i>Reset
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Invoices Table -->
    <div class="card shadow-sm">
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover align-middle mb-0">
                    <thead class="bg-light">
                        <tr>
                            <th>Invoice #</th>
                            <th>Guest</th>
                            <th>Date</th>
                            <th>Due Date</th>
                            <th>Amount</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="invoicesTableBody">
                        {{#each invoices}}
                        <tr>
                            <td>
                                <a href="/admin/billing/invoices/{{this._id}}" class="text-primary fw-semibold">
                                    {{this.invoiceNumber}}
                                </a>
                            </td>
                            <td>
                                <div class="d-flex align-items-center">
                                    <div class="avatar-circle bg-primary bg-opacity-10 text-primary">
                                        {{firstLetter this.guest.name}}
                                    </div>
                                    <div class="ms-2">
                                        <div class="fw-semibold">{{this.guest.name}}</div>
                                        <small class="text-muted">{{this.guest.email}}</small>
                                    </div>
                                </div>
                            </td>
                            <td>{{formatDate this.createdAt}}</td>
                            <td>{{formatDate this.dueDate}}</td>
                            <td>${{this.total}}</td>
                            <td>
                                <span class="badge bg-{{invoiceStatusColor this.status}}-soft text-{{invoiceStatusColor this.status}}">
                                    {{formatInvoiceStatus this.status}}
                                </span>
                            </td>
                            <td>
                                <div class="btn-group">
                                    <button class="btn btn-sm btn-outline-primary" onclick="viewInvoice('{{this._id}}')">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                    {{#if (canEditInvoice this.status)}}
                                    <button class="btn btn-sm btn-outline-secondary" onclick="editInvoice('{{this._id}}')">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    {{/if}}
                                    <button class="btn btn-sm btn-outline-success" onclick="recordPayment('{{this._id}}')">
                                        <i class="fas fa-dollar-sign"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                        {{/each}}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Create Invoice Modal -->
<div class="modal fade" id="createInvoiceModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create New Invoice</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="createInvoiceForm">
                    <div class="mb-3">
                        <label class="form-label">Guest</label>
                        <select class="form-select" name="guest" required>
                            <option value="">Select Guest</option>
                            {{#each guests}}
                            <option value="{{this._id}}">{{this.name}}</option>
                            {{/each}}
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Booking</label>
                        <select class="form-select" name="booking" required>
                            <option value="">Select Booking</option>
                        </select>
                    </div>
                    <div id="invoiceItems">
                        <div class="row mb-3 invoice-item">
                            <div class="col-md-5">
                                <input type="text" class="form-control" name="items[0][description]" placeholder="Description" required>
                            </div>
                            <div class="col-md-2">
                                <input type="number" class="form-control" name="items[0][quantity]" placeholder="Qty" required>
                            </div>
                            <div class="col-md-3">
                                <input type="number" class="form-control" name="items[0][unitPrice]" placeholder="Unit Price" required>
                            </div>
                            <div class="col-md-2">
                                <button type="button" class="btn btn-danger btn-sm remove-item">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                    <button type="button" class="btn btn-secondary mb-3" id="addItemBtn">
                        <i class="fas fa-plus me-2"></i>Add Item
                    </button>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Due Date</label>
                                <input type="date" class="form-control" name="dueDate" required>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Payment Terms</label>
                                <input type="text" class="form-control" name="paymentTerms" placeholder="Net 30">
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Notes</label>
                        <textarea class="form-control" name="notes" rows="3"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="submitInvoice()">Create Invoice</button>
            </div>
        </div>
    </div>
</div>

<!-- Payment Modal -->
<div class="modal fade" id="paymentModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Record Payment</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="paymentForm">
                    <input type="hidden" name="invoiceId">
                    <div class="mb-3">
                        <label class="form-label">Amount</label>
                        <input type="number" class="form-control" name="amount" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Payment Method</label>
                        <select class="form-select" name="method" required>
                            <option value="credit_card">Credit Card</option>
                            <option value="debit_card">Debit Card</option>
                            <option value="bank_transfer">Bank Transfer</option>
                            <option value="cash">Cash</option>
                            <option value="other">Other</option>
                        </select>
                    </div>
                    <div id="cardDetails" class="mb-3">
                        <label class="form-label">Card Details</label>
                        <input type="text" class="form-control mb-2" name="cardNumber" placeholder="Card Number">
                        <div class="row">
                            <div class="col-md-6">
                                <input type="text" class="form-control" name="expiryDate" placeholder="MM/YY">
                            </div>
                            <div class="col-md-6">
                                <input type="text" class="form-control" name="cvv" placeholder="CVV">
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Notes</label>
                        <textarea class="form-control" name="notes" rows="2"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="submitPayment()">Process Payment</button>
            </div>
        </div>
    </div>
</div>

<script>
// Initialize DataTable
$(document).ready(function() {
    // Handle filter form submission
    $('#filterForm').on('submit', function(e) {
        e.preventDefault();
        loadInvoices($(this).serialize());
    });

    // Handle payment method change
    $('select[name="method"]').on('change', function() {
        const method = $(this).val();
        if (method === 'credit_card' || method === 'debit_card') {
            $('#cardDetails').show();
        } else {
            $('#cardDetails').hide();
        }
    });

    // Handle add item button
    $('#addItemBtn').on('click', function() {
        const itemCount = $('.invoice-item').length;
        const newItem = `
            <div class="row mb-3 invoice-item">
                <div class="col-md-5">
                    <input type="text" class="form-control" name="items[${itemCount}][description]" placeholder="Description" required>
                </div>
                <div class="col-md-2">
                    <input type="number" class="form-control" name="items[${itemCount}][quantity]" placeholder="Qty" required>
                </div>
                <div class="col-md-3">
                    <input type="number" class="form-control" name="items[${itemCount}][unitPrice]" placeholder="Unit Price" required>
                </div>
                <div class="col-md-2">
                    <button type="button" class="btn btn-danger btn-sm remove-item">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </div>
        `;
        $('#invoiceItems').append(newItem);
    });

    // Handle remove item button
    $(document).on('click', '.remove-item', function() {
        $(this).closest('.invoice-item').remove();
    });

    // Handle guest selection change
    $('select[name="guest"]').on('change', function() {
        const guestId = $(this).val();
        if (guestId) {
            loadGuestBookings(guestId);
        } else {
            $('select[name="booking"]').html('<option value="">Select Booking</option>');
        }
    });
});

function loadInvoices(filters) {
    $.get('/api/billing/invoices?' + filters, function(data) {
        // Update table body with new data
        const tbody = $('#invoicesTableBody');
        tbody.empty();
        data.forEach(invoice => {
            // Add row HTML here
        });
    });
}

function loadGuestBookings(guestId) {
    $.get(`/api/bookings/guest/${guestId}`, function(data) {
        const select = $('select[name="booking"]');
        select.empty().append('<option value="">Select Booking</option>');
        data.forEach(booking => {
            select.append(`<option value="${booking._id}">
                ${booking.roomType} (${new Date(booking.checkInDate).toLocaleDateString()} - 
                ${new Date(booking.checkOutDate).toLocaleDateString()})
            </option>`);
        });
    });
}

function viewInvoice(id) {
    window.location.href = `/admin/billing/invoices/${id}`;
}

function editInvoice(id) {
    window.location.href = `/admin/billing/invoices/${id}/edit`;
}

function recordPayment(id) {
    $('input[name="invoiceId"]').val(id);
    $('#paymentModal').modal('show');
}

function submitInvoice() {
    const formData = new FormData($('#createInvoiceForm')[0]);
    $.ajax({
        url: '/api/billing/invoices',
        method: 'POST',
        data: formData,
        processData: false,
        contentType: false,
        success: function(response) {
            $('#createInvoiceModal').modal('hide');
            loadInvoices('');
            showToast('Success', 'Invoice created successfully');
        },
        error: function(xhr) {
            showToast('Error', xhr.responseJSON.message || 'Failed to create invoice');
        }
    });
}

function submitPayment() {
    const formData = new FormData($('#paymentForm')[0]);
    const invoiceId = formData.get('invoiceId');
    $.ajax({
        url: `/api/billing/invoices/${invoiceId}/pay`,
        method: 'POST',
        data: formData,
        processData: false,
        contentType: false,
        success: function(response) {
            $('#paymentModal').modal('hide');
            loadInvoices('');
            showToast('Success', 'Payment recorded successfully');
        },
        error: function(xhr) {
            showToast('Error', xhr.responseJSON.message || 'Failed to process payment');
        }
    });
}

function showToast(title, message) {
    // Implement toast notification
}
</script>

================
File: src/views/admin/bookings.hbs
================
<div class="container-fluid mt-4">
    <div class="row">
        <!-- Booking Stats -->
        <div class="col-12 mb-4">
            <div class="row">
                <div class="col-md-3">
                    <div class="card bg-primary text-white">
                        <div class="card-body">
                            <h5 class="card-title">Current Bookings</h5>
                            <h2 class="mb-0">{{stats.current}}</h2>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-success text-white">
                        <div class="card-body">
                            <h5 class="card-title">Upcoming Bookings</h5>
                            <h2 class="mb-0">{{stats.upcoming}}</h2>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-info text-white">
                        <div class="card-body">
                            <h5 class="card-title">Past Bookings</h5>
                            <h2 class="mb-0">{{stats.past}}</h2>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-warning text-white">
                        <div class="card-body">
                            <h5 class="card-title">Total Revenue</h5>
                            <h2 class="mb-0">${{stats.revenue}}</h2>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Booking Tabs -->
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <ul class="nav nav-tabs" id="bookingTabs" role="tablist">
                        <li class="nav-item">
                            <a class="nav-link {{#if (eq activeTab 'current')}}active{{/if}}" 
                               href="?tab=current">Current Bookings</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link {{#if (eq activeTab 'upcoming')}}active{{/if}}" 
                               href="?tab=upcoming">Upcoming Bookings</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link {{#if (eq activeTab 'past')}}active{{/if}}" 
                               href="?tab=past">Past Bookings</a>
                        </li>
                    </ul>

                    <!-- Filters -->
                    <div class="row mt-4 mb-3">
                        <div class="col-md-3">
                            <select class="form-select" id="hotelFilter">
                                <option value="">All Hotels</option>
                                {{#each hotels}}
                                <option value="{{_id}}" {{#if (eq ../selectedHotel _id)}}selected{{/if}}>
                                    {{name}}
                                </option>
                                {{/each}}
                            </select>
                        </div>
                        <div class="col-md-3">
                            <select class="form-select" id="statusFilter">
                                <option value="">All Statuses</option>
                                <option value="pending" {{#if (eq selectedStatus 'pending')}}selected{{/if}}>Pending</option>
                                <option value="confirmed" {{#if (eq selectedStatus 'confirmed')}}selected{{/if}}>Confirmed</option>
                                <option value="cancelled" {{#if (eq selectedStatus 'cancelled')}}selected{{/if}}>Cancelled</option>
                                <option value="completed" {{#if (eq selectedStatus 'completed')}}selected{{/if}}>Completed</option>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <div class="input-group">
                                <input type="text" class="form-control" id="searchInput" 
                                       placeholder="Search by guest name or booking ID"
                                       value="{{searchQuery}}">
                                <button class="btn btn-primary" type="button" onclick="applyFilters()">
                                    <i class="fas fa-search"></i> Search
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Bookings Table -->
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Booking ID</th>
                                    <th>Guest</th>
                                    <th>Hotel</th>
                                    <th>Room</th>
                                    <th>Check In</th>
                                    <th>Check Out</th>
                                    <th>Status</th>
                                    <th>Total</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{#each bookings}}
                                <tr>
                                    <td>{{_id}}</td>
                                    <td>
                                        {{user.name}}<br>
                                        <small class="text-muted">{{user.email}}</small>
                                    </td>
                                    <td>{{hotel.name}}</td>
                                    <td>{{room.type}} - {{room.number}}</td>
                                    <td>{{formatDate checkIn}}</td>
                                    <td>{{formatDate checkOut}}</td>
                                    <td>
                                        <span class="badge bg-{{getStatusColor status}}">
                                            {{status}}
                                        </span>
                                    </td>
                                    <td>${{totalPrice}}</td>
                                    <td>
                                        <div class="btn-group">
                                            <button type="button" class="btn btn-sm btn-primary" 
                                                    onclick="viewBooking('{{_id}}')">
                                                <i class="fas fa-eye"></i>
                                            </button>
                                            {{#if (eq status 'pending')}}
                                            <button type="button" class="btn btn-sm btn-success" 
                                                    onclick="updateStatus('{{_id}}', 'confirmed')">
                                                <i class="fas fa-check"></i>
                                            </button>
                                            <button type="button" class="btn btn-sm btn-danger" 
                                                    onclick="updateStatus('{{_id}}', 'cancelled')">
                                                <i class="fas fa-times"></i>
                                            </button>
                                            {{/if}}
                                        </div>
                                    </td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                    </div>

                    <!-- Pagination -->
                    {{#if pagination}}
                    <nav class="mt-4">
                        <ul class="pagination justify-content-center">
                            <li class="page-item {{#unless pagination.hasPrevPage}}disabled{{/unless}}">
                                <a class="page-link" href="{{getPaginationUrl pagination.prevPage}}">Previous</a>
                            </li>
                            {{#each pagination.pages}}
                            <li class="page-item {{#if isCurrent}}active{{/if}}">
                                <a class="page-link" href="{{getPaginationUrl page}}">{{page}}</a>
                            </li>
                            {{/each}}
                            <li class="page-item {{#unless pagination.hasNextPage}}disabled{{/unless}}">
                                <a class="page-link" href="{{getPaginationUrl pagination.nextPage}}">Next</a>
                            </li>
                        </ul>
                    </nav>
                    {{/if}}
                </div>
            </div>
        </div>
    </div>
</div>

<script>
function applyFilters() {
    const hotel = document.getElementById('hotelFilter').value;
    const status = document.getElementById('statusFilter').value;
    const search = document.getElementById('searchInput').value;
    const tab = new URLSearchParams(window.location.search).get('tab') || 'current';

    const url = new URL(window.location.href);
    url.searchParams.set('tab', tab);
    if (hotel) url.searchParams.set('hotel', hotel);
    else url.searchParams.delete('hotel');
    if (status) url.searchParams.set('status', status);
    else url.searchParams.delete('status');
    if (search) url.searchParams.set('search', search);
    else url.searchParams.delete('search');
    url.searchParams.delete('page');

    window.location.href = url.toString();
}

function viewBooking(id) {
    window.location.href = `/bookings/${id}`;
}

async function updateStatus(id, status) {
    if (!confirm(`Are you sure you want to mark this booking as ${status}?`)) {
        return;
    }

    try {
        const response = await fetch(`/api/bookings/${id}/status`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ status })
        });

        if (!response.ok) {
            throw new Error('Failed to update booking status');
        }

        location.reload();
    } catch (error) {
        alert('Error updating booking status: ' + error.message);
    }
}

// Add event listeners for filter changes
document.getElementById('hotelFilter').addEventListener('change', applyFilters);
document.getElementById('statusFilter').addEventListener('change', applyFilters);
document.getElementById('searchInput').addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
        applyFilters();
    }
});
</script>

================
File: src/views/admin/bookings/calendar.hbs
================
<!-- Breadcrumb -->
<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/admin/dashboard">Dashboard</a></li>
        <li class="breadcrumb-item"><a href="/admin/bookings">Bookings</a></li>
        <li class="breadcrumb-item active" aria-current="page">Calendar</li>
    </ol>
</nav>

<!-- Calendar View -->
<div class="container-fluid">
    <div class="card shadow mb-4">
        <div class="card-header py-3 d-flex justify-content-between align-items-center">
            <h6 class="m-0 font-weight-bold text-primary">Booking Calendar</h6>
            <div class="btn-group">
                <button type="button" class="btn btn-sm btn-outline-primary" id="calendarMonthBtn">Month</button>
                <button type="button" class="btn btn-sm btn-outline-primary" id="calendarWeekBtn">Week</button>
                <button type="button" class="btn btn-sm btn-outline-primary" id="calendarDayBtn">Day</button>
            </div>
        </div>
        <div class="card-body">
            <!-- Room Filter -->
            <div class="row mb-4">
                <div class="col-md-3">
                    <div class="form-group">
                        <label for="roomTypeFilter">Room Type</label>
                        <select class="form-control" id="roomTypeFilter">
                            <option value="">All Types</option>
                            {{#each roomTypes}}
                            <option value="{{this.id}}">{{this.name}}</option>
                            {{/each}}
                        </select>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group">
                        <label for="floorFilter">Floor</label>
                        <select class="form-control" id="floorFilter">
                            <option value="">All Floors</option>
                            {{#each floors}}
                            <option value="{{this}}">Floor {{this}}</option>
                            {{/each}}
                        </select>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group">
                        <label for="statusFilter">Status</label>
                        <select class="form-control" id="statusFilter">
                            <option value="">All Statuses</option>
                            <option value="available">Available</option>
                            <option value="occupied">Occupied</option>
                            <option value="maintenance">Maintenance</option>
                            <option value="cleaning">Cleaning</option>
                        </select>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group">
                        <label>&nbsp;</label>
                        <button class="btn btn-primary btn-block" id="applyFilters">
                            <i class="fas fa-filter"></i> Apply Filters
                        </button>
                    </div>
                </div>
            </div>

            <!-- Calendar Container -->
            <div id="calendar"></div>

            <!-- Legend -->
            <div class="row mt-4">
                <div class="col-12">
                    <div class="card">
                        <div class="card-body">
                            <h6 class="font-weight-bold">Legend</h6>
                            <div class="d-flex flex-wrap">
                                <div class="mr-4">
                                    <span class="badge bg-success">&nbsp;</span> Available
                                </div>
                                <div class="mr-4">
                                    <span class="badge bg-danger">&nbsp;</span> Occupied
                                </div>
                                <div class="mr-4">
                                    <span class="badge bg-warning">&nbsp;</span> Maintenance
                                </div>
                                <div class="mr-4">
                                    <span class="badge bg-info">&nbsp;</span> Cleaning
                                </div>
                                <div class="mr-4">
                                    <span class="badge bg-secondary">&nbsp;</span> Blocked
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Booking Modal -->
<div class="modal fade" id="bookingModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Booking Details</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="bookingForm">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>Guest Name *</label>
                                <input type="text" class="form-control" name="guestName" required>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>Room Number *</label>
                                <select class="form-control" name="roomId" required>
                                    <option value="">Select Room</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>Check-in *</label>
                                <input type="datetime-local" class="form-control" name="checkIn" required>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>Check-out *</label>
                                <input type="datetime-local" class="form-control" name="checkOut" required>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>Adults *</label>
                                <input type="number" class="form-control" name="adults" min="1" value="1" required>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>Children</label>
                                <input type="number" class="form-control" name="children" min="0" value="0">
                            </div>
                        </div>
                        <div class="col-12">
                            <div class="form-group">
                                <label>Special Requests</label>
                                <textarea class="form-control" name="specialRequests" rows="3"></textarea>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-danger" id="deleteBooking" style="display: none;">Delete</button>
                <button type="button" class="btn btn-primary" id="saveBooking">Save</button>
            </div>
        </div>
    </div>
</div>

<!-- Include FullCalendar library -->
<link href="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.js"></script>

<!-- Calendar Initialization Script -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Initialize FullCalendar
    const calendarEl = document.getElementById('calendar');
    const calendar = new FullCalendar.Calendar(calendarEl, {
        initialView: 'resourceTimelineMonth',
        schedulerLicenseKey: 'CC-Attribution-NonCommercial-NoDerivatives',
        headerToolbar: {
            left: 'prev,next today',
            center: 'title',
            right: 'resourceTimelineDay,resourceTimelineWeek,resourceTimelineMonth'
        },
        resources: {
            url: '/admin/api/rooms',
            method: 'GET'
        },
        events: {
            url: '/admin/api/bookings/calendar',
            method: 'GET'
        },
        editable: true,
        droppable: true,
        selectable: true,
        selectMirror: true,
        dayMaxEvents: true,
        resourceAreaWidth: '15%',
        resourceAreaHeaderContent: 'Rooms',
        resourceGroupField: 'floor',
        slotMinTime: '00:00:00',
        slotMaxTime: '24:00:00',

        // Event Handlers
        select: function(info) {
            showBookingModal('new', {
                resourceId: info.resource.id,
                start: info.start,
                end: info.end
            });
        },
        eventClick: function(info) {
            showBookingModal('edit', info.event);
        },
        eventDrop: function(info) {
            updateBooking(info.event);
        },
        eventResize: function(info) {
            updateBooking(info.event);
        }
    });

    calendar.render();

    // Filter Handlers
    document.getElementById('applyFilters').addEventListener('click', function() {
        const filters = {
            roomType: document.getElementById('roomTypeFilter').value,
            floor: document.getElementById('floorFilter').value,
            status: document.getElementById('statusFilter').value
        };

        // Refetch resources and events with filters
        calendar.refetchResources();
        calendar.refetchEvents();
    });

    // View Toggle Handlers
    document.getElementById('calendarMonthBtn').addEventListener('click', () => {
        calendar.changeView('resourceTimelineMonth');
    });
    document.getElementById('calendarWeekBtn').addEventListener('click', () => {
        calendar.changeView('resourceTimelineWeek');
    });
    document.getElementById('calendarDayBtn').addEventListener('click', () => {
        calendar.changeView('resourceTimelineDay');
    });

    // Booking Modal Functions
    function showBookingModal(mode, data) {
        const modal = $('#bookingModal');
        const form = document.getElementById('bookingForm');
        const deleteBtn = document.getElementById('deleteBooking');

        // Reset form
        form.reset();

        if (mode === 'edit') {
            // Fill form with existing booking data
            form.elements.guestName.value = data.extendedProps.guestName;
            form.elements.roomId.value = data.resourceId;
            form.elements.checkIn.value = formatDateTime(data.start);
            form.elements.checkOut.value = formatDateTime(data.end);
            form.elements.adults.value = data.extendedProps.adults || 1;
            form.elements.children.value = data.extendedProps.children || 0;
            form.elements.specialRequests.value = data.extendedProps.specialRequests || '';

            // Show delete button for existing bookings
            deleteBtn.style.display = 'block';
            deleteBtn.onclick = () => deleteBooking(data.id);
        } else {
            // Set initial values for new booking
            form.elements.roomId.value = data.resourceId;
            form.elements.checkIn.value = formatDateTime(data.start);
            form.elements.checkOut.value = formatDateTime(data.end);

            // Hide delete button for new bookings
            deleteBtn.style.display = 'none';
        }

        // Show modal
        modal.modal('show');
    }

    function formatDateTime(date) {
        return new Date(date).toISOString().slice(0, 16);
    }

    // API Functions
    async function updateBooking(event) {
        try {
            const response = await fetch(`/admin/api/bookings/${event.id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    resourceId: event.resourceId,
                    start: event.start,
                    end: event.end
                })
            });

            if (!response.ok) throw new Error('Failed to update booking');

            // Refresh calendar
            calendar.refetchEvents();
        } catch (error) {
            console.error('Error updating booking:', error);
            alert('Failed to update booking. Please try again.');
            calendar.refetchEvents();
        }
    }

    async function deleteBooking(bookingId) {
        if (!confirm('Are you sure you want to delete this booking?')) return;

        try {
            const response = await fetch(`/admin/api/bookings/${bookingId}`, {
                method: 'DELETE'
            });

            if (!response.ok) throw new Error('Failed to delete booking');

            // Close modal and refresh calendar
            $('#bookingModal').modal('hide');
            calendar.refetchEvents();
        } catch (error) {
            console.error('Error deleting booking:', error);
            alert('Failed to delete booking. Please try again.');
        }
    }

    // Save booking handler
    document.getElementById('saveBooking').addEventListener('click', async function() {
        const form = document.getElementById('bookingForm');
        if (!form.checkValidity()) {
            form.reportValidity();
            return;
        }

        const formData = new FormData(form);
        const bookingData = Object.fromEntries(formData.entries());

        try {
            const response = await fetch('/admin/api/bookings', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(bookingData)
            });

            if (!response.ok) throw new Error('Failed to save booking');

            // Close modal and refresh calendar
            $('#bookingModal').modal('hide');
            calendar.refetchEvents();
        } catch (error) {
            console.error('Error saving booking:', error);
            alert('Failed to save booking. Please try again.');
        }
    });
});
</script>

================
File: src/views/admin/bookings/create.hbs
================
<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">
                        <i class="fas fa-plus-circle me-2"></i>Create New Booking
                    </h4>
                </div>
                <div class="card-body">
                    <form id="createBookingForm" onsubmit="createBooking(event)">
                        <div class="row mb-4">
                            <div class="col-md-6">
                                <h5 class="mb-3">Guest Information</h5>
                                <div class="mb-3">
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="guestType" 
                                               id="existingGuest" value="existing" checked>
                                        <label class="form-check-label" for="existingGuest">
                                            Select Existing Guest
                                        </label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="guestType" 
                                               id="newGuest" value="new">
                                        <label class="form-check-label" for="newGuest">
                                            Add New Guest
                                        </label>
                                    </div>
                                </div>

                                <!-- Existing Guest Selection -->
                                <div id="existingGuestForm">
                                    <div class="mb-3">
                                        <label class="form-label">Select Guest</label>
                                        <select class="form-select" name="userId">
                                            <option value="">Choose a guest...</option>
                                            {{#each users}}
                                            <option value="{{_id}}">{{name}} ({{email}})</option>
                                            {{/each}}
                                        </select>
                                    </div>
                                </div>

                                <!-- New Guest Form -->
                                <div id="newGuestForm" style="display: none;">
                                    <div class="mb-3">
                                        <label class="form-label">Guest Name</label>
                                        <input type="text" class="form-control" name="guestDetails[name]" 
                                               placeholder="Enter guest name">
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Email</label>
                                        <input type="email" class="form-control" name="guestDetails[email]" 
                                               placeholder="Enter guest email">
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Phone</label>
                                        <input type="tel" class="form-control" name="guestDetails[phone]" 
                                               placeholder="Enter guest phone">
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <h5 class="mb-3">Booking Status</h5>
                                <div class="mb-3">
                                    <label class="form-label">Initial Status</label>
                                    <select class="form-select" name="status">
                                        <option value="pending">Pending</option>
                                        <option value="confirmed">Confirmed</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <div class="row mb-4">
                            <div class="col-md-6">
                                <h5 class="mb-3">Hotel & Room Selection</h5>
                                <div class="mb-3">
                                    <label class="form-label">Select Hotel</label>
                                    <select class="form-select" name="hotelId" id="hotelSelect" required>
                                        <option value="">Choose a hotel...</option>
                                        {{#each hotels}}
                                        <option value="{{_id}}">{{name}}</option>
                                        {{/each}}
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Select Room</label>
                                    <select class="form-select" name="roomId" id="roomSelect" required disabled>
                                        <option value="">Choose a room...</option>
                                    </select>
                                    <div id="roomDetails" class="mt-2" style="display: none;">
                                        <small class="text-muted">
                                            Room Type: <span id="roomType"></span><br>
                                            Capacity: <span id="roomCapacity"></span> guests<br>
                                            Price per night: $<span id="roomPrice"></span>
                                        </small>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <h5 class="mb-3">Dates</h5>
                                <div class="mb-3">
                                    <label class="form-label">Check-in Date</label>
                                    <input type="date" class="form-control" name="checkIn" required
                                           {{!-- min="{{formatDateISO now}}"> --}}
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Check-out Date</label>
                                    <input type="date" class="form-control" name="checkOut" required
                                           {{!-- min="{{formatDateISO now}}"> --}}
                                </div>
                            </div>
                        </div>

                        <div class="row mb-4">
                            <div class="col-md-6">
                                <h5 class="mb-3">Number of Guests</h5>
                                <div class="row">
                                    <div class="col-6">
                                        <div class="mb-3">
                                            <label class="form-label">Adults</label>
                                            <input type="number" class="form-control" name="guests[adults]" 
                                                   value="1" min="1" required>
                                        </div>
                                    </div>
                                    <div class="col-6">
                                        <div class="mb-3">
                                            <label class="form-label">Children</label>
                                            <input type="number" class="form-control" name="guests[children]" 
                                                   value="0" min="0">
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <h5 class="mb-3">Special Requests</h5>
                                <div class="mb-3">
                                    <textarea class="form-control" name="specialRequests" rows="3" 
                                              placeholder="Enter any special requests..."></textarea>
                                </div>
                            </div>
                        </div>

                        <div class="d-flex justify-content-end">
                            <a href="/admin/bookings" class="btn btn-secondary me-2">
                                <i class="fas fa-times me-2"></i>Cancel
                            </a>
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-plus me-2"></i>Create Booking
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
async function loadRooms(hotelId) {
    if (!hotelId) {
        const roomSelect = document.querySelector('select[name="roomId"]');
        roomSelect.innerHTML = '<option value="">Select hotel first...</option>';
        return;
    }

    try {
        const response = await fetch(`/api/hotels/${hotelId}/rooms`);
        const data = await response.json();
        
        if (data.success) {
            const roomSelect = document.querySelector('select[name="roomId"]');
            roomSelect.innerHTML = '<option value="">Select a room...</option>' + 
                data.data.map(room => `
                    <option value="${room._id}">
                        ${room.type} - Room ${room.number} (Capacity: ${room.capacity}, Price: $${room.price}/night)
                    </option>
                `).join('');
        }
    } catch (error) {
        console.error('Error loading rooms:', error);
        alert('Error loading rooms. Please try again.');
    }
}

document.querySelectorAll('input[name="guestType"]').forEach(radio => {
    radio.addEventListener('change', function() {
        const existingForm = document.getElementById('existingGuestForm');
        const newForm = document.getElementById('newGuestForm');
        const userIdSelect = document.querySelector('select[name="userId"]');
        const guestDetailsInputs = document.querySelectorAll('#newGuestForm input');
        
        if (this.value === 'existing') {
            existingForm.style.display = 'block';
            newForm.style.display = 'none';
            userIdSelect.required = true;
            guestDetailsInputs.forEach(input => input.required = false);
        } else {
            existingForm.style.display = 'none';
            newForm.style.display = 'block';
            userIdSelect.required = false;
            guestDetailsInputs.forEach(input => input.required = true);
        }
    });
});

async function createBooking(event) {
    event.preventDefault();
    
    const form = event.target;
    const formData = new FormData(form);
    const guestType = formData.get('guestType');
    
    const bookingData = {
        hotelId: formData.get('hotelId'),
        roomId: formData.get('roomId'),
        checkIn: formData.get('checkIn'),
        checkOut: formData.get('checkOut'),
        guests: {
            adults: parseInt(formData.get('guests[adults]')),
            children: parseInt(formData.get('guests[children]'))
        },
        specialRequests: formData.get('specialRequests'),
        status: formData.get('status')
    };

    // Add either userId or guestDetails based on selection
    if (guestType === 'existing') {
        bookingData.userId = formData.get('userId');
    } else {
        bookingData.guestDetails = {
            name: formData.get('guestDetails[name]'),
            email: formData.get('guestDetails[email]'),
            phone: formData.get('guestDetails[phone]')
        };
    }
    
    try {
        const response = await fetch('/admin/bookings/create', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(bookingData)
        });
        
        const data = await response.json();
        
        if (data.success) {
            alert('Booking created successfully');
            window.location.href = '/admin/bookings';
        } else {
            alert(data.message || 'Error creating booking');
        }
    } catch (error) {
        console.error('Error creating booking:', error);
        alert('Error creating booking. Please try again.');
    }
}

// Set minimum dates for check-in and check-out
document.addEventListener('DOMContentLoaded', function() {
    const today = new Date().toISOString().split('T')[0];
    document.querySelector('input[name="checkIn"]').min = today;
    document.querySelector('input[name="checkOut"]').min = today;
});

// Update check-out min date when check-in changes
document.querySelector('input[name="checkIn"]').addEventListener('change', function() {
    document.querySelector('input[name="checkOut"]').min = this.value;
});

document.getElementById('hotelSelect').addEventListener('change', async function() {
    const hotelId = this.value;
    const roomSelect = document.getElementById('roomSelect');
    const roomDetails = document.getElementById('roomDetails');
    
    // Reset room selection
    roomSelect.innerHTML = '<option value="">Choose a room...</option>';
    roomSelect.disabled = true;
    roomDetails.style.display = 'none';
    
    if (!hotelId) return;
    
    try {
        const response = await fetch(`/admin/hotels/${hotelId}/rooms`);
        const data = await response.json();
        
        if (data.success && data.data.length > 0) {
            data.data.forEach(room => {
                const option = document.createElement('option');
                option.value = room._id;
                option.textContent = `${room.roomType} - ${room.roomNumber}`;
                option.dataset.type = room.roomType;
                option.dataset.capacity = room.capacity;
                option.dataset.price = room.price;
                roomSelect.appendChild(option);
            });
            roomSelect.disabled = false;
        } else {
            roomSelect.innerHTML = '<option value="">No rooms available</option>';
        }
    } catch (error) {
        console.error('Error fetching rooms:', error);
        alert('Error fetching rooms. Please try again.');
    }
});

document.getElementById('roomSelect').addEventListener('change', function() {
    const selectedOption = this.options[this.selectedIndex];
    const roomDetails = document.getElementById('roomDetails');
    
    if (this.value) {
        document.getElementById('roomType').textContent = selectedOption.dataset.type;
        document.getElementById('roomCapacity').textContent = selectedOption.dataset.capacity;
        document.getElementById('roomPrice').textContent = selectedOption.dataset.price;
        roomDetails.style.display = 'block';
        
        // Update max guests based on room capacity
        const adultsInput = document.querySelector('input[name="guests[adults]"]');
        const childrenInput = document.querySelector('input[name="guests[children]"]');
        const totalCapacity = parseInt(selectedOption.dataset.capacity);
        
        adultsInput.max = totalCapacity;
        childrenInput.max = totalCapacity - parseInt(adultsInput.value);
    } else {
        roomDetails.style.display = 'none';
    }
});

// Add event listener for adults input to update children max
document.querySelector('input[name="guests[adults]"]').addEventListener('change', function() {
    const selectedOption = document.getElementById('roomSelect').options[document.getElementById('roomSelect').selectedIndex];
    if (selectedOption.value) {
        const totalCapacity = parseInt(selectedOption.dataset.capacity);
        const childrenInput = document.querySelector('input[name="guests[children]"]');
        childrenInput.max = totalCapacity - parseInt(this.value);
        
        // Adjust children value if it exceeds new max
        if (parseInt(childrenInput.value) > childrenInput.max) {
            childrenInput.value = childrenInput.max;
        }
    }
});
</script>

================
File: src/views/admin/bookings/current.hbs
================
{{> admin/header title="Current Bookings"}}

<div class="container-fluid">
    <!-- Current Bookings Card -->
    <div class="card shadow mb-4">
        <div class="card-header py-3 d-flex justify-content-between align-items-center">
            <h6 class="m-0 font-weight-bold text-primary">Current Bookings</h6>
            <div class="btn-group">
                <a href="/admin/bookings" class="btn btn-secondary btn-sm">
                    <i class="fas fa-list"></i> All Bookings
                </a>
                <a href="/admin/bookings/upcoming" class="btn btn-success btn-sm">
                    <i class="fas fa-calendar-alt"></i> Upcoming
                </a>
                <a href="/admin/bookings/past" class="btn btn-secondary btn-sm">
                    <i class="fas fa-history"></i> Past
                </a>
            </div>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered" width="100%" cellspacing="0">
                    <thead>
                        <tr>
                            <th>Check-out</th>
                            <th>Guest</th>
                            <th>Room</th>
                            <th>Duration</th>
                            <th>Source</th>
                            <th>Status</th>
                            <th>Amount</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {{#each bookings}}
                        <tr>
                            <td>
                                <strong>{{formatDate checkOut}}</strong><br>
                                <small class="text-{{#if (lt daysUntilCheckOut 1)}}danger{{else}}warning{{/if}}">
                                    {{#if (lt daysUntilCheckOut 1)}}
                                        Due today
                                    {{else}}
                                        In {{daysUntilCheckOut}} days
                                    {{/if}}
                                </small>
                            </td>
                            <td>
                                <strong>{{user.name}}</strong><br>
                                <small>{{user.email}}</small><br>
                                {{#if user.phone}}
                                <small>{{formatPhone user.phone}}</small>
                                {{/if}}
                                {{#if user.loyaltyProgram}}
                                <br>
                                <span class="badge bg-{{tierColor user.loyaltyProgram.tier}}">
                                    {{user.loyaltyProgram.tier}}
                                </span>
                                {{/if}}
                            </td>
                            <td>
                                <strong>{{room.type}} - {{room.number}}</strong><br>
                                {{hotel.name}}<br>
                                <small>{{hotel.location}}</small>
                            </td>
                            <td>
                                <strong>{{nights}} nights</strong><br>
                                <small>Check-in: {{formatDate checkIn}}</small>
                            </td>
                            <td>
                                <span class="badge bg-info">{{bookingSourceDisplay}}</span>
                                {{#if corporateAccount}}
                                <br><small>{{corporateAccount.companyName}}</small>
                                {{/if}}
                            </td>
                            <td>
                                <span class="badge bg-{{statusColor status}}">{{formatBookingStatus status}}</span>
                            </td>
                            <td>
                                ${{formatNumber totalAmount}}<br>
                                {{#if payment}}
                                <span class="badge bg-{{paymentStatusColor payment.status}}">
                                    {{formatPaymentStatus payment.status}}
                                </span>
                                {{/if}}
                            </td>
                            <td>
                                <div class="btn-group">
                                    <a href="/admin/bookings/{{_id}}" class="btn btn-info btn-sm">
                                        <i class="fas fa-eye"></i>
                                    </a>
                                    <button type="button" class="btn btn-success btn-sm" onclick="checkOut('{{_id}}')">
                                        <i class="fas fa-sign-out-alt"></i>
                                    </button>
                                    <button type="button" class="btn btn-primary btn-sm" onclick="editBooking('{{_id}}')">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                        {{/each}}
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            {{> admin/pagination}}
        </div>
    </div>
</div>

<script>
async function editBooking(id) {
    window.location.href = `/admin/bookings/${id}/edit`;
}

async function checkOut(id) {
    if (!confirm('Are you sure you want to check out this guest?')) return;

    try {
        const response = await fetch(`/admin/check-out/${id}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        const data = await response.json();
        if (data.success) {
            showAlert('success', 'Guest checked out successfully');
            setTimeout(() => window.location.reload(), 1500);
        } else {
            showAlert('error', data.message || 'Failed to check out guest');
        }
    } catch (error) {
        console.error('Error checking out guest:', error);
        showAlert('error', 'Failed to check out guest');
    }
}
</script>

{{> admin/footer}}

================
File: src/views/admin/bookings/edit.hbs
================
<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">
                        <i class="fas fa-edit me-2"></i>Edit Booking
                    </h4>
                </div>
                <div class="card-body">
                    <form id="editBookingForm" onsubmit="updateBooking(event)">
                        <div class="row mb-4">
                            <div class="col-md-6">
                                <h5 class="mb-3">Guest Information</h5>
                                <div class="mb-3">
                                    <label class="form-label">Guest Name</label>
                                    <input type="text" class="form-control" value="{{booking.user.name}}" readonly>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Email</label>
                                    <input type="email" class="form-control" value="{{booking.user.email}}" readonly>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <h5 class="mb-3">Booking Details</h5>
                                <div class="mb-3">
                                    <label class="form-label">Status</label>
                                    <select class="form-select" name="status" required>
                                        <option value="pending" {{#if (eq booking.status 'pending')}}selected{{/if}}>Pending</option>
                                        <option value="confirmed" {{#if (eq booking.status 'confirmed')}}selected{{/if}}>Confirmed</option>
                                        <option value="cancelled" {{#if (eq booking.status 'cancelled')}}selected{{/if}}>Cancelled</option>
                                        <option value="completed" {{#if (eq booking.status 'completed')}}selected{{/if}}>Completed</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <div class="row mb-4">
                            <div class="col-md-6">
                                <h5 class="mb-3">Hotel & Room</h5>
                                <div class="mb-3">
                                    <label class="form-label">Hotel</label>
                                    <select class="form-select" name="hotelId" onchange="loadRooms(this.value)" required>
                                        {{#each hotels}}
                                        <option value="{{_id}}" {{#if (eq ../booking.hotel._id _id)}}selected{{/if}}>
                                            {{name}} - {{location}}
                                        </option>
                                        {{/each}}
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Room</label>
                                    <select class="form-select" name="roomId" required>
                                        {{#each booking.hotel.rooms}}
                                        <option value="{{_id}}" {{#if (eq ../booking.room._id _id)}}selected{{/if}}>
                                            {{type}} - Room {{number}} (Capacity: {{capacity}})
                                        </option>
                                        {{/each}}
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <h5 class="mb-3">Dates</h5>
                                <div class="mb-3">
                                    <label class="form-label">Check-in Date</label>
                                    <input type="date" class="form-control" name="checkIn" 
                                           value="{{formatDateISO booking.checkIn}}" required>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Check-out Date</label>
                                    <input type="date" class="form-control" name="checkOut" 
                                           value="{{formatDateISO booking.checkOut}}" required>
                                </div>
                            </div>
                        </div>

                        <div class="row mb-4">
                            <div class="col-md-6">
                                <h5 class="mb-3">Guests</h5>
                                <div class="row">
                                    <div class="col-6">
                                        <div class="mb-3">
                                            <label class="form-label">Adults</label>
                                            <input type="number" class="form-control" name="guests[adults]" 
                                                   value="{{booking.guests.adults}}" min="1" required>
                                        </div>
                                    </div>
                                    <div class="col-6">
                                        <div class="mb-3">
                                            <label class="form-label">Children</label>
                                            <input type="number" class="form-control" name="guests[children]" 
                                                   value="{{booking.guests.children}}" min="0">
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <h5 class="mb-3">Special Requests</h5>
                                <div class="mb-3">
                                    <textarea class="form-control" name="specialRequests" rows="3">{{booking.specialRequests}}</textarea>
                                </div>
                            </div>
                        </div>

                        <div class="d-flex justify-content-between">
                            <button type="button" class="btn btn-danger" onclick="cancelBooking()">
                                <i class="fas fa-times me-2"></i>Cancel Booking
                            </button>
                            <div>
                                <a href="/admin/bookings" class="btn btn-secondary me-2">
                                    <i class="fas fa-arrow-left me-2"></i>Back
                                </a>
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-save me-2"></i>Save Changes
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
async function loadRooms(hotelId) {
    try {
        const response = await fetch(`/api/hotels/${hotelId}/rooms`);
        const data = await response.json();
        
        if (data.success) {
            const roomSelect = document.querySelector('select[name="roomId"]');
            roomSelect.innerHTML = data.data.map(room => `
                <option value="${room._id}">
                    ${room.type} - Room ${room.number} (Capacity: ${room.capacity})
                </option>
            `).join('');
        }
    } catch (error) {
        console.error('Error loading rooms:', error);
        alert('Error loading rooms. Please try again.');
    }
}

async function updateBooking(event) {
    event.preventDefault();
    
    const form = event.target;
    const formData = new FormData(form);
    const bookingId = '{{booking._id}}';
    
    try {
        const response = await fetch(`/admin/bookings/${bookingId}/update`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                hotelId: formData.get('hotelId'),
                roomId: formData.get('roomId'),
                checkIn: formData.get('checkIn'),
                checkOut: formData.get('checkOut'),
                guests: {
                    adults: parseInt(formData.get('guests[adults]')),
                    children: parseInt(formData.get('guests[children]'))
                },
                specialRequests: formData.get('specialRequests'),
                status: formData.get('status')
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            alert('Booking updated successfully');
            window.location.href = '/admin/bookings';
        } else {
            alert(data.message || 'Error updating booking');
        }
    } catch (error) {
        console.error('Error updating booking:', error);
        alert('Error updating booking. Please try again.');
    }
}

async function cancelBooking() {
    if (!confirm('Are you sure you want to cancel this booking?')) {
        return;
    }
    
    const bookingId = '{{booking._id}}';
    
    try {
        const response = await fetch(`/admin/bookings/${bookingId}/cancel`, {
            method: 'POST'
        });
        
        const data = await response.json();
        
        if (data.success) {
            alert('Booking cancelled successfully');
            window.location.href = '/admin/bookings';
        } else {
            alert(data.message || 'Error cancelling booking');
        }
    } catch (error) {
        console.error('Error cancelling booking:', error);
        alert('Error cancelling booking. Please try again.');
    }
}
</script>

================
File: src/views/admin/bookings/list.hbs
================
{{> admin/header title="Booking Management"}}

<!-- Booking Management Dashboard -->
<div class="container-fluid">
    <!-- Statistics Cards -->
    <div class="row mb-4">
        <div class="col-xl-3 col-md-6">
            <div class="card border-left-primary h-100">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">Total Bookings</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">{{stats.total}}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-calendar fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-md-6">
            <div class="card border-left-success h-100">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">Current Guests</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">{{stats.current}}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-users fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-md-6">
            <div class="card border-left-info h-100">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-info text-uppercase mb-1">Upcoming Bookings</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">{{stats.upcoming}}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-clock fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-md-6">
            <div class="card border-left-warning h-100">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">Revenue This Month</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">{{formatCurrency stats.monthlyRevenue}}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-dollar-sign fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Quick Actions -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h5 class="mb-0">Quick Actions</h5>
                        <a href="/admin/bookings/new" class="btn btn-primary">
                            <i class="fas fa-plus me-1"></i> New Booking
                        </a>
                    </div>
                    <div class="btn-group">
                        <a href="/admin/bookings/current" class="btn btn-outline-primary">
                            <i class="fas fa-bed me-1"></i> Current Guests
                        </a>
                        <a href="/admin/bookings/upcoming" class="btn btn-outline-info">
                            <i class="fas fa-clock me-1"></i> Upcoming
                        </a>
                        <a href="/admin/bookings/calendar" class="btn btn-outline-success">
                            <i class="fas fa-calendar-alt me-1"></i> Calendar View
                        </a>
                        <a href="/admin/bookings/reports" class="btn btn-outline-warning">
                            <i class="fas fa-chart-bar me-1"></i> Reports
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <form id="bookingFilters" method="GET" class="row g-3">
                        <div class="col-md-2">
                            <label class="form-label">Booking Source</label>
                            <select name="source" class="form-select">
                                <option value="">All Sources</option>
                                <option value="website" {{#if (eq filters.source 'website')}}selected{{/if}}>Website</option>
                                <option value="walk_in" {{#if (eq filters.source 'walk_in')}}selected{{/if}}>Walk-in</option>
                                <option value="phone" {{#if (eq filters.source 'phone')}}selected{{/if}}>Phone</option>
                                <option value="corporate" {{#if (eq filters.source 'corporate')}}selected{{/if}}>Corporate</option>
                                <option value="ota" {{#if (eq filters.source 'ota')}}selected{{/if}}>OTA</option>
                                <option value="agent" {{#if (eq filters.source 'agent')}}selected{{/if}}>Travel Agent</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Status</label>
                            <select name="status" class="form-select">
                                <option value="">All Status</option>
                                <option value="pending" {{#if (eq filters.status 'pending')}}selected{{/if}}>Pending</option>
                                <option value="confirmed" {{#if (eq filters.status 'confirmed')}}selected{{/if}}>Confirmed</option>
                                <option value="checked_in" {{#if (eq filters.status 'checked_in')}}selected{{/if}}>Checked In</option>
                                <option value="checked_out" {{#if (eq filters.status 'checked_out')}}selected{{/if}}>Checked Out</option>
                                <option value="cancelled" {{#if (eq filters.status 'cancelled')}}selected{{/if}}>Cancelled</option>
                                <option value="no_show" {{#if (eq filters.status 'no_show')}}selected{{/if}}>No Show</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Check-in Date</label>
                            <input type="date" name="startDate" class="form-control" value="{{filters.startDate}}">
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Check-out Date</label>
                            <input type="date" name="endDate" class="form-control" value="{{filters.endDate}}">
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Payment Status</label>
                            <select name="paymentStatus" class="form-select">
                                <option value="">All Payments</option>
                                <option value="pending" {{#if (eq filters.paymentStatus 'pending')}}selected{{/if}}>Pending</option>
                                <option value="partially_paid" {{#if (eq filters.paymentStatus 'partially_paid')}}selected{{/if}}>Partially Paid</option>
                                <option value="paid" {{#if (eq filters.paymentStatus 'paid')}}selected{{/if}}>Paid</option>
                                <option value="refunded" {{#if (eq filters.paymentStatus 'refunded')}}selected{{/if}}>Refunded</option>
                            </select>
                        </div>
                        <div class="col-md-2 d-flex align-items-end">
                            <button type="submit" class="btn btn-primary me-2">
                                <i class="fas fa-filter me-1"></i> Filter
                            </button>
                            <a href="/admin/bookings" class="btn btn-secondary">
                                <i class="fas fa-redo me-1"></i> Reset
                            </a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Bookings Table -->
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0">Booking List</h5>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Guest</th>
                            <th>Room</th>
                            <th>Check-in</th>
                            <th>Check-out</th>
                            <th>Source</th>
                            <th>Status</th>
                            <th>Payment</th>
                            <th>Total</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {{#each bookings}}
                        <tr>
                            <td>
                                <small class="text-muted">#{{this._id}}</small>
                                {{#if this.flags.isVIP}}
                                    <span class="badge bg-warning ms-1" title="VIP Guest">
                                        <i class="fas fa-star"></i>
                                    </span>
                                {{/if}}
                            </td>
                            <td>
                                <div>{{this.user.name}}</div>
                                <small class="text-muted">{{this.user.email}}</small>
                            </td>
                            <td>
                                <div>{{this.room.number}}</div>
                                <small class="text-muted">{{this.room.type}}</small>
                            </td>
                            <td>
                                <div>{{formatDate this.checkIn "DD MMM YYYY"}}</div>
                                <small class="text-muted">{{formatDate this.checkIn "HH:mm"}}</small>
                            </td>
                            <td>
                                <div>{{formatDate this.checkOut "DD MMM YYYY"}}</div>
                                <small class="text-muted">{{formatDate this.checkOut "HH:mm"}}</small>
                            </td>
                            <td>
                                <span class="badge bg-info">{{this.bookingSourceDisplay}}</span>
                                {{#if this.otaDetails}}
                                    <small class="d-block text-muted">{{this.otaDetails.platform}}</small>
                                {{/if}}
                            </td>
                            <td>
                                <span class="badge bg-{{statusColor this.status}}">
                                    {{formatBookingStatus this.status}}
                                </span>
                            </td>
                            <td>
                                <span class="badge bg-{{paymentStatusColor this.paymentStatus}}">
                                    {{formatPaymentStatus this.paymentStatus}}
                                </span>
                                {{#if this.paymentDetails.amountPaid}}
                                    <small class="d-block text-muted">
                                        Paid: {{formatCurrency this.paymentDetails.amountPaid}}
                                    </small>
                                {{/if}}
                            </td>
                            <td>
                                <div>{{formatCurrency this.finalTotal}}</div>
                                {{#if this.additionalCharges}}
                                    <small class="text-muted">
                                        +{{formatCurrency (sum this.additionalCharges 'amount')}} extra
                                    </small>
                                {{/if}}
                            </td>
                            <td>
                                <div class="btn-group">
                                    <a href="/admin/bookings/{{this._id}}" class="btn btn-sm btn-info" title="View Details">
                                        <i class="fas fa-eye"></i>
                                    </a>
                                    {{#if (eq this.status 'pending')}}
                                        <button type="button" class="btn btn-sm btn-success" onclick="confirmBooking('{{this._id}}')" title="Confirm">
                                            <i class="fas fa-check"></i>
                                        </button>
                                    {{/if}}
                                    {{#if (eq this.status 'confirmed')}}
                                        <button type="button" class="btn btn-sm btn-primary" onclick="checkIn('{{this._id}}')" title="Check-in">
                                            <i class="fas fa-sign-in-alt"></i>
                                        </button>
                                    {{/if}}
                                    {{#if (eq this.status 'checked_in')}}
                                        <button type="button" class="btn btn-sm btn-warning" onclick="checkOut('{{this._id}}')" title="Check-out">
                                            <i class="fas fa-sign-out-alt"></i>
                                        </button>
                                    {{/if}}
                                    {{#unless (or (eq this.status 'cancelled') (eq this.status 'completed'))}}
                                        <button type="button" class="btn btn-sm btn-danger" onclick="cancelBooking('{{this._id}}')" title="Cancel">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    {{/unless}}
                                </div>
                            </td>
                        </tr>
                        {{/each}}
                    </tbody>
                </table>
            </div>
        </div>
        <div class="card-footer">
            {{> admin/pagination}}
        </div>
    </div>
</div>

<!-- Action Modals -->
<!-- Check-in Modal -->
<div class="modal fade" id="checkInModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Check-in Guest</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="checkInForm">
                    <input type="hidden" name="bookingId" id="checkInBookingId">
                    <div class="mb-3">
                        <label class="form-label">Key Card Number</label>
                        <input type="text" class="form-control" name="keyCardNumber" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Notes</label>
                        <textarea class="form-control" name="notes" rows="3"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="processCheckIn()">Complete Check-in</button>
            </div>
        </div>
    </div>
</div>

<!-- Check-out Modal -->
<div class="modal fade" id="checkOutModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Check-out Guest</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="checkOutForm">
                    <input type="hidden" name="bookingId" id="checkOutBookingId">
                    <div class="mb-3">
                        <label class="form-label">Room Condition</label>
                        <select class="form-select" name="condition" required>
                            <option value="excellent">Excellent</option>
                            <option value="good">Good</option>
                            <option value="fair">Fair</option>
                            <option value="poor">Poor</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Additional Charges</label>
                        <div id="additionalCharges">
                            <div class="row mb-2">
                                <div class="col-8">
                                    <input type="text" class="form-control" name="charges[0][description]" placeholder="Description">
                                </div>
                                <div class="col-4">
                                    <input type="number" class="form-control" name="charges[0][amount]" placeholder="Amount">
                                </div>
                            </div>
                        </div>
                        <button type="button" class="btn btn-sm btn-outline-primary" onclick="addChargeRow()">
                            <i class="fas fa-plus me-1"></i> Add Charge
                        </button>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Notes</label>
                        <textarea class="form-control" name="notes" rows="3"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="processCheckOut()">Complete Check-out</button>
            </div>
        </div>
    </div>
</div>

<!-- Cancel Booking Modal -->
<div class="modal fade" id="cancelModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Cancel Booking</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="cancelForm">
                    <input type="hidden" name="bookingId" id="cancelBookingId">
                    <div class="mb-3">
                        <label class="form-label">Cancellation Reason</label>
                        <select class="form-select" name="reason" required>
                            <option value="guest_request">Guest Request</option>
                            <option value="no_show">No Show</option>
                            <option value="payment_issue">Payment Issue</option>
                            <option value="hotel_issue">Hotel Issue</option>
                            <option value="other">Other</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Refund Policy</label>
                        <select class="form-select" name="policy" required>
                            <option value="full_refund">Full Refund</option>
                            <option value="partial_refund">Partial Refund</option>
                            <option value="no_refund">No Refund</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Refund Amount</label>
                        <input type="number" class="form-control" name="refundAmount" step="0.01">
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Notes</label>
                        <textarea class="form-control" name="notes" rows="3"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" onclick="processCancellation()">Confirm Cancellation</button>
            </div>
        </div>
    </div>
</div>

<!-- Page specific scripts -->
<script>
// Initialize all tooltips
var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
    return new bootstrap.Tooltip(tooltipTriggerEl);
});

// Initialize all modals
var checkInModal = new bootstrap.Modal(document.getElementById('checkInModal'));
var checkOutModal = new bootstrap.Modal(document.getElementById('checkOutModal'));
var cancelModal = new bootstrap.Modal(document.getElementById('cancelModal'));

// Booking actions
function confirmBooking(bookingId) {
    if (confirm('Are you sure you want to confirm this booking?')) {
        fetch(`/admin/bookings/${bookingId}/confirm`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                location.reload();
            } else {
                alert('Error confirming booking: ' + data.message);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Error confirming booking');
        });
    }
}

function checkIn(bookingId) {
    document.getElementById('checkInBookingId').value = bookingId;
    checkInModal.show();
}

function processCheckIn() {
    const form = document.getElementById('checkInForm');
    const formData = new FormData(form);
    const bookingId = formData.get('bookingId');

    fetch(`/admin/bookings/${bookingId}/check-in`, {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            checkInModal.hide();
            location.reload();
        } else {
            alert('Error processing check-in: ' + data.message);
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Error processing check-in');
    });
}

function checkOut(bookingId) {
    document.getElementById('checkOutBookingId').value = bookingId;
    checkOutModal.show();
}

function addChargeRow() {
    const container = document.getElementById('additionalCharges');
    const index = container.children.length;
    const row = document.createElement('div');
    row.className = 'row mb-2';
    row.innerHTML = `
        <div class="col-8">
            <input type="text" class="form-control" name="charges[${index}][description]" placeholder="Description">
        </div>
        <div class="col-4">
            <input type="number" class="form-control" name="charges[${index}][amount]" placeholder="Amount">
        </div>
    `;
    container.appendChild(row);
}

function processCheckOut() {
    const form = document.getElementById('checkOutForm');
    const formData = new FormData(form);
    const bookingId = formData.get('bookingId');

    fetch(`/admin/bookings/${bookingId}/check-out`, {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            checkOutModal.hide();
            location.reload();
        } else {
            alert('Error processing check-out: ' + data.message);
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Error processing check-out');
    });
}

function cancelBooking(bookingId) {
    document.getElementById('cancelBookingId').value = bookingId;
    cancelModal.show();
}

function processCancellation() {
    const form = document.getElementById('cancelForm');
    const formData = new FormData(form);
    const bookingId = formData.get('bookingId');

    fetch(`/admin/bookings/${bookingId}/cancel`, {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            cancelModal.hide();
            location.reload();
        } else {
            alert('Error cancelling booking: ' + data.message);
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Error cancelling booking');
    });
}

// Auto-submit form when filters change
document.querySelectorAll('#bookingFilters select, #bookingFilters input[type="date"]').forEach(element => {
    element.addEventListener('change', () => {
        document.getElementById('bookingFilters').submit();
    });
});
</script>

{{> admin/footer}}

================
File: src/views/admin/bookings/new.hbs
================
<!-- Breadcrumb -->
<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/admin/dashboard">Dashboard</a></li>
        <li class="breadcrumb-item"><a href="/admin/bookings">Bookings</a></li>
        <li class="breadcrumb-item active" aria-current="page">New Booking</li>
    </ol>
</nav>

<!-- Page Content -->
<div class="container-fluid">
    <div class="card shadow mb-4">
        <div class="card-header py-3 d-flex justify-content-between align-items-center">
            <h6 class="m-0 font-weight-bold text-primary">Create New Booking</h6>
        </div>
        <div class="card-body">
            <form id="newBookingForm" action="/admin/bookings" method="POST">
                <!-- Guest Information -->
                <div class="row mb-4">
                    <div class="col-12">
                        <h5 class="text-dark">Guest Information</h5>
                        <hr>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="guestName">Guest Name *</label>
                            <input type="text" class="form-control" id="guestName" name="guestName" required>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="guestEmail">Email *</label>
                            <input type="email" class="form-control" id="guestEmail" name="guestEmail" required>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="guestPhone">Phone *</label>
                            <input type="tel" class="form-control" id="guestPhone" name="guestPhone" required>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="guestAddress">Address</label>
                            <input type="text" class="form-control" id="guestAddress" name="guestAddress">
                        </div>
                    </div>
                </div>

                <!-- Booking Details -->
                <div class="row mb-4">
                    <div class="col-12">
                        <h5 class="text-dark">Booking Details</h5>
                        <hr>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="hotelId">Hotel *</label>
                            <select class="form-control" id="hotelId" name="hotelId" required>
                                <option value="">Select Hotel</option>
                                {{#each hotels}}
                                <option value="{{this._id}}">{{this.name}} - {{this.location}}</option>
                                {{/each}}
                            </select>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="roomId">Room *</label>
                            <select class="form-control" id="roomId" name="roomId" required>
                                <option value="">Select Room</option>
                                {{#each rooms}}
                                <option value="{{this._id}}" data-price="{{this.price}}">
                                    Room {{this.number}} - {{this.type}} (Capacity: {{this.capacity}})
                                </option>
                                {{/each}}
                            </select>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="checkIn">Check-in Date *</label>
                            <input type="date" class="form-control" id="checkIn" name="checkIn" required>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="checkOut">Check-out Date *</label>
                            <input type="date" class="form-control" id="checkOut" name="checkOut" required>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="adults">Number of Adults *</label>
                            <input type="number" class="form-control" id="adults" name="adults" min="1" value="1" required>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="children">Number of Children</label>
                            <input type="number" class="form-control" id="children" name="children" min="0" value="0">
                        </div>
                    </div>
                </div>

                <!-- Additional Information -->
                <div class="row mb-4">
                    <div class="col-12">
                        <h5 class="text-dark">Additional Information</h5>
                        <hr>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="bookingSource">Booking Source *</label>
                            <select class="form-control" id="bookingSource" name="bookingSource" required>
                                {{#each bookingSources}}
                                <option value="{{this.value}}">{{this.label}}</option>
                                {{/each}}
                            </select>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="corporateAccountId">Corporate Account</label>
                            <select class="form-control" id="corporateAccountId" name="corporateAccountId">
                                <option value="">None</option>
                                {{#each corporateAccounts}}
                                <option value="{{this._id}}">{{this.companyName}}</option>
                                {{/each}}
                            </select>
                        </div>
                    </div>
                    <div class="col-12">
                        <div class="form-group">
                            <label for="specialRequests">Special Requests</label>
                            <textarea class="form-control" id="specialRequests" name="specialRequests" rows="3"></textarea>
                        </div>
                    </div>
                </div>

                <!-- Price Summary -->
                <div class="row mb-4">
                    <div class="col-12">
                        <h5 class="text-dark">Price Summary</h5>
                        <hr>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label>Room Rate (per night)</label>
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text">$</span>
                                </div>
                                <input type="text" class="form-control" id="roomRate" readonly>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label>Number of Nights</label>
                            <input type="text" class="form-control" id="numberOfNights" readonly>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label>Total Amount</label>
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text">$</span>
                                </div>
                                <input type="text" class="form-control" id="totalAmount" readonly>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Submit Button -->
                <div class="row">
                    <div class="col-12 text-right">
                        <button type="button" class="btn btn-secondary mr-2" onclick="window.history.back()">Cancel</button>
                        <button type="submit" class="btn btn-primary">Create Booking</button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Price Calculation Script -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('newBookingForm');
    const roomSelect = document.getElementById('roomId');
    const checkInInput = document.getElementById('checkIn');
    const checkOutInput = document.getElementById('checkOut');
    const roomRateInput = document.getElementById('roomRate');
    const numberOfNightsInput = document.getElementById('numberOfNights');
    const totalAmountInput = document.getElementById('totalAmount');

    // Set minimum dates
    const today = new Date().toISOString().split('T')[0];
    checkInInput.min = today;
    checkOutInput.min = today;

    // Calculate price whenever inputs change
    function calculatePrice() {
        const selectedRoom = roomSelect.options[roomSelect.selectedIndex];
        if (!selectedRoom || !checkInInput.value || !checkOutInput.value) return;

        const roomPrice = parseFloat(selectedRoom.dataset.price);
        const checkIn = new Date(checkInInput.value);
        const checkOut = new Date(checkOutInput.value);
        const nights = Math.ceil((checkOut - checkIn) / (1000 * 60 * 60 * 24));

        if (nights > 0) {
            roomRateInput.value = roomPrice.toFixed(2);
            numberOfNightsInput.value = nights;
            totalAmountInput.value = (roomPrice * nights).toFixed(2);
        }
    }

    // Update check-out min date when check-in changes
    checkInInput.addEventListener('change', function() {
        checkOutInput.min = this.value;
        if (checkOutInput.value && checkOutInput.value < this.value) {
            checkOutInput.value = this.value;
        }
        calculatePrice();
    });

    roomSelect.addEventListener('change', calculatePrice);
    checkOutInput.addEventListener('change', calculatePrice);

    // Form validation
    form.addEventListener('submit', function(e) {
        e.preventDefault();

        // Add your validation logic here
        const formData = new FormData(form);
        fetch('/admin/bookings', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(Object.fromEntries(formData))
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                window.location.href = `/admin/bookings/${data.data._id}`;
            } else {
                alert(data.message || 'Error creating booking');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Error creating booking');
        });
    });
});</script>

================
File: src/views/admin/bookings/past.hbs
================
{{> admin/header title="Past Bookings"}}

<div class="container-fluid">
    <!-- Past Bookings Card -->
    <div class="card shadow mb-4">
        <div class="card-header py-3 d-flex justify-content-between align-items-center">
            <h6 class="m-0 font-weight-bold text-primary">Past Bookings</h6>
            <div class="btn-group">
                <a href="/admin/bookings" class="btn btn-secondary btn-sm">
                    <i class="fas fa-list"></i> All Bookings
                </a>
                <a href="/admin/bookings/upcoming" class="btn btn-success btn-sm">
                    <i class="fas fa-calendar-alt"></i> Upcoming
                </a>
                <a href="/admin/bookings/current" class="btn btn-info btn-sm">
                    <i class="fas fa-clock"></i> Current
                </a>
            </div>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered" width="100%" cellspacing="0">
                    <thead>
                        <tr>
                            <th>Dates</th>
                            <th>Guest</th>
                            <th>Room</th>
                            <th>Duration</th>
                            <th>Source</th>
                            <th>Status</th>
                            <th>Amount</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {{#each bookings}}
                        <tr>
                            <td>
                                <strong>{{formatDate checkIn}} - {{formatDate checkOut}}</strong><br>
                                <small class="text-muted">{{formatTimeAgo checkOut}}</small>
                            </td>
                            <td>
                                <strong>{{user.name}}</strong><br>
                                <small>{{user.email}}</small><br>
                                {{#if user.phone}}
                                <small>{{formatPhone user.phone}}</small>
                                {{/if}}
                                {{#if user.loyaltyProgram}}
                                <br>
                                <span class="badge bg-{{tierColor user.loyaltyProgram.tier}}">
                                    {{user.loyaltyProgram.tier}}
                                </span>
                                {{/if}}
                            </td>
                            <td>
                                <strong>{{room.type}} - {{room.number}}</strong><br>
                                {{hotel.name}}<br>
                                <small>{{hotel.location}}</small>
                            </td>
                            <td>
                                <strong>{{nights}} nights</strong><br>
                                <small>Total stay</small>
                            </td>
                            <td>
                                <span class="badge bg-info">{{bookingSourceDisplay}}</span>
                                {{#if corporateAccount}}
                                <br><small>{{corporateAccount.companyName}}</small>
                                {{/if}}
                            </td>
                            <td>
                                <span class="badge bg-{{statusColor status}}">{{formatBookingStatus status}}</span>
                            </td>
                            <td>
                                ${{formatNumber totalAmount}}<br>
                                {{#if payment}}
                                <span class="badge bg-{{paymentStatusColor payment.status}}">
                                    {{formatPaymentStatus payment.status}}
                                </span>
                                {{/if}}
                            </td>
                            <td>
                                <div class="btn-group">
                                    <a href="/admin/bookings/{{_id}}" class="btn btn-info btn-sm">
                                        <i class="fas fa-eye"></i>
                                    </a>
                                    <button type="button" class="btn btn-primary btn-sm" onclick="rebook('{{_id}}')">
                                        <i class="fas fa-redo"></i>
                                    </button>
                                    {{#if user.loyaltyProgram}}
                                    <button type="button" class="btn btn-warning btn-sm" onclick="adjustPoints('{{_id}}')">
                                        <i class="fas fa-star"></i>
                                    </button>
                                    {{/if}}
                                </div>
                            </td>
                        </tr>
                        {{/each}}
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            {{> admin/pagination}}
        </div>
    </div>
</div>

<!-- Adjust Points Modal -->
<div class="modal fade" id="adjustPointsModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Adjust Loyalty Points</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="adjustPointsForm">
                    <div class="mb-3">
                        <label class="form-label">Points</label>
                        <input type="number" class="form-control" id="pointsAmount" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Reason</label>
                        <select class="form-select" id="pointsReason" required>
                            <option value="booking_bonus">Booking Bonus</option>
                            <option value="special_occasion">Special Occasion</option>
                            <option value="service_recovery">Service Recovery</option>
                            <option value="other">Other</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Notes</label>
                        <textarea class="form-control" id="pointsNotes" rows="3"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="submitPointsAdjustment()">Adjust Points</button>
            </div>
        </div>
    </div>
</div>

<script>
let selectedBookingId = null;

function rebook(id) {
    window.location.href = `/admin/bookings/new?copy=${id}`;
}

function adjustPoints(id) {
    selectedBookingId = id;
    $('#adjustPointsModal').modal('show');
}

async function submitPointsAdjustment() {
    if (!selectedBookingId) return;

    const points = document.getElementById('pointsAmount').value;
    const reason = document.getElementById('pointsReason').value;
    const notes = document.getElementById('pointsNotes').value;

    try {
        const response = await fetch(`/admin/loyalty/members/${selectedBookingId}/points`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ points, reason, notes })
        });

        const data = await response.json();
        if (data.success) {
            $('#adjustPointsModal').modal('hide');
            showAlert('success', 'Points adjusted successfully');
        } else {
            showAlert('error', data.message || 'Failed to adjust points');
        }
    } catch (error) {
        console.error('Error adjusting points:', error);
        showAlert('error', 'Failed to adjust points');
    }
}
</script>

{{> admin/footer}}

================
File: src/views/admin/bookings/upcoming.hbs
================
{{> admin/header title="Upcoming Bookings"}}

<div class="container-fluid">
    <!-- Upcoming Bookings Card -->
    <div class="card shadow mb-4">
        <div class="card-header py-3 d-flex justify-content-between align-items-center">
            <h6 class="m-0 font-weight-bold text-primary">Upcoming Bookings</h6>
            <div class="btn-group">
                <a href="/admin/bookings" class="btn btn-secondary btn-sm">
                    <i class="fas fa-list"></i> All Bookings
                </a>
                <a href="/admin/bookings/current" class="btn btn-info btn-sm">
                    <i class="fas fa-clock"></i> Current
                </a>
                <a href="/admin/bookings/past" class="btn btn-secondary btn-sm">
                    <i class="fas fa-history"></i> Past
                </a>
            </div>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered" width="100%" cellspacing="0">
                    <thead>
                        <tr>
                            <th>Check-in</th>
                            <th>Guest</th>
                            <th>Room</th>
                            <th>Duration</th>
                            <th>Source</th>
                            <th>Status</th>
                            <th>Amount</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {{#each bookings}}
                        <tr>
                            <td>
                                <strong>{{formatDate checkIn}}</strong><br>
                                <small class="text-success">In {{daysUntilCheckIn}} days</small>
                            </td>
                            <td>
                                <strong>{{user.name}}</strong><br>
                                <small>{{user.email}}</small><br>
                                {{#if user.phone}}
                                <small>{{formatPhone user.phone}}</small>
                                {{/if}}
                            </td>
                            <td>
                                <strong>{{room.type}} - {{room.number}}</strong><br>
                                {{hotel.name}}<br>
                                <small>{{hotel.location}}</small>
                            </td>
                            <td>
                                <strong>{{nights}} nights</strong><br>
                                <small>Check-out: {{formatDate checkOut}}</small>
                            </td>
                            <td>
                                <span class="badge bg-info">{{bookingSourceDisplay}}</span>
                                {{#if corporateAccount}}
                                <br><small>{{corporateAccount.companyName}}</small>
                                {{/if}}
                            </td>
                            <td>
                                <span class="badge bg-{{statusColor status}}">{{formatBookingStatus status}}</span>
                            </td>
                            <td>
                                ${{formatNumber totalAmount}}<br>
                                {{#if payment}}
                                <span class="badge bg-{{paymentStatusColor payment.status}}">
                                    {{formatPaymentStatus payment.status}}
                                </span>
                                {{/if}}
                            </td>
                            <td>
                                <div class="btn-group">
                                    <a href="/admin/bookings/{{_id}}" class="btn btn-info btn-sm">
                                        <i class="fas fa-eye"></i>
                                    </a>
                                    <button type="button" class="btn btn-primary btn-sm" onclick="editBooking('{{_id}}')">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button type="button" class="btn btn-danger btn-sm" onclick="cancelBooking('{{_id}}')">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                        {{/each}}
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            {{> admin/pagination}}
        </div>
    </div>
</div>

<script>
async function editBooking(id) {
    window.location.href = `/admin/bookings/${id}/edit`;
}

async function cancelBooking(id) {
    if (!confirm('Are you sure you want to cancel this booking?')) return;

    try {
        const response = await fetch(`/admin/bookings/${id}/status`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ status: 'cancelled' })
        });

        const data = await response.json();
        if (data.success) {
            showAlert('success', 'Booking cancelled successfully');
            setTimeout(() => window.location.reload(), 1500);
        } else {
            showAlert('error', data.message || 'Failed to cancel booking');
        }
    } catch (error) {
        console.error('Error cancelling booking:', error);
        showAlert('error', 'Failed to cancel booking');
    }
}
</script>

{{> admin/footer}}

================
File: src/views/admin/channel-manager/dashboard.hbs
================
{{> admin/header title="Channel Manager Dashboard"}}

<div class="container-fluid">
    <!-- OTA Connection Status -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow">
                <div class="card-header py-3 d-flex justify-content-between align-items-center">
                    <h6 class="m-0 font-weight-bold text-primary">OTA Connection Status</h6>
                    <button class="btn btn-primary btn-sm" onclick="refreshAllConnections()">
                        <i class="fas fa-sync"></i> Refresh All
                    </button>
                </div>
                <div class="card-body">
                    <div class="row" id="otaConnections">
                        <!-- Booking.com -->
                        <div class="col-xl-3 col-md-6 mb-4">
                            <div class="card border-left-primary h-100">
                                <div class="card-body">
                                    <div class="row no-gutters align-items-center">
                                        <div class="col mr-2">
                                            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                                Booking.com
                                            </div>
                                            <div class="h6 mb-0 font-weight-bold text-gray-800" id="bookingComStatus">
                                                <span class="badge badge-success">Connected</span>
                                            </div>
                                            <div class="small text-gray-600" id="bookingComLastSync">
                                                Last sync: 5 minutes ago
                                            </div>
                                        </div>
                                        <div class="col-auto">
                                            <img src="/img/booking-com.png" alt="Booking.com" height="40">
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Airbnb -->
                        <div class="col-xl-3 col-md-6 mb-4">
                            <div class="card border-left-danger h-100">
                                <div class="card-body">
                                    <div class="row no-gutters align-items-center">
                                        <div class="col mr-2">
                                            <div class="text-xs font-weight-bold text-danger text-uppercase mb-1">
                                                Airbnb
                                            </div>
                                            <div class="h6 mb-0 font-weight-bold text-gray-800" id="airbnbStatus">
                                                <span class="badge badge-success">Connected</span>
                                            </div>
                                            <div class="small text-gray-600" id="airbnbLastSync">
                                                Last sync: 2 minutes ago
                                            </div>
                                        </div>
                                        <div class="col-auto">
                                            <img src="/img/airbnb.png" alt="Airbnb" height="40">
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Expedia -->
                        <div class="col-xl-3 col-md-6 mb-4">
                            <div class="card border-left-warning h-100">
                                <div class="card-body">
                                    <div class="row no-gutters align-items-center">
                                        <div class="col mr-2">
                                            <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">
                                                Expedia
                                            </div>
                                            <div class="h6 mb-0 font-weight-bold text-gray-800" id="expediaStatus">
                                                <span class="badge badge-success">Connected</span>
                                            </div>
                                            <div class="small text-gray-600" id="expediaLastSync">
                                                Last sync: 7 minutes ago
                                            </div>
                                        </div>
                                        <div class="col-auto">
                                            <img src="/img/expedia.png" alt="Expedia" height="40">
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- TripAdvisor -->
                        <div class="col-xl-3 col-md-6 mb-4">
                            <div class="card border-left-info h-100">
                                <div class="card-body">
                                    <div class="row no-gutters align-items-center">
                                        <div class="col mr-2">
                                            <div class="text-xs font-weight-bold text-info text-uppercase mb-1">
                                                TripAdvisor
                                            </div>
                                            <div class="h6 mb-0 font-weight-bold text-gray-800" id="tripadvisorStatus">
                                                <span class="badge badge-success">Connected</span>
                                            </div>
                                            <div class="small text-gray-600" id="tripadvisorLastSync">
                                                Last sync: 10 minutes ago
                                            </div>
                                        </div>
                                        <div class="col-auto">
                                            <img src="/img/tripadvisor.png" alt="TripAdvisor" height="40">
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Sync Activity Log -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Sync Activity Log</h6>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-bordered" id="syncLogTable">
                            <thead>
                                <tr>
                                    <th>Timestamp</th>
                                    <th>Platform</th>
                                    <th>Action</th>
                                    <th>Status</th>
                                    <th>Details</th>
                                </tr>
                            </thead>
                            <tbody id="syncLogBody">
                                <!-- Sync log entries will be added here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Rate Management -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow">
                <div class="card-header py-3 d-flex justify-content-between align-items-center">
                    <h6 class="m-0 font-weight-bold text-primary">Rate Management</h6>
                    <div>
                        <button class="btn btn-success btn-sm mr-2" onclick="enableAutoRates()">
                            <i class="fas fa-robot"></i> Enable Auto-Rates
                        </button>
                        <button class="btn btn-primary btn-sm" onclick="pushRateUpdates()">
                            <i class="fas fa-sync"></i> Push Updates
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-bordered" id="rateTable">
                            <thead>
                                <tr>
                                    <th>Room Type</th>
                                    <th>Base Rate</th>
                                    <th>Booking.com</th>
                                    <th>Airbnb</th>
                                    <th>Expedia</th>
                                    <th>TripAdvisor</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{#each roomTypes}}
                                <tr>
                                    <td>{{name}}</td>
                                    <td>
                                        <input type="number" class="form-control form-control-sm base-rate" 
                                               value="{{baseRate}}" data-room-type="{{id}}">
                                    </td>
                                    <td>
                                        <input type="number" class="form-control form-control-sm ota-rate" 
                                               value="{{bookingComRate}}" data-platform="booking">
                                    </td>
                                    <td>
                                        <input type="number" class="form-control form-control-sm ota-rate" 
                                               value="{{airbnbRate}}" data-platform="airbnb">
                                    </td>
                                    <td>
                                        <input type="number" class="form-control form-control-sm ota-rate" 
                                               value="{{expediaRate}}" data-platform="expedia">
                                    </td>
                                    <td>
                                        <input type="number" class="form-control form-control-sm ota-rate" 
                                               value="{{tripadvisorRate}}" data-platform="tripadvisor">
                                    </td>
                                    <td>
                                        <button class="btn btn-primary btn-sm" onclick="updateRates('{{id}}')">
                                            Update
                                        </button>
                                    </td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Market Analysis -->
    <div class="row">
        <div class="col-xl-8 col-lg-7">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Competitive Rate Analysis</h6>
                </div>
                <div class="card-body">
                    <div class="chart-area">
                        <canvas id="competitiveRateChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-4 col-lg-5">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Booking Distribution</h6>
                </div>
                <div class="card-body">
                    <div class="chart-pie">
                        <canvas id="bookingDistributionChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- WebSocket Integration -->
<script src="/js/websocket.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    initializeCharts();
    initializeDataTables();
    setupWebSocket();
});

function initializeDataTables() {
    $('#syncLogTable').DataTable({
        order: [[0, 'desc']],
        pageLength: 10
    });
}

function initializeCharts() {
    // Competitive Rate Chart
    const rateCtx = document.getElementById('competitiveRateChart');
    new Chart(rateCtx, {
        type: 'line',
        data: {
            labels: {{{json competitiveRates.labels}}},
            datasets: [{
                label: 'Your Rates',
                data: {{{json competitiveRates.yourRates}}},
                borderColor: 'rgba(78, 115, 223, 1)',
                backgroundColor: 'rgba(78, 115, 223, 0.1)'
            }, {
                label: 'Market Average',
                data: {{{json competitiveRates.marketAverage}}},
                borderColor: 'rgba(28, 200, 138, 1)',
                backgroundColor: 'rgba(28, 200, 138, 0.1)'
            }]
        },
        options: {
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });

    // Booking Distribution Chart
    const distributionCtx = document.getElementById('bookingDistributionChart');
    new Chart(distributionCtx, {
        type: 'doughnut',
        data: {
            labels: ['Booking.com', 'Airbnb', 'Expedia', 'TripAdvisor'],
            datasets: [{
                data: {{{json bookingDistribution}}},
                backgroundColor: ['#4e73df', '#e74a3b', '#f6c23e', '#36b9cc']
            }]
        },
        options: {
            maintainAspectRatio: false
        }
    });
}

function setupWebSocket() {
    // OTA connection status updates
    hotelWS.on('OTA_STATUS_UPDATE', function(data) {
        const statusElement = document.getElementById(`${data.platform}Status`);
        const lastSyncElement = document.getElementById(`${data.platform}LastSync`);
        
        if (statusElement) {
            statusElement.innerHTML = `<span class="badge badge-${data.connected ? 'success' : 'danger'}">
                ${data.connected ? 'Connected' : 'Disconnected'}
            </span>`;
        }
        
        if (lastSyncElement) {
            lastSyncElement.textContent = `Last sync: ${data.lastSync}`;
        }

        // Add to sync log
        addSyncLogEntry({
            timestamp: new Date().toLocaleString(),
            platform: data.platform,
            action: 'Connection Status',
            status: data.connected ? 'Success' : 'Failed',
            details: data.message
        });
    });

    // Rate update notifications
    hotelWS.on('RATE_UPDATE', function(data) {
        addSyncLogEntry({
            timestamp: new Date().toLocaleString(),
            platform: data.platform,
            action: 'Rate Update',
            status: data.success ? 'Success' : 'Failed',
            details: data.message
        });
    });
}

function addSyncLogEntry(entry) {
    const table = $('#syncLogTable').DataTable();
    
    table.row.add([
        entry.timestamp,
        entry.platform,
        entry.action,
        `<span class="badge badge-${entry.status === 'Success' ? 'success' : 'danger'}">${entry.status}</span>`,
        entry.details
    ]).draw(false);
}

function refreshAllConnections() {
    fetch('/admin/channel-manager/refresh-connections', {
        method: 'POST'
    }).then(response => response.json())
    .then(data => {
        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: 'Connections Refreshed',
                text: 'All OTA connections have been refreshed successfully.'
            });
        } else {
            throw new Error('Failed to refresh connections');
        }
    }).catch(error => {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to refresh OTA connections: ' + error.message
        });
    });
}

function enableAutoRates() {
    Swal.fire({
        title: 'Enable Auto-Rates',
        text: 'This will enable automatic rate adjustments based on market demand. Continue?',
        icon: 'question',
        showCancelButton: true,
        confirmButtonText: 'Enable',
        cancelButtonText: 'Cancel'
    }).then((result) => {
        if (result.isConfirmed) {
            fetch('/admin/channel-manager/enable-auto-rates', {
                method: 'POST'
            }).then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Auto-Rates Enabled',
                        text: 'Automatic rate adjustments are now active.'
                    });
                } else {
                    throw new Error('Failed to enable auto-rates');
                }
            }).catch(error => {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to enable auto-rates: ' + error.message
                });
            });
        }
    });
}

function updateRates(roomTypeId) {
    const baseRate = document.querySelector(`input[data-room-type="${roomTypeId}"].base-rate`).value;
    const otaRates = {};
    
    document.querySelectorAll(`input[data-room-type="${roomTypeId}"].ota-rate`).forEach(input => {
        otaRates[input.dataset.platform] = input.value;
    });

    fetch('/admin/channel-manager/update-rates', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            roomTypeId,
            baseRate,
            otaRates
        })
    }).then(response => response.json())
    .then(data => {
        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: 'Rates Updated',
                text: 'Room rates have been updated successfully.'
            });
        } else {
            throw new Error('Failed to update rates');
        }
    }).catch(error => {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to update rates: ' + error.message
        });
    });
}

function pushRateUpdates() {
    Swal.fire({
        title: 'Push Rate Updates',
        text: 'This will push all rate updates to connected OTAs. Continue?',
        icon: 'question',
        showCancelButton: true,
        confirmButtonText: 'Push Updates',
        cancelButtonText: 'Cancel'
    }).then((result) => {
        if (result.isConfirmed) {
            fetch('/admin/channel-manager/push-rates', {
                method: 'POST'
            }).then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Rates Pushed',
                        text: 'All rate updates have been pushed to OTAs successfully.'
                    });
                } else {
                    throw new Error('Failed to push rate updates');
                }
            }).catch(error => {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to push rate updates: ' + error.message
                });
            });
        }
    });
}
</script>

{{> admin/footer}}

================
File: src/views/admin/check-in-out/dashboard.hbs
================
{{> admin/header}}
{{> admin/sidebar}}

<div class="main-content">
    <div class="container-fluid p-4">
        <!-- Page Header -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h1 class="h3 mb-0">Check-in / Check-out</h1>
                        <nav aria-label="breadcrumb">
                            <ol class="breadcrumb mb-0">
                                <li class="breadcrumb-item"><a href="/admin/dashboard">Dashboard</a></li>
                                <li class="breadcrumb-item active">Check-in/out</li>
                            </ol>
                        </nav>
                    </div>
                    <div class="d-flex gap-2">
                        <div class="btn-group">
                            <button class="btn btn-outline-secondary active" onclick="filterBookings('today')">Today</button>
                            <button class="btn btn-outline-secondary" onclick="filterBookings('tomorrow')">Tomorrow</button>
                            <button class="btn btn-outline-secondary" onclick="filterBookings('week')">This Week</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Status Cards -->
        <div class="row g-3 mb-4">
            <div class="col-sm-6 col-xl-3">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex align-items-start justify-content-between">
                            <div>
                                <h6 class="text-muted mb-2">Expected Check-ins</h6>
                                <h4 class="mb-0">{{stats.expectedCheckins}}</h4>
                                <small class="text-muted">Today</small>
                            </div>
                            <div class="avatar bg-light-primary">
                                <i class="fas fa-sign-in-alt text-primary"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-6 col-xl-3">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex align-items-start justify-content-between">
                            <div>
                                <h6 class="text-muted mb-2">Expected Check-outs</h6>
                                <h4 class="mb-0">{{stats.expectedCheckouts}}</h4>
                                <small class="text-muted">Today</small>
                            </div>
                            <div class="avatar bg-light-warning">
                                <i class="fas fa-sign-out-alt text-warning"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-6 col-xl-3">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex align-items-start justify-content-between">
                            <div>
                                <h6 class="text-muted mb-2">Current Stays</h6>
                                <h4 class="mb-0">{{stats.currentStays}}</h4>
                                <small class="text-muted">Active guests</small>
                            </div>
                            <div class="avatar bg-light-success">
                                <i class="fas fa-bed text-success"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-6 col-xl-3">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex align-items-start justify-content-between">
                            <div>
                                <h6 class="text-muted mb-2">Available Rooms</h6>
                                <h4 class="mb-0">{{stats.availableRooms}}</h4>
                                <small class="text-muted">Ready for check-in</small>
                            </div>
                            <div class="avatar bg-light-info">
                                <i class="fas fa-door-open text-info"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Check-in/out Tabs -->
        <div class="card">
            <div class="card-header">
                <ul class="nav nav-tabs card-header-tabs">
                    <li class="nav-item">
                        <a class="nav-link active" data-bs-toggle="tab" href="#checkins">
                            <i class="fas fa-sign-in-alt me-2"></i>Check-ins
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" data-bs-toggle="tab" href="#checkouts">
                            <i class="fas fa-sign-out-alt me-2"></i>Check-outs
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" data-bs-toggle="tab" href="#current">
                            <i class="fas fa-bed me-2"></i>Current Stays
                        </a>
                    </li>
                </ul>
            </div>
            <div class="card-body">
                <div class="tab-content">
                    <!-- Check-ins Tab -->
                    <div class="tab-pane fade show active" id="checkins">
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Guest</th>
                                        <th>Booking ID</th>
                                        <th>Room</th>
                                        <th>Check-in Time</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {{#each checkins}}
                                    <tr>
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <div class="avatar me-2">
                                                    {{#if user.avatar}}
                                                    <img src="{{user.avatar}}" alt="Avatar">
                                                    {{else}}
                                                    <div class="avatar-initial">{{initials user.name}}</div>
                                                    {{/if}}
                                                </div>
                                                <div>
                                                    <h6 class="mb-0">{{user.name}}</h6>
                                                    <small class="text-muted">{{user.email}}</small>
                                                </div>
                                            </div>
                                        </td>
                                        <td><a href="/admin/bookings/{{_id}}">#{{bookingId}}</a></td>
                                        <td>{{room.number}} - {{room.type}}</td>
                                        <td>{{formatTime checkIn}}</td>
                                        <td>
                                            <span class="badge bg-{{statusColor status}}">{{status}}</span>
                                        </td>
                                        <td>
                                            <button class="btn btn-primary btn-sm" onclick="processCheckIn('{{_id}}')">
                                                Check-in
                                            </button>
                                        </td>
                                    </tr>
                                    {{/each}}
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <!-- Check-outs Tab -->
                    <div class="tab-pane fade" id="checkouts">
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Guest</th>
                                        <th>Booking ID</th>
                                        <th>Room</th>
                                        <th>Check-out Time</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {{#each checkouts}}
                                    <tr>
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <div class="avatar me-2">
                                                    {{#if user.avatar}}
                                                    <img src="{{user.avatar}}" alt="Avatar">
                                                    {{else}}
                                                    <div class="avatar-initial">{{initials user.name}}</div>
                                                    {{/if}}
                                                </div>
                                                <div>
                                                    <h6 class="mb-0">{{user.name}}</h6>
                                                    <small class="text-muted">{{user.email}}</small>
                                                </div>
                                            </div>
                                        </td>
                                        <td><a href="/admin/bookings/{{_id}}">#{{bookingId}}</a></td>
                                        <td>{{room.number}} - {{room.type}}</td>
                                        <td>{{formatTime checkOut}}</td>
                                        <td>
                                            <span class="badge bg-{{statusColor status}}">{{status}}</span>
                                        </td>
                                        <td>
                                            <button class="btn btn-warning btn-sm" onclick="processCheckOut('{{_id}}')">
                                                Check-out
                                            </button>
                                        </td>
                                    </tr>
                                    {{/each}}
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <!-- Current Stays Tab -->
                    <div class="tab-pane fade" id="current">
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Guest</th>
                                        <th>Room</th>
                                        <th>Check-in</th>
                                        <th>Check-out</th>
                                        <th>Duration</th>
                                        <th>Status</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {{#each currentStays}}
                                    <tr>
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <div class="avatar me-2">
                                                    {{#if user.avatar}}
                                                    <img src="{{user.avatar}}" alt="Avatar">
                                                    {{else}}
                                                    <div class="avatar-initial">{{initials user.name}}</div>
                                                    {{/if}}
                                                </div>
                                                <div>
                                                    <h6 class="mb-0">{{user.name}}</h6>
                                                    <small class="text-muted">{{user.email}}</small>
                                                </div>
                                            </div>
                                        </td>
                                        <td>{{room.number}} - {{room.type}}</td>
                                        <td>{{formatDateTime checkIn}}</td>
                                        <td>{{formatDateTime checkOut}}</td>
                                        <td>{{stayDuration}} nights</td>
                                        <td>
                                            <span class="badge bg-{{statusColor status}}">{{status}}</span>
                                        </td>
                                    </tr>
                                    {{/each}}
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
// Filter bookings based on date range
function filterBookings(range) {
    window.location.href = `/admin/check-in-out?range=${range}`;
}

// Process check-in
async function processCheckIn(bookingId) {
    try {
        const response = await fetch(`/api/check-in-out/check-in/${bookingId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        if (response.ok) {
            window.location.reload();
        } else {
            const error = await response.json();
            alert(error.message || 'Failed to process check-in');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('An error occurred while processing check-in');
    }
}

// Process check-out
async function processCheckOut(bookingId) {
    try {
        const response = await fetch(`/api/check-in-out/check-out/${bookingId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        if (response.ok) {
            window.location.reload();
        } else {
            const error = await response.json();
            alert(error.message || 'Failed to process check-out');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('An error occurred while processing check-out');
    }
}

// Initialize tooltips
document.addEventListener('DOMContentLoaded', function() {
    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl);
    });
});
</script>

================
File: src/views/admin/check-in-out/modals.hbs
================
<!-- Check-in Modal -->
<div class="modal fade" id="checkInModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Process Check-in</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="checkInForm">
                    <!-- Guest Information -->
                    <div class="card mb-3">
                        <div class="card-header">
                            <h6 class="mb-0">Guest Information</h6>
                        </div>
                        <div class="card-body">
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <label class="form-label">Guest Name</label>
                                    <input type="text" class="form-control" id="guestName" readonly>
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">Email</label>
                                    <input type="email" class="form-control" id="guestEmail" readonly>
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">Phone</label>
                                    <input type="tel" class="form-control" id="guestPhone" readonly>
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">ID Type</label>
                                    <select class="form-select" name="idType" required>
                                        <option value="">Select ID Type</option>
                                        <option value="passport">Passport</option>
                                        <option value="drivers_license">Driver's License</option>
                                        <option value="national_id">National ID</option>
                                    </select>
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">ID Number</label>
                                    <input type="text" class="form-control" name="idNumber" required>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Room Details -->
                    <div class="card mb-3">
                        <div class="card-header">
                            <h6 class="mb-0">Room Details</h6>
                        </div>
                        <div class="card-body">
                            <div class="row g-3">
                                <div class="col-md-4">
                                    <label class="form-label">Room Number</label>
                                    <input type="text" class="form-control" id="roomNumber" readonly>
                                </div>
                                <div class="col-md-4">
                                    <label class="form-label">Room Type</label>
                                    <input type="text" class="form-control" id="roomType" readonly>
                                </div>
                                <div class="col-md-4">
                                    <label class="form-label">Floor</label>
                                    <input type="text" class="form-control" id="roomFloor" readonly>
                                </div>
                            </div>
                            <div class="mt-3">
                                <label class="form-label">Room Status</label>
                                <div class="d-flex gap-3">
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="roomStatus" value="clean" required>
                                        <label class="form-check-label">Clean</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="roomStatus" value="needs_inspection">
                                        <label class="form-check-label">Needs Inspection</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="roomStatus" value="maintenance">
                                        <label class="form-check-label">Maintenance Required</label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Additional Services -->
                    <div class="card mb-3">
                        <div class="card-header">
                            <h6 class="mb-0">Additional Services</h6>
                        </div>
                        <div class="card-body">
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="services" value="breakfast">
                                        <label class="form-check-label">Breakfast Package</label>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="services" value="parking">
                                        <label class="form-check-label">Parking Space</label>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="services" value="wifi">
                                        <label class="form-check-label">Premium Wi-Fi</label>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="services" value="minibar">
                                        <label class="form-check-label">Mini Bar Access</label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Special Requests -->
                    <div class="card">
                        <div class="card-header">
                            <h6 class="mb-0">Special Requests</h6>
                        </div>
                        <div class="card-body">
                            <textarea class="form-control" name="specialRequests" rows="3" 
                                placeholder="Enter any special requests or notes"></textarea>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="confirmCheckIn()">Complete Check-in</button>
            </div>
        </div>
    </div>
</div>

<!-- Check-out Modal -->
<div class="modal fade" id="checkOutModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Process Check-out</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="checkOutForm">
                    <!-- Stay Summary -->
                    <div class="card mb-3">
                        <div class="card-header">
                            <h6 class="mb-0">Stay Summary</h6>
                        </div>
                        <div class="card-body">
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <label class="form-label">Check-in Date</label>
                                    <input type="text" class="form-control" id="checkInDate" readonly>
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">Check-out Date</label>
                                    <input type="text" class="form-control" id="checkOutDate" readonly>
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">Total Nights</label>
                                    <input type="text" class="form-control" id="totalNights" readonly>
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">Room Rate</label>
                                    <input type="text" class="form-control" id="roomRate" readonly>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Additional Charges -->
                    <div class="card mb-3">
                        <div class="card-header">
                            <div class="d-flex justify-content-between align-items-center">
                                <h6 class="mb-0">Additional Charges</h6>
                                <button type="button" class="btn btn-sm btn-outline-primary" onclick="addCharge()">
                                    <i class="fas fa-plus"></i> Add Charge
                                </button>
                            </div>
                        </div>
                        <div class="card-body">
                            <div id="additionalCharges">
                                <!-- Charges will be added here dynamically -->
                            </div>
                            <div class="text-end mt-3">
                                <h6>Total Additional Charges: <span id="totalAdditionalCharges">$0.00</span></h6>
                            </div>
                        </div>
                    </div>

                    <!-- Room Condition -->
                    <div class="card mb-3">
                        <div class="card-header">
                            <h6 class="mb-0">Room Condition</h6>
                        </div>
                        <div class="card-body">
                            <div class="row g-3">
                                <div class="col-12">
                                    <label class="form-label">Room Status</label>
                                    <div class="d-flex gap-3">
                                        <div class="form-check">
                                            <input class="form-check-input" type="radio" name="roomCondition" value="clean" required>
                                            <label class="form-check-label">Clean</label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input" type="radio" name="roomCondition" value="needs_cleaning">
                                            <label class="form-check-label">Needs Cleaning</label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input" type="radio" name="roomCondition" value="damaged">
                                            <label class="form-check-label">Damaged</label>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-12">
                                    <label class="form-label">Notes</label>
                                    <textarea class="form-control" name="roomNotes" rows="2" 
                                        placeholder="Enter any notes about room condition"></textarea>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Payment Summary -->
                    <div class="card">
                        <div class="card-header">
                            <h6 class="mb-0">Payment Summary</h6>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table">
                                    <tbody>
                                        <tr>
                                            <td>Room Charges</td>
                                            <td class="text-end" id="totalRoomCharges">$0.00</td>
                                        </tr>
                                        <tr>
                                            <td>Additional Charges</td>
                                            <td class="text-end" id="summaryAdditionalCharges">$0.00</td>
                                        </tr>
                                        <tr>
                                            <td>Taxes</td>
                                            <td class="text-end" id="totalTaxes">$0.00</td>
                                        </tr>
                                        <tr>
                                            <td><strong>Total Amount</strong></td>
                                            <td class="text-end"><strong id="totalAmount">$0.00</strong></td>
                                        </tr>
                                        <tr>
                                            <td>Amount Paid</td>
                                            <td class="text-end" id="amountPaid">$0.00</td>
                                        </tr>
                                        <tr>
                                            <td><strong>Balance Due</strong></td>
                                            <td class="text-end"><strong id="balanceDue">$0.00</strong></td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="confirmCheckOut()">Complete Check-out</button>
            </div>
        </div>
    </div>
</div>

<!-- Additional Charge Template -->
<template id="chargeTemplate">
    <div class="charge-item mb-2">
        <div class="row g-2">
            <div class="col-md-4">
                <select class="form-select" name="chargeType[]" required>
                    <option value="">Select Type</option>
                    <option value="room_service">Room Service</option>
                    <option value="minibar">Mini Bar</option>
                    <option value="restaurant">Restaurant</option>
                    <option value="laundry">Laundry</option>
                    <option value="damage">Damage Charge</option>
                    <option value="other">Other</option>
                </select>
            </div>
            <div class="col-md-4">
                <input type="text" class="form-control" name="chargeDescription[]" placeholder="Description" required>
            </div>
            <div class="col-md-3">
                <input type="number" class="form-control" name="chargeAmount[]" placeholder="Amount" required 
                    onchange="updateTotalCharges()">
            </div>
            <div class="col-md-1">
                <button type="button" class="btn btn-outline-danger btn-sm" onclick="removeCharge(this)">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        </div>
    </div>
</template>

<script>
// Add new charge
function addCharge() {
    const template = document.getElementById('chargeTemplate');
    const chargesContainer = document.getElementById('additionalCharges');
    const clone = template.content.cloneNode(true);
    chargesContainer.appendChild(clone);
    updateTotalCharges();
}

// Remove charge
function removeCharge(button) {
    button.closest('.charge-item').remove();
    updateTotalCharges();
}

// Update total charges
function updateTotalCharges() {
    const amounts = document.getElementsByName('chargeAmount[]');
    let total = 0;
    amounts.forEach(amount => {
        total += parseFloat(amount.value || 0);
    });
    
    document.getElementById('totalAdditionalCharges').textContent = `$${total.toFixed(2)}`;
    document.getElementById('summaryAdditionalCharges').textContent = `$${total.toFixed(2)}`;
    updatePaymentSummary();
}

// Update payment summary
function updatePaymentSummary() {
    const roomCharges = parseFloat(document.getElementById('totalRoomCharges').textContent.replace('$', ''));
    const additionalCharges = parseFloat(document.getElementById('summaryAdditionalCharges').textContent.replace('$', ''));
    const taxes = (roomCharges + additionalCharges) * 0.1; // 10% tax rate
    const total = roomCharges + additionalCharges + taxes;
    const paid = parseFloat(document.getElementById('amountPaid').textContent.replace('$', ''));
    const balance = total - paid;

    document.getElementById('totalTaxes').textContent = `$${taxes.toFixed(2)}`;
    document.getElementById('totalAmount').textContent = `$${total.toFixed(2)}`;
    document.getElementById('balanceDue').textContent = `$${balance.toFixed(2)}`;
}

// Initialize check-in modal
function initializeCheckIn(bookingId) {
    // Fetch booking details and populate the form
    fetch(`/api/check-in-out/check-in/${bookingId}`)
        .then(response => response.json())
        .then(data => {
            document.getElementById('guestName').value = data.guest.name;
            document.getElementById('guestEmail').value = data.guest.email;
            document.getElementById('guestPhone').value = data.guest.phone;
            document.getElementById('roomNumber').value = data.room.number;
            document.getElementById('roomType').value = data.room.type;
            document.getElementById('roomFloor').value = data.room.floor;

            const modal = new bootstrap.Modal(document.getElementById('checkInModal'));
            modal.show();
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Failed to load check-in details');
        });
}

// Initialize check-out modal
function initializeCheckOut(bookingId) {
    // Fetch booking details and populate the form
    fetch(`/api/check-in-out/check-out/${bookingId}`)
        .then(response => response.json())
        .then(data => {
            document.getElementById('checkInDate').value = new Date(data.checkIn).toLocaleDateString();
            document.getElementById('checkOutDate').value = new Date(data.checkOut).toLocaleDateString();
            document.getElementById('totalNights').value = data.nights;
            document.getElementById('roomRate').value = `$${data.roomRate.toFixed(2)}`;
            document.getElementById('totalRoomCharges').textContent = `$${data.totalRoomCharges.toFixed(2)}`;
            document.getElementById('amountPaid').textContent = `$${data.amountPaid.toFixed(2)}`;

            updatePaymentSummary();

            const modal = new bootstrap.Modal(document.getElementById('checkOutModal'));
            modal.show();
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Failed to load check-out details');
        });
}

// Confirm check-in
function confirmCheckIn() {
    const form = document.getElementById('checkInForm');
    const formData = new FormData(form);
    
    fetch('/api/check-in-out/check-in', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(Object.fromEntries(formData))
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            window.location.reload();
        } else {
            alert(data.message || 'Failed to process check-in');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('An error occurred while processing check-in');
    });
}

// Confirm check-out
function confirmCheckOut() {
    const form = document.getElementById('checkOutForm');
    const formData = new FormData(form);
    
    fetch('/api/check-in-out/check-out', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(Object.fromEntries(formData))
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            window.location.reload();
        } else {
            alert(data.message || 'Failed to process check-out');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('An error occurred while processing check-out');
    });
}
</script>

================
File: src/views/admin/corporate/list.hbs
================
{{> admin/header title="Corporate Accounts"}}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Corporate Accounts</h5>
                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createCorporateModal">
                        <i class="fas fa-plus"></i> Add Corporate Account
                    </button>
                </div>
                <div class="card-body">
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <input type="text" class="form-control" id="searchInput" placeholder="Search company name or email...">
                        </div>
                        <div class="col-md-3">
                            <select class="form-select" id="statusFilter">
                                <option value="">All Statuses</option>
                                <option value="active">Active</option>
                                <option value="inactive">Inactive</option>
                                <option value="suspended">Suspended</option>
                            </select>
                        </div>
                    </div>
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Company Name</th>
                                    <th>Contact Person</th>
                                    <th>Contract Status</th>
                                    <th>Credit Limit</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="corporateTableBody">
                                {{#each accounts}}
                                <tr>
                                    <td>{{companyName}}</td>
                                    <td>
                                        {{contactPerson.name}}<br>
                                        <small class="text-muted">{{contactPerson.email}}</small>
                                    </td>
                                    <td>
                                        <span class="badge bg-{{contractStatusColor contractDetails.status}}">
                                            {{contractDetails.status}}
                                        </span>
                                    </td>
                                    <td>{{formatCurrency creditLimit.amount}} {{creditLimit.currency}}</td>
                                    <td>
                                        <span class="badge bg-{{statusColor status}}">{{status}}</span>
                                    </td>
                                    <td>
                                        <div class="btn-group">
                                            <button type="button" class="btn btn-sm btn-info" onclick="viewAccount('{{_id}}')">
                                                <i class="fas fa-eye"></i>
                                            </button>
                                            <button type="button" class="btn btn-sm btn-primary" onclick="editAccount('{{_id}}')">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button type="button" class="btn btn-sm btn-danger" onclick="deleteAccount('{{_id}}')">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                    </div>
                    {{> admin/pagination}}
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create Corporate Account Modal -->
<div class="modal fade" id="createCorporateModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create Corporate Account</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="createCorporateForm">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">Company Name</label>
                            <input type="text" class="form-control" name="companyName" required>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Registration Number</label>
                            <input type="text" class="form-control" name="registrationNumber" required>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">Contact Person Name</label>
                            <input type="text" class="form-control" name="contactPerson.name" required>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Contact Email</label>
                            <input type="email" class="form-control" name="contactPerson.email" required>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">Contact Phone</label>
                            <input type="tel" class="form-control" name="contactPerson.phone">
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Position</label>
                            <input type="text" class="form-control" name="contactPerson.position">
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">Credit Limit</label>
                            <input type="number" class="form-control" name="creditLimit.amount" required>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Payment Terms</label>
                            <select class="form-select" name="paymentTerms" required>
                                <option value="immediate">Immediate</option>
                                <option value="net15">Net 15</option>
                                <option value="net30">Net 30</option>
                                <option value="net45">Net 45</option>
                                <option value="net60">Net 60</option>
                            </select>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">Contract Start Date</label>
                            <input type="date" class="form-control" name="contractDetails.startDate" required>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Contract End Date</label>
                            <input type="date" class="form-control" name="contractDetails.endDate" required>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="createCorporateAccount()">Create Account</button>
            </div>
        </div>
    </div>
</div>

<!-- View/Edit Corporate Account Modal -->
<div class="modal fade" id="editCorporateModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Corporate Account</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="editCorporateForm">
                    <!-- Fields will be populated dynamically -->
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="updateCorporateAccount()">Update Account</button>
            </div>
        </div>
    </div>
</div>

<script>
let currentPage = 1;
const itemsPerPage = 10;

// Load corporate accounts
async function loadCorporateAccounts(page = 1, status = '', search = '') {
    try {
        const response = await fetch(`/api/corporate?page=${page}&status=${status}&search=${search}`);
        const data = await response.json();
        
        if (data.success) {
            renderAccounts(data.data);
            renderPagination(data.pagination);
        }
    } catch (error) {
        console.error('Error loading corporate accounts:', error);
        showAlert('error', 'Failed to load corporate accounts');
    }
}

// Create corporate account
async function createCorporateAccount() {
    const form = document.getElementById('createCorporateForm');
    const formData = new FormData(form);
    const data = Object.fromEntries(formData.entries());

    try {
        const response = await fetch('/api/corporate', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });

        const result = await response.json();
        if (result.success) {
            $('#createCorporateModal').modal('hide');
            showAlert('success', 'Corporate account created successfully');
            loadCorporateAccounts(currentPage);
        }
    } catch (error) {
        console.error('Error creating corporate account:', error);
        showAlert('error', 'Failed to create corporate account');
    }
}

// View account details
async function viewAccount(id) {
    try {
        const response = await fetch(`/api/corporate/${id}`);
        const data = await response.json();
        
        if (data.success) {
            populateEditForm(data.data);
            $('#editCorporateModal').modal('show');
        }
    } catch (error) {
        console.error('Error loading account details:', error);
        showAlert('error', 'Failed to load account details');
    }
}

// Update corporate account
async function updateCorporateAccount() {
    const form = document.getElementById('editCorporateForm');
    const formData = new FormData(form);
    const data = Object.fromEntries(formData.entries());
    const id = form.dataset.accountId;

    try {
        const response = await fetch(`/api/corporate/${id}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });

        const result = await response.json();
        if (result.success) {
            $('#editCorporateModal').modal('hide');
            showAlert('success', 'Corporate account updated successfully');
            loadCorporateAccounts(currentPage);
        }
    } catch (error) {
        console.error('Error updating corporate account:', error);
        showAlert('error', 'Failed to update corporate account');
    }
}

// Delete corporate account
async function deleteAccount(id) {
    if (!confirm('Are you sure you want to delete this corporate account?')) {
        return;
    }

    try {
        const response = await fetch(`/api/corporate/${id}`, {
            method: 'DELETE'
        });

        const result = await response.json();
        if (result.success) {
            showAlert('success', 'Corporate account deleted successfully');
            loadCorporateAccounts(currentPage);
        }
    } catch (error) {
        console.error('Error deleting corporate account:', error);
        showAlert('error', 'Failed to delete corporate account');
    }
}

// Event listeners
document.addEventListener('DOMContentLoaded', () => {
    loadCorporateAccounts(1);

    // Search input handler
    const searchInput = document.getElementById('searchInput');
    let searchTimeout;
    searchInput.addEventListener('input', (e) => {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(() => {
            const status = document.getElementById('statusFilter').value;
            loadCorporateAccounts(1, status, e.target.value);
        }, 300);
    });

    // Status filter handler
    document.getElementById('statusFilter').addEventListener('change', (e) => {
        const search = document.getElementById('searchInput').value;
        loadCorporateAccounts(1, e.target.value, search);
    });
});
</script>

{{> admin/footer}}

================
File: src/views/admin/current-bookings.hbs
================
<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">
                        <i class="fas fa-calendar-alt me-2"></i>Current Bookings
                        <span class="badge bg-light text-primary ms-2">{{bookings.length}}</span>
                    </h4>
                </div>
                <div class="card-body">
                    <!-- Search and Filter -->
                    <div class="row mb-4">
                        <div class="col-md-4">
                            <div class="input-group">
                                <input type="text" class="form-control" id="searchInput" 
                                       placeholder="Search by guest name..."
                                       value="{{searchQuery}}">
                                <button class="btn btn-outline-primary" type="button" onclick="applyFilters()">
                                    <i class="fas fa-search"></i>
                                </button>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <select class="form-select" id="hotelFilter">
                                <option value="">All Hotels</option>
                                {{#each hotels}}
                                <option value="{{_id}}" {{#if (eq ../selectedHotel _id)}}selected{{/if}}>
                                    {{name}}
                                </option>
                                {{/each}}
                            </select>
                        </div>
                        <div class="col-md-3">
                            <select class="form-select" id="sortBy">
                                <option value="checkIn" {{#if (eq sortBy 'checkIn')}}selected{{/if}}>Sort by Check-in</option>
                                <option value="checkOut" {{#if (eq sortBy 'checkOut')}}selected{{/if}}>Sort by Check-out</option>
                                <option value="guestName" {{#if (eq sortBy 'guestName')}}selected{{/if}}>Sort by Guest Name</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <button class="btn btn-primary w-100" onclick="refreshBookings()">
                                <i class="fas fa-sync-alt me-1"></i> Refresh
                            </button>
                        </div>
                    </div>

                    <!-- Bookings Grid -->
                    <div class="row">
                        {{#each bookings}}
                        <div class="col-md-6 col-lg-4 mb-4">
                            <div class="card h-100 border-primary">
                                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                                    <h5 class="mb-0">Room {{room.number}}</h5>
                                    <span class="badge bg-light text-primary">
                                        {{calculateNights checkIn checkOut}} nights
                                    </span>
                                </div>
                                <div class="card-body">
                                    <div class="mb-3">
                                        <div class="d-flex justify-content-between align-items-start">
                                            <div>
                                                <h5 class="mb-1">{{user.name}}</h5>
                                                <small class="text-muted">{{user.email}}</small>
                                            </div>
                                            <span class="badge bg-info">
                                                <i class="fas fa-users me-1"></i>
                                                {{guests.adults}} adults{{#if guests.children}}, {{guests.children}} children{{/if}}
                                            </span>
                                        </div>
                                    </div>

                                    <div class="mb-3">
                                        <h6 class="mb-2">Hotel</h6>
                                        <p class="mb-1">{{hotel.name}}</p>
                                        <small class="text-muted">{{hotel.location}}</small>
                                    </div>

                                    <div class="mb-3">
                                        <h6 class="mb-2">Room Details</h6>
                                        <p class="mb-1">{{room.type}}</p>
                                        <small class="text-muted">Max Capacity: {{room.capacity}} persons</small>
                                    </div>

                                    <div class="row g-2 mb-3">
                                        <div class="col-6">
                                            <div class="p-2 border rounded">
                                                <small class="d-block text-muted">Check In</small>
                                                <strong>{{formatDate checkIn}}</strong>
                                            </div>
                                        </div>
                                        <div class="col-6">
                                            <div class="p-2 border rounded">
                                                <small class="d-block text-muted">Check Out</small>
                                                <strong>{{formatDate checkOut}}</strong>
                                            </div>
                                        </div>
                                    </div>

                                    {{#if specialRequests}}
                                    <div class="mb-3">
                                        <h6 class="mb-2">Special Requests</h6>
                                        <p class="mb-0 text-muted">{{specialRequests}}</p>
                                    </div>
                                    {{/if}}
                                </div>
                                <div class="card-footer bg-transparent border-0">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <button class="btn btn-outline-primary" onclick="viewBooking('{{_id}}')">
                                            <i class="fas fa-eye me-1"></i> View Details
                                        </button>
                                        <h5 class="mb-0 text-primary">${{totalPrice}}</h5>
                                    </div>
                                </div>
                            </div>
                        </div>
                        {{else}}
                        <div class="col-12">
                            <div class="text-center py-5">
                                <i class="fas fa-calendar-times fa-3x text-muted mb-3"></i>
                                <h4>No Current Bookings</h4>
                                <p class="text-muted">There are no active bookings at the moment.</p>
                            </div>
                        </div>
                        {{/each}}
                    </div>

                    <!-- Pagination -->
                    <nav class="mt-4">
                        <ul class="pagination justify-content-center">
                            {{#if pagination.hasPrev}}
                            <li class="page-item">
                                <a class="page-link" href="?page={{pagination.prevPage}}">Previous</a>
                            </li>
                            {{else}}
                            <li class="page-item disabled">
                                <span class="page-link">Previous</span>
                            </li>
                            {{/if}}

                            <li class="page-item active">
                                <span class="page-link">{{pagination.page}} of {{pagination.totalPages}}</span>
                            </li>

                            {{#if pagination.hasNext}}
                            <li class="page-item">
                                <a class="page-link" href="?page={{pagination.nextPage}}">Next</a>
                            </li>
                            {{else}}
                            <li class="page-item disabled">
                                <span class="page-link">Next</span>
                            </li>
                            {{/if}}
                        </ul>
                    </nav>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
function applyFilters() {
    const search = document.getElementById('searchInput').value;
    const hotel = document.getElementById('hotelFilter').value;
    const sortBy = document.getElementById('sortBy').value;

    const url = new URL(window.location.href);
    if (search) url.searchParams.set('search', search);
    else url.searchParams.delete('search');
    if (hotel) url.searchParams.set('hotel', hotel);
    else url.searchParams.delete('hotel');
    if (sortBy) url.searchParams.set('sortBy', sortBy);
    else url.searchParams.delete('sortBy');
    url.searchParams.delete('page');

    window.location.href = url.toString();
}

function viewBooking(id) {
    window.location.href = `/bookings/${id}`;
}

function refreshBookings() {
    location.reload();
}

// Add event listeners
document.getElementById('searchInput').addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
        applyFilters();
    }
});

document.getElementById('hotelFilter').addEventListener('change', applyFilters);
document.getElementById('sortBy').addEventListener('change', applyFilters);

// Auto-refresh every 5 minutes
setInterval(refreshBookings, 5 * 60 * 1000);
</script>

================
File: src/views/admin/dashboard.ejs
================
<%- include('../partials/header') %>
<%- include('../partials/admin-nav') %>

<div class="min-h-screen bg-gray-100">
    <div class="py-6">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <!-- Stats Overview -->
            <div class="grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-5">
                <!-- Total Bookings -->
                <div class="bg-white overflow-hidden shadow rounded-lg">
                    <div class="p-5">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <svg class="h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                </svg>
                            </div>
                            <div class="ml-5 w-0 flex-1">
                                <dl>
                                    <dt class="text-sm font-medium text-gray-500 truncate">Total Bookings</dt>
                                    <dd class="flex items-baseline">
                                        <div class="text-2xl font-semibold text-gray-900"><%= stats.totalBookings %></div>
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Total Revenue -->
                <div class="bg-white overflow-hidden shadow rounded-lg">
                    <div class="p-5">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <svg class="h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                            </div>
                            <div class="ml-5 w-0 flex-1">
                                <dl>
                                    <dt class="text-sm font-medium text-gray-500 truncate">Total Revenue</dt>
                                    <dd class="flex items-baseline">
                                        <div class="text-2xl font-semibold text-gray-900">$<%= (stats.totalRevenue).toLocaleString() %></div>
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Total Guests -->
                <div class="bg-white overflow-hidden shadow rounded-lg">
                    <div class="p-5">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <svg class="h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                                </svg>
                            </div>
                            <div class="ml-5 w-0 flex-1">
                                <dl>
                                    <dt class="text-sm font-medium text-gray-500 truncate">Total Guests</dt>
                                    <dd class="flex items-baseline">
                                        <div class="text-2xl font-semibold text-gray-900"><%= stats.totalGuests %></div>
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Active Hotels -->
                <div class="bg-white overflow-hidden shadow rounded-lg">
                    <div class="p-5">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <svg class="h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                                </svg>
                            </div>
                            <div class="ml-5 w-0 flex-1">
                                <dl>
                                    <dt class="text-sm font-medium text-gray-500 truncate">Active Hotels</dt>
                                    <dd class="flex items-baseline">
                                        <div class="text-2xl font-semibold text-gray-900"><%= stats.activeHotels %></div>
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Loyalty Members -->
                <div class="bg-white overflow-hidden shadow rounded-lg">
                    <div class="p-5">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <svg class="h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z" />
                                </svg>
                            </div>
                            <div class="ml-5 w-0 flex-1">
                                <dl>
                                    <dt class="text-sm font-medium text-gray-500 truncate">Loyalty Members</dt>
                                    <dd class="flex items-baseline">
                                        <div class="text-2xl font-semibold text-gray-900"><%= stats.loyaltyMembers %></div>
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Quick Actions -->
            <div class="mt-8">
                <h2 class="text-lg leading-6 font-medium text-gray-900 mb-4">Quick Actions</h2>
                <div class="grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-4">
                    <a href="/admin/bookings/new" class="bg-white overflow-hidden shadow rounded-lg p-6 hover:bg-gray-50">
                        <div class="flex items-center">
                            <div class="flex-shrink-0 bg-indigo-500 rounded-md p-3">
                                <svg class="h-6 w-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                                </svg>
                            </div>
                            <div class="ml-4">
                                <h3 class="text-lg font-medium text-gray-900">New Booking</h3>
                                <p class="text-sm text-gray-500">Create a new booking</p>
                            </div>
                        </div>
                    </a>

                    <a href="/admin/guests/new" class="bg-white overflow-hidden shadow rounded-lg p-6 hover:bg-gray-50">
                        <div class="flex items-center">
                            <div class="flex-shrink-0 bg-green-500 rounded-md p-3">
                                <svg class="h-6 w-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z" />
                                </svg>
                            </div>
                            <div class="ml-4">
                                <h3 class="text-lg font-medium text-gray-900">Add Guest</h3>
                                <p class="text-sm text-gray-500">Register a new guest</p>
                            </div>
                        </div>
                    </a>

                    <a href="/admin/inventory" class="bg-white overflow-hidden shadow rounded-lg p-6 hover:bg-gray-50">
                        <div class="flex items-center">
                            <div class="flex-shrink-0 bg-yellow-500 rounded-md p-3">
                                <svg class="h-6 w-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4" />
                                </svg>
                            </div>
                            <div class="ml-4">
                                <h3 class="text-lg font-medium text-gray-900">Inventory</h3>
                                <p class="text-sm text-gray-500">Manage inventory</p>
                            </div>
                        </div>
                    </a>

                    <a href="/admin/maintenance" class="bg-white overflow-hidden shadow rounded-lg p-6 hover:bg-gray-50">
                        <div class="flex items-center">
                            <div class="flex-shrink-0 bg-red-500 rounded-md p-3">
                                <svg class="h-6 w-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                </svg>
                            </div>
                            <div class="ml-4">
                                <h3 class="text-lg font-medium text-gray-900">Maintenance</h3>
                                <p class="text-sm text-gray-500">View maintenance requests</p>
                            </div>
                        </div>
                    </a>
                </div>
            </div>

            <!-- Charts Section -->
            <div class="mt-8 grid grid-cols-1 gap-8 lg:grid-cols-2">
                <!-- Booking Trends -->
                <div class="bg-white shadow rounded-lg p-6">
                    <h3 class="text-lg leading-6 font-medium text-gray-900 mb-4">Booking Trends</h3>
                    <canvas id="bookingTrendsChart" class="w-full" height="300"></canvas>
                </div>

                <!-- Revenue Trends -->
                <div class="bg-white shadow rounded-lg p-6">
                    <h3 class="text-lg leading-6 font-medium text-gray-900 mb-4">Revenue Trends</h3>
                    <canvas id="revenueTrendsChart" class="w-full" height="300"></canvas>
                </div>
            </div>

            <!-- Recent Activity -->
            <div class="mt-8 grid grid-cols-1 gap-8 lg:grid-cols-2">
                <!-- Recent Bookings -->
                <div class="bg-white shadow rounded-lg">
                    <div class="p-6">
                        <h3 class="text-lg leading-6 font-medium text-gray-900">Recent Bookings</h3>
                        <div class="mt-4">
                            <div class="flow-root">
                                <ul class="-my-5 divide-y divide-gray-200">
                                    <% recentBookings.forEach(booking => { %>
                                    <li class="py-4">
                                        <div class="flex items-center space-x-4">
                                            <div class="flex-1 min-w-0">
                                                <p class="text-sm font-medium text-gray-900 truncate">
                                                    <%= booking.user.name %>
                                                </p>
                                                <p class="text-sm text-gray-500 truncate">
                                                    <%= booking.hotel.name %>
                                                </p>
                                            </div>
                                            <div class="inline-flex items-center text-sm font-semibold text-indigo-600">
                                                <a href="/admin/bookings/<%= booking._id %>">View details</a>
                                            </div>
                                        </div>
                                    </li>
                                    <% }); %>
                                </ul>
                            </div>
                            <div class="mt-6">
                                <a href="/admin/bookings" class="w-full flex justify-center items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                                    View all
                                </a>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Top Hotels -->
                <div class="bg-white shadow rounded-lg">
                    <div class="p-6">
                        <h3 class="text-lg leading-6 font-medium text-gray-900">Top Performing Hotels</h3>
                        <div class="mt-4">
                            <div class="flow-root">
                                <ul class="-my-5 divide-y divide-gray-200">
                                    <% topHotels.forEach(hotel => { %>
                                    <li class="py-4">
                                        <div class="flex items-center space-x-4">
                                            <div class="flex-1 min-w-0">
                                                <p class="text-sm font-medium text-gray-900 truncate">
                                                    <%= hotel.name %>
                                                </p>
                                                <p class="text-sm text-gray-500">
                                                    <%= hotel.totalBookings %> bookings
                                                </p>
                                            </div>
                                            <div class="text-sm font-medium text-green-600">
                                                $<%= hotel.revenue.toLocaleString() %>
                                            </div>
                                        </div>
                                    </li>
                                    <% }); %>
                                </ul>
                            </div>
                            <div class="mt-6">
                                <a href="/admin/hotels" class="w-full flex justify-center items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                                    View all hotels
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Loyalty Program Overview -->
            <div class="mt-8">
                <div class="bg-white shadow rounded-lg">
                    <div class="p-6">
                        <h3 class="text-lg leading-6 font-medium text-gray-900 mb-4">Loyalty Program Overview</h3>
                        <div class="grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4">
                            <% ['Bronze', 'Silver', 'Gold', 'Platinum'].forEach(tier => { %>
                            <div class="bg-gray-50 overflow-hidden shadow rounded-lg">
                                <div class="p-5">
                                    <div class="flex items-center">
                                        <div class="flex-shrink-0">
                                            <div class="h-10 w-10 rounded-full flex items-center justify-center
                                                <%= tier === 'Bronze' ? 'bg-yellow-700' :
                                                    tier === 'Silver' ? 'bg-gray-400' :
                                                    tier === 'Gold' ? 'bg-yellow-500' :
                                                    'bg-gray-800' %>">
                                                <svg class="h-6 w-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 3v4M3 5h4M6 17v4m-2-2h4m5-16l2.286 6.857L21 12l-5.714 2.143L13 21l-2.286-6.857L5 12l5.714-2.143L13 3z" />
                                                </svg>
                                            </div>
                                        </div>
                                        <div class="ml-5 w-0 flex-1">
                                            <dl>
                                                <dt class="text-sm font-medium text-gray-500 truncate"><%= tier %> Members</dt>
                                                <dd class="flex items-baseline">
                                                    <div class="text-2xl font-semibold text-gray-900">
                                                        <%= loyaltyStats[tier]?.count || 0 %>
                                                    </div>
                                                    <div class="ml-2 flex items-baseline text-sm font-semibold text-green-600">
                                                        <%= loyaltyStats[tier]?.totalPoints?.toLocaleString() || 0 %> points
                                                    </div>
                                                </dd>
                                            </dl>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <% }); %>
                        </div>
                        <div class="mt-6">
                            <a href="/admin/loyalty" class="w-full flex justify-center items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                                Manage Loyalty Program
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Charts.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    // Booking Trends Chart
    const bookingCtx = document.getElementById('bookingTrendsChart').getContext('2d');
    new Chart(bookingCtx, {
        type: 'line',
        data: {
            labels: <%- JSON.stringify(bookingTrends.labels) %>,
            datasets: [{
                label: 'Bookings',
                data: <%- JSON.stringify(bookingTrends.bookings) %>,
                borderColor: 'rgb(79, 70, 229)',
                tension: 0.1
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        stepSize: 1
                    }
                }
            }
        }
    });

    // Revenue Trends Chart
    const revenueCtx = document.getElementById('revenueTrendsChart').getContext('2d');
    new Chart(revenueCtx, {
        type: 'line',
        data: {
            labels: <%- JSON.stringify(bookingTrends.labels) %>,
            datasets: [{
                label: 'Revenue ($)',
                data: <%- JSON.stringify(bookingTrends.revenue) %>,
                borderColor: 'rgb(34, 197, 94)',
                tension: 0.1
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        callback: function(value) {
                            return '$' + value.toLocaleString();
                        }
                    }
                }
            }
        }
    });
</script>

<%- include('../partials/footer') %>

================
File: src/views/admin/dashboard.hbs
================
<!-- Overview & Real-Time Insights -->
<div class="row mb-4">
    <!-- Occupancy Rate -->
    <div class="col-xl-3 col-md-6 mb-4">
        <div class="card border-left-primary shadow h-100 py-2">
            <div class="card-body">
                <div class="row no-gutters align-items-center">
                    <div class="col mr-2">
                        <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                            Occupancy Rate</div>
                        <div class="h5 mb-0 font-weight-bold text-gray-800">{{occupancyRate}}%</div>
                        <div class="text-xs text-muted">
                            <span class="text-success">{{occupiedRooms}} occupied</span> • 
                            <span class="text-primary">{{availableRooms}} available</span> • 
                            <span class="text-warning">{{maintenanceRooms}} maintenance</span>
                        </div>
                    </div>
                    <div class="col-auto">
                        <i class="fas fa-hotel fa-2x text-gray-300"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Today's Bookings -->
    <div class="col-xl-3 col-md-6 mb-4">
        <div class="card border-left-success shadow h-100 py-2">
            <div class="card-body">
                <div class="row no-gutters align-items-center">
                    <div class="col mr-2">
                        <div class="text-xs font-weight-bold text-success text-uppercase mb-1">
                            Today's Bookings</div>
                        <div class="h5 mb-0 font-weight-bold text-gray-800">{{todayBookings}}</div>
                        <div class="text-xs text-muted">{{todayCheckIns.length}} check-ins, {{todayCheckOuts.length}} check-outs</div>
                    </div>
                    <div class="col-auto">
                        <i class="fas fa-calendar-check fa-2x text-gray-300"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Revenue -->
    <div class="col-xl-3 col-md-6 mb-4">
        <div class="card border-left-info shadow h-100 py-2">
            <div class="card-body">
                <div class="row no-gutters align-items-center">
                    <div class="col mr-2">
                        <div class="text-xs font-weight-bold text-info text-uppercase mb-1">
                            Today's Revenue</div>
                        <div class="h5 mb-0 font-weight-bold text-gray-800">${{todayRevenue}}</div>
                        <div class="text-xs text-muted">
                            {{#if (gt revenueChange 0)}}
                            <span class="text-success">+${{revenueChange}} vs yesterday</span>
                            {{else}}
                            <span class="text-danger">-${{abs revenueChange}} vs yesterday</span>
                            {{/if}}
                        </div>
                    </div>
                    <div class="col-auto">
                        <i class="fas fa-dollar-sign fa-2x text-gray-300"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Active Guests -->
    <div class="col-xl-3 col-md-6 mb-4">
        <div class="card border-left-warning shadow h-100 py-2">
            <div class="card-body">
                <div class="row no-gutters align-items-center">
                    <div class="col mr-2">
                        <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">
                            Active Guests</div>
                        <div class="h5 mb-0 font-weight-bold text-gray-800">{{activeGuests}}</div>
                        <div class="text-xs text-muted">including {{vipGuests}} VIP guests</div>
                    </div>
                    <div class="col-auto">
                        <i class="fas fa-users fa-2x text-gray-300"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Quick Actions -->
<div class="row mb-4">
    <div class="col-12">
        <div class="card shadow">
            <div class="card-header py-3 d-flex justify-content-between align-items-center">
                <h6 class="m-0 font-weight-bold text-primary">Quick Actions</h6>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-3 col-sm-6 mb-3">
                        <a href="/admin/bookings/new" class="btn btn-primary btn-block">
                            <i class="fas fa-plus-circle me-2"></i>New Booking
                        </a>
                    </div>
                    <div class="col-md-3 col-sm-6 mb-3">
                        <a href="/admin/bookings/calendar" class="btn btn-info btn-block">
                            <i class="fas fa-calendar-alt me-2"></i>Calendar View
                        </a>
                    </div>
                    <div class="col-md-3 col-sm-6 mb-3">
                        <a href="/admin/housekeeping" class="btn btn-success btn-block">
                            <i class="fas fa-broom me-2"></i>Housekeeping
                        </a>
                    </div>
                    <div class="col-md-3 col-sm-6 mb-3">
                        <a href="/admin/maintenance" class="btn btn-warning btn-block">
                            <i class="fas fa-tools me-2"></i>Maintenance
                        </a>
                    </div>
                    <div class="col-md-3 col-sm-6 mb-3">
                        <a href="/admin/reports" class="btn btn-info btn-block">
                            <i class="fas fa-chart-bar me-2"></i>Reports
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Revenue Chart -->
<div class="row mb-4">
    <div class="col-12">
        <div class="card shadow">
            <div class="card-header py-3 d-flex justify-content-between align-items-center">
                <h6 class="m-0 font-weight-bold text-primary">Revenue Trends</h6>
                <div class="btn-group">
                    <a href="?period=daily" class="btn btn-sm btn-outline-primary {{#if (eq period 'daily')}}active{{/if}}">Daily</a>
                    <a href="?period=weekly" class="btn btn-sm btn-outline-primary {{#if (eq period 'weekly')}}active{{/if}}">Weekly</a>
                    <a href="?period=monthly" class="btn btn-sm btn-outline-primary {{#if (eq period 'monthly')}}active{{/if}}">Monthly</a>
                </div>
            </div>
            <div class="card-body">
                <canvas id="revenueChart" height="300"></canvas>
            </div>
        </div>
    </div>
</div>

<!-- Today's Operations -->
<div class="row mb-4">
    <!-- Check-ins -->
    <div class="col-xl-6 col-lg-6">
        <div class="card shadow mb-4">
            <div class="card-header py-3 d-flex justify-content-between align-items-center">
                <h6 class="m-0 font-weight-bold text-primary">Today's Check-ins</h6>
                <a href="/admin/bookings?filter=check-in" class="btn btn-sm btn-primary">View All</a>
            </div>
            <div class="card-body">
                {{#if todayCheckIns}}
                <div class="table-responsive">
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th>Guest</th>
                                <th>Room</th>
                                <th>Time</th>
                                <th>Status</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            {{#each todayCheckIns}}
                            <tr>
                                <td>{{this.guestName}}</td>
                                <td>{{this.roomNumber}}</td>
                                <td>{{this.checkInTime}}</td>
                                <td>{{{this.statusBadge}}}</td>
                                <td>
                                    <a href="/admin/bookings/{{this._id}}" class="btn btn-sm btn-primary">
                                        <i class="fas fa-eye"></i>
                                    </a>
                                </td>
                            </tr>
                            {{/each}}
                        </tbody>
                    </table>
                </div>
                {{else}}
                <p class="text-center text-muted my-3">No check-ins scheduled for today</p>
                {{/if}}
            </div>
        </div>
    </div>

    <!-- Check-outs -->
    <div class="col-xl-6 col-lg-6">
        <div class="card shadow mb-4">
            <div class="card-header py-3 d-flex justify-content-between align-items-center">
                <h6 class="m-0 font-weight-bold text-primary">Today's Check-outs</h6>
                <a href="/admin/bookings?filter=check-out" class="btn btn-sm btn-primary">View All</a>
            </div>
            <div class="card-body">
                {{#if todayCheckOuts}}
                <div class="table-responsive">
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th>Guest</th>
                                <th>Room</th>
                                <th>Time</th>
                                <th>Status</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            {{#each todayCheckOuts}}
                            <tr>
                                <td>{{this.guestName}}</td>
                                <td>{{this.roomNumber}}</td>
                                <td>{{this.checkOutTime}}</td>
                                <td>{{{this.statusBadge}}}</td>
                                <td>
                                    <a href="/admin/bookings/{{this._id}}" class="btn btn-sm btn-primary">
                                        <i class="fas fa-eye"></i>
                                    </a>
                                </td>
                            </tr>
                            {{/each}}
                        </tbody>
                    </table>
                </div>
                {{else}}
                <p class="text-center text-muted my-3">No check-outs scheduled for today</p>
                {{/if}}
            </div>
        </div>
    </div>
</div>

<!-- Housekeeping and Maintenance -->
<div class="row">
    <!-- Housekeeping Tasks -->
    <div class="col-xl-6 col-lg-6">
        <div class="card shadow mb-4">
            <div class="card-header py-3 d-flex justify-content-between align-items-center">
                <h6 class="m-0 font-weight-bold text-primary">Housekeeping Tasks</h6>
                <a href="/admin/housekeeping" class="btn btn-sm btn-primary">View All</a>
            </div>
            <div class="card-body">
                {{#if housekeepingTasks}}
                <div class="table-responsive">
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th>Room</th>
                                <th>Type</th>
                                <th>Status</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            {{#each housekeepingTasks}}
                            <tr>
                                <td>{{this.roomNumber}}</td>
                                <td>{{this.type}}</td>
                                <td>{{{this.statusBadge}}}</td>
                                <td>
                                    <a href="/admin/housekeeping/{{this._id}}" class="btn btn-sm btn-primary">
                                        <i class="fas fa-eye"></i>
                                    </a>
                                </td>
                            </tr>
                            {{/each}}
                        </tbody>
                    </table>
                </div>
                {{else}}
                <p class="text-center text-muted my-3">No pending housekeeping tasks</p>
                {{/if}}
            </div>
        </div>
    </div>

    <!-- Maintenance Requests -->
    <div class="col-xl-6 col-lg-6">
        <div class="card shadow mb-4">
            <div class="card-header py-3 d-flex justify-content-between align-items-center">
                <h6 class="m-0 font-weight-bold text-primary">Maintenance Requests</h6>
                <a href="/admin/maintenance" class="btn btn-sm btn-primary">View All</a>
            </div>
            <div class="card-body">
                {{#if maintenanceRequests}}
                <div class="table-responsive">
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th>Room</th>
                                <th>Issue</th>
                                <th>Priority</th>
                                <th>Status</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            {{#each maintenanceRequests}}
                            <tr>
                                <td>{{this.roomNumber}}</td>
                                <td>{{this.issue}}</td>
                                <td>{{{this.priorityBadge}}}</td>
                                <td>{{{this.statusBadge}}}</td>
                                <td>
                                    <a href="/admin/maintenance/{{this._id}}" class="btn btn-sm btn-primary">
                                        <i class="fas fa-eye"></i>
                                    </a>
                                </td>
                            </tr>
                            {{/each}}
                        </tbody>
                    </table>
                </div>
                {{else}}
                <p class="text-center text-muted my-3">No pending maintenance requests</p>
                {{/if}}
            </div>
        </div>
    </div>
</div>

<!-- Chart Initialization -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Revenue Chart
    const revenueCtx = document.getElementById('revenueChart').getContext('2d');
    new Chart(revenueCtx, {
        type: 'line',
        data: {
            labels: {{{json revenueData.labels}}},
            datasets: [{
                label: 'Revenue',
                data: {{{json revenueData.values}}},
                backgroundColor: 'rgba(52, 152, 219, 0.1)',
                borderColor: 'rgba(52, 152, 219, 1)',
                borderWidth: 2,
                pointBackgroundColor: 'rgba(52, 152, 219, 1)',
                pointBorderColor: '#fff',
                pointBorderWidth: 2,
                pointRadius: 4,
                pointHoverRadius: 6,
                fill: true,
                tension: 0.4
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        callback: function(value) {
                            return '$' + value.toLocaleString();
                        }
                    }
                }
            },
            plugins: {
                legend: {
                    display: false
                },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            return 'Revenue: $' + context.parsed.y.toLocaleString();
                        }
                    }
                }
            }
        }
    });
});

================
File: src/views/admin/financial/dashboard.hbs
================
{{> admin/header}}
{{> admin/sidebar}}

<div class="main-content">
    <div class="container-fluid p-4">
        <!-- Page Header -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h1 class="h3 mb-0">Financial Reports</h1>
                        <nav aria-label="breadcrumb">
                            <ol class="breadcrumb mb-0">
                                <li class="breadcrumb-item"><a href="/admin/dashboard">Dashboard</a></li>
                                <li class="breadcrumb-item active">Financial Reports</li>
                            </ol>
                        </nav>
                    </div>
                    <div>
                        <button class="btn btn-outline-primary me-2" onclick="exportReports()">
                            <i class="fas fa-download me-2"></i>Export Reports
                        </button>
                        <div class="btn-group">
                            <button class="btn btn-primary dropdown-toggle" data-bs-toggle="dropdown">
                                <i class="fas fa-calendar me-2"></i>{{selectedPeriod}}
                            </button>
                            <ul class="dropdown-menu dropdown-menu-end">
                                <li><a class="dropdown-item" href="#" onclick="changePeriod('today')">Today</a></li>
                                <li><a class="dropdown-item" href="#" onclick="changePeriod('week')">This Week</a></li>
                                <li><a class="dropdown-item" href="#" onclick="changePeriod('month')">This Month</a></li>
                                <li><a class="dropdown-item" href="#" onclick="changePeriod('quarter')">This Quarter</a></li>
                                <li><a class="dropdown-item" href="#" onclick="changePeriod('year')">This Year</a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item" href="#" onclick="showCustomDateRange()">Custom Range</a></li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Revenue Overview -->
        <div class="row g-3 mb-4">
            <div class="col-sm-6 col-xl-3">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex align-items-start justify-content-between">
                            <div>
                                <h6 class="text-muted mb-2">Total Revenue</h6>
                                <h4 class="mb-0">${{formatNumber stats.totalRevenue}}</h4>
                                <small class="{{stats.revenueGrowth.class}}">
                                    <i class="fas fa-arrow-{{stats.revenueGrowth.direction}} me-1"></i>{{stats.revenueGrowth.percentage}}% vs last period
                                </small>
                            </div>
                            <div class="avatar bg-light-success">
                                <i class="fas fa-dollar-sign text-success"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-6 col-xl-3">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex align-items-start justify-content-between">
                            <div>
                                <h6 class="text-muted mb-2">Average Daily Rate</h6>
                                <h4 class="mb-0">${{formatNumber stats.averageDailyRate}}</h4>
                                <small class="{{stats.adrGrowth.class}}">
                                    <i class="fas fa-arrow-{{stats.adrGrowth.direction}} me-1"></i>{{stats.adrGrowth.percentage}}% vs last period
                                </small>
                            </div>
                            <div class="avatar bg-light-info">
                                <i class="fas fa-chart-line text-info"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-6 col-xl-3">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex align-items-start justify-content-between">
                            <div>
                                <h6 class="text-muted mb-2">RevPAR</h6>
                                <h4 class="mb-0">${{formatNumber stats.revpar}}</h4>
                                <small class="{{stats.revparGrowth.class}}">
                                    <i class="fas fa-arrow-{{stats.revparGrowth.direction}} me-1"></i>{{stats.revparGrowth.percentage}}% vs last period
                                </small>
                            </div>
                            <div class="avatar bg-light-warning">
                                <i class="fas fa-bed text-warning"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-6 col-xl-3">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex align-items-start justify-content-between">
                            <div>
                                <h6 class="text-muted mb-2">Occupancy Rate</h6>
                                <h4 class="mb-0">{{stats.occupancyRate}}%</h4>
                                <small class="{{stats.occupancyGrowth.class}}">
                                    <i class="fas fa-arrow-{{stats.occupancyGrowth.direction}} me-1"></i>{{stats.occupancyGrowth.percentage}}% vs last period
                                </small>
                            </div>
                            <div class="avatar bg-light-primary">
                                <i class="fas fa-percentage text-primary"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Revenue Charts -->
        <div class="row mb-4">
            <div class="col-xl-8">
                <div class="card">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="card-title mb-0">Revenue Trends</h5>
                            <div class="btn-group">
                                <button class="btn btn-outline-secondary btn-sm active" onclick="updateRevenueChart('daily')">Daily</button>
                                <button class="btn btn-outline-secondary btn-sm" onclick="updateRevenueChart('weekly')">Weekly</button>
                                <button class="btn btn-outline-secondary btn-sm" onclick="updateRevenueChart('monthly')">Monthly</button>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <canvas id="revenueChart" height="300"></canvas>
                    </div>
                </div>
            </div>
            <div class="col-xl-4">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Revenue Sources</h5>
                    </div>
                    <div class="card-body">
                        <canvas id="revenueSourcesChart" height="300"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Loyalty Program Impact -->
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="card-title mb-0">Loyalty Program Financial Impact</h5>
            </div>
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-md-3">
                        <div class="border-end">
                            <h6 class="text-muted mb-2">Points Value Liability</h6>
                            <h4 class="mb-1">${{formatNumber loyalty.pointsLiability}}</h4>
                            <small class="{{loyalty.liabilityGrowth.class}}">
                                <i class="fas fa-arrow-{{loyalty.liabilityGrowth.direction}} me-1"></i>{{loyalty.liabilityGrowth.percentage}}% vs last period
                            </small>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="border-end">
                            <h6 class="text-muted mb-2">Points Redeemed Value</h6>
                            <h4 class="mb-1">${{formatNumber loyalty.pointsRedeemedValue}}</h4>
                            <small class="{{loyalty.redemptionGrowth.class}}">
                                <i class="fas fa-arrow-{{loyalty.redemptionGrowth.direction}} me-1"></i>{{loyalty.redemptionGrowth.percentage}}% vs last period
                            </small>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="border-end">
                            <h6 class="text-muted mb-2">Member Revenue</h6>
                            <h4 class="mb-1">${{formatNumber loyalty.memberRevenue}}</h4>
                            <small class="text-muted">{{loyalty.memberRevenuePercentage}}% of total revenue</small>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div>
                            <h6 class="text-muted mb-2">Program ROI</h6>
                            <h4 class="mb-1">{{loyalty.programRoi}}x</h4>
                            <small class="text-muted">Based on member spending</small>
                        </div>
                    </div>
                </div>

                <hr>

                <div class="row g-3">
                    <div class="col-md-6">
                        <h6>Revenue by Tier</h6>
                        <canvas id="tierRevenueChart" height="200"></canvas>
                    </div>
                    <div class="col-md-6">
                        <h6>Points Activity</h6>
                        <canvas id="pointsActivityChart" height="200"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Revenue Details Table -->
        <div class="card">
            <div class="card-header">
                <div class="d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">Revenue Details</h5>
                    <button class="btn btn-sm btn-outline-secondary" onclick="exportRevenueDetails()">
                        <i class="fas fa-download me-2"></i>Export
                    </button>
                </div>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Room Revenue</th>
                                <th>Additional Revenue</th>
                                <th>Loyalty Redemptions</th>
                                <th>Net Revenue</th>
                                <th>Occupancy</th>
                                <th>ADR</th>
                                <th>RevPAR</th>
                            </tr>
                        </thead>
                        <tbody>
                            {{#each revenueDetails}}
                            <tr>
                                <td>{{formatDate date}}</td>
                                <td>${{formatNumber roomRevenue}}</td>
                                <td>${{formatNumber additionalRevenue}}</td>
                                <td>${{formatNumber loyaltyRedemptions}}</td>
                                <td>${{formatNumber netRevenue}}</td>
                                <td>{{occupancy}}%</td>
                                <td>${{formatNumber adr}}</td>
                                <td>${{formatNumber revpar}}</td>
                            </tr>
                            {{/each}}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Custom Date Range Modal -->
<div class="modal fade" id="dateRangeModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Select Date Range</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="dateRangeForm">
                    <div class="mb-3">
                        <label class="form-label">Start Date</label>
                        <input type="date" class="form-control" name="startDate" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">End Date</label>
                        <input type="date" class="form-control" name="endDate" required>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="applyDateRange()">Apply</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
// Initialize charts when the page loads
document.addEventListener('DOMContentLoaded', function() {
    initializeCharts();
});

function initializeCharts() {
    // Revenue Trends Chart
    const revenueCtx = document.getElementById('revenueChart').getContext('2d');
    new Chart(revenueCtx, {
        type: 'line',
        data: {
            labels: {{{json revenueTrends.labels}}},
            datasets: [{
                label: 'Revenue',
                data: {{{json revenueTrends.data}}},
                borderColor: '#28a745',
                tension: 0.4,
                fill: false
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        callback: function(value) {
                            return '$' + value.toLocaleString();
                        }
                    }
                }
            }
        }
    });

    // Revenue Sources Chart
    const sourcesCtx = document.getElementById('revenueSourcesChart').getContext('2d');
    new Chart(sourcesCtx, {
        type: 'doughnut',
        data: {
            labels: ['Room Revenue', 'F&B', 'Spa & Wellness', 'Events', 'Other'],
            datasets: [{
                data: [
                    {{stats.roomRevenue}},
                    {{stats.fbRevenue}},
                    {{stats.spaRevenue}},
                    {{stats.eventRevenue}},
                    {{stats.otherRevenue}}
                ],
                backgroundColor: ['#28a745', '#17a2b8', '#ffc107', '#dc3545', '#6c757d']
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false
        }
    });

    // Tier Revenue Chart
    const tierCtx = document.getElementById('tierRevenueChart').getContext('2d');
    new Chart(tierCtx, {
        type: 'bar',
        data: {
            labels: ['Bronze', 'Silver', 'Gold', 'Platinum'],
            datasets: [{
                label: 'Revenue',
                data: [
                    {{loyalty.tierRevenue.bronze}},
                    {{loyalty.tierRevenue.silver}},
                    {{loyalty.tierRevenue.gold}},
                    {{loyalty.tierRevenue.platinum}}
                ],
                backgroundColor: ['#CD7F32', '#C0C0C0', '#FFD700', '#E5E4E2']
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        callback: function(value) {
                            return '$' + value.toLocaleString();
                        }
                    }
                }
            }
        }
    });

    // Points Activity Chart
    const pointsCtx = document.getElementById('pointsActivityChart').getContext('2d');
    new Chart(pointsCtx, {
        type: 'line',
        data: {
            labels: {{{json loyalty.pointsActivity.labels}}},
            datasets: [{
                label: 'Points Earned',
                data: {{{json loyalty.pointsActivity.earned}}},
                borderColor: '#28a745',
                tension: 0.4,
                fill: false
            }, {
                label: 'Points Redeemed',
                data: {{{json loyalty.pointsActivity.redeemed}}},
                borderColor: '#dc3545',
                tension: 0.4,
                fill: false
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        callback: function(value) {
                            return value.toLocaleString() + ' pts';
                        }
                    }
                }
            }
        }
    });
}

// Update revenue chart based on selected period
function updateRevenueChart(period) {
    // Implementation
}

// Change reporting period
function changePeriod(period) {
    window.location.href = `/admin/financial/dashboard?period=${period}`;
}

// Show custom date range modal
function showCustomDateRange() {
    const modal = new bootstrap.Modal(document.getElementById('dateRangeModal'));
    modal.show();
}

// Apply custom date range
function applyDateRange() {
    const form = document.getElementById('dateRangeForm');
    const formData = new FormData(form);
    const startDate = formData.get('startDate');
    const endDate = formData.get('endDate');
    
    window.location.href = `/admin/financial/dashboard?startDate=${startDate}&endDate=${endDate}`;
}

// Export all reports
function exportReports() {
    const params = new URLSearchParams(window.location.search);
    window.location.href = `/admin/financial/export?${params.toString()}`;
}

// Export revenue details
function exportRevenueDetails() {
    const params = new URLSearchParams(window.location.search);
    window.location.href = `/admin/financial/export/revenue?${params.toString()}`;
}
</script>

================
File: src/views/admin/group-bookings/list.hbs
================
{{> admin/header title="Group Bookings"}}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Group Bookings</h5>
                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createGroupBookingModal">
                        <i class="fas fa-plus"></i> Create Group Booking
                    </button>
                </div>
                <div class="card-body">
                    <div class="row mb-3">
                        <div class="col-md-3">
                            <label class="form-label">Event Type</label>
                            <select class="form-select" id="eventTypeFilter">
                                <option value="">All Types</option>
                                <option value="conference">Conference</option>
                                <option value="wedding">Wedding</option>
                                <option value="tour_group">Tour Group</option>
                                <option value="corporate_event">Corporate Event</option>
                                <option value="other">Other</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Status</label>
                            <select class="form-select" id="statusFilter">
                                <option value="">All Statuses</option>
                                <option value="draft">Draft</option>
                                <option value="confirmed">Confirmed</option>
                                <option value="in_progress">In Progress</option>
                                <option value="completed">Completed</option>
                                <option value="cancelled">Cancelled</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Start Date</label>
                            <input type="date" class="form-control" id="startDateFilter">
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">End Date</label>
                            <input type="date" class="form-control" id="endDateFilter">
                        </div>
                    </div>

                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Event Name</th>
                                    <th>Type</th>
                                    <th>Company</th>
                                    <th>Dates</th>
                                    <th>Rooms</th>
                                    <th>Payment Status</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="groupBookingsTableBody">
                                {{#each bookings}}
                                <tr>
                                    <td>{{name}}</td>
                                    <td>
                                        <span class="badge bg-info">{{formatEventType eventDetails.type}}</span>
                                    </td>
                                    <td>
                                        {{#if corporateAccount}}
                                            {{corporateAccount.companyName}}
                                        {{else}}
                                            -
                                        {{/if}}
                                    </td>
                                    <td>
                                        {{formatDate eventDetails.startDate}}<br>
                                        <small class="text-muted">to</small><br>
                                        {{formatDate eventDetails.endDate}}
                                    </td>
                                    <td>
                                        <span class="badge bg-primary">{{totalRooms}} rooms</span>
                                    </td>
                                    <td>
                                        <span class="badge bg-{{paymentStatusColor payment.status}}">
                                            {{payment.status}}
                                        </span>
                                    </td>
                                    <td>
                                        <span class="badge bg-{{statusColor status}}">{{status}}</span>
                                    </td>
                                    <td>
                                        <div class="btn-group">
                                            <button type="button" class="btn btn-sm btn-info" onclick="viewBooking('{{_id}}')">
                                                <i class="fas fa-eye"></i>
                                            </button>
                                            <button type="button" class="btn btn-sm btn-primary" onclick="editBooking('{{_id}}')">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button type="button" class="btn btn-sm btn-success" onclick="manageGuests('{{_id}}')">
                                                <i class="fas fa-users"></i>
                                            </button>
                                            <button type="button" class="btn btn-sm btn-warning" onclick="managePayments('{{_id}}')">
                                                <i class="fas fa-money-bill"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                    </div>
                    {{> admin/pagination}}
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create Group Booking Modal -->
<div class="modal fade" id="createGroupBookingModal" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create Group Booking</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="createGroupBookingForm">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">Event Name</label>
                            <input type="text" class="form-control" name="name" required>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Event Type</label>
                            <select class="form-select" name="eventDetails.type" required>
                                <option value="conference">Conference</option>
                                <option value="wedding">Wedding</option>
                                <option value="tour_group">Tour Group</option>
                                <option value="corporate_event">Corporate Event</option>
                                <option value="other">Other</option>
                            </select>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">Corporate Account</label>
                            <select class="form-select" name="corporateAccount" id="corporateAccountSelect">
                                <option value="">None</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Description</label>
                            <textarea class="form-control" name="eventDetails.description" rows="3"></textarea>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">Start Date</label>
                            <input type="date" class="form-control" name="eventDetails.startDate" required>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">End Date</label>
                            <input type="date" class="form-control" name="eventDetails.endDate" required>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-12">
                            <h6>Rooms</h6>
                            <div id="roomsContainer">
                                <div class="row room-entry mb-2">
                                    <div class="col-md-4">
                                        <select class="form-select" name="rooms[0].roomType" required>
                                            <option value="">Select Room Type</option>
                                        </select>
                                    </div>
                                    <div class="col-md-3">
                                        <input type="number" class="form-control" name="rooms[0].quantity" placeholder="Quantity" required min="1">
                                    </div>
                                    <div class="col-md-3">
                                        <input type="number" class="form-control" name="rooms[0].rate" placeholder="Rate per night" required>
                                    </div>
                                    <div class="col-md-2">
                                        <button type="button" class="btn btn-danger" onclick="removeRoom(this)">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <button type="button" class="btn btn-secondary mt-2" onclick="addRoom()">
                                <i class="fas fa-plus"></i> Add Room
                            </button>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">Payment Method</label>
                            <select class="form-select" name="payment.method" required>
                                <option value="credit_card">Credit Card</option>
                                <option value="bank_transfer">Bank Transfer</option>
                                <option value="corporate_billing">Corporate Billing</option>
                                <option value="cash">Cash</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Deposit Amount</label>
                            <input type="number" class="form-control" name="payment.depositAmount">
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="createGroupBooking()">Create Booking</button>
            </div>
        </div>
    </div>
</div>

<!-- Manage Guests Modal -->
<div class="modal fade" id="manageGuestsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Manage Guests</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <button type="button" class="btn btn-primary" onclick="showAddGuestForm()">
                        <i class="fas fa-plus"></i> Add Guest
                    </button>
                </div>
                <div id="guestsList">
                    <!-- Guests will be loaded here -->
                </div>
                <div id="addGuestForm" style="display: none;">
                    <form id="guestForm">
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label class="form-label">Name</label>
                                <input type="text" class="form-control" name="name" required>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Email</label>
                                <input type="email" class="form-control" name="email">
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label class="form-label">Phone</label>
                                <input type="tel" class="form-control" name="phone">
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Room Assignment</label>
                                <select class="form-select" name="roomAssignment" id="roomAssignmentSelect">
                                    <!-- Rooms will be loaded here -->
                                </select>
                            </div>
                        </div>
                        <button type="button" class="btn btn-primary" onclick="addGuest()">Add Guest</button>
                        <button type="button" class="btn btn-secondary" onclick="hideAddGuestForm()">Cancel</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Manage Payments Modal -->
<div class="modal fade" id="managePaymentsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Manage Payments</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="payment-summary mb-4">
                    <h6>Payment Summary</h6>
                    <div class="row">
                        <div class="col-md-4">
                            <p>Total Amount: <span id="totalAmount">$0</span></p>
                        </div>
                        <div class="col-md-4">
                            <p>Paid Amount: <span id="paidAmount">$0</span></p>
                        </div>
                        <div class="col-md-4">
                            <p>Remaining: <span id="remainingAmount">$0</span></p>
                        </div>
                    </div>
                </div>
                <div class="mb-3">
                    <button type="button" class="btn btn-primary" onclick="showAddPaymentForm()">
                        <i class="fas fa-plus"></i> Add Payment
                    </button>
                </div>
                <div id="paymentsList">
                    <!-- Payments will be loaded here -->
                </div>
                <div id="addPaymentForm" style="display: none;">
                    <form id="paymentForm">
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label class="form-label">Amount</label>
                                <input type="number" class="form-control" name="amount" required>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Type</label>
                                <select class="form-select" name="type" required>
                                    <option value="deposit">Deposit</option>
                                    <option value="payment">Payment</option>
                                    <option value="refund">Refund</option>
                                </select>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Reference</label>
                            <input type="text" class="form-control" name="reference">
                        </div>
                        <button type="button" class="btn btn-primary" onclick="addPayment()">Add Payment</button>
                        <button type="button" class="btn btn-secondary" onclick="hideAddPaymentForm()">Cancel</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
let currentPage = 1;
const itemsPerPage = 10;
let currentBookingId = null;

// Load group bookings
async function loadGroupBookings(page = 1) {
    const eventType = document.getElementById('eventTypeFilter').value;
    const status = document.getElementById('statusFilter').value;
    const startDate = document.getElementById('startDateFilter').value;
    const endDate = document.getElementById('endDateFilter').value;

    try {
        const response = await fetch(`/api/group-bookings?page=${page}&eventType=${eventType}&status=${status}&startDate=${startDate}&endDate=${endDate}`);
        const data = await response.json();
        
        if (data.success) {
            renderBookings(data.data);
            renderPagination(data.pagination);
        }
    } catch (error) {
        console.error('Error loading group bookings:', error);
        showAlert('error', 'Failed to load group bookings');
    }
}

// Load corporate accounts for dropdown
async function loadCorporateAccounts() {
    try {
        const response = await fetch('/api/corporate');
        const data = await response.json();
        
        if (data.success) {
            const select = document.getElementById('corporateAccountSelect');
            select.innerHTML = '<option value="">None</option>';
            
            data.data.forEach(account => {
                const option = document.createElement('option');
                option.value = account._id;
                option.textContent = account.companyName;
                select.appendChild(option);
            });
        }
    } catch (error) {
        console.error('Error loading corporate accounts:', error);
    }
}

// Load room types
async function loadRoomTypes() {
    try {
        const response = await fetch('/api/rooms/types');
        const data = await response.json();
        
        if (data.success) {
            const selects = document.querySelectorAll('select[name$=".roomType"]');
            selects.forEach(select => {
                select.innerHTML = '<option value="">Select Room Type</option>';
                data.data.forEach(type => {
                    const option = document.createElement('option');
                    option.value = type;
                    option.textContent = type;
                    select.appendChild(option);
                });
            });
        }
    } catch (error) {
        console.error('Error loading room types:', error);
    }
}

// Add room entry
function addRoom() {
    const container = document.getElementById('roomsContainer');
    const roomCount = container.children.length;
    
    const roomEntry = document.createElement('div');
    roomEntry.className = 'row room-entry mb-2';
    roomEntry.innerHTML = `
        <div class="col-md-4">
            <select class="form-select" name="rooms[${roomCount}].roomType" required>
                <option value="">Select Room Type</option>
            </select>
        </div>
        <div class="col-md-3">
            <input type="number" class="form-control" name="rooms[${roomCount}].quantity" placeholder="Quantity" required min="1">
        </div>
        <div class="col-md-3">
            <input type="number" class="form-control" name="rooms[${roomCount}].rate" placeholder="Rate per night" required>
        </div>
        <div class="col-md-2">
            <button type="button" class="btn btn-danger" onclick="removeRoom(this)">
                <i class="fas fa-trash"></i>
            </button>
        </div>
    `;
    
    container.appendChild(roomEntry);
    loadRoomTypes();
}

// Remove room entry
function removeRoom(button) {
    const roomEntry = button.closest('.room-entry');
    roomEntry.remove();
}

// Create group booking
async function createGroupBooking() {
    const form = document.getElementById('createGroupBookingForm');
    const formData = new FormData(form);
    const data = Object.fromEntries(formData.entries());

    try {
        const response = await fetch('/api/group-bookings', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });

        const result = await response.json();
        if (result.success) {
            $('#createGroupBookingModal').modal('hide');
            showAlert('success', 'Group booking created successfully');
            loadGroupBookings(currentPage);
        }
    } catch (error) {
        console.error('Error creating group booking:', error);
        showAlert('error', 'Failed to create group booking');
    }
}

// Manage guests
async function manageGuests(bookingId) {
    currentBookingId = bookingId;
    try {
        const response = await fetch(`/api/group-bookings/${bookingId}`);
        const data = await response.json();
        
        if (data.success) {
            renderGuests(data.data.guests);
            $('#manageGuestsModal').modal('show');
        }
    } catch (error) {
        console.error('Error loading guests:', error);
        showAlert('error', 'Failed to load guests');
    }
}

// Add guest
async function addGuest() {
    const form = document.getElementById('guestForm');
    const formData = new FormData(form);
    const data = Object.fromEntries(formData.entries());

    try {
        const response = await fetch(`/api/group-bookings/${currentBookingId}/guests`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });

        const result = await response.json();
        if (result.success) {
            hideAddGuestForm();
            renderGuests(result.data.guests);
            showAlert('success', 'Guest added successfully');
        }
    } catch (error) {
        console.error('Error adding guest:', error);
        showAlert('error', 'Failed to add guest');
    }
}

// Manage payments
async function managePayments(bookingId) {
    currentBookingId = bookingId;
    try {
        const response = await fetch(`/api/group-bookings/${bookingId}`);
        const data = await response.json();
        
        if (data.success) {
            renderPayments(data.data.payment);
            updatePaymentSummary(data.data.payment);
            $('#managePaymentsModal').modal('show');
        }
    } catch (error) {
        console.error('Error loading payments:', error);
        showAlert('error', 'Failed to load payments');
    }
}

// Add payment
async function addPayment() {
    const form = document.getElementById('paymentForm');
    const formData = new FormData(form);
    const data = Object.fromEntries(formData.entries());

    try {
        const response = await fetch(`/api/group-bookings/${currentBookingId}/payments`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });

        const result = await response.json();
        if (result.success) {
            hideAddPaymentForm();
            renderPayments(result.data.payment);
            updatePaymentSummary(result.data.payment);
            showAlert('success', 'Payment added successfully');
        }
    } catch (error) {
        console.error('Error adding payment:', error);
        showAlert('error', 'Failed to add payment');
    }
}

// Event listeners
document.addEventListener('DOMContentLoaded', () => {
    loadGroupBookings(1);
    loadCorporateAccounts();
    loadRoomTypes();

    // Filter handlers
    document.getElementById('eventTypeFilter').addEventListener('change', () => loadGroupBookings(1));
    document.getElementById('statusFilter').addEventListener('change', () => loadGroupBookings(1));
    document.getElementById('startDateFilter').addEventListener('change', () => loadGroupBookings(1));
    document.getElementById('endDateFilter').addEventListener('change', () => loadGroupBookings(1));
});
</script>

{{> admin/footer}}

================
File: src/views/admin/guests.hbs
================
{{!< admin}}

<div class="container-fluid px-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3 mb-0 text-gray-800">Guest Management</h1>
        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addGuestModal">
            <i class="fas fa-user-plus me-2"></i>Add New Guest
        </button>
    </div>

    <!-- Search and Filter Section -->
    <div class="card shadow mb-4">
        <div class="card-body">
            <form action="/admin/guests" method="GET" class="row g-3 align-items-center">
                <div class="col-md-4">
                    <div class="input-group">
                        <span class="input-group-text bg-light">
                            <i class="fas fa-search"></i>
                        </span>
                        <input type="text" name="search" class="form-control" placeholder="Search guests..." value="{{search}}">
                    </div>
                </div>
                <div class="col-md-8">
                    <div class="d-flex gap-2 justify-content-md-end">
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-search me-2"></i>Search
                        </button>
                        <a href="/admin/guests" class="btn btn-outline-secondary">
                            <i class="fas fa-redo me-2"></i>Reset
                        </a>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <!-- Guests List -->
    <div class="card shadow mb-4">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover align-middle">
                    <thead class="table-light">
                        <tr>
                            <th>Guest</th>
                            <th>Contact</th>
                            <th>Location</th>
                            <th>Bookings</th>
                            <th>Total Spent</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {{#each guests}}
                        <tr>
                            <td>
                                <div class="d-flex align-items-center">
                                    <div class="avatar-circle bg-primary text-white me-3">
                                        {{initials this.name}}
                                    </div>
                                    <div>
                                        <h6 class="mb-0">{{this.name}}</h6>
                                        <small class="text-muted">Member since {{formatDate this.createdAt "MMM YYYY"}}</small>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <div>
                                    <div><i class="fas fa-envelope me-2 text-muted"></i>{{this.email}}</div>
                                    <div><i class="fas fa-phone me-2 text-muted"></i>{{this.phone}}</div>
                                </div>
                            </td>
                            <td>
                                <i class="fas fa-map-marker-alt me-2 text-muted"></i>{{this.city}}
                            </td>
                            <td>
                                <div>
                                    <div class="fw-bold">{{this.totalBookings}} bookings</div>
                                    {{#if this.lastBooking}}
                                    <small class="text-muted">Last: {{formatDate this.lastBooking "DD MMM YYYY"}}</small>
                                    {{/if}}
                                </div>
                            </td>
                            <td>
                                <div class="fw-bold text-success">${{formatNumber this.totalSpent}}</div>
                            </td>
                            <td>
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" role="switch" 
                                           id="status{{this._id}}" {{#if this.active}}checked{{/if}}
                                           onchange="updateGuestStatus('{{this._id}}', this.checked)">
                                </div>
                            </td>
                            <td>
                                <div class="dropdown">
                                    <button class="btn btn-sm btn-icon" data-bs-toggle="dropdown">
                                        <i class="fas fa-ellipsis-v"></i>
                                    </button>
                                    <ul class="dropdown-menu">
                                        <li>
                                            <a class="dropdown-item" href="#" onclick="editGuest('{{this._id}}')">
                                                <i class="fas fa-edit me-2"></i>Edit
                                            </a>
                                        </li>
                                        <li>
                                            <a class="dropdown-item" href="/admin/guests/{{this._id}}/bookings">
                                                <i class="fas fa-calendar me-2"></i>View Bookings
                                            </a>
                                        </li>
                                        <li>
                                            <a class="dropdown-item" href="#" onclick="viewGuestDetails('{{this._id}}')">
                                                <i class="fas fa-user me-2"></i>View Profile
                                            </a>
                                        </li>
                                        <li><hr class="dropdown-divider"></li>
                                        <li>
                                            <a class="dropdown-item text-danger" href="#" 
                                               onclick="deleteGuest('{{this._id}}')">
                                                <i class="fas fa-trash-alt me-2"></i>Delete
                                            </a>
                                        </li>
                                    </ul>
                                </div>
                            </td>
                        </tr>
                        {{/each}}
                    </tbody>
                </table>
            </div>

            {{#if guests.length}}
            <!-- Pagination -->
            <nav class="d-flex justify-content-between align-items-center mt-4">
                <div class="text-muted">
                    Showing {{skip}} to {{add skip limit}} of {{total}} entries
                </div>
                <ul class="pagination mb-0">
                    <li class="page-item {{#unless hasPrevPage}}disabled{{/unless}}">
                        <a class="page-link" href="{{prevPageUrl}}" aria-label="Previous">
                            <span aria-hidden="true">&laquo;</span>
                        </a>
                    </li>
                    {{#each pages}}
                    <li class="page-item {{#if this.active}}active{{/if}}">
                        <a class="page-link" href="{{this.url}}">{{this.number}}</a>
                    </li>
                    {{/each}}
                    <li class="page-item {{#unless hasNextPage}}disabled{{/unless}}">
                        <a class="page-link" href="{{nextPageUrl}}" aria-label="Next">
                            <span aria-hidden="true">&raquo;</span>
                        </a>
                    </li>
                </ul>
            </nav>
            {{else}}
            <div class="text-center py-5">
                <div class="mb-3">
                    <i class="fas fa-users fa-4x text-muted"></i>
                </div>
                <h5>No Guests Found</h5>
                <p class="text-muted">Try adjusting your search criteria</p>
            </div>
            {{/if}}
        </div>
    </div>
</div>

<!-- Add/Edit Guest Modal -->
<div class="modal fade" id="guestModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="guestModalTitle">Add New Guest</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="guestForm">
                    <input type="hidden" id="guestId">
                    <div class="mb-3">
                        <label class="form-label">Full Name</label>
                        <input type="text" class="form-control" id="name" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Email</label>
                        <input type="email" class="form-control" id="email" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Phone</label>
                        <input type="tel" class="form-control" id="phone">
                    </div>
                    <div class="mb-3">
                        <label class="form-label">City</label>
                        <input type="text" class="form-control" id="city">
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Preferences</label>
                        <textarea class="form-control" id="preferences" rows="3"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="saveGuest()">Save Changes</button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Delete Guest</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this guest? This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" onclick="confirmDelete()">Delete</button>
            </div>
        </div>
    </div>
</div>

<style>
.avatar-circle {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 600;
}

.btn-icon {
    padding: 0.25rem 0.5rem;
    color: #6c757d;
    background: transparent;
    border: none;
}

.btn-icon:hover {
    color: #000;
    background: #f8f9fa;
}

.table th {
    font-weight: 600;
    text-transform: uppercase;
    font-size: 0.8125rem;
    letter-spacing: 0.5px;
}

.dropdown-item {
    padding: 0.5rem 1rem;
}

.dropdown-item i {
    width: 1rem;
    text-align: center;
}

.form-switch .form-check-input {
    width: 2.5em;
}

.form-check-input:checked {
    background-color: #198754;
    border-color: #198754;
}
</style>

<script>
let deleteGuestId = null;

// Reset form when modal is opened for adding new guest
document.getElementById('guestModal').addEventListener('show.bs.modal', function (event) {
    if (!event.relatedTarget || !event.relatedTarget.dataset.edit) {
        document.getElementById('guestModalTitle').textContent = 'Add New Guest';
        document.getElementById('guestForm').reset();
        document.getElementById('guestId').value = '';
    }
});

function editGuest(id) {
    fetch(`/admin/guests/${id}`)
        .then(res => res.json())
        .then(guest => {
            document.getElementById('guestId').value = guest._id;
            document.getElementById('name').value = guest.name;
            document.getElementById('email').value = guest.email;
            document.getElementById('phone').value = guest.phone || '';
            document.getElementById('city').value = guest.city || '';
            document.getElementById('preferences').value = guest.preferences || '';
            
            document.getElementById('guestModalTitle').textContent = 'Edit Guest';
            new bootstrap.Modal(document.getElementById('guestModal')).show();
        })
        .catch(error => {
            console.error('Error fetching guest:', error);
            alert('Error fetching guest details');
        });
}

function saveGuest() {
    const id = document.getElementById('guestId').value;
    const data = {
        name: document.getElementById('name').value,
        email: document.getElementById('email').value,
        phone: document.getElementById('phone').value,
        city: document.getElementById('city').value,
        preferences: document.getElementById('preferences').value
    };

    const method = id ? 'PUT' : 'POST';
    const url = id ? `/admin/guests/${id}` : '/admin/guests';

    fetch(url, {
        method: method,
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
    })
    .then(res => res.json())
    .then(response => {
        if (response.message) {
            // Close modal
            bootstrap.Modal.getInstance(document.getElementById('guestModal')).hide();
            
            // Show success message
            const alert = document.createElement('div');
            alert.className = 'alert alert-success alert-dismissible fade show';
            alert.innerHTML = `
                <i class="fas fa-check-circle me-2"></i>${response.message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            document.querySelector('.container-fluid').insertBefore(alert, document.querySelector('.card'));
            
            // Reload page after short delay
            setTimeout(() => window.location.reload(), 1500);
        } else {
            throw new Error(response.error || 'Failed to save guest');
        }
    })
    .catch(error => {
        console.error('Error saving guest:', error);
        alert('Error saving guest: ' + error.message);
    });
}

function deleteGuest(id) {
    deleteGuestId = id;
    new bootstrap.Modal(document.getElementById('deleteModal')).show();
}

function confirmDelete() {
    if (!deleteGuestId) return;

    fetch(`/admin/guests/${deleteGuestId}`, {
        method: 'DELETE'
    })
    .then(res => res.json())
    .then(response => {
        if (response.message) {
            // Close modal
            bootstrap.Modal.getInstance(document.getElementById('deleteModal')).hide();
            
            // Show success message
            const alert = document.createElement('div');
            alert.className = 'alert alert-success alert-dismissible fade show';
            alert.innerHTML = `
                <i class="fas fa-check-circle me-2"></i>${response.message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            document.querySelector('.container-fluid').insertBefore(alert, document.querySelector('.card'));
            
            // Reload page after short delay
            setTimeout(() => window.location.reload(), 1500);
        } else {
            throw new Error(response.error || 'Failed to delete guest');
        }
    })
    .catch(error => {
        console.error('Error deleting guest:', error);
        alert('Error deleting guest: ' + error.message);
    });
}

function updateGuestStatus(id, active) {
    fetch(`/admin/guests/${id}`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ active })
    })
    .then(res => res.json())
    .then(response => {
        if (!response.message) {
            throw new Error(response.error || 'Failed to update guest status');
        }
    })
    .catch(error => {
        console.error('Error updating guest status:', error);
        alert('Error updating guest status: ' + error.message);
        // Revert the switch if the update failed
        document.getElementById(`status${id}`).checked = !active;
    });
}

function viewGuestDetails(id) {
    window.location.href = `/admin/guests/${id}`;
}
</script>

================
File: src/views/admin/guests/analytics.hbs
================
{{> admin/header}}
{{> admin/sidebar}}

<div class="main-content">
    <div class="container-fluid p-4">
        <!-- Page Header -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h1 class="h3 mb-0">Guest Analytics</h1>
                        <nav aria-label="breadcrumb">
                            <ol class="breadcrumb mb-0">
                                <li class="breadcrumb-item"><a href="/admin/dashboard">Dashboard</a></li>
                                <li class="breadcrumb-item"><a href="/admin/guests">Guests</a></li>
                                <li class="breadcrumb-item active">Analytics</li>
                            </ol>
                        </nav>
                    </div>
                    <div class="d-flex gap-2">
                        <div class="btn-group">
                            <button class="btn btn-outline-primary {{#if (eq range 'month')}}active{{/if}}" 
                                onclick="changeRange('month')">Month</button>
                            <button class="btn btn-outline-primary {{#if (eq range 'quarter')}}active{{/if}}" 
                                onclick="changeRange('quarter')">Quarter</button>
                            <button class="btn btn-outline-primary {{#if (eq range 'year')}}active{{/if}}" 
                                onclick="changeRange('year')">Year</button>
                        </div>
                        <button class="btn btn-primary" onclick="exportAnalytics()">
                            <i class="fas fa-download me-2"></i>Export Report
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Key Metrics -->
        <div class="row g-4 mb-4">
            <div class="col-sm-6 col-xl-3">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex align-items-start justify-content-between">
                            <div class="content-left">
                                <h5 class="mb-3">Guest Satisfaction</h5>
                                <h2 class="mb-2">{{stats.satisfaction}}/5.0</h2>
                                <p class="mb-0 {{stats.satisfactionTrend.color}}">
                                    <i class="fas fa-{{stats.satisfactionTrend.icon}} me-1"></i>
                                    {{stats.satisfactionTrend.value}}%
                                </p>
                            </div>
                            <div class="avatar bg-light-primary p-2">
                                <i class="fas fa-smile text-primary"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-6 col-xl-3">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex align-items-start justify-content-between">
                            <div class="content-left">
                                <h5 class="mb-3">Repeat Rate</h5>
                                <h2 class="mb-2">{{stats.repeatRate}}%</h2>
                                <p class="mb-0 {{stats.repeatRateTrend.color}}">
                                    <i class="fas fa-{{stats.repeatRateTrend.icon}} me-1"></i>
                                    {{stats.repeatRateTrend.value}}%
                                </p>
                            </div>
                            <div class="avatar bg-light-success p-2">
                                <i class="fas fa-redo text-success"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-6 col-xl-3">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex align-items-start justify-content-between">
                            <div class="content-left">
                                <h5 class="mb-3">Avg Guest Value</h5>
                                <h2 class="mb-2">${{stats.avgGuestValue}}</h2>
                                <p class="mb-0 {{stats.avgValueTrend.color}}">
                                    <i class="fas fa-{{stats.avgValueTrend.icon}} me-1"></i>
                                    {{stats.avgValueTrend.value}}%
                                </p>
                            </div>
                            <div class="avatar bg-light-warning p-2">
                                <i class="fas fa-dollar-sign text-warning"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-6 col-xl-3">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex align-items-start justify-content-between">
                            <div class="content-left">
                                <h5 class="mb-3">Loyalty Conversion</h5>
                                <h2 class="mb-2">{{stats.loyaltyConversion}}%</h2>
                                <p class="mb-0 {{stats.loyaltyTrend.color}}">
                                    <i class="fas fa-{{stats.loyaltyTrend.icon}} me-1"></i>
                                    {{stats.loyaltyTrend.value}}%
                                </p>
                            </div>
                            <div class="avatar bg-light-info p-2">
                                <i class="fas fa-star text-info"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row g-4 mb-4">
            <!-- Demographics -->
            <div class="col-12 col-xl-8">
                <div class="card h-100">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Guest Demographics</h5>
                    </div>
                    <div class="card-body">
                        <div class="row g-4">
                            <div class="col-md-6">
                                <h6 class="text-muted mb-3">Age Distribution</h6>
                                <canvas id="ageChart"></canvas>
                            </div>
                            <div class="col-md-6">
                                <h6 class="text-muted mb-3">Top Nationalities</h6>
                                <canvas id="nationalityChart"></canvas>
                            </div>
                            <div class="col-md-6">
                                <h6 class="text-muted mb-3">Purpose of Stay</h6>
                                <canvas id="purposeChart"></canvas>
                            </div>
                            <div class="col-md-6">
                                <h6 class="text-muted mb-3">Loyalty Distribution</h6>
                                <canvas id="loyaltyChart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Guest Segments -->
            <div class="col-12 col-xl-4">
                <div class="card h-100">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Guest Segments</h5>
                    </div>
                    <div class="card-body">
                        {{#each segments}}
                        <div class="d-flex align-items-center mb-4">
                            <div class="avatar me-3 bg-light-{{color}}">
                                <i class="fas fa-{{icon}} text-{{color}}"></i>
                            </div>
                            <div class="flex-grow-1">
                                <div class="d-flex justify-content-between align-items-center mb-1">
                                    <h6 class="mb-0">{{name}}</h6>
                                    <small class="text-muted">{{percentage}}%</small>
                                </div>
                                <div class="d-flex justify-content-between align-items-center">
                                    <div class="progress w-75" style="height: 4px;">
                                        <div class="progress-bar bg-{{color}}" style="width: {{percentage}}%"></div>
                                    </div>
                                    <a href="/admin/guests/analytics/segments/{{id}}" class="text-muted">
                                        <i class="fas fa-chevron-right"></i>
                                    </a>
                                </div>
                            </div>
                        </div>
                        {{/each}}
                    </div>
                </div>
            </div>
        </div>

        <div class="row g-4">
            <!-- Booking Trends -->
            <div class="col-12 col-xl-8">
                <div class="card h-100">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Booking Trends</h5>
                    </div>
                    <div class="card-body">
                        <canvas id="bookingTrendsChart"></canvas>
                    </div>
                </div>
            </div>

            <!-- Guest Preferences -->
            <div class="col-12 col-xl-4">
                <div class="card h-100">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Guest Preferences</h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-4">
                            <h6 class="text-muted mb-3">Room Type Preferences</h6>
                            {{#each preferences.roomTypes}}
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <div>{{name}}</div>
                                <div class="d-flex align-items-center">
                                    <span class="me-2">{{percentage}}%</span>
                                    <div class="progress" style="width: 100px; height: 4px;">
                                        <div class="progress-bar" style="width: {{percentage}}%"></div>
                                    </div>
                                </div>
                            </div>
                            {{/each}}
                        </div>
                        <div>
                            <h6 class="text-muted mb-3">Most Requested Services</h6>
                            {{#each preferences.services}}
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <div>{{name}}</div>
                                <div class="d-flex align-items-center">
                                    <span class="me-2">{{percentage}}%</span>
                                    <div class="progress" style="width: 100px; height: 4px;">
                                        <div class="progress-bar" style="width: {{percentage}}%"></div>
                                    </div>
                                </div>
                            </div>
                            {{/each}}
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
// Chart configurations
const chartConfig = {
    type: 'doughnut',
    options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
            legend: {
                position: 'bottom'
            }
        }
    }
};

// Age distribution chart
const ageChart = new Chart(document.getElementById('ageChart'), {
    ...chartConfig,
    data: {
        labels: {{{json ageData.labels}}},
        datasets: [{
            data: {{{json ageData.values}}},
            backgroundColor: ['#696cff', '#8592a3', '#71dd37', '#ff3e1d', '#03c3ec']
        }]
    }
});

// Nationality chart
const nationalityChart = new Chart(document.getElementById('nationalityChart'), {
    ...chartConfig,
    data: {
        labels: {{{json nationalityData.labels}}},
        datasets: [{
            data: {{{json nationalityData.values}}},
            backgroundColor: ['#696cff', '#8592a3', '#71dd37', '#ff3e1d', '#03c3ec']
        }]
    }
});

// Purpose chart
const purposeChart = new Chart(document.getElementById('purposeChart'), {
    ...chartConfig,
    data: {
        labels: {{{json purposeData.labels}}},
        datasets: [{
            data: {{{json purposeData.values}}},
            backgroundColor: ['#696cff', '#8592a3', '#71dd37', '#ff3e1d']
        }]
    }
});

// Loyalty chart
const loyaltyChart = new Chart(document.getElementById('loyaltyChart'), {
    ...chartConfig,
    data: {
        labels: {{{json loyaltyData.labels}}},
        datasets: [{
            data: {{{json loyaltyData.values}}},
            backgroundColor: ['#ff3e1d', '#71dd37', '#696cff', '#03c3ec']
        }]
    }
});

// Booking trends chart
const bookingTrendsChart = new Chart(document.getElementById('bookingTrendsChart'), {
    type: 'line',
    data: {
        labels: {{{json bookingTrends.labels}}},
        datasets: [
            {
                label: 'New Guests',
                data: {{{json bookingTrends.newGuests}}},
                borderColor: '#696cff',
                tension: 0.4,
                fill: false
            },
            {
                label: 'Returning Guests',
                data: {{{json bookingTrends.returningGuests}}},
                borderColor: '#71dd37',
                tension: 0.4,
                fill: false
            }
        ]
    },
    options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
            legend: {
                position: 'bottom'
            }
        },
        scales: {
            y: {
                beginAtZero: true
            }
        }
    }
});

// Change date range
function changeRange(range) {
    window.location.href = `/admin/guests/analytics?range=${range}`;
}

// Export analytics
function exportAnalytics() {
    const range = new URLSearchParams(window.location.search).get('range') || 'month';
    window.location.href = `/admin/guests/analytics/export?range=${range}`;
}
</script>

================
File: src/views/admin/guests/dashboard.hbs
================
{{> admin/header}}
{{> admin/sidebar}}

<div class="main-content">
    <div class="container-fluid p-4">
        <!-- Page Header -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h1 class="h3 mb-0">Guest Management</h1>
                        <nav aria-label="breadcrumb">
                            <ol class="breadcrumb mb-0">
                                <li class="breadcrumb-item"><a href="/admin/dashboard">Dashboard</a></li>
                                <li class="breadcrumb-item active">Guests</li>
                            </ol>
                        </nav>
                    </div>
                    <div>
                        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addGuestModal">
                            <i class="fas fa-user-plus me-2"></i>Add New Guest
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Statistics Cards -->
        <div class="row g-3 mb-4">
            <div class="col-sm-6 col-xl-3">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex align-items-start justify-content-between">
                            <div>
                                <h6 class="text-muted mb-2">Total Guests</h6>
                                <h4 class="mb-0">{{stats.totalGuests}}</h4>
                                <small class="text-success">
                                    <i class="fas fa-arrow-up me-1"></i>{{stats.guestGrowth}}% this month
                                </small>
                            </div>
                            <div class="avatar bg-light-primary">
                                <i class="fas fa-users text-primary"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-6 col-xl-3">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex align-items-start justify-content-between">
                            <div>
                                <h6 class="text-muted mb-2">Active Stays</h6>
                                <h4 class="mb-0">{{stats.activeStays}}</h4>
                                <small class="text-muted">Currently checked-in</small>
                            </div>
                            <div class="avatar bg-light-success">
                                <i class="fas fa-bed text-success"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-6 col-xl-3">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex align-items-start justify-content-between">
                            <div>
                                <h6 class="text-muted mb-2">Loyalty Members</h6>
                                <h4 class="mb-0">{{stats.loyaltyMembers}}</h4>
                                <small class="text-primary">{{stats.loyaltyPercentage}}% of total</small>
                            </div>
                            <div class="avatar bg-light-warning">
                                <i class="fas fa-star text-warning"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-6 col-xl-3">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex align-items-start justify-content-between">
                            <div>
                                <h6 class="text-muted mb-2">Average Stay</h6>
                                <h4 class="mb-0">{{stats.averageStay}} nights</h4>
                                <small class="text-muted">Per guest</small>
                            </div>
                            <div class="avatar bg-light-info">
                                <i class="fas fa-clock text-info"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Search and Filters -->
        <div class="card mb-4">
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-md-4">
                        <div class="input-group">
                            <span class="input-group-text bg-transparent">
                                <i class="fas fa-search"></i>
                            </span>
                            <input type="text" class="form-control border-start-0" id="searchGuest" 
                                placeholder="Search guests...">
                        </div>
                    </div>
                    <div class="col-md-2">
                        <select class="form-select" id="loyaltyFilter">
                            <option value="">All Tiers</option>
                            <option value="platinum">Platinum</option>
                            <option value="gold">Gold</option>
                            <option value="silver">Silver</option>
                            <option value="bronze">Bronze</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <select class="form-select" id="statusFilter">
                            <option value="">All Status</option>
                            <option value="checked_in">Checked In</option>
                            <option value="checked_out">Checked Out</option>
                            <option value="booked">Booked</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <select class="form-select" id="sortBy">
                            <option value="name">Sort by Name</option>
                            <option value="checkin">Sort by Check-in</option>
                            <option value="loyalty">Sort by Loyalty Points</option>
                            <option value="stays">Sort by Total Stays</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <button class="btn btn-outline-secondary w-100" id="resetFilters">
                            <i class="fas fa-undo me-2"></i>Reset
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Guest List -->
        <div class="card">
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Guest</th>
                                <th>Contact</th>
                                <th>Loyalty Status</th>
                                <th>Current Stay</th>
                                <th>Total Stays</th>
                                <th>Last Visit</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            {{#each guests}}
                            <tr>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div class="avatar me-2">
                                            {{#if avatar}}
                                            <img src="{{avatar}}" alt="Avatar">
                                            {{else}}
                                            <div class="avatar-initial">{{initials name}}</div>
                                            {{/if}}
                                        </div>
                                        <div>
                                            <h6 class="mb-0">{{name}}</h6>
                                            <small class="text-muted">{{nationality}}</small>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <div>{{email}}</div>
                                    <small class="text-muted">{{phone}}</small>
                                </td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <span class="badge bg-{{loyaltyColor tier}} me-2">{{tier}}</span>
                                        <small>{{formatNumber points}} pts</small>
                                    </div>
                                </td>
                                <td>
                                    {{#if currentStay}}
                                    <div>Room {{currentStay.room}}</div>
                                    <small class="text-muted">Until {{formatDate currentStay.checkOut}}</small>
                                    {{else}}
                                    <span class="text-muted">-</span>
                                    {{/if}}
                                </td>
                                <td>
                                    <div>{{totalStays}} stays</div>
                                    <small class="text-muted">${{formatNumber totalSpent}} spent</small>
                                </td>
                                <td>
                                    <div>{{formatDate lastVisit}}</div>
                                    <small class="text-muted">{{timeFromNow lastVisit}}</small>
                                </td>
                                <td>
                                    <div class="dropdown">
                                        <button class="btn btn-link text-dark p-0" data-bs-toggle="dropdown">
                                            <i class="fas fa-ellipsis-v"></i>
                                        </button>
                                        <ul class="dropdown-menu dropdown-menu-end">
                                            <li><a class="dropdown-item" href="/admin/guests/{{_id}}">
                                                <i class="fas fa-user me-2"></i>View Profile
                                            </a></li>
                                            <li><a class="dropdown-item" href="/admin/guests/{{_id}}/stays">
                                                <i class="fas fa-history me-2"></i>Stay History
                                            </a></li>
                                            <li><a class="dropdown-item" href="/admin/guests/{{_id}}/preferences">
                                                <i class="fas fa-cog me-2"></i>Preferences
                                            </a></li>
                                            {{#if currentStay}}
                                            <li><hr class="dropdown-divider"></li>
                                            <li><a class="dropdown-item" href="#" onclick="processCheckOut('{{currentStay._id}}')">
                                                <i class="fas fa-sign-out-alt me-2"></i>Check-out
                                            </a></li>
                                            {{/if}}
                                        </ul>
                                    </div>
                                </td>
                            </tr>
                            {{/each}}
                        </tbody>
                    </table>
                </div>

                <!-- Pagination -->
                <nav class="mt-4">
                    <ul class="pagination justify-content-center">
                        <li class="page-item {{#unless pagination.hasPrev}}disabled{{/unless}}">
                            <a class="page-link" href="?page={{pagination.prevPage}}">Previous</a>
                        </li>
                        {{#each pagination.pages}}
                        <li class="page-item {{#if active}}active{{/if}}">
                            <a class="page-link" href="?page={{number}}">{{number}}</a>
                        </li>
                        {{/each}}
                        <li class="page-item {{#unless pagination.hasNext}}disabled{{/unless}}">
                            <a class="page-link" href="?page={{pagination.nextPage}}">Next</a>
                        </li>
                    </ul>
                </nav>
            </div>
        </div>
    </div>
</div>

<!-- Add Guest Modal -->
<div class="modal fade" id="addGuestModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add New Guest</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="addGuestForm">
                    <!-- Personal Information -->
                    <div class="mb-3">
                        <label class="form-label">Full Name</label>
                        <input type="text" class="form-control" name="name" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Email</label>
                        <input type="email" class="form-control" name="email" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Phone</label>
                        <input type="tel" class="form-control" name="phone" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Nationality</label>
                        <select class="form-select" name="nationality" required>
                            <option value="">Select Nationality</option>
                            {{#each nationalities}}
                            <option value="{{code}}">{{name}}</option>
                            {{/each}}
                        </select>
                    </div>

                    <!-- ID Information -->
                    <div class="mb-3">
                        <label class="form-label">ID Type</label>
                        <select class="form-select" name="idType" required>
                            <option value="">Select ID Type</option>
                            <option value="passport">Passport</option>
                            <option value="drivers_license">Driver's License</option>
                            <option value="national_id">National ID</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">ID Number</label>
                        <input type="text" class="form-control" name="idNumber" required>
                    </div>

                    <!-- Loyalty Program -->
                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" name="joinLoyalty" id="joinLoyalty">
                            <label class="form-check-label" for="joinLoyalty">
                                Enroll in Loyalty Program
                            </label>
                        </div>
                    </div>

                    <!-- Marketing Preferences -->
                    <div class="mb-3">
                        <label class="form-label">Communication Preferences</label>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" name="preferences" value="email">
                            <label class="form-check-label">Email Updates</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" name="preferences" value="sms">
                            <label class="form-check-label">SMS Notifications</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" name="preferences" value="promotions">
                            <label class="form-check-label">Promotional Offers</label>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="addGuest()">Add Guest</button>
            </div>
        </div>
    </div>
</div>

<script>
// Initialize tooltips
document.addEventListener('DOMContentLoaded', function() {
    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl);
    });

    // Initialize search and filters
    initializeSearch();
});

// Initialize search functionality
function initializeSearch() {
    const searchInput = document.getElementById('searchGuest');
    const loyaltyFilter = document.getElementById('loyaltyFilter');
    const statusFilter = document.getElementById('statusFilter');
    const sortBy = document.getElementById('sortBy');
    const resetButton = document.getElementById('resetFilters');

    // Debounce search
    let searchTimeout;
    searchInput.addEventListener('input', function() {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(() => {
            applyFilters();
        }, 300);
    });

    // Apply filters on change
    loyaltyFilter.addEventListener('change', applyFilters);
    statusFilter.addEventListener('change', applyFilters);
    sortBy.addEventListener('change', applyFilters);

    // Reset filters
    resetButton.addEventListener('click', function() {
        searchInput.value = '';
        loyaltyFilter.value = '';
        statusFilter.value = '';
        sortBy.value = 'name';
        applyFilters();
    });
}

// Apply filters and search
function applyFilters() {
    const searchQuery = document.getElementById('searchGuest').value;
    const loyalty = document.getElementById('loyaltyFilter').value;
    const status = document.getElementById('statusFilter').value;
    const sort = document.getElementById('sortBy').value;

    const params = new URLSearchParams(window.location.search);
    params.set('search', searchQuery);
    params.set('loyalty', loyalty);
    params.set('status', status);
    params.set('sort', sort);
    params.set('page', '1'); // Reset to first page when filtering

    window.location.href = `${window.location.pathname}?${params.toString()}`;
}

// Add new guest
async function addGuest() {
    const form = document.getElementById('addGuestForm');
    const formData = new FormData(form);
    
    try {
        const response = await fetch('/api/guests', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(Object.fromEntries(formData))
        });

        if (response.ok) {
            window.location.reload();
        } else {
            const error = await response.json();
            alert(error.message || 'Failed to add guest');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('An error occurred while adding guest');
    }
}

// Process check-out
function processCheckOut(bookingId) {
    window.location.href = `/admin/check-in-out/check-out/${bookingId}`;
}
</script>

================
File: src/views/admin/guests/list.hbs
================
{{> admin/header}}

<div class="container-fluid py-4">
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h4 class="mb-0">Guest Management</h4>
        <div class="d-flex gap-2">
            <form action="/admin/guests" method="GET" class="d-flex gap-2">
                <div class="input-group">
                    <input type="text" class="form-control" name="search" value="{{searchQuery}}" placeholder="Search guests...">
                    <button class="btn btn-outline-secondary" type="submit">
                        <i class="fas fa-search"></i>
                    </button>
                </div>
            </form>
            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addGuestModal">
                <i class="fas fa-plus me-2"></i>Add New Guest
            </button>
        </div>
    </div>

    <!-- Guest List -->
    <div class="card border-0 shadow-sm">
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover align-middle mb-0">
                    <thead class="bg-light">
                        <tr>
                            <th class="border-0">Guest</th>
                            <th class="border-0">Contact</th>
                            <th class="border-0">Preferences</th>
                            <th class="border-0">Last Booking</th>
                            <th class="border-0">Total Bookings</th>
                            <th class="border-0">Total Spent</th>
                            <th class="border-0">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {{#each guests}}
                        <tr>
                            <td>
                                <div class="d-flex align-items-center">
                                    <div class="avatar-sm bg-primary bg-opacity-10 rounded-circle me-2">
                                        <span class="text-primary">{{firstChar this.name}}</span>
                                    </div>
                                    <div>
                                        <div class="fw-semibold">{{this.name}}</div>
                                        <small class="text-muted">{{this.email}}</small>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <div><i class="fas fa-phone me-1"></i>{{this.phone}}</div>
                                <small class="text-muted"><i class="fas fa-map-marker-alt me-1"></i>{{this.city}}</small>
                            </td>
                            <td>
                                {{#if this.preferences}}
                                    {{#each this.preferences}}
                                        <span class="badge bg-info me-1">{{this}}</span>
                                    {{/each}}
                                {{else}}
                                    <span class="text-muted">No preferences set</span>
                                {{/if}}
                            </td>
                            <td>
                                {{#if this.lastBooking}}
                                    {{formatDate this.lastBooking}}
                                {{else}}
                                    <span class="text-muted">No bookings</span>
                                {{/if}}
                            </td>
                            <td>
                                <span class="badge bg-primary">{{this.totalBookings}}</span>
                            </td>
                            <td>
                                <span class="fw-semibold text-success">${{formatNumber this.totalSpent}}</span>
                            </td>
                            <td>
                                <div class="btn-group">
                                    <button class="btn btn-sm btn-outline-primary" onclick="viewGuestProfile('{{this._id}}')">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger" onclick="deleteGuest('{{this._id}}')">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                        {{/each}}
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Pagination -->
    {{#if pagination.totalPages}}
    <nav class="mt-4">
        <ul class="pagination justify-content-center">
            {{#if pagination.hasPrev}}
            <li class="page-item">
                <a class="page-link" href="/admin/guests?page={{pagination.prevPage}}{{#if searchQuery}}&search={{searchQuery}}{{/if}}">
                    <i class="fas fa-chevron-left"></i>
                </a>
            </li>
            {{/if}}
            
            <li class="page-item active">
                <span class="page-link">{{pagination.page}} of {{pagination.totalPages}}</span>
            </li>

            {{#if pagination.hasNext}}
            <li class="page-item">
                <a class="page-link" href="/admin/guests?page={{pagination.nextPage}}{{#if searchQuery}}&search={{searchQuery}}{{/if}}">
                    <i class="fas fa-chevron-right"></i>
                </a>
            </li>
            {{/if}}
        </ul>
    </nav>
    {{/if}}
</div>

<!-- Add Guest Modal -->
<div class="modal fade" id="addGuestModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title">Add New Guest</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="addGuestForm">
                    <div class="mb-3">
                        <label class="form-label">Name</label>
                        <input type="text" class="form-control" name="name" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Email</label>
                        <input type="email" class="form-control" name="email" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Phone</label>
                        <input type="tel" class="form-control" name="phone" pattern="[0-9]{10}" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">City</label>
                        <input type="text" class="form-control" name="city">
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Preferences</label>
                        <div class="d-flex flex-wrap gap-2">
                            {{#each preferences}}
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="preferences" value="{{this}}">
                                <label class="form-check-label">{{this}}</label>
                            </div>
                            {{/each}}
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer border-0">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="addGuest()">Add Guest</button>
            </div>
        </div>
    </div>
</div>

<!-- Guest Profile Modal -->
<div class="modal fade" id="guestProfileModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title">Guest Profile</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="guestProfileContent">
                <!-- Content will be loaded dynamically -->
            </div>
        </div>
    </div>
</div>

<script>
const preferences = ['Non-smoking', 'High floor', 'Quiet room', 'Early check-in', 'Late check-out', 'Extra pillows', 'Room service'];

async function viewGuestProfile(guestId) {
    try {
        const response = await fetch(`/admin/guests/${guestId}`);
        const data = await response.json();
        
        if (!data.guest) throw new Error('Guest not found');
        
        const guest = data.guest;
        const bookings = guest.bookings || [];
        
        const content = `
            <div class="row g-4">
                <div class="col-md-6">
                    <div class="card h-100">
                        <div class="card-body">
                            <h6 class="card-subtitle mb-3 text-muted">Personal Information</h6>
                            <p class="mb-1"><strong>Name:</strong> ${guest.name}</p>
                            <p class="mb-1"><strong>Email:</strong> ${guest.email}</p>
                            <p class="mb-1"><strong>Phone:</strong> ${guest.phone || 'Not provided'}</p>
                            <p class="mb-1"><strong>City:</strong> ${guest.city || 'Not provided'}</p>
                            <p class="mb-0">
                                <strong>Preferences:</strong><br>
                                ${guest.preferences && guest.preferences.length ? 
                                    guest.preferences.map(pref => `<span class="badge bg-info me-1">${pref}</span>`).join('') : 
                                    '<span class="text-muted">No preferences set</span>'}
                            </p>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="card h-100">
                        <div class="card-body">
                            <h6 class="card-subtitle mb-3 text-muted">Booking Statistics</h6>
                            <p class="mb-1"><strong>Total Bookings:</strong> ${guest.totalBookings}</p>
                            <p class="mb-1"><strong>Total Spent:</strong> $${guest.totalSpent.toFixed(2)}</p>
                            <p class="mb-0"><strong>Average Booking Value:</strong> $${(guest.totalSpent / (guest.totalBookings || 1)).toFixed(2)}</p>
                        </div>
                    </div>
                </div>
                <div class="col-12">
                    <div class="card">
                        <div class="card-body">
                            <h6 class="card-subtitle mb-3 text-muted">Booking History</h6>
                            ${bookings.length ? `
                                <div class="table-responsive">
                                    <table class="table table-sm">
                                        <thead>
                                            <tr>
                                                <th>Hotel</th>
                                                <th>Check In</th>
                                                <th>Check Out</th>
                                                <th>Amount</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            ${bookings.map(booking => `
                                                <tr>
                                                    <td>${booking.hotel.name}</td>
                                                    <td>${new Date(booking.checkIn).toLocaleDateString()}</td>
                                                    <td>${new Date(booking.checkOut).toLocaleDateString()}</td>
                                                    <td>$${booking.totalPrice.toFixed(2)}</td>
                                                </tr>
                                            `).join('')}
                                        </tbody>
                                    </table>
                                </div>
                            ` : '<p class="text-muted mb-0">No booking history available</p>'}
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        document.getElementById('guestProfileContent').innerHTML = content;
        new bootstrap.Modal(document.getElementById('guestProfileModal')).show();
    } catch (error) {
        console.error('Error viewing guest profile:', error);
        alert('Error loading guest profile');
    }
}

async function addGuest() {
    const form = document.getElementById('addGuestForm');
    const formData = new FormData(form);
    
    const preferences = Array.from(formData.getAll('preferences'));
    const data = {
        name: formData.get('name'),
        email: formData.get('email'),
        phone: formData.get('phone'),
        city: formData.get('city'),
        preferences
    };
    
    try {
        const response = await fetch('/admin/guests', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });
        
        const result = await response.json();
        
        if (!response.ok) {
            throw new Error(result.error || 'Error creating guest');
        }
        
        location.reload();
    } catch (error) {
        console.error('Error adding guest:', error);
        alert(error.message);
    }
}

async function deleteGuest(guestId) {
    if (!confirm('Are you sure you want to delete this guest?')) return;

    try {
        const response = await fetch(`/admin/guests/${guestId}`, {
            method: 'DELETE'
        });
        
        const result = await response.json();
        
        if (!response.ok) {
            throw new Error(result.error || 'Error deleting guest');
        }
        
        location.reload();
    } catch (error) {
        console.error('Error deleting guest:', error);
        alert(error.message);
    }
}
</script>

================
File: src/views/admin/guests/profile.hbs
================
{{> admin/header}}
{{> admin/sidebar}}

<div class="main-content">
    <div class="container-fluid p-4">
        <!-- Page Header -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h1 class="h3 mb-0">Guest Profile</h1>
                        <nav aria-label="breadcrumb">
                            <ol class="breadcrumb mb-0">
                                <li class="breadcrumb-item"><a href="/admin/dashboard">Dashboard</a></li>
                                <li class="breadcrumb-item"><a href="/admin/guests">Guests</a></li>
                                <li class="breadcrumb-item active">{{guest.name}}</li>
                            </ol>
                        </nav>
                    </div>
                    <div class="d-flex gap-2">
                        {{#if guest.currentStay}}
                        <button class="btn btn-warning" onclick="processCheckOut('{{guest.currentStay._id}}')">
                            <i class="fas fa-sign-out-alt me-2"></i>Process Check-out
                        </button>
                        {{/if}}
                        <button class="btn btn-primary" onclick="createBooking('{{guest._id}}')">
                            <i class="fas fa-calendar-plus me-2"></i>New Booking
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <div class="row g-4">
            <!-- Guest Information -->
            <div class="col-xl-4">
                <div class="card mb-4">
                    <div class="card-body text-center">
                        <div class="mb-4">
                            {{#if guest.avatar}}
                            <img src="{{guest.avatar}}" class="rounded-circle img-thumbnail" style="width: 150px;">
                            {{else}}
                            <div class="avatar avatar-xl">
                                <div class="avatar-initial rounded-circle bg-primary">
                                    {{initials guest.name}}
                                </div>
                            </div>
                            {{/if}}
                        </div>
                        <h4 class="mb-1">{{guest.name}}</h4>
                        <p class="text-muted mb-3">{{guest.nationality}}</p>
                        {{#if guest.loyaltyProgram}}
                        <div class="mb-3">
                            <span class="badge bg-{{loyaltyColor guest.loyaltyProgram.tier}} p-2">
                                {{guest.loyaltyProgram.tier}} Member
                            </span>
                        </div>
                        {{/if}}
                        <div class="d-flex justify-content-center gap-2">
                            <a href="mailto:{{guest.email}}" class="btn btn-outline-primary btn-sm">
                                <i class="fas fa-envelope"></i>
                            </a>
                            <a href="tel:{{guest.phone}}" class="btn btn-outline-primary btn-sm">
                                <i class="fas fa-phone"></i>
                            </a>
                            <button class="btn btn-outline-primary btn-sm" onclick="sendMessage('{{guest._id}}')">
                                <i class="fas fa-comment"></i>
                            </button>
                        </div>
                    </div>
                    <div class="card-footer bg-light">
                        <div class="row text-center">
                            <div class="col">
                                <h5 class="mb-0">{{guest.totalStays}}</h5>
                                <small class="text-muted">Stays</small>
                            </div>
                            <div class="col">
                                <h5 class="mb-0">${{formatNumber guest.totalSpent}}</h5>
                                <small class="text-muted">Spent</small>
                            </div>
                            <div class="col">
                                <h5 class="mb-0">{{guest.avgRating}}</h5>
                                <small class="text-muted">Rating</small>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Contact Information -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Contact Information</h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label class="form-label text-muted">Email</label>
                            <div>{{guest.email}}</div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label text-muted">Phone</label>
                            <div>{{formatPhone guest.phone}}</div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label text-muted">Address</label>
                            <div>{{guest.address}}</div>
                        </div>
                        <div>
                            <label class="form-label text-muted">ID Information</label>
                            <div>{{guest.idType}}: {{guest.idNumber}}</div>
                        </div>
                    </div>
                </div>

                <!-- Preferences -->
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">Guest Preferences</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="editPreferences('{{guest._id}}')">
                            <i class="fas fa-edit"></i>
                        </button>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label class="form-label text-muted">Room Preferences</label>
                            <div>{{guest.preferences.roomType}}</div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label text-muted">Dietary Requirements</label>
                            <div>{{guest.preferences.dietary}}</div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label text-muted">Special Requests</label>
                            <div>{{guest.preferences.specialRequests}}</div>
                        </div>
                        <div>
                            <label class="form-label text-muted">Communication Preferences</label>
                            <div>
                                {{#each guest.preferences.communication}}
                                <span class="badge bg-light text-dark me-1">{{this}}</span>
                                {{/each}}
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-xl-8">
                <!-- Current Stay -->
                {{#if guest.currentStay}}
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Current Stay</h5>
                    </div>
                    <div class="card-body">
                        <div class="row g-3">
                            <div class="col-md-6">
                                <div class="d-flex align-items-center">
                                    <div class="avatar me-3 bg-light-primary">
                                        <i class="fas fa-bed text-primary"></i>
                                    </div>
                                    <div>
                                        <div class="text-muted">Room</div>
                                        <div class="h5 mb-0">{{guest.currentStay.room.number}} - {{guest.currentStay.room.type}}</div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="d-flex align-items-center">
                                    <div class="avatar me-3 bg-light-success">
                                        <i class="fas fa-calendar text-success"></i>
                                    </div>
                                    <div>
                                        <div class="text-muted">Duration</div>
                                        <div class="h5 mb-0">{{formatDate guest.currentStay.checkIn}} - {{formatDate guest.currentStay.checkOut}}</div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="d-flex align-items-center">
                                    <div class="avatar me-3 bg-light-warning">
                                        <i class="fas fa-dollar-sign text-warning"></i>
                                    </div>
                                    <div>
                                        <div class="text-muted">Total Charges</div>
                                        <div class="h5 mb-0">${{formatNumber guest.currentStay.totalAmount}}</div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="d-flex align-items-center">
                                    <div class="avatar me-3 bg-light-info">
                                        <i class="fas fa-concierge-bell text-info"></i>
                                    </div>
                                    <div>
                                        <div class="text-muted">Services</div>
                                        <div>
                                            {{#each guest.currentStay.services}}
                                            <span class="badge bg-light text-dark me-1">{{this}}</span>
                                            {{/each}}
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                {{/if}}

                <!-- Loyalty Program -->
                {{#if guest.loyaltyProgram}}
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Loyalty Program</h5>
                    </div>
                    <div class="card-body">
                        <div class="row g-4">
                            <div class="col-md-6">
                                <div class="card border-0 bg-light h-100">
                                    <div class="card-body">
                                        <div class="d-flex align-items-center mb-3">
                                            <div class="avatar me-3 bg-{{loyaltyColor guest.loyaltyProgram.tier}}">
                                                <i class="fas fa-star text-white"></i>
                                            </div>
                                            <div>
                                                <h6 class="mb-0">{{guest.loyaltyProgram.tier}} Member</h6>
                                                <small class="text-muted">Since {{formatDate guest.loyaltyProgram.enrollmentDate}}</small>
                                            </div>
                                        </div>
                                        <div class="mb-3">
                                            <h3 class="mb-1">{{formatNumber guest.loyaltyProgram.points}} pts</h3>
                                            <small class="text-muted">Available Points</small>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label text-muted">Progress to Next Tier</label>
                                            <div class="d-flex justify-content-between mb-1">
                                                <small>{{guest.loyaltyProgram.tier}}</small>
                                                <small>{{guest.loyaltyProgram.nextTier}}</small>
                                            </div>
                                            <div class="progress" style="height: 6px;">
                                                <div class="progress-bar bg-{{loyaltyColor guest.loyaltyProgram.tier}}" 
                                                    style="width: {{guest.loyaltyProgram.tierProgress}}%"></div>
                                            </div>
                                            <small class="text-muted">
                                                {{guest.loyaltyProgram.pointsToNextTier}} points needed for {{guest.loyaltyProgram.nextTier}}
                                            </small>
                                        </div>
                                        <button class="btn btn-primary btn-sm w-100" onclick="viewLoyaltyDetails('{{guest._id}}')">
                                            View Details
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="card border-0 bg-light h-100">
                                    <div class="card-body">
                                        <h6 class="mb-3">Current Benefits</h6>
                                        {{#each loyaltyBenefits}}
                                        <div class="d-flex align-items-center mb-3">
                                            <div class="avatar me-3 bg-white">
                                                <i class="fas fa-{{icon}} text-primary"></i>
                                            </div>
                                            <div>
                                                <div class="mb-0">{{name}}</div>
                                                <small class="text-muted">{{description}}</small>
                                            </div>
                                        </div>
                                        {{/each}}
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                {{/if}}

                <!-- Recent Activity -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Recent Activity</h5>
                    </div>
                    <div class="card-body">
                        <div class="timeline">
                            {{#each recentActivity}}
                            <div class="timeline-item">
                                <div class="timeline-point bg-{{type}}">
                                    <i class="fas fa-{{icon}}"></i>
                                </div>
                                <div class="timeline-content">
                                    <h6 class="mb-1">{{title}}</h6>
                                    <p class="mb-0">{{description}}</p>
                                    <small class="text-muted">{{formatDateTime date}}</small>
                                </div>
                            </div>
                            {{/each}}
                        </div>
                    </div>
                </div>

                <!-- Stay History -->
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">Stay History</h5>
                        <a href="/admin/guests/{{guest._id}}/stays" class="btn btn-sm btn-outline-primary">
                            View All
                        </a>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Room</th>
                                        <th>Check-in</th>
                                        <th>Check-out</th>
                                        <th>Duration</th>
                                        <th>Total</th>
                                        <th>Status</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {{#each recentStays}}
                                    <tr>
                                        <td>
                                            <div>{{room.number}} - {{room.type}}</div>
                                            <small class="text-muted">Floor {{room.floor}}</small>
                                        </td>
                                        <td>{{formatDateTime checkIn}}</td>
                                        <td>{{formatDateTime checkOut}}</td>
                                        <td>{{stayDuration}} nights</td>
                                        <td>${{formatNumber totalAmount}}</td>
                                        <td>
                                            <span class="badge bg-{{statusColor status}}">{{status}}</span>
                                        </td>
                                    </tr>
                                    {{/each}}
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Edit Preferences Modal -->
<div class="modal fade" id="preferencesModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Guest Preferences</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="preferencesForm">
                    <div class="mb-3">
                        <label class="form-label">Room Type Preference</label>
                        <select class="form-select" name="roomType">
                            <option value="">Select Room Type</option>
                            {{#each roomTypes}}
                            <option value="{{this}}" {{#if (eq ../guest.preferences.roomType this)}}selected{{/if}}>
                                {{this}}
                            </option>
                            {{/each}}
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Dietary Requirements</label>
                        <textarea class="form-control" name="dietary" rows="2">{{guest.preferences.dietary}}</textarea>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Special Requests</label>
                        <textarea class="form-control" name="specialRequests" rows="3">{{guest.preferences.specialRequests}}</textarea>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Communication Preferences</label>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" name="communication" value="email" 
                                {{#if (includes guest.preferences.communication "email")}}checked{{/if}}>
                            <label class="form-check-label">Email Updates</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" name="communication" value="sms"
                                {{#if (includes guest.preferences.communication "sms")}}checked{{/if}}>
                            <label class="form-check-label">SMS Notifications</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" name="communication" value="phone"
                                {{#if (includes guest.preferences.communication "phone")}}checked{{/if}}>
                            <label class="form-check-label">Phone Calls</label>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="savePreferences()">Save Changes</button>
            </div>
        </div>
    </div>
</div>

<script>
// Process check-out
function processCheckOut(bookingId) {
    window.location.href = `/admin/check-in-out/check-out/${bookingId}`;
}

// Create new booking
function createBooking(guestId) {
    window.location.href = `/admin/bookings/create?guest=${guestId}`;
}

// Send message to guest
function sendMessage(guestId) {
    window.location.href = `/admin/messages/compose?guest=${guestId}`;
}

// View loyalty program details
function viewLoyaltyDetails(guestId) {
    window.location.href = `/admin/guests/${guestId}/loyalty`;
}

// Edit preferences
function editPreferences(guestId) {
    const modal = new bootstrap.Modal(document.getElementById('preferencesModal'));
    modal.show();
}

// Save preferences
async function savePreferences() {
    const form = document.getElementById('preferencesForm');
    const formData = new FormData(form);
    
    try {
        const response = await fetch(`/api/guests/${guestId}/preferences`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(Object.fromEntries(formData))
        });

        if (response.ok) {
            window.location.reload();
        } else {
            const error = await response.json();
            alert(error.message || 'Failed to update preferences');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('An error occurred while updating preferences');
    }
}

// Initialize tooltips
document.addEventListener('DOMContentLoaded', function() {
    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl);
    });
});
</script>

================
File: src/views/admin/hotels.hbs
================
{{> admin/header}}
{{> admin/sidebar}}

<div class="main-content">
    <div class="container-fluid p-4">
        <!-- Page Header -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h1 class="h3 mb-0">Hotel Management</h1>
                        <nav aria-label="breadcrumb">
                            <ol class="breadcrumb mb-0">
                                <li class="breadcrumb-item"><a href="/admin/dashboard">Dashboard</a></li>
                                <li class="breadcrumb-item active">Hotels</li>
                            </ol>
                        </nav>
                    </div>
                    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addHotelModal">
                        <i class="fas fa-plus-circle me-2"></i>Add New Hotel
                    </button>
                </div>
            </div>
        </div>

        <!-- Statistics Cards -->
        <div class="row g-3 mb-4">
            <div class="col-sm-6 col-xl-3">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex align-items-start justify-content-between">
                            <div>
                                <h6 class="text-muted mb-2">Total Hotels</h6>
                                <h4 class="mb-0">{{stats.totalHotels}}</h4>
                            </div>
                            <div class="avatar bg-light-primary">
                                <i class="fas fa-hotel text-primary"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-6 col-xl-3">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex align-items-start justify-content-between">
                            <div>
                                <h6 class="text-muted mb-2">Active Hotels</h6>
                                <h4 class="mb-0">{{stats.activeHotels}}</h4>
                            </div>
                            <div class="avatar bg-light-success">
                                <i class="fas fa-check-circle text-success"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-6 col-xl-3">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex align-items-start justify-content-between">
                            <div>
                                <h6 class="text-muted mb-2">Total Rooms</h6>
                                <h4 class="mb-0">{{stats.totalRooms}}</h4>
                            </div>
                            <div class="avatar bg-light-info">
                                <i class="fas fa-bed text-info"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-6 col-xl-3">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex align-items-start justify-content-between">
                            <div>
                                <h6 class="text-muted mb-2">Average Rating</h6>
                                <h4 class="mb-0">{{stats.averageRating}}<small class="text-muted">/5</small></h4>
                            </div>
                            <div class="avatar bg-light-warning">
                                <i class="fas fa-star text-warning"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Search and Filters -->
        <div class="card mb-4">
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-md-4">
                        <div class="input-group">
                            <span class="input-group-text bg-transparent">
                                <i class="fas fa-search"></i>
                            </span>
                            <input type="text" class="form-control border-start-0" id="searchHotel" placeholder="Search hotels...">
                        </div>
                    </div>
                    <div class="col-md-3">
                        <select class="form-select" id="statusFilter">
                            <option value="">All Status</option>
                            <option value="active">Active</option>
                            <option value="inactive">Inactive</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <select class="form-select" id="sortBy">
                            <option value="name">Sort by Name</option>
                            <option value="rating">Sort by Rating</option>
                            <option value="price">Sort by Price</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <button class="btn btn-outline-secondary w-100" id="resetFilters">
                            <i class="fas fa-undo me-2"></i>Reset
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Hotels Grid -->
        {{#if hotels.length}}
        <div class="row g-3">
            {{#each hotels}}
            <div class="col-md-6 col-xl-4">
                <div class="card h-100">
                    <div class="position-relative">
                        {{#if images.[0]}}
                        <img src="{{images.[0]}}" class="card-img-top" alt="{{name}}" style="height: 200px; object-fit: cover;">
                        {{else}}
                        <div class="bg-light" style="height: 200px; display: flex; align-items: center; justify-content: center;">
                            <i class="fas fa-hotel fa-3x text-muted"></i>
                        </div>
                        {{/if}}
                        <div class="position-absolute top-0 end-0 p-3">
                            <span class="badge {{#if isActive}}bg-success{{else}}bg-danger{{/if}}">
                                {{#if isActive}}Active{{else}}Inactive{{/if}}
                            </span>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-start mb-2">
                            <h5 class="card-title mb-0">{{name}}</h5>
                            <div class="dropdown">
                                <button class="btn btn-link text-dark p-0" data-bs-toggle="dropdown">
                                    <i class="fas fa-ellipsis-v"></i>
                                </button>
                                <ul class="dropdown-menu dropdown-menu-end">
                                    <li><a class="dropdown-item" href="/admin/hotels/{{_id}}">
                                        <i class="fas fa-eye me-2"></i>View Details
                                    </a></li>
                                    <li><a class="dropdown-item" href="/admin/hotels/{{_id}}/edit">
                                        <i class="fas fa-edit me-2"></i>Edit
                                    </a></li>
                                    <li><hr class="dropdown-divider"></li>
                                    <li><button class="dropdown-item {{#if isActive}}text-danger{{else}}text-success{{/if}}" 
                                            onclick="toggleHotelStatus('{{_id}}', {{isActive}})">
                                        <i class="fas {{#if isActive}}fa-ban{{else}}fa-check{{/if}} me-2"></i>
                                        {{#if isActive}}Deactivate{{else}}Activate{{/if}}
                                    </button></li>
                                </ul>
                            </div>
                        </div>
                        <p class="card-text text-muted small mb-2">{{location}}</p>
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <div class="text-primary">${{pricePerNight}}<small class="text-muted">/night</small></div>
                            <div class="text-warning">
                                <i class="fas fa-star"></i>
                                <span class="ms-1">{{rating}}</span>
                            </div>
                        </div>
                        <div class="d-flex align-items-center text-muted small">
                            <div class="me-3">
                                <i class="fas fa-bed me-1"></i>{{rooms.length}} Rooms
                            </div>
                            <div>
                                <i class="fas fa-user me-1"></i>{{owner.name}}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            {{/each}}
        </div>
        {{else}}
        <div class="card">
            <div class="card-body text-center py-5">
                <i class="fas fa-hotel fa-3x text-muted mb-3"></i>
                <h5>No Hotels Found</h5>
                <p class="text-muted">Click "Add New Hotel" to create your first hotel.</p>
            </div>
        </div>
        {{/if}}
    </div>
</div>

<!-- Add Hotel Modal -->
<div class="modal fade" id="addHotelModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add New Hotel</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="addHotelForm">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label">Hotel Name</label>
                            <input type="text" class="form-control" name="name" required>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Location</label>
                            <input type="text" class="form-control" name="location" required>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Price per Night</label>
                            <div class="input-group">
                                <span class="input-group-text">$</span>
                                <input type="number" class="form-control" name="pricePerNight" required>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Status</label>
                            <select class="form-select" name="isActive" required>
                                <option value="true">Active</option>
                                <option value="false">Inactive</option>
                            </select>
                        </div>
                        <div class="col-12">
                            <label class="form-label">Description</label>
                            <textarea class="form-control" name="description" rows="3" required></textarea>
                        </div>
                        <div class="col-12">
                            <label class="form-label">Hotel Images</label>
                            <input type="file" class="form-control" name="images" multiple accept="image/*">
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="saveHotel()">Save Hotel</button>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Initialize tooltips
    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl);
    });

    // Search functionality
    const searchInput = document.getElementById('searchHotel');
    if (searchInput) {
        searchInput.addEventListener('keyup', function() {
            const searchText = this.value.toLowerCase();
            const hotelCards = document.querySelectorAll('.col-md-6.col-xl-4');
            
            hotelCards.forEach(card => {
                const hotelName = card.querySelector('.card-title').textContent.toLowerCase();
                const hotelLocation = card.querySelector('.text-muted.small').textContent.toLowerCase();
                
                if (hotelName.includes(searchText) || hotelLocation.includes(searchText)) {
                    card.style.display = '';
                } else {
                    card.style.display = 'none';
                }
            });
        });
    }

    // Filter functionality
    const statusFilter = document.getElementById('statusFilter');
    if (statusFilter) {
        statusFilter.addEventListener('change', function() {
            const status = this.value;
            const hotelCards = document.querySelectorAll('.col-md-6.col-xl-4');
            
            hotelCards.forEach(card => {
                const badge = card.querySelector('.badge');
                const isActive = badge.classList.contains('bg-success');
                
                if (!status || 
                    (status === 'active' && isActive) || 
                    (status === 'inactive' && !isActive)) {
                    card.style.display = '';
                } else {
                    card.style.display = 'none';
                }
            });
        });
    }

    // Sort functionality
    const sortSelect = document.getElementById('sortBy');
    if (sortSelect) {
        sortSelect.addEventListener('change', function() {
            const sortBy = this.value;
            const hotelCards = Array.from(document.querySelectorAll('.col-md-6.col-xl-4'));
            const container = hotelCards[0].parentElement;
            
            hotelCards.sort((a, b) => {
                let valueA, valueB;
                
                switch(sortBy) {
                    case 'name':
                        valueA = a.querySelector('.card-title').textContent;
                        valueB = b.querySelector('.card-title').textContent;
                        return valueA.localeCompare(valueB);
                    case 'rating':
                        valueA = parseFloat(a.querySelector('.text-warning span').textContent);
                        valueB = parseFloat(b.querySelector('.text-warning span').textContent);
                        return valueB - valueA;
                    case 'price':
                        valueA = parseFloat(a.querySelector('.text-primary').textContent.replace('$', ''));
                        valueB = parseFloat(b.querySelector('.text-primary').textContent.replace('$', ''));
                        return valueA - valueB;
                }
            });
            
            hotelCards.forEach(card => container.appendChild(card));
        });
    }

    // Reset filters
    const resetButton = document.getElementById('resetFilters');
    if (resetButton) {
        resetButton.addEventListener('click', function() {
            document.getElementById('searchHotel').value = '';
            document.getElementById('statusFilter').value = '';
            document.getElementById('sortBy').value = 'name';
            
            const hotelCards = document.querySelectorAll('.col-md-6.col-xl-4');
            hotelCards.forEach(card => card.style.display = '');
        });
    }
});

async function saveHotel() {
    const form = document.getElementById('addHotelForm');
    if (!form.checkValidity()) {
        form.reportValidity();
        return;
    }

    const formData = new FormData(form);
    
    try {
        const response = await fetch('/admin/hotels', {
            method: 'POST',
            body: formData
        });

        const result = await response.json();
        
        if (result.success) {
            window.location.reload();
        } else {
            alert(result.message || 'Error creating hotel');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error creating hotel. Please try again.');
    }
}

async function toggleHotelStatus(hotelId, currentStatus) {
    if (!confirm(`Are you sure you want to ${currentStatus ? 'deactivate' : 'activate'} this hotel?`)) {
        return;
    }

    try {
        const response = await fetch(`/api/admin/hotels/${hotelId}/toggle-status`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        if (response.ok) {
            window.location.reload();
        } else {
            const error = await response.json();
            alert(error.message || 'Error updating hotel status');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error updating hotel status. Please try again.');
    }
}
</script>

{{> footer}}

================
File: src/views/admin/housekeeping/dashboard.hbs
================
{{> admin/header title="Housekeeping Dashboard"}}

<div class="container-fluid">
    <!-- Page Heading -->
    <div class="d-sm-flex align-items-center justify-content-between mb-4">
        <h1 class="h3 mb-0 text-gray-800">Housekeeping Dashboard</h1>
        <div>
            <button class="btn btn-success" onclick="assignTasks()">
                <i class="fas fa-tasks"></i> Auto-Assign Tasks
            </button>
            <button class="btn btn-primary" onclick="refreshDashboard()">
                <i class="fas fa-sync"></i> Refresh
            </button>
        </div>
    </div>

    <!-- Task Overview Cards -->
    <div class="row">
        <!-- Pending Tasks -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-primary shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                Pending Tasks</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800" id="pendingTasksCount">
                                {{stats.pendingTasks}}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-clipboard-list fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- In Progress -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-info shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-info text-uppercase mb-1">
                                In Progress</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800" id="inProgressCount">
                                {{stats.inProgressTasks}}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-clock fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Completed Today -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-success shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">
                                Completed Today</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800" id="completedCount">
                                {{stats.completedToday}}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-check-circle fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Staff Available -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-warning shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">
                                Staff Available</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800" id="staffCount">
                                {{stats.availableStaff}}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-user-friends fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Room Status Grid -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow">
                <div class="card-header py-3 d-flex justify-content-between align-items-center">
                    <h6 class="m-0 font-weight-bold text-primary">Room Status Overview</h6>
                    <div class="btn-group">
                        <button class="btn btn-outline-primary btn-sm" onclick="filterRooms('all')">All</button>
                        <button class="btn btn-outline-warning btn-sm" onclick="filterRooms('dirty')">Dirty</button>
                        <button class="btn btn-outline-info btn-sm" onclick="filterRooms('cleaning')">Cleaning</button>
                        <button class="btn btn-outline-success btn-sm" onclick="filterRooms('clean')">Clean</button>
                        <button class="btn btn-outline-danger btn-sm" onclick="filterRooms('inspection')">Inspection</button>
                    </div>
                </div>
                <div class="card-body">
                    <div class="room-grid" id="roomGrid">
                        {{#each rooms}}
                        <div class="room-card {{status}}" id="room-{{number}}" onclick="showRoomDetails('{{id}}')">
                            <div class="room-number">{{number}}</div>
                            <div class="room-type">{{type}}</div>
                            <div class="room-status">{{status}}</div>
                            <div class="room-info">
                                {{#if assignedTo}}
                                <span class="badge badge-info">{{assignedTo}}</span>
                                {{/if}}
                                {{#if priority}}
                                <span class="badge badge-danger">Priority</span>
                                {{/if}}
                            </div>
                        </div>
                        {{/each}}
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Task List -->
    <div class="row">
        <div class="col-12">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Active Tasks</h6>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-bordered" id="tasksTable">
                            <thead>
                                <tr>
                                    <th>Room</th>
                                    <th>Task Type</th>
                                    <th>Priority</th>
                                    <th>Assigned To</th>
                                    <th>Status</th>
                                    <th>Time</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="tasksList">
                                {{#each tasks}}
                                <tr id="task-{{id}}">
                                    <td>{{roomNumber}}</td>
                                    <td>{{type}}</td>
                                    <td>
                                        <span class="badge badge-{{priorityColor priority}}">
                                            {{priority}}
                                        </span>
                                    </td>
                                    <td>{{assignedTo}}</td>
                                    <td>
                                        <span class="badge badge-{{statusColor status}}">
                                            {{status}}
                                        </span>
                                    </td>
                                    <td>{{formatTime createdAt}}</td>
                                    <td>
                                        <div class="btn-group">
                                            <button class="btn btn-info btn-sm" onclick="updateTaskStatus('{{id}}')">
                                                Update
                                            </button>
                                            <button class="btn btn-warning btn-sm" onclick="reassignTask('{{id}}')">
                                                Reassign
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Room Details Modal -->
<div class="modal fade" id="roomDetailsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Room Details</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="roomDetailsContent"></div>
            </div>
        </div>
    </div>
</div>

<!-- WebSocket Integration -->
<script src="/js/websocket.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    initializeDataTables();
    setupWebSocket();
});

function initializeDataTables() {
    $('#tasksTable').DataTable({
        order: [[2, 'desc'], [5, 'desc']],
        pageLength: 25
    });
}

function setupWebSocket() {
    // Room status updates
    hotelWS.on('ROOM_STATUS_UPDATE', function(data) {
        const roomCard = document.getElementById(`room-${data.roomNumber}`);
        if (roomCard) {
            roomCard.className = `room-card ${data.status}`;
            roomCard.querySelector('.room-status').textContent = data.status;
            
            // Update assigned staff if present
            const roomInfo = roomCard.querySelector('.room-info');
            if (data.assignedTo) {
                roomInfo.innerHTML = `<span class="badge badge-info">${data.assignedTo}</span>`;
            } else {
                roomInfo.innerHTML = '';
            }
        }

        // Update statistics
        updateDashboardStats();
    });

    // Task updates
    hotelWS.on('TASK_UPDATE', function(data) {
        const table = $('#tasksTable').DataTable();
        const existingRow = table.row(`#task-${data.id}`);
        
        if (existingRow.length) {
            existingRow.remove();
        }
        
        if (data.status !== 'completed') {
            table.row.add([
                data.roomNumber,
                data.type,
                `<span class="badge badge-${getPriorityColor(data.priority)}">${data.priority}</span>`,
                data.assignedTo,
                `<span class="badge badge-${getStatusColor(data.status)}">${data.status}</span>`,
                formatTime(data.createdAt),
                `<div class="btn-group">
                    <button class="btn btn-info btn-sm" onclick="updateTaskStatus('${data.id}')">
                        Update
                    </button>
                    <button class="btn btn-warning btn-sm" onclick="reassignTask('${data.id}')">
                        Reassign
                    </button>
                </div>`
            ]).draw(false);
        }

        // Update statistics
        updateDashboardStats();
    });
}

function updateDashboardStats() {
    fetch('/admin/housekeeping/stats')
        .then(response => response.json())
        .then(stats => {
            document.getElementById('pendingTasksCount').textContent = stats.pendingTasks;
            document.getElementById('inProgressCount').textContent = stats.inProgressTasks;
            document.getElementById('completedCount').textContent = stats.completedToday;
            document.getElementById('staffCount').textContent = stats.availableStaff;
        });
}

function filterRooms(status) {
    const rooms = document.querySelectorAll('.room-card');
    if (status === 'all') {
        rooms.forEach(room => room.style.display = 'block');
    } else {
        rooms.forEach(room => {
            room.style.display = room.classList.contains(status) ? 'block' : 'none';
        });
    }
}

function showRoomDetails(roomId) {
    fetch(`/admin/housekeeping/room/${roomId}`)
        .then(response => response.json())
        .then(data => {
            const content = document.getElementById('roomDetailsContent');
            content.innerHTML = `
                <div class="room-details">
                    <h4>Room ${data.number}</h4>
                    <div class="row">
                        <div class="col-md-6">
                            <p><strong>Type:</strong> ${data.type}</p>
                            <p><strong>Status:</strong> ${data.status}</p>
                            <p><strong>Last Cleaned:</strong> ${formatTime(data.lastCleaned)}</p>
                            <p><strong>Assigned To:</strong> ${data.assignedTo || 'Not assigned'}</p>
                        </div>
                        <div class="col-md-6">
                            <p><strong>Guest Status:</strong> ${data.guestStatus}</p>
                            <p><strong>Special Requests:</strong> ${data.specialRequests || 'None'}</p>
                            <p><strong>Notes:</strong> ${data.notes || 'None'}</p>
                        </div>
                    </div>
                    <div class="mt-3">
                        <button class="btn btn-primary" onclick="assignTask('${roomId}')">
                            Assign Task
                        </button>
                        <button class="btn btn-info" onclick="markInspection('${roomId}')">
                            Mark for Inspection
                        </button>
                        <button class="btn btn-success" onclick="markComplete('${roomId}')">
                            Mark Complete
                        </button>
                    </div>
                </div>
            `;
            $('#roomDetailsModal').modal('show');
        });
}

function assignTask(roomId) {
    fetch('/admin/housekeeping/staff')
        .then(response => response.json())
        .then(staff => {
            Swal.fire({
                title: 'Assign Task',
                html: `
                    <div class="form-group">
                        <label>Select Staff</label>
                        <select class="form-control" id="staffSelect">
                            ${staff.map(s => `<option value="${s.id}">${s.name}</option>`).join('')}
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Priority</label>
                        <select class="form-control" id="prioritySelect">
                            <option value="low">Low</option>
                            <option value="medium">Medium</option>
                            <option value="high">High</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Notes</label>
                        <textarea class="form-control" id="taskNotes"></textarea>
                    </div>
                `,
                showCancelButton: true,
                confirmButtonText: 'Assign',
                focusConfirm: false,
                preConfirm: () => {
                    return {
                        staffId: document.getElementById('staffSelect').value,
                        priority: document.getElementById('prioritySelect').value,
                        notes: document.getElementById('taskNotes').value
                    }
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(`/admin/housekeeping/assign-task`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            roomId,
                            ...result.value
                        })
                    }).then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire('Success', 'Task assigned successfully', 'success');
                            $('#roomDetailsModal').modal('hide');
                        } else {
                            throw new Error(data.error);
                        }
                    }).catch(error => {
                        Swal.fire('Error', error.message, 'error');
                    });
                }
            });
        });
}

function updateTaskStatus(taskId) {
    Swal.fire({
        title: 'Update Task Status',
        input: 'select',
        inputOptions: {
            'pending': 'Pending',
            'in_progress': 'In Progress',
            'completed': 'Completed',
            'delayed': 'Delayed'
        },
        inputPlaceholder: 'Select status',
        showCancelButton: true,
        inputValidator: (value) => {
            return new Promise((resolve) => {
                if (value) {
                    resolve()
                } else {
                    resolve('You need to select a status')
                }
            })
        }
    }).then((result) => {
        if (result.isConfirmed) {
            fetch(`/admin/housekeeping/update-task-status`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    taskId,
                    status: result.value
                })
            }).then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire('Success', 'Task status updated successfully', 'success');
                } else {
                    throw new Error(data.error);
                }
            }).catch(error => {
                Swal.fire('Error', error.message, 'error');
            });
        }
    });
}

function reassignTask(taskId) {
    fetch('/admin/housekeeping/staff')
        .then(response => response.json())
        .then(staff => {
            Swal.fire({
                title: 'Reassign Task',
                input: 'select',
                inputOptions: Object.fromEntries(
                    staff.map(s => [s.id, s.name])
                ),
                inputPlaceholder: 'Select staff member',
                showCancelButton: true,
                inputValidator: (value) => {
                    return new Promise((resolve) => {
                        if (value) {
                            resolve()
                        } else {
                            resolve('You need to select a staff member')
                        }
                    })
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(`/admin/housekeeping/reassign-task`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            taskId,
                            staffId: result.value
                        })
                    }).then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire('Success', 'Task reassigned successfully', 'success');
                        } else {
                            throw new Error(data.error);
                        }
                    }).catch(error => {
                        Swal.fire('Error', error.message, 'error');
                    });
                }
            });
        });
}

function assignTasks() {
    Swal.fire({
        title: 'Auto-Assign Tasks',
        text: 'This will automatically assign all pending tasks to available staff members. Continue?',
        icon: 'question',
        showCancelButton: true,
        confirmButtonText: 'Yes, assign tasks',
        cancelButtonText: 'No, cancel'
    }).then((result) => {
        if (result.isConfirmed) {
            fetch('/admin/housekeeping/auto-assign', {
                method: 'POST'
            }).then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire('Success', 'Tasks have been automatically assigned', 'success');
                } else {
                    throw new Error(data.error);
                }
            }).catch(error => {
                Swal.fire('Error', error.message, 'error');
            });
        }
    });
}

function refreshDashboard() {
    location.reload();
}

// Helper functions
function getPriorityColor(priority) {
    const colors = {
        low: 'info',
        medium: 'warning',
        high: 'danger'
    };
    return colors[priority] || 'secondary';
}

function getStatusColor(status) {
    const colors = {
        pending: 'warning',
        in_progress: 'info',
        completed: 'success',
        delayed: 'danger'
    };
    return colors[status] || 'secondary';
}

function formatTime(timestamp) {
    return new Date(timestamp).toLocaleString();
}
</script>

<style>
.room-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 1rem;
    padding: 1rem;
}

.room-card {
    border: 1px solid #e3e6f0;
    border-radius: 0.35rem;
    padding: 1rem;
    cursor: pointer;
    transition: all 0.3s ease;
}

.room-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15);
}

.room-card.dirty {
    background-color: #fff3cd;
    border-color: #ffeeba;
}

.room-card.cleaning {
    background-color: #cce5ff;
    border-color: #b8daff;
}

.room-card.clean {
    background-color: #d4edda;
    border-color: #c3e6cb;
}

.room-card.inspection {
    background-color: #f8d7da;
    border-color: #f5c6cb;
}

.room-number {
    font-size: 1.25rem;
    font-weight: bold;
    margin-bottom: 0.5rem;
}

.room-type {
    font-size: 0.875rem;
    color: #858796;
    margin-bottom: 0.5rem;
}

.room-status {
    font-size: 0.875rem;
    font-weight: 500;
    text-transform: capitalize;
    margin-bottom: 0.5rem;
}

.room-info {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
}
</style>

{{> admin/footer}}

================
File: src/views/admin/inventory/adjustments.ejs
================
<%- include('../../partials/header') %>
<%- include('../../partials/admin-nav') %>

<div class="min-h-screen bg-gray-100">
    <div class="py-6">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <!-- Header -->
            <div class="md:flex md:items-center md:justify-between">
                <div class="flex-1 min-w-0">
                    <h2 class="text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate">
                        Inventory Adjustments
                    </h2>
                </div>
                <div class="mt-4 flex md:mt-0 md:ml-4">
                    <button type="button" onclick="showAdjustmentModal()" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        New Adjustment
                    </button>
                </div>
            </div>

            <!-- Stats -->
            <div class="mt-8 grid grid-cols-1 gap-5 sm:grid-cols-3">
                <div class="bg-white overflow-hidden shadow rounded-lg">
                    <div class="p-5">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <svg class="h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                                </svg>
                            </div>
                            <div class="ml-5 w-0 flex-1">
                                <dl>
                                    <dt class="text-sm font-medium text-gray-500 truncate">Total Adjustments</dt>
                                    <dd class="flex items-baseline">
                                        <div class="text-2xl font-semibold text-gray-900"><%= stats.totalAdjustments %></div>
                                        <div class="ml-2 flex items-baseline text-sm font-semibold text-gray-600">
                                            this month
                                        </div>
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="bg-white overflow-hidden shadow rounded-lg">
                    <div class="p-5">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <svg class="h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v3m0 0v3m0-3h3m-3 0H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                            </div>
                            <div class="ml-5 w-0 flex-1">
                                <dl>
                                    <dt class="text-sm font-medium text-gray-500 truncate">Stock Additions</dt>
                                    <dd class="flex items-baseline">
                                        <div class="text-2xl font-semibold text-gray-900"><%= stats.stockAdditions %></div>
                                        <div class="ml-2 flex items-baseline text-sm font-semibold text-green-600">
                                            +<%= stats.additionValue.toLocaleString() %> units
                                        </div>
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="bg-white overflow-hidden shadow rounded-lg">
                    <div class="p-5">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <svg class="h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                            </div>
                            <div class="ml-5 w-0 flex-1">
                                <dl>
                                    <dt class="text-sm font-medium text-gray-500 truncate">Stock Reductions</dt>
                                    <dd class="flex items-baseline">
                                        <div class="text-2xl font-semibold text-gray-900"><%= stats.stockReductions %></div>
                                        <div class="ml-2 flex items-baseline text-sm font-semibold text-red-600">
                                            -<%= stats.reductionValue.toLocaleString() %> units
                                        </div>
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Filters -->
            <div class="mt-8 bg-white shadow sm:rounded-lg">
                <div class="px-4 py-5 sm:p-6">
                    <div class="grid grid-cols-1 gap-4 sm:grid-cols-4">
                        <div>
                            <label for="type" class="block text-sm font-medium text-gray-700">Type</label>
                            <select id="type" name="type" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                                <option value="">All Types</option>
                                <option value="addition">Addition</option>
                                <option value="reduction">Reduction</option>
                                <option value="correction">Correction</option>
                                <option value="damage">Damage</option>
                                <option value="loss">Loss</option>
                            </select>
                        </div>

                        <div>
                            <label for="category" class="block text-sm font-medium text-gray-700">Category</label>
                            <select id="category" name="category" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                                <option value="">All Categories</option>
                                <% categories.forEach(category => { %>
                                <option value="<%= category._id %>"><%= category.name %></option>
                                <% }); %>
                            </select>
                        </div>

                        <div>
                            <label for="dateRange" class="block text-sm font-medium text-gray-700">Date Range</label>
                            <select id="dateRange" name="dateRange" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                                <option value="today">Today</option>
                                <option value="week">This Week</option>
                                <option value="month" selected>This Month</option>
                                <option value="quarter">This Quarter</option>
                                <option value="year">This Year</option>
                            </select>
                        </div>

                        <div>
                            <label for="sort" class="block text-sm font-medium text-gray-700">Sort By</label>
                            <select id="sort" name="sort" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                                <option value="date_desc">Date: Newest First</option>
                                <option value="date_asc">Date: Oldest First</option>
                                <option value="quantity_desc">Quantity: High to Low</option>
                                <option value="quantity_asc">Quantity: Low to High</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Adjustments Table -->
            <div class="mt-8 flex flex-col">
                <div class="-my-2 -mx-4 overflow-x-auto sm:-mx-6 lg:-mx-8">
                    <div class="inline-block min-w-full py-2 align-middle md:px-6 lg:px-8">
                        <div class="overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg">
                            <table class="min-w-full divide-y divide-gray-300">
                                <thead class="bg-gray-50">
                                    <tr>
                                        <th scope="col" class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6">Reference</th>
                                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Date</th>
                                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Item</th>
                                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Type</th>
                                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Quantity</th>
                                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Reason</th>
                                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Adjusted By</th>
                                        <th scope="col" class="relative py-3.5 pl-3 pr-4 sm:pr-6">
                                            <span class="sr-only">Actions</span>
                                        </th>
                                    </tr>
                                </thead>
                                <tbody class="divide-y divide-gray-200 bg-white">
                                    <% adjustments.forEach(adjustment => { %>
                                    <tr>
                                        <td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-6">
                                            <%= adjustment.reference %>
                                        </td>
                                        <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                            <%= moment(adjustment.date).format('MMM D, YYYY, h:mm A') %>
                                        </td>
                                        <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                            <%= adjustment.item.name %>
                                        </td>
                                        <td class="whitespace-nowrap px-3 py-4 text-sm">
                                            <span class="inline-flex rounded-full px-2 text-xs font-semibold leading-5 
                                                <%= adjustment.type === 'addition' ? 'bg-green-100 text-green-800' :
                                                    adjustment.type === 'reduction' ? 'bg-red-100 text-red-800' :
                                                    adjustment.type === 'correction' ? 'bg-blue-100 text-blue-800' :
                                                    adjustment.type === 'damage' ? 'bg-yellow-100 text-yellow-800' :
                                                    'bg-gray-100 text-gray-800' %>">
                                                <%= adjustment.type.charAt(0).toUpperCase() + adjustment.type.slice(1) %>
                                            </span>
                                        </td>
                                        <td class="whitespace-nowrap px-3 py-4 text-sm">
                                            <span class="<%= adjustment.quantity > 0 ? 'text-green-600' : 'text-red-600' %>">
                                                <%= adjustment.quantity > 0 ? '+' : '' %><%= adjustment.quantity %>
                                            </span>
                                        </td>
                                        <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                            <%= adjustment.reason %>
                                        </td>
                                        <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                            <%= adjustment.adjustedBy.name %>
                                        </td>
                                        <td class="relative whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-6">
                                            <button onclick="viewAdjustment('<%= adjustment._id %>')" class="text-indigo-600 hover:text-indigo-900">View</button>
                                        </td>
                                    </tr>
                                    <% }); %>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- New Adjustment Modal -->
<div id="adjustmentModal" class="fixed z-10 inset-0 overflow-y-auto hidden" aria-labelledby="modal-title" role="dialog" aria-modal="true">
    <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
        <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
        <div class="inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full sm:p-6">
            <form id="adjustmentForm" method="POST">
                <div>
                    <div class="mt-3 text-center sm:mt-5">
                        <h3 class="text-lg leading-6 font-medium text-gray-900" id="modal-title">
                            New Stock Adjustment
                        </h3>
                    </div>

                    <div class="mt-6">
                        <label for="item" class="block text-sm font-medium text-gray-700">Item</label>
                        <select name="item" id="item" required class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                            <option value="">Select Item</option>
                            <% items.forEach(item => { %>
                            <option value="<%= item._id %>"><%= item.name %> (<%= item.sku %>)</option>
                            <% }); %>
                        </select>
                    </div>

                    <div class="mt-6">
                        <label for="adjustmentType" class="block text-sm font-medium text-gray-700">Adjustment Type</label>
                        <select name="type" id="adjustmentType" required class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                            <option value="addition">Addition</option>
                            <option value="reduction">Reduction</option>
                            <option value="correction">Correction</option>
                            <option value="damage">Damage</option>
                            <option value="loss">Loss</option>
                        </select>
                    </div>

                    <div class="mt-6">
                        <label for="quantity" class="block text-sm font-medium text-gray-700">Quantity</label>
                        <input type="number" name="quantity" id="quantity" required class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                    </div>

                    <div class="mt-6">
                        <label for="reason" class="block text-sm font-medium text-gray-700">Reason</label>
                        <textarea name="reason" id="reason" rows="3" required class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"></textarea>
                    </div>
                </div>

                <div class="mt-5 sm:mt-6 sm:grid sm:grid-cols-2 sm:gap-3 sm:grid-flow-row-dense">
                    <button type="submit" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-indigo-600 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:col-start-2 sm:text-sm">
                        Save Adjustment
                    </button>
                    <button type="button" onclick="hideAdjustmentModal()" class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:col-start-1 sm:text-sm">
                        Cancel
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    // Filter functions
    document.querySelectorAll('select[id^="filter"]').forEach(select => {
        select.addEventListener('change', function() {
            applyFilters();
        });
    });

    function applyFilters() {
        const type = document.getElementById('type').value;
        const category = document.getElementById('category').value;
        const dateRange = document.getElementById('dateRange').value;
        const sort = document.getElementById('sort').value;

        const queryParams = new URLSearchParams({
            type,
            category,
            dateRange,
            sort
        }).toString();

        window.location.href = `/admin/inventory/adjustments?${queryParams}`;
    }

    // Modal functions
    function showAdjustmentModal() {
        document.getElementById('adjustmentForm').reset();
        document.getElementById('adjustmentModal').classList.remove('hidden');
    }

    function hideAdjustmentModal() {
        document.getElementById('adjustmentModal').classList.add('hidden');
    }

    function viewAdjustment(adjustmentId) {
        window.location.href = `/admin/inventory/adjustments/${adjustmentId}`;
    }

    // Form submission
    document.getElementById('adjustmentForm').addEventListener('submit', function(e) {
        e.preventDefault();
        const formData = new FormData(this);
        
        fetch('/admin/inventory/adjustments', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(Object.fromEntries(formData))
        })
        .then(response => {
            if (response.ok) {
                window.location.reload();
            }
        });
    });

    // Close modal when clicking outside
    window.onclick = function(event) {
        let modal = document.getElementById('adjustmentModal');
        if (event.target == modal) {
            hideAdjustmentModal();
        }
    }
</script>

<%- include('../../partials/footer') %>

================
File: src/views/admin/inventory/categories.ejs
================
<%- include('../../partials/header') %>
<%- include('../../partials/admin-nav') %>

<div class="min-h-screen bg-gray-100">
    <div class="py-6">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <!-- Header -->
            <div class="md:flex md:items-center md:justify-between">
                <div class="flex-1 min-w-0">
                    <h2 class="text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate">
                        Inventory Categories
                    </h2>
                </div>
                <div class="mt-4 flex md:mt-0 md:ml-4">
                    <button type="button" onclick="showCreateCategoryModal()" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        Add Category
                    </button>
                </div>
            </div>

            <!-- Stats -->
            <div class="mt-8 grid grid-cols-1 gap-5 sm:grid-cols-3">
                <div class="bg-white overflow-hidden shadow rounded-lg">
                    <div class="p-5">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <svg class="h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                                </svg>
                            </div>
                            <div class="ml-5 w-0 flex-1">
                                <dl>
                                    <dt class="text-sm font-medium text-gray-500 truncate">Total Categories</dt>
                                    <dd class="flex items-baseline">
                                        <div class="text-2xl font-semibold text-gray-900"><%= stats.totalCategories %></div>
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="bg-white overflow-hidden shadow rounded-lg">
                    <div class="p-5">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <svg class="h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />
                                </svg>
                            </div>
                            <div class="ml-5 w-0 flex-1">
                                <dl>
                                    <dt class="text-sm font-medium text-gray-500 truncate">Total Items</dt>
                                    <dd class="flex items-baseline">
                                        <div class="text-2xl font-semibold text-gray-900"><%= stats.totalItems %></div>
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="bg-white overflow-hidden shadow rounded-lg">
                    <div class="p-5">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <svg class="h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                            </div>
                            <div class="ml-5 w-0 flex-1">
                                <dl>
                                    <dt class="text-sm font-medium text-gray-500 truncate">Total Value</dt>
                                    <dd class="flex items-baseline">
                                        <div class="text-2xl font-semibold text-gray-900">$<%= stats.totalValue.toLocaleString() %></div>
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Categories Grid -->
            <div class="mt-8 grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-3">
                <% categories.forEach(category => { %>
                <div class="bg-white overflow-hidden shadow rounded-lg">
                    <div class="p-5">
                        <div class="flex items-center justify-between">
                            <div class="flex-1">
                                <h3 class="text-lg font-medium leading-6 text-gray-900">
                                    <%= category.name %>
                                </h3>
                                <p class="mt-1 text-sm text-gray-500">
                                    <%= category.description %>
                                </p>
                            </div>
                            <div class="ml-4">
                                <div class="relative inline-block text-left" x-data="{ open: false }">
                                    <button type="button" @click="open = !open" class="p-2 -m-2 text-gray-400 hover:text-gray-500">
                                        <span class="sr-only">Open options</span>
                                        <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                                            <path d="M10 6a2 2 0 110-4 2 2 0 010 4zM10 12a2 2 0 110-4 2 2 0 010 4zM10 18a2 2 0 110-4 2 2 0 010 4z" />
                                        </svg>
                                    </button>
                                    <div x-show="open" @click.away="open = false" class="origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 divide-y divide-gray-100">
                                        <div class="py-1">
                                            <button onclick="editCategory('<%= category._id %>')" class="group flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900 w-full text-left">
                                                <svg class="mr-3 h-5 w-5 text-gray-400 group-hover:text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                                </svg>
                                                Edit
                                            </button>
                                            <button onclick="deleteCategory('<%= category._id %>')" class="group flex items-center px-4 py-2 text-sm text-red-700 hover:bg-red-100 hover:text-red-900 w-full text-left">
                                                <svg class="mr-3 h-5 w-5 text-red-400 group-hover:text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                                </svg>
                                                Delete
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="mt-4">
                            <div class="flex justify-between text-sm">
                                <span class="text-gray-500">Items</span>
                                <span class="font-medium text-gray-900"><%= category.itemCount %></span>
                            </div>
                            <div class="flex justify-between text-sm mt-2">
                                <span class="text-gray-500">Total Value</span>
                                <span class="font-medium text-gray-900">$<%= category.totalValue.toLocaleString() %></span>
                            </div>
                            <div class="mt-4">
                                <a href="/admin/inventory?category=<%= category._id %>" class="inline-flex items-center px-2.5 py-1.5 border border-transparent text-xs font-medium rounded text-indigo-700 bg-indigo-100 hover:bg-indigo-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                    View Items
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
                <% }); %>
            </div>
        </div>
    </div>
</div>

<!-- Create/Edit Category Modal -->
<div id="categoryModal" class="fixed z-10 inset-0 overflow-y-auto hidden" aria-labelledby="modal-title" role="dialog" aria-modal="true">
    <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
        <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
        <div class="inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full sm:p-6">
            <form id="categoryForm" method="POST">
                <div>
                    <div class="mt-3 text-center sm:mt-5">
                        <h3 class="text-lg leading-6 font-medium text-gray-900" id="modal-title">
                            Create Category
                        </h3>
                    </div>

                    <div class="mt-6">
                        <label for="name" class="block text-sm font-medium text-gray-700">Name</label>
                        <input type="text" name="name" id="name" required class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                    </div>

                    <div class="mt-6">
                        <label for="description" class="block text-sm font-medium text-gray-700">Description</label>
                        <textarea name="description" id="description" rows="3" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"></textarea>
                    </div>

                    <div class="mt-6">
                        <label for="parentCategory" class="block text-sm font-medium text-gray-700">Parent Category (Optional)</label>
                        <select name="parentCategory" id="parentCategory" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                            <option value="">None</option>
                            <% categories.forEach(category => { %>
                            <option value="<%= category._id %>"><%= category.name %></option>
                            <% }); %>
                        </select>
                    </div>
                </div>

                <div class="mt-5 sm:mt-6 sm:grid sm:grid-cols-2 sm:gap-3 sm:grid-flow-row-dense">
                    <button type="submit" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-indigo-600 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:col-start-2 sm:text-sm">
                        Save
                    </button>
                    <button type="button" onclick="hideCategoryModal()" class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:col-start-1 sm:text-sm">
                        Cancel
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    function showCreateCategoryModal() {
        document.getElementById('modal-title').textContent = 'Create Category';
        document.getElementById('categoryForm').reset();
        document.getElementById('categoryForm').action = '/admin/inventory/categories';
        document.getElementById('categoryModal').classList.remove('hidden');
    }

    function editCategory(categoryId) {
        fetch(`/admin/inventory/categories/${categoryId}`)
            .then(response => response.json())
            .then(category => {
                document.getElementById('modal-title').textContent = 'Edit Category';
                document.getElementById('name').value = category.name;
                document.getElementById('description').value = category.description;
                document.getElementById('parentCategory').value = category.parentCategory || '';
                document.getElementById('categoryForm').action = `/admin/inventory/categories/${categoryId}`;
                document.getElementById('categoryModal').classList.remove('hidden');
            });
    }

    function hideCategoryModal() {
        document.getElementById('categoryModal').classList.add('hidden');
    }

    function deleteCategory(categoryId) {
        if (confirm('Are you sure you want to delete this category? This will not delete the items in this category.')) {
            fetch(`/admin/inventory/categories/${categoryId}`, {
                method: 'DELETE'
            })
            .then(response => {
                if (response.ok) {
                    window.location.reload();
                }
            });
        }
    }

    // Close modals when clicking outside
    window.onclick = function(event) {
        let modal = document.getElementById('categoryModal');
        if (event.target == modal) {
            hideCategoryModal();
        }
    }
</script>

<%- include('../../partials/footer') %>

================
File: src/views/admin/inventory/dashboard.hbs
================
{{> header}}

<div class="container-fluid py-4">
    <!-- Inventory Stats -->
    <div class="row">
        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Total Items</p>
                                <h5 class="font-weight-bolder">{{stats.totalItems}}</h5>
                                <p class="mb-0 text-sm">
                                    <span class="text-{{stats.itemsTrend.color}} text-sm font-weight-bolder">{{stats.itemsTrend.value}}%</span>
                                    vs last month
                                </p>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-primary shadow-primary text-center rounded-circle">
                                <i class="ni ni-box-2 text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Total Value</p>
                                <h5 class="font-weight-bolder">{{formatCurrency stats.totalValue}}</h5>
                                <p class="mb-0 text-sm">
                                    <span class="text-{{stats.valueTrend.color}} text-sm font-weight-bolder">{{stats.valueTrend.value}}%</span>
                                    vs last month
                                </p>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-success shadow-success text-center rounded-circle">
                                <i class="ni ni-money-coins text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Low Stock Items</p>
                                <h5 class="font-weight-bolder text-warning">{{stats.lowStockItems}}</h5>
                                <p class="mb-0 text-sm">
                                    <span class="text-danger text-sm font-weight-bolder">{{stats.outOfStockItems}}</span>
                                    out of stock
                                </p>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-warning shadow-warning text-center rounded-circle">
                                <i class="ni ni-notification-70 text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Stock Movement</p>
                                <h5 class="font-weight-bolder">{{stats.stockMovement}}</h5>
                                <p class="mb-0 text-sm">
                                    <span class="text-success text-sm font-weight-bolder">{{stats.stockMovementTrend}}%</span>
                                    this week
                                </p>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-info shadow-info text-center rounded-circle">
                                <i class="ni ni-chart-bar-32 text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Low Stock Alerts -->
    <div class="row mt-4">
        <div class="col-lg-8 mb-4">
            <div class="card">
                <div class="card-header pb-0">
                    <div class="d-flex justify-content-between align-items-center">
                        <h6>Low Stock Alerts</h6>
                        <button class="btn btn-primary btn-sm" onclick="generatePurchaseOrders()">
                            Generate Purchase Orders
                        </button>
                    </div>
                </div>
                <div class="card-body px-0 pt-0 pb-2">
                    <div class="table-responsive p-0">
                        <table class="table align-items-center mb-0">
                            <thead>
                                <tr>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Item</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Current Stock</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Minimum Stock</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Reorder Point</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Supplier</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{#each lowStockItems}}
                                <tr>
                                    <td>
                                        <div class="d-flex px-3 py-1">
                                            <div class="d-flex flex-column justify-content-center">
                                                <h6 class="mb-0 text-sm">{{name}}</h6>
                                                <p class="text-xs text-secondary mb-0">{{sku}}</p>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <span class="text-sm font-weight-bold {{#if (eq status 'out_of_stock')}}text-danger{{else}}text-warning{{/if}}">
                                            {{currentStock}} {{unit}}
                                        </span>
                                    </td>
                                    <td>
                                        <span class="text-sm font-weight-bold">{{minimumStock}} {{unit}}</span>
                                    </td>
                                    <td>
                                        <span class="text-sm font-weight-bold">{{reorderPoint}} {{unit}}</span>
                                    </td>
                                    <td>
                                        <div class="d-flex flex-column">
                                            <h6 class="mb-0 text-sm">{{supplier.name}}</h6>
                                            <p class="text-xs text-secondary mb-0">Lead time: {{supplier.leadTime}} days</p>
                                        </div>
                                    </td>
                                    <td>
                                        <button class="btn btn-link text-primary mb-0" onclick="reorderItem('{{_id}}')">
                                            <i class="fas fa-shopping-cart fa-fw"></i> Reorder
                                        </button>
                                    </td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <!-- Stock Movement Chart -->
        <div class="col-lg-4 mb-4">
            <div class="card">
                <div class="card-header pb-0">
                    <h6>Stock Movement</h6>
                </div>
                <div class="card-body">
                    <canvas id="stockMovementChart" class="chart-canvas" height="300"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- Inventory Items -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header pb-0">
                    <div class="d-flex justify-content-between align-items-center">
                        <h6>Inventory Items</h6>
                        <div>
                            <button class="btn btn-success btn-sm me-2" onclick="exportInventory()">
                                <i class="fas fa-file-export"></i> Export
                            </button>
                            <button class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#newItemModal">
                                <i class="fas fa-plus"></i> New Item
                            </button>
                        </div>
                    </div>
                    <!-- Filters -->
                    <div class="row mt-3">
                        <div class="col-md-3">
                            <select class="form-control" id="categoryFilter" onchange="filterInventory()">
                                <option value="">All Categories</option>
                                <option value="amenities">Amenities</option>
                                <option value="supplies">Supplies</option>
                                <option value="equipment">Equipment</option>
                                <option value="furniture">Furniture</option>
                                <option value="linens">Linens</option>
                                <option value="cleaning">Cleaning</option>
                                <option value="food_beverage">Food & Beverage</option>
                                <option value="other">Other</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <select class="form-control" id="statusFilter" onchange="filterInventory()">
                                <option value="">All Status</option>
                                <option value="in_stock">In Stock</option>
                                <option value="low_stock">Low Stock</option>
                                <option value="out_of_stock">Out of Stock</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <input type="text" class="form-control" id="searchFilter" placeholder="Search items..." onkeyup="filterInventory()">
                        </div>
                    </div>
                </div>
                <div class="card-body px-0 pt-0 pb-2">
                    <div class="table-responsive p-0">
                        <table class="table align-items-center mb-0">
                            <thead>
                                <tr>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Item</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Category</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Stock</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Value</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Last Restocked</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Status</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{#each items}}
                                <tr>
                                    <td>
                                        <div class="d-flex px-3 py-1">
                                            <div class="d-flex flex-column justify-content-center">
                                                <h6 class="mb-0 text-sm">{{name}}</h6>
                                                <p class="text-xs text-secondary mb-0">SKU: {{sku}}</p>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <span class="text-sm font-weight-bold">{{formatCategory category}}</span>
                                    </td>
                                    <td>
                                        <div class="d-flex flex-column">
                                            <span class="text-sm font-weight-bold">{{currentStock}} {{unit}}</span>
                                            <span class="text-xs text-secondary">Min: {{minimumStock}}</span>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="d-flex flex-column">
                                            <span class="text-sm font-weight-bold">{{formatCurrency totalValue}}</span>
                                            <span class="text-xs text-secondary">@{{formatCurrency cost}}/{{unit}}</span>
                                        </div>
                                    </td>
                                    <td>
                                        <span class="text-sm font-weight-bold">{{formatDate lastRestocked}}</span>
                                    </td>
                                    <td>
                                        <span class="badge badge-sm bg-gradient-{{statusColor status}}">{{status}}</span>
                                    </td>
                                    <td>
                                        <div class="btn-group">
                                            <button class="btn btn-link text-secondary mb-0" onclick="viewStockHistory('{{_id}}')">
                                                <i class="fas fa-history fa-fw"></i>
                                            </button>
                                            <button class="btn btn-link text-secondary mb-0" onclick="adjustStock('{{_id}}')">
                                                <i class="fas fa-plus-minus fa-fw"></i>
                                            </button>
                                            <button class="btn btn-link text-secondary mb-0" onclick="editItem('{{_id}}')">
                                                <i class="fas fa-edit fa-fw"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- New Item Modal -->
<div class="modal fade" id="newItemModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">New Inventory Item</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="newItemForm">
                    <div class="form-group">
                        <label>Name</label>
                        <input type="text" class="form-control" name="name" required>
                    </div>
                    <div class="form-group">
                        <label>Category</label>
                        <select class="form-control" name="category" required>
                            <option value="amenities">Amenities</option>
                            <option value="supplies">Supplies</option>
                            <option value="equipment">Equipment</option>
                            <option value="furniture">Furniture</option>
                            <option value="linens">Linens</option>
                            <option value="cleaning">Cleaning</option>
                            <option value="food_beverage">Food & Beverage</option>
                            <option value="other">Other</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>SKU</label>
                        <input type="text" class="form-control" name="sku" required>
                    </div>
                    <div class="form-group">
                        <label>Description</label>
                        <textarea class="form-control" name="description"></textarea>
                    </div>
                    <div class="form-group">
                        <label>Unit</label>
                        <input type="text" class="form-control" name="unit" required>
                    </div>
                    <div class="form-group">
                        <label>Current Stock</label>
                        <input type="number" class="form-control" name="currentStock" required min="0">
                    </div>
                    <div class="form-group">
                        <label>Minimum Stock</label>
                        <input type="number" class="form-control" name="minimumStock" required min="0">
                    </div>
                    <div class="form-group">
                        <label>Reorder Point</label>
                        <input type="number" class="form-control" name="reorderPoint" required min="0">
                    </div>
                    <div class="form-group">
                        <label>Cost per Unit</label>
                        <input type="number" class="form-control" name="cost" required min="0" step="0.01">
                    </div>
                    <div class="form-group">
                        <label>Location</label>
                        <input type="text" class="form-control" name="location" required>
                    </div>
                    <div class="form-group">
                        <label>Supplier</label>
                        <input type="text" class="form-control" name="supplier.name" required>
                    </div>
                    <div class="form-group">
                        <label>Supplier Contact Person</label>
                        <input type="text" class="form-control" name="supplier.contactPerson">
                    </div>
                    <div class="form-group">
                        <label>Supplier Email</label>
                        <input type="email" class="form-control" name="supplier.email">
                    </div>
                    <div class="form-group">
                        <label>Supplier Phone</label>
                        <input type="text" class="form-control" name="supplier.phone">
                    </div>
                    <div class="form-group">
                        <label>Lead Time (days)</label>
                        <input type="number" class="form-control" name="supplier.leadTime" min="0">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="createItem()">Create Item</button>
            </div>
        </div>
    </div>
</div>

<!-- Stock History Modal -->
<div class="modal fade" id="stockHistoryModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Stock History</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="stockHistoryContent"></div>
            </div>
        </div>
    </div>
</div>

<!-- Adjust Stock Modal -->
<div class="modal fade" id="adjustStockModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Adjust Stock</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="adjustStockForm">
                    <input type="hidden" name="itemId">
                    <div class="form-group">
                        <label>Action</label>
                        <select class="form-control" name="action" required>
                            <option value="add">Add Stock</option>
                            <option value="remove">Remove Stock</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Quantity</label>
                        <input type="number" class="form-control" name="quantity" required min="1">
                    </div>
                    <div class="form-group">
                        <label>Reason</label>
                        <textarea class="form-control" name="reason" required></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="submitStockAdjustment()">Submit</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
// Initialize stock movement chart
const ctx = document.getElementById('stockMovementChart').getContext('2d');
new Chart(ctx, {
    type: 'bar',
    data: {
        labels: {{{json chartData.labels}}},
        datasets: [
            {
                label: 'Stock In',
                data: {{{json chartData.stockIn}}},
                backgroundColor: '#2dce89'
            },
            {
                label: 'Stock Out',
                data: {{{json chartData.stockOut}}},
                backgroundColor: '#f5365c'
            }
        ]
    },
    options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
            legend: {
                position: 'top'
            }
        },
        scales: {
            y: {
                beginAtZero: true
            }
        }
    }
});

function filterInventory() {
    const category = document.getElementById('categoryFilter').value;
    const status = document.getElementById('statusFilter').value;
    const search = document.getElementById('searchFilter').value;
    
    window.location.href = `/inventory?category=${category}&status=${status}&search=${search}`;
}

async function createItem() {
    try {
        const form = document.getElementById('newItemForm');
        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());

        const response = await fetch('/api/inventory', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });

        if (response.ok) {
            window.location.reload();
        } else {
            alert('Error creating item');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error creating item');
    }
}

async function viewStockHistory(itemId) {
    try {
        const response = await fetch(`/api/inventory/${itemId}/history`);
        const history = await response.json();

        const content = document.getElementById('stockHistoryContent');
        content.innerHTML = `
            <div class="table-responsive">
                <table class="table align-items-center mb-0">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Type</th>
                            <th>Quantity</th>
                            <th>Reason</th>
                            <th>Performed By</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${history.map(record => `
                            <tr>
                                <td>${formatDate(record.date)}</td>
                                <td>
                                    <span class="badge badge-sm bg-gradient-${record.type === 'in' ? 'success' : 'danger'}">
                                        ${record.type === 'in' ? 'Stock In' : 'Stock Out'}
                                    </span>
                                </td>
                                <td>${record.quantity}</td>
                                <td>${record.reason}</td>
                                <td>${record.performedBy.name}</td>
                            </tr>
                        `).join('')}
                    </tbody>
                </table>
            </div>
        `;

        $('#stockHistoryModal').modal('show');
    } catch (error) {
        console.error('Error:', error);
        alert('Error fetching stock history');
    }
}

function adjustStock(itemId) {
    document.querySelector('#adjustStockForm input[name="itemId"]').value = itemId;
    $('#adjustStockModal').modal('show');
}

async function submitStockAdjustment() {
    try {
        const form = document.getElementById('adjustStockForm');
        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());

        const endpoint = data.action === 'add' ? 'add-stock' : 'remove-stock';
        const response = await fetch(`/api/inventory/${data.itemId}/${endpoint}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                quantity: parseInt(data.quantity),
                reason: data.reason
            })
        });

        if (response.ok) {
            window.location.reload();
        } else {
            alert('Error adjusting stock');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error adjusting stock');
    }
}

function editItem(id) {
    // Implement edit item functionality
}

function exportInventory() {
    window.location.href = '/api/inventory/export';
}

function generatePurchaseOrders() {
    window.location.href = '/api/inventory/generate-purchase-orders';
}

// Helper function to format dates
function formatDate(date) {
    return new Date(date).toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
}
</script>

{{> footer}}

================
File: src/views/admin/inventory/index.ejs
================
<%- include('../../partials/header') %>
<%- include('../../partials/admin-nav') %>

<div class="min-h-screen bg-gray-100">
    <div class="py-6">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <!-- Header -->
            <div class="md:flex md:items-center md:justify-between">
                <div class="flex-1 min-w-0">
                    <h2 class="text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate">
                        Inventory Management
                    </h2>
                </div>
                <div class="mt-4 flex md:mt-0 md:ml-4 space-x-2">
                    <button type="button" onclick="showAddItemModal()" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        Add Item
                    </button>
                    <button type="button" onclick="showCreateOrderModal()" class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        Create Order
                    </button>
                </div>
            </div>

            <!-- Stats -->
            <div class="mt-8 grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4">
                <div class="bg-white overflow-hidden shadow rounded-lg">
                    <div class="p-5">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <svg class="h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4" />
                                </svg>
                            </div>
                            <div class="ml-5 w-0 flex-1">
                                <dl>
                                    <dt class="text-sm font-medium text-gray-500 truncate">Total Items</dt>
                                    <dd class="flex items-baseline">
                                        <div class="text-2xl font-semibold text-gray-900"><%= stats.totalItems %></div>
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="bg-white overflow-hidden shadow rounded-lg">
                    <div class="p-5">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <svg class="h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                            </div>
                            <div class="ml-5 w-0 flex-1">
                                <dl>
                                    <dt class="text-sm font-medium text-gray-500 truncate">Low Stock Items</dt>
                                    <dd class="flex items-baseline">
                                        <div class="text-2xl font-semibold text-gray-900"><%= stats.lowStockItems %></div>
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="bg-white overflow-hidden shadow rounded-lg">
                    <div class="p-5">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <svg class="h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                                </svg>
                            </div>
                            <div class="ml-5 w-0 flex-1">
                                <dl>
                                    <dt class="text-sm font-medium text-gray-500 truncate">Pending Orders</dt>
                                    <dd class="flex items-baseline">
                                        <div class="text-2xl font-semibold text-gray-900"><%= stats.pendingOrders %></div>
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="bg-white overflow-hidden shadow rounded-lg">
                    <div class="p-5">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <svg class="h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                            </div>
                            <div class="ml-5 w-0 flex-1">
                                <dl>
                                    <dt class="text-sm font-medium text-gray-500 truncate">Total Value</dt>
                                    <dd class="flex items-baseline">
                                        <div class="text-2xl font-semibold text-gray-900">$<%= stats.totalValue.toLocaleString() %></div>
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Filters -->
            <div class="mt-8 bg-white shadow sm:rounded-lg">
                <div class="px-4 py-5 sm:p-6">
                    <div class="grid grid-cols-1 gap-4 sm:grid-cols-4">
                        <div>
                            <label for="category" class="block text-sm font-medium text-gray-700">Category</label>
                            <select id="category" name="category" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                                <option value="">All Categories</option>
                                <% categories.forEach(category => { %>
                                <option value="<%= category._id %>"><%= category.name %></option>
                                <% }); %>
                            </select>
                        </div>

                        <div>
                            <label for="supplier" class="block text-sm font-medium text-gray-700">Supplier</label>
                            <select id="supplier" name="supplier" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                                <option value="">All Suppliers</option>
                                <% suppliers.forEach(supplier => { %>
                                <option value="<%= supplier._id %>"><%= supplier.name %></option>
                                <% }); %>
                            </select>
                        </div>

                        <div>
                            <label for="stock" class="block text-sm font-medium text-gray-700">Stock Level</label>
                            <select id="stock" name="stock" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                                <option value="">All Levels</option>
                                <option value="low">Low Stock</option>
                                <option value="normal">Normal</option>
                                <option value="high">High Stock</option>
                            </select>
                        </div>

                        <div>
                            <label for="sort" class="block text-sm font-medium text-gray-700">Sort By</label>
                            <select id="sort" name="sort" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                                <option value="name">Name</option>
                                <option value="stock_asc">Stock: Low to High</option>
                                <option value="stock_desc">Stock: High to Low</option>
                                <option value="value">Value</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Inventory Table -->
            <div class="mt-8 flex flex-col">
                <div class="-my-2 -mx-4 overflow-x-auto sm:-mx-6 lg:-mx-8">
                    <div class="inline-block min-w-full py-2 align-middle md:px-6 lg:px-8">
                        <div class="overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg">
                            <table class="min-w-full divide-y divide-gray-300">
                                <thead class="bg-gray-50">
                                    <tr>
                                        <th scope="col" class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6">Item</th>
                                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Category</th>
                                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Stock</th>
                                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Unit Price</th>
                                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Value</th>
                                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Last Updated</th>
                                        <th scope="col" class="relative py-3.5 pl-3 pr-4 sm:pr-6">
                                            <span class="sr-only">Actions</span>
                                        </th>
                                    </tr>
                                </thead>
                                <tbody class="divide-y divide-gray-200 bg-white">
                                    <% items.forEach(item => { %>
                                    <tr>
                                        <td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm sm:pl-6">
                                            <div class="flex items-center">
                                                <div class="h-10 w-10 flex-shrink-0">
                                                    <img class="h-10 w-10 rounded-full" src="<%= item.image || '/images/default-item.png' %>" alt="">
                                                </div>
                                                <div class="ml-4">
                                                    <div class="font-medium text-gray-900"><%= item.name %></div>
                                                    <div class="text-gray-500"><%= item.sku %></div>
                                                </div>
                                            </div>
                                        </td>
                                        <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                            <%= item.category.name %>
                                        </td>
                                        <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                            <span class="inline-flex rounded-full px-2 text-xs font-semibold leading-5 <%= item.stock <= item.minStock ? 'bg-red-100 text-red-800' : item.stock <= item.minStock * 2 ? 'bg-yellow-100 text-yellow-800' : 'bg-green-100 text-green-800' %>">
                                                <%= item.stock %> <%= item.unit %>
                                            </span>
                                        </td>
                                        <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                            $<%= item.unitPrice.toFixed(2) %>
                                        </td>
                                        <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                            $<%= (item.stock * item.unitPrice).toFixed(2) %>
                                        </td>
                                        <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                            <%= moment(item.updatedAt).format('MMM D, YYYY') %>
                                        </td>
                                        <td class="relative whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-6">
                                            <button onclick="editItem('<%= item._id %>')" class="text-indigo-600 hover:text-indigo-900 mr-3">Edit</button>
                                            <button onclick="showStockModal('<%= item._id %>')" class="text-green-600 hover:text-green-900">Stock</button>
                                        </td>
                                    </tr>
                                    <% }); %>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add/Edit Item Modal -->
<div id="itemModal" class="fixed z-10 inset-0 overflow-y-auto hidden" aria-labelledby="modal-title" role="dialog" aria-modal="true">
    <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
        <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
        <div class="inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full sm:p-6">
            <form id="itemForm" method="POST">
                <div class="space-y-6">
                    <div>
                        <h3 class="text-lg leading-6 font-medium text-gray-900" id="modal-title">Add New Item</h3>
                        <p class="mt-1 text-sm text-gray-500">Enter the item details below.</p>
                    </div>

                    <div>
                        <label for="name" class="block text-sm font-medium text-gray-700">Name</label>
                        <input type="text" name="name" id="name" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" required>
                    </div>

                    <div>
                        <label for="sku" class="block text-sm font-medium text-gray-700">SKU</label>
                        <input type="text" name="sku" id="sku" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" required>
                    </div>

                    <div>
                        <label for="category" class="block text-sm font-medium text-gray-700">Category</label>
                        <select name="category" id="category" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md" required>
                            <% categories.forEach(category => { %>
                            <option value="<%= category._id %>"><%= category.name %></option>
                            <% }); %>
                        </select>
                    </div>

                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label for="stock" class="block text-sm font-medium text-gray-700">Current Stock</label>
                            <input type="number" name="stock" id="stock" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" required>
                        </div>
                        <div>
                            <label for="minStock" class="block text-sm font-medium text-gray-700">Minimum Stock</label>
                            <input type="number" name="minStock" id="minStock" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" required>
                        </div>
                    </div>

                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label for="unitPrice" class="block text-sm font-medium text-gray-700">Unit Price</label>
                            <div class="mt-1 relative rounded-md shadow-sm">
                                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                    <span class="text-gray-500 sm:text-sm">$</span>
                                </div>
                                <input type="number" step="0.01" name="unitPrice" id="unitPrice" class="focus:ring-indigo-500 focus:border-indigo-500 block w-full pl-7 pr-12 sm:text-sm border-gray-300 rounded-md" required>
                            </div>
                        </div>
                        <div>
                            <label for="unit" class="block text-sm font-medium text-gray-700">Unit</label>
                            <input type="text" name="unit" id="unit" placeholder="e.g., pcs, kg, l" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" required>
                        </div>
                    </div>

                    <div>
                        <label for="supplier" class="block text-sm font-medium text-gray-700">Supplier</label>
                        <select name="supplier" id="supplier" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md" required>
                            <% suppliers.forEach(supplier => { %>
                            <option value="<%= supplier._id %>"><%= supplier.name %></option>
                            <% }); %>
                        </select>
                    </div>

                    <div>
                        <label for="image" class="block text-sm font-medium text-gray-700">Image URL</label>
                        <input type="url" name="image" id="image" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                    </div>
                </div>

                <div class="mt-5 sm:mt-6 sm:grid sm:grid-cols-2 sm:gap-3 sm:grid-flow-row-dense">
                    <button type="submit" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-indigo-600 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:col-start-2 sm:text-sm">
                        Save
                    </button>
                    <button type="button" onclick="hideItemModal()" class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:col-start-1 sm:text-sm">
                        Cancel
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Stock Adjustment Modal -->
<div id="stockModal" class="fixed z-10 inset-0 overflow-y-auto hidden" aria-labelledby="modal-title" role="dialog" aria-modal="true">
    <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
        <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
        <div class="inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full sm:p-6">
            <form id="stockForm" method="POST">
                <div>
                    <h3 class="text-lg leading-6 font-medium text-gray-900">Adjust Stock Level</h3>
                    <div class="mt-2">
                        <p class="text-sm text-gray-500">
                            Current stock: <span id="currentStock">0</span> <span id="stockUnit">units</span>
                        </p>
                    </div>

                    <div class="mt-4">
                        <label for="adjustmentType" class="block text-sm font-medium text-gray-700">Adjustment Type</label>
                        <select name="adjustmentType" id="adjustmentType" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                            <option value="add">Add Stock</option>
                            <option value="remove">Remove Stock</option>
                        </select>
                    </div>

                    <div class="mt-4">
                        <label for="quantity" class="block text-sm font-medium text-gray-700">Quantity</label>
                        <input type="number" name="quantity" id="quantity" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" required>
                    </div>

                    <div class="mt-4">
                        <label for="reason" class="block text-sm font-medium text-gray-700">Reason</label>
                        <textarea name="reason" id="reason" rows="3" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"></textarea>
                    </div>
                </div>

                <div class="mt-5 sm:mt-6 sm:grid sm:grid-cols-2 sm:gap-3 sm:grid-flow-row-dense">
                    <button type="submit" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-indigo-600 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:col-start-2 sm:text-sm">
                        Confirm
                    </button>
                    <button type="button" onclick="hideStockModal()" class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:col-start-1 sm:text-sm">
                        Cancel
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    // Modal Functions
    function showAddItemModal() {
        document.getElementById('modal-title').textContent = 'Add New Item';
        document.getElementById('itemForm').reset();
        document.getElementById('itemForm').action = '/admin/inventory';
        document.getElementById('itemModal').classList.remove('hidden');
    }

    function hideItemModal() {
        document.getElementById('itemModal').classList.add('hidden');
    }

    function editItem(itemId) {
        fetch(`/admin/inventory/${itemId}`)
            .then(response => response.json())
            .then(item => {
                document.getElementById('modal-title').textContent = 'Edit Item';
                document.getElementById('name').value = item.name;
                document.getElementById('sku').value = item.sku;
                document.getElementById('category').value = item.category;
                document.getElementById('stock').value = item.stock;
                document.getElementById('minStock').value = item.minStock;
                document.getElementById('unitPrice').value = item.unitPrice;
                document.getElementById('unit').value = item.unit;
                document.getElementById('supplier').value = item.supplier;
                document.getElementById('image').value = item.image;
                document.getElementById('itemForm').action = `/admin/inventory/${itemId}`;
                document.getElementById('itemModal').classList.remove('hidden');
            });
    }

    function showStockModal(itemId) {
        fetch(`/admin/inventory/${itemId}`)
            .then(response => response.json())
            .then(item => {
                document.getElementById('currentStock').textContent = item.stock;
                document.getElementById('stockUnit').textContent = item.unit;
                document.getElementById('stockForm').action = `/admin/inventory/${itemId}/stock`;
                document.getElementById('stockModal').classList.remove('hidden');
            });
    }

    function hideStockModal() {
        document.getElementById('stockModal').classList.add('hidden');
    }

    // Filter Functions
    document.querySelectorAll('select[id^="filter"]').forEach(select => {
        select.addEventListener('change', function() {
            applyFilters();
        });
    });

    function applyFilters() {
        const category = document.getElementById('category').value;
        const supplier = document.getElementById('supplier').value;
        const stock = document.getElementById('stock').value;
        const sort = document.getElementById('sort').value;

        const queryParams = new URLSearchParams({
            category,
            supplier,
            stock,
            sort
        }).toString();

        window.location.href = `/admin/inventory?${queryParams}`;
    }
</script>

<%- include('../../partials/footer') %>

================
File: src/views/admin/inventory/list.hbs
================
{{> admin/header}}

<div class="container-fluid py-4">
    <!-- Statistics Cards -->
    <div class="row mb-4">
        <div class="col-xl-3 col-sm-6 mb-xl-0 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">In Stock</p>
                                <h5 class="font-weight-bolder mb-0">
                                    {{stats.inStock}}
                                </h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-success text-center">
                                <i class="fas fa-box opacity-10"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-sm-6 mb-xl-0 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Low Stock</p>
                                <h5 class="font-weight-bolder mb-0">
                                    {{stats.lowStock}}
                                </h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-warning text-center">
                                <i class="fas fa-exclamation-triangle opacity-10"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-sm-6 mb-xl-0 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Out of Stock</p>
                                <h5 class="font-weight-bolder mb-0">
                                    {{stats.outOfStock}}
                                </h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-danger text-center">
                                <i class="fas fa-times opacity-10"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-sm-6">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Total Value</p>
                                <h5 class="font-weight-bolder mb-0">
                                    ${{formatNumber stats.totalValue}}
                                </h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-primary text-center">
                                <i class="fas fa-dollar-sign opacity-10"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters and Actions -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col-md-8">
                            <form action="/admin/inventory" method="GET" class="row g-3">
                                <div class="col-md-3">
                                    <select name="hotel" class="form-select">
                                        <option value="">All Hotels</option>
                                        {{#each hotels}}
                                        <option value="{{this._id}}" {{#if (eq ../query.hotel this._id)}}selected{{/if}}>
                                            {{this.name}}
                                        </option>
                                        {{/each}}
                                    </select>
                                </div>
                                <div class="col-md-2">
                                    <select name="category" class="form-select">
                                        <option value="">All Categories</option>
                                        <option value="amenities" {{#if (eq query.category "amenities")}}selected{{/if}}>Amenities</option>
                                        <option value="cleaning" {{#if (eq query.category "cleaning")}}selected{{/if}}>Cleaning</option>
                                        <option value="linens" {{#if (eq query.category "linens")}}selected{{/if}}>Linens</option>
                                        <option value="toiletries" {{#if (eq query.category "toiletries")}}selected{{/if}}>Toiletries</option>
                                        <option value="food_beverage" {{#if (eq query.category "food_beverage")}}selected{{/if}}>Food & Beverage</option>
                                        <option value="maintenance" {{#if (eq query.category "maintenance")}}selected{{/if}}>Maintenance</option>
                                        <option value="office" {{#if (eq query.category "office")}}selected{{/if}}>Office</option>
                                        <option value="other" {{#if (eq query.category "other")}}selected{{/if}}>Other</option>
                                    </select>
                                </div>
                                <div class="col-md-2">
                                    <select name="status" class="form-select">
                                        <option value="">All Status</option>
                                        <option value="in_stock" {{#if (eq query.status "in_stock")}}selected{{/if}}>In Stock</option>
                                        <option value="low_stock" {{#if (eq query.status "low_stock")}}selected{{/if}}>Low Stock</option>
                                        <option value="out_of_stock" {{#if (eq query.status "out_of_stock")}}selected{{/if}}>Out of Stock</option>
                                    </select>
                                </div>
                                <div class="col-md-3">
                                    <input type="text" name="search" class="form-control" placeholder="Search items..." value="{{query.search}}">
                                </div>
                                <div class="col-md-2">
                                    <button type="submit" class="btn btn-primary w-100">
                                        <i class="fas fa-filter me-2"></i>Filter
                                    </button>
                                </div>
                            </form>
                        </div>
                        <div class="col-md-4 text-end">
                            <button class="btn btn-success me-2" onclick="exportInventory()">
                                <i class="fas fa-file-excel me-2"></i>Export
                            </button>
                            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addItemModal">
                                <i class="fas fa-plus me-2"></i>Add Item
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Inventory List -->
    <div class="card">
        <div class="table-responsive">
            <table class="table align-items-center mb-0">
                <thead>
                    <tr>
                        <th>Item</th>
                        <th>Hotel</th>
                        <th>Category</th>
                        <th>Current Stock</th>
                        <th>Min. Stock</th>
                        <th>Unit</th>
                        <th>Value</th>
                        <th>Status</th>
                        <th>Last Restocked</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {{#each items}}
                    <tr>
                        <td>
                            <div class="d-flex px-2 py-1">
                                <div>
                                    <h6 class="mb-0">{{this.name}}</h6>
                                    <p class="text-xs text-secondary mb-0">{{this.description}}</p>
                                </div>
                            </div>
                        </td>
                        <td>{{this.hotel.name}}</td>
                        <td>{{formatCategory this.category}}</td>
                        <td>{{this.currentStock}} {{this.unit}}</td>
                        <td>{{this.minimumStock}} {{this.unit}}</td>
                        <td>{{this.unit}}</td>
                        <td>${{formatNumber (multiply this.currentStock this.cost)}}</td>
                        <td>
                            <span class="badge bg-{{statusColor this.status}}">
                                {{formatStatus this.status}}
                            </span>
                        </td>
                        <td>{{formatDate this.lastRestocked}}</td>
                        <td>
                            <button class="btn btn-sm btn-info me-2" onclick="viewItem('{{this._id}}')">
                                <i class="fas fa-eye"></i>
                            </button>
                            <button class="btn btn-sm btn-primary me-2" onclick="restockItem('{{this._id}}')">
                                <i class="fas fa-plus"></i>
                            </button>
                            <button class="btn btn-sm btn-warning" onclick="editItem('{{this._id}}')">
                                <i class="fas fa-edit"></i>
                            </button>
                        </td>
                    </tr>
                    {{/each}}
                </tbody>
            </table>
        </div>

        <!-- Pagination -->
        {{#if pagination.totalPages}}
        <div class="card-footer py-3">
            <nav>
                <ul class="pagination justify-content-center mb-0">
                    {{#if pagination.hasPrev}}
                    <li class="page-item">
                        <a class="page-link" href="?page={{subtract pagination.page 1}}{{#if query.hotel}}&hotel={{query.hotel}}{{/if}}{{#if query.category}}&category={{query.category}}{{/if}}{{#if query.status}}&status={{query.status}}{{/if}}{{#if query.search}}&search={{query.search}}{{/if}}">
                            Previous
                        </a>
                    </li>
                    {{/if}}
                    {{#if pagination.hasNext}}
                    <li class="page-item">
                        <a class="page-link" href="?page={{add pagination.page 1}}{{#if query.hotel}}&hotel={{query.hotel}}{{/if}}{{#if query.category}}&category={{query.category}}{{/if}}{{#if query.status}}&status={{query.status}}{{/if}}{{#if query.search}}&search={{query.search}}{{/if}}">
                            Next
                        </a>
                    </li>
                    {{/if}}
                </ul>
            </nav>
        </div>
        {{/if}}
    </div>
</div>

<!-- Add Item Modal -->
<div class="modal fade" id="addItemModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Inventory Item</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="addItemForm">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Item Name</label>
                            <input type="text" name="name" class="form-control" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Category</label>
                            <select name="category" class="form-select" required>
                                <option value="amenities">Amenities</option>
                                <option value="cleaning">Cleaning Supplies</option>
                                <option value="linens">Linens</option>
                                <option value="toiletries">Toiletries</option>
                                <option value="food_beverage">Food & Beverage</option>
                                <option value="maintenance">Maintenance</option>
                                <option value="office">Office Supplies</option>
                                <option value="other">Other</option>
                            </select>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea name="description" class="form-control" rows="2"></textarea>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Hotel</label>
                            <select name="hotel" class="form-select" required>
                                {{#each hotels}}
                                <option value="{{this._id}}">{{this.name}}</option>
                                {{/each}}
                            </select>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Unit</label>
                            <input type="text" name="unit" class="form-control" required placeholder="e.g., pieces, boxes, kg">
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4 mb-3">
                            <label class="form-label">Current Stock</label>
                            <input type="number" name="currentStock" class="form-control" required min="0">
                        </div>
                        <div class="col-md-4 mb-3">
                            <label class="form-label">Minimum Stock</label>
                            <input type="number" name="minimumStock" class="form-control" required min="0">
                        </div>
                        <div class="col-md-4 mb-3">
                            <label class="form-label">Reorder Point</label>
                            <input type="number" name="reorderPoint" class="form-control" required min="0">
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Cost per Unit ($)</label>
                            <input type="number" name="cost" class="form-control" required min="0" step="0.01">
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Storage Location</label>
                        <div class="row">
                            <div class="col-md-4">
                                <input type="text" name="location[building]" class="form-control" placeholder="Building">
                            </div>
                            <div class="col-md-4">
                                <input type="text" name="location[floor]" class="form-control" placeholder="Floor">
                            </div>
                            <div class="col-md-4">
                                <input type="text" name="location[room]" class="form-control" placeholder="Room">
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Supplier Information</label>
                        <div class="row">
                            <div class="col-md-6">
                                <input type="text" name="supplier[name]" class="form-control mb-2" placeholder="Supplier Name">
                            </div>
                            <div class="col-md-6">
                                <input type="text" name="supplier[contact]" class="form-control mb-2" placeholder="Contact Person">
                            </div>
                            <div class="col-md-6">
                                <input type="email" name="supplier[email]" class="form-control" placeholder="Email">
                            </div>
                            <div class="col-md-6">
                                <input type="tel" name="supplier[phone]" class="form-control" placeholder="Phone">
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="addItem()">Add Item</button>
            </div>
        </div>
    </div>
</div>

<!-- Restock Modal -->
<div class="modal fade" id="restockModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Restock Item</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="restockForm">
                    <input type="hidden" name="itemId">
                    <div class="mb-3">
                        <label class="form-label">Quantity to Add</label>
                        <input type="number" name="quantity" class="form-control" required min="1">
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Notes</label>
                        <textarea name="notes" class="form-control" rows="2"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="submitRestock()">Submit</button>
            </div>
        </div>
    </div>
</div>

{{#section 'scripts'}}
<script>
async function addItem() {
    const form = document.getElementById('addItemForm');
    const formData = new FormData(form);
    const data = Object.fromEntries(formData);
    
    // Format nested objects
    data.location = {
        building: data['location[building]'],
        floor: data['location[floor]'],
        room: data['location[room]']
    };
    data.supplier = {
        name: data['supplier[name]'],
        contact: data['supplier[contact]'],
        email: data['supplier[email]'],
        phone: data['supplier[phone]']
    };
    
    // Remove flat versions
    delete data['location[building]'];
    delete data['location[floor]'];
    delete data['location[room]'];
    delete data['supplier[name]'];
    delete data['supplier[contact]'];
    delete data['supplier[email]'];
    delete data['supplier[phone]'];
    
    try {
        const response = await fetch('/admin/inventory', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });

        const result = await response.json();
        
        if (result.success) {
            location.reload();
        } else {
            alert(result.message || 'Error adding item');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error adding item');
    }
}

function restockItem(id) {
    const form = document.getElementById('restockForm');
    form.elements.itemId.value = id;
    
    const modal = new bootstrap.Modal(document.getElementById('restockModal'));
    modal.show();
}

async function submitRestock() {
    const form = document.getElementById('restockForm');
    const { itemId, quantity, notes } = Object.fromEntries(new FormData(form));
    
    try {
        const response = await fetch(`/admin/inventory/${itemId}/transaction`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                type: 'restock',
                quantity: parseInt(quantity),
                notes
            })
        });

        const result = await response.json();
        
        if (result.success) {
            location.reload();
        } else {
            alert(result.message || 'Error restocking item');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error restocking item');
    }
}

function viewItem(id) {
    // Implement item details view
}

function editItem(id) {
    // Implement item edit functionality
}

function exportInventory() {
    const queryString = new URLSearchParams(window.location.search).toString();
    window.location.href = `/admin/inventory/export?${queryString}`;
}
</script>
{{/section}}

================
File: src/views/admin/inventory/order-details.ejs
================
<%- include('../../partials/header') %>
<%- include('../../partials/admin-nav') %>

<div class="min-h-screen bg-gray-100">
    <div class="py-6">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <!-- Header -->
            <div class="md:flex md:items-center md:justify-between">
                <div class="flex-1 min-w-0">
                    <h2 class="text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate">
                        Order #<%= order.orderNumber %>
                    </h2>
                </div>
                <div class="mt-4 flex md:mt-0 md:ml-4 space-x-2">
                    <% if (order.status === 'pending') { %>
                        <button type="button" onclick="approveOrder('<%= order._id %>')" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                            Approve Order
                        </button>
                        <button type="button" onclick="editOrder('<%= order._id %>')" class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                            Edit Order
                        </button>
                        <button type="button" onclick="cancelOrder('<%= order._id %>')" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                            Cancel Order
                        </button>
                    <% } else if (order.status === 'approved') { %>
                        <button type="button" onclick="markAsShipped('<%= order._id %>')" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                            Mark as Shipped
                        </button>
                    <% } else if (order.status === 'shipped') { %>
                        <button type="button" onclick="markAsDelivered('<%= order._id %>')" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                            Mark as Delivered
                        </button>
                    <% } else if (order.status === 'delivered') { %>
                        <button type="button" onclick="completeOrder('<%= order._id %>')" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                            Complete Order
                        </button>
                    <% } %>
                    <button type="button" onclick="printOrder('<%= order._id %>')" class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        Print Order
                    </button>
                </div>
            </div>

            <!-- Order Details -->
            <div class="mt-8 bg-white shadow overflow-hidden sm:rounded-lg">
                <div class="px-4 py-5 sm:px-6">
                    <h3 class="text-lg leading-6 font-medium text-gray-900">
                        Order Information
                    </h3>
                    <p class="mt-1 max-w-2xl text-sm text-gray-500">
                        Details and status of the purchase order.
                    </p>
                </div>
                <div class="border-t border-gray-200 px-4 py-5 sm:p-0">
                    <dl class="sm:divide-y sm:divide-gray-200">
                        <div class="py-4 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                            <dt class="text-sm font-medium text-gray-500">Status</dt>
                            <dd class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                                <span class="inline-flex rounded-full px-2 text-xs font-semibold leading-5 
                                    <%= order.status === 'completed' ? 'bg-green-100 text-green-800' : 
                                        order.status === 'cancelled' ? 'bg-red-100 text-red-800' :
                                        order.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                                        order.status === 'approved' ? 'bg-blue-100 text-blue-800' :
                                        order.status === 'shipped' ? 'bg-purple-100 text-purple-800' :
                                        'bg-gray-100 text-gray-800' %>">
                                    <%= order.status.charAt(0).toUpperCase() + order.status.slice(1) %>
                                </span>
                            </dd>
                        </div>
                        <div class="py-4 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                            <dt class="text-sm font-medium text-gray-500">Created By</dt>
                            <dd class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                                <%= order.createdBy.name %>
                            </dd>
                        </div>
                        <div class="py-4 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                            <dt class="text-sm font-medium text-gray-500">Supplier</dt>
                            <dd class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                                <div>
                                    <strong><%= order.supplier.name %></strong>
                                </div>
                                <div class="text-gray-500">
                                    <%= order.supplier.contact %><br>
                                    <%= order.supplier.email %><br>
                                    <%= order.supplier.address %>
                                </div>
                            </dd>
                        </div>
                        <div class="py-4 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                            <dt class="text-sm font-medium text-gray-500">Order Dates</dt>
                            <dd class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                                <div>Created: <%= moment(order.createdAt).format('MMM D, YYYY, h:mm A') %></div>
                                <% if (order.approvedAt) { %>
                                <div>Approved: <%= moment(order.approvedAt).format('MMM D, YYYY, h:mm A') %></div>
                                <% } %>
                                <% if (order.shippedAt) { %>
                                <div>Shipped: <%= moment(order.shippedAt).format('MMM D, YYYY, h:mm A') %></div>
                                <% } %>
                                <% if (order.deliveredAt) { %>
                                <div>Delivered: <%= moment(order.deliveredAt).format('MMM D, YYYY, h:mm A') %></div>
                                <% } %>
                                <% if (order.completedAt) { %>
                                <div>Completed: <%= moment(order.completedAt).format('MMM D, YYYY, h:mm A') %></div>
                                <% } %>
                            </dd>
                        </div>
                        <div class="py-4 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                            <dt class="text-sm font-medium text-gray-500">Notes</dt>
                            <dd class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                                <%= order.notes || 'No notes provided' %>
                            </dd>
                        </div>
                    </dl>
                </div>
            </div>

            <!-- Order Items -->
            <div class="mt-8 bg-white shadow sm:rounded-lg">
                <div class="px-4 py-5 sm:px-6">
                    <h3 class="text-lg leading-6 font-medium text-gray-900">
                        Order Items
                    </h3>
                </div>
                <div class="border-t border-gray-200">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Item</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">SKU</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Quantity</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Unit Price</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Total</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            <% order.items.forEach(item => { %>
                            <tr>
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                    <%= item.name %>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    <%= item.sku %>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    <%= item.quantity %> <%= item.unit %>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    $<%= item.unitPrice.toFixed(2) %>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    $<%= (item.quantity * item.unitPrice).toFixed(2) %>
                                </td>
                            </tr>
                            <% }); %>
                            <!-- Total Row -->
                            <tr class="bg-gray-50">
                                <td colspan="4" class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 text-right">
                                    Total
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                    $<%= order.totalValue.toFixed(2) %>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Order History -->
            <div class="mt-8 bg-white shadow sm:rounded-lg">
                <div class="px-4 py-5 sm:px-6">
                    <h3 class="text-lg leading-6 font-medium text-gray-900">
                        Order History
                    </h3>
                </div>
                <div class="border-t border-gray-200">
                    <ul class="divide-y divide-gray-200">
                        <% order.history.forEach(event => { %>
                        <li class="px-4 py-4 sm:px-6">
                            <div class="flex items-center justify-between">
                                <div class="flex items-center">
                                    <div class="flex-shrink-0">
                                        <% if (event.type === 'created') { %>
                                            <svg class="h-5 w-5 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                                <path fill-rule="evenodd" d="M6 2a2 2 0 00-2 2v12a2 2 0 002 2h8a2 2 0 002-2V7.414A2 2 0 0015.414 6L12 2.586A2 2 0 0010.586 2H6zm5 6a1 1 0 10-2 0v3.586l-1.293-1.293a1 1 0 10-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L11 11.586V8z" clip-rule="evenodd" />
                                            </svg>
                                        <% } else if (event.type === 'approved') { %>
                                            <svg class="h-5 w-5 text-blue-500" fill="currentColor" viewBox="0 0 20 20">
                                                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                                            </svg>
                                        <% } else if (event.type === 'shipped') { %>
                                            <svg class="h-5 w-5 text-purple-500" fill="currentColor" viewBox="0 0 20 20">
                                                <path d="M8 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM15 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0z" />
                                                <path d="M3 4a1 1 0 00-1 1v10a1 1 0 001 1h1.05a2.5 2.5 0 014.9 0H10a1 1 0 001-1V5a1 1 0 00-1-1H3zM14 7a1 1 0 00-1 1v6.05A2.5 2.5 0 0115.95 16H17a1 1 0 001-1v-5a1 1 0 00-.293-.707l-2-2A1 1 0 0015 7h-1z" />
                                            </svg>
                                        <% } else if (event.type === 'delivered') { %>
                                            <svg class="h-5 w-5 text-green-500" fill="currentColor" viewBox="0 0 20 20">
                                                <path d="M11 17a1 1 0 001.447.894l4-2A1 1 0 0017 15V9.236a1 1 0 00-1.447-.894l-4 2a1 1 0 00-.553.894V17zM15.211 6.276a1 1 0 000-1.788l-4.764-2.382a1 1 0 00-.894 0L4.789 4.488a1 1 0 000 1.788l4.764 2.382a1 1 0 00.894 0l4.764-2.382zM4.447 8.342A1 1 0 003 9.236V15a1 1 0 00.553.894l4 2A1 1 0 009 17v-5.764a1 1 0 00-.553-.894l-4-2z" />
                                            </svg>
                                        <% } else if (event.type === 'completed') { %>
                                            <svg class="h-5 w-5 text-green-500" fill="currentColor" viewBox="0 0 20 20">
                                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                                            </svg>
                                        <% } else if (event.type === 'cancelled') { %>
                                            <svg class="h-5 w-5 text-red-500" fill="currentColor" viewBox="0 0 20 20">
                                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                                            </svg>
                                        <% } %>
                                    </div>
                                    <div class="ml-3">
                                        <p class="text-sm font-medium text-gray-900">
                                            <%= event.description %>
                                        </p>
                                        <p class="text-sm text-gray-500">
                                            By <%= event.user.name %> • <%= moment(event.timestamp).format('MMM D, YYYY, h:mm A') %>
                                        </p>
                                    </div>
                                </div>
                            </div>
                        </li>
                        <% }); %>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    function approveOrder(orderId) {
        if (confirm('Are you sure you want to approve this order?')) {
            fetch(`/admin/inventory/orders/${orderId}/approve`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                if (response.ok) {
                    window.location.reload();
                }
            });
        }
    }

    function markAsShipped(orderId) {
        if (confirm('Are you sure you want to mark this order as shipped?')) {
            fetch(`/admin/inventory/orders/${orderId}/ship`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                if (response.ok) {
                    window.location.reload();
                }
            });
        }
    }

    function markAsDelivered(orderId) {
        if (confirm('Are you sure you want to mark this order as delivered?')) {
            fetch(`/admin/inventory/orders/${orderId}/deliver`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                if (response.ok) {
                    window.location.reload();
                }
            });
        }
    }

    function completeOrder(orderId) {
        if (confirm('Are you sure you want to complete this order? This will update the inventory.')) {
            fetch(`/admin/inventory/orders/${orderId}/complete`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                if (response.ok) {
                    window.location.reload();
                }
            });
        }
    }

    function cancelOrder(orderId) {
        if (confirm('Are you sure you want to cancel this order?')) {
            fetch(`/admin/inventory/orders/${orderId}/cancel`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                if (response.ok) {
                    window.location.reload();
                }
            });
        }
    }

    function printOrder(orderId) {
        window.open(`/admin/inventory/orders/${orderId}/print`, '_blank');
    }
</script>

<%- include('../../partials/footer') %>

================
File: src/views/admin/inventory/orders.ejs
================
<%- include('../../partials/header') %>
<%- include('../../partials/admin-nav') %>

<div class="min-h-screen bg-gray-100">
    <div class="py-6">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <!-- Header -->
            <div class="md:flex md:items-center md:justify-between">
                <div class="flex-1 min-w-0">
                    <h2 class="text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate">
                        Purchase Orders
                    </h2>
                </div>
                <div class="mt-4 flex md:mt-0 md:ml-4">
                    <button type="button" onclick="showCreateOrderModal()" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        Create Order
                    </button>
                </div>
            </div>

            <!-- Stats -->
            <div class="mt-8 grid grid-cols-1 gap-5 sm:grid-cols-3">
                <div class="bg-white overflow-hidden shadow rounded-lg">
                    <div class="p-5">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <svg class="h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                                </svg>
                            </div>
                            <div class="ml-5 w-0 flex-1">
                                <dl>
                                    <dt class="text-sm font-medium text-gray-500 truncate">Pending Orders</dt>
                                    <dd class="flex items-baseline">
                                        <div class="text-2xl font-semibold text-gray-900"><%= stats.pendingOrders %></div>
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="bg-white overflow-hidden shadow rounded-lg">
                    <div class="p-5">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <svg class="h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                            </div>
                            <div class="ml-5 w-0 flex-1">
                                <dl>
                                    <dt class="text-sm font-medium text-gray-500 truncate">Total Value (This Month)</dt>
                                    <dd class="flex items-baseline">
                                        <div class="text-2xl font-semibold text-gray-900">$<%= stats.monthlyValue.toLocaleString() %></div>
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="bg-white overflow-hidden shadow rounded-lg">
                    <div class="p-5">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <svg class="h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                            </div>
                            <div class="ml-5 w-0 flex-1">
                                <dl>
                                    <dt class="text-sm font-medium text-gray-500 truncate">Completed Orders</dt>
                                    <dd class="flex items-baseline">
                                        <div class="text-2xl font-semibold text-gray-900"><%= stats.completedOrders %></div>
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Filters -->
            <div class="mt-8 bg-white shadow sm:rounded-lg">
                <div class="px-4 py-5 sm:p-6">
                    <div class="grid grid-cols-1 gap-4 sm:grid-cols-4">
                        <div>
                            <label for="supplier" class="block text-sm font-medium text-gray-700">Supplier</label>
                            <select id="supplier" name="supplier" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                                <option value="">All Suppliers</option>
                                <% suppliers.forEach(supplier => { %>
                                <option value="<%= supplier._id %>"><%= supplier.name %></option>
                                <% }); %>
                            </select>
                        </div>

                        <div>
                            <label for="status" class="block text-sm font-medium text-gray-700">Status</label>
                            <select id="status" name="status" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                                <option value="">All Status</option>
                                <option value="pending">Pending</option>
                                <option value="approved">Approved</option>
                                <option value="shipped">Shipped</option>
                                <option value="delivered">Delivered</option>
                                <option value="completed">Completed</option>
                                <option value="cancelled">Cancelled</option>
                            </select>
                        </div>

                        <div>
                            <label for="dateRange" class="block text-sm font-medium text-gray-700">Date Range</label>
                            <select id="dateRange" name="dateRange" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                                <option value="">All Time</option>
                                <option value="today">Today</option>
                                <option value="week">This Week</option>
                                <option value="month">This Month</option>
                                <option value="quarter">This Quarter</option>
                            </select>
                        </div>

                        <div>
                            <label for="sort" class="block text-sm font-medium text-gray-700">Sort By</label>
                            <select id="sort" name="sort" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                                <option value="date_desc">Date: Newest First</option>
                                <option value="date_asc">Date: Oldest First</option>
                                <option value="value_desc">Value: High to Low</option>
                                <option value="value_asc">Value: Low to High</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Orders Table -->
            <div class="mt-8 flex flex-col">
                <div class="-my-2 -mx-4 overflow-x-auto sm:-mx-6 lg:-mx-8">
                    <div class="inline-block min-w-full py-2 align-middle md:px-6 lg:px-8">
                        <div class="overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg">
                            <table class="min-w-full divide-y divide-gray-300">
                                <thead class="bg-gray-50">
                                    <tr>
                                        <th scope="col" class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6">Order ID</th>
                                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Supplier</th>
                                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Items</th>
                                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Total Value</th>
                                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Status</th>
                                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Created</th>
                                        <th scope="col" class="relative py-3.5 pl-3 pr-4 sm:pr-6">
                                            <span class="sr-only">Actions</span>
                                        </th>
                                    </tr>
                                </thead>
                                <tbody class="divide-y divide-gray-200 bg-white">
                                    <% orders.forEach(order => { %>
                                    <tr>
                                        <td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-6">
                                            <%= order.orderNumber %>
                                        </td>
                                        <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                            <%= order.supplier.name %>
                                        </td>
                                        <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                            <%= order.items.length %> items
                                        </td>
                                        <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                            $<%= order.totalValue.toLocaleString() %>
                                        </td>
                                        <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                            <span class="inline-flex rounded-full px-2 text-xs font-semibold leading-5 
                                                <%= order.status === 'completed' ? 'bg-green-100 text-green-800' : 
                                                    order.status === 'cancelled' ? 'bg-red-100 text-red-800' :
                                                    order.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                                                    order.status === 'approved' ? 'bg-blue-100 text-blue-800' :
                                                    order.status === 'shipped' ? 'bg-purple-100 text-purple-800' :
                                                    'bg-gray-100 text-gray-800' %>">
                                                <%= order.status.charAt(0).toUpperCase() + order.status.slice(1) %>
                                            </span>
                                        </td>
                                        <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                            <%= moment(order.createdAt).format('MMM D, YYYY') %>
                                        </td>
                                        <td class="relative whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-6">
                                            <button onclick="viewOrder('<%= order._id %>')" class="text-indigo-600 hover:text-indigo-900 mr-3">View</button>
                                            <% if (order.status === 'pending') { %>
                                            <button onclick="editOrder('<%= order._id %>')" class="text-blue-600 hover:text-blue-900 mr-3">Edit</button>
                                            <button onclick="cancelOrder('<%= order._id %>')" class="text-red-600 hover:text-red-900">Cancel</button>
                                            <% } %>
                                        </td>
                                    </tr>
                                    <% }); %>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create/Edit Order Modal -->
<div id="orderModal" class="fixed z-10 inset-0 overflow-y-auto hidden" aria-labelledby="modal-title" role="dialog" aria-modal="true">
    <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
        <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
        <div class="inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full sm:p-6">
            <form id="orderForm" method="POST">
                <div class="space-y-6">
                    <div>
                        <h3 class="text-lg leading-6 font-medium text-gray-900" id="modal-title">Create Purchase Order</h3>
                        <p class="mt-1 text-sm text-gray-500">Enter the order details below.</p>
                    </div>

                    <div>
                        <label for="supplier" class="block text-sm font-medium text-gray-700">Supplier</label>
                        <select name="supplier" id="supplier" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md" required>
                            <% suppliers.forEach(supplier => { %>
                            <option value="<%= supplier._id %>"><%= supplier.name %></option>
                            <% }); %>
                        </select>
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700">Items</label>
                        <div id="orderItems" class="space-y-4">
                            <!-- Dynamic items will be added here -->
                        </div>
                        <button type="button" onclick="addOrderItem()" class="mt-2 inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                            Add Item
                        </button>
                    </div>

                    <div>
                        <label for="notes" class="block text-sm font-medium text-gray-700">Notes</label>
                        <textarea name="notes" id="notes" rows="3" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"></textarea>
                    </div>
                </div>

                <div class="mt-5 sm:mt-6 sm:grid sm:grid-cols-2 sm:gap-3 sm:grid-flow-row-dense">
                    <button type="submit" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-indigo-600 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:col-start-2 sm:text-sm">
                        Create Order
                    </button>
                    <button type="button" onclick="hideOrderModal()" class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:col-start-1 sm:text-sm">
                        Cancel
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    // Modal Functions
    function showCreateOrderModal() {
        document.getElementById('modal-title').textContent = 'Create Purchase Order';
        document.getElementById('orderForm').reset();
        document.getElementById('orderItems').innerHTML = '';
        addOrderItem(); // Add first item row
        document.getElementById('orderForm').action = '/admin/inventory/orders';
        document.getElementById('orderModal').classList.remove('hidden');
    }

    function hideOrderModal() {
        document.getElementById('orderModal').classList.add('hidden');
    }

    function addOrderItem() {
        const itemDiv = document.createElement('div');
        itemDiv.className = 'grid grid-cols-3 gap-4';
        itemDiv.innerHTML = `
            <div>
                <select name="items[][id]" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md" required>
                    <option value="">Select Item</option>
                    <% items.forEach(item => { %>
                    <option value="<%= item._id %>" data-price="<%= item.unitPrice %>"><%= item.name %></option>
                    <% }); %>
                </select>
            </div>
            <div>
                <input type="number" name="items[][quantity]" placeholder="Quantity" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" required>
            </div>
            <div class="flex items-center">
                <button type="button" onclick="this.parentElement.parentElement.remove()" class="text-red-600 hover:text-red-900">
                    Remove
                </button>
            </div>
        `;
        document.getElementById('orderItems').appendChild(itemDiv);
    }

    function editOrder(orderId) {
        fetch(`/admin/inventory/orders/${orderId}`)
            .then(response => response.json())
            .then(order => {
                document.getElementById('modal-title').textContent = 'Edit Purchase Order';
                document.getElementById('supplier').value = order.supplier;
                document.getElementById('notes').value = order.notes;
                
                // Clear and populate items
                document.getElementById('orderItems').innerHTML = '';
                order.items.forEach(item => {
                    const itemDiv = document.createElement('div');
                    itemDiv.className = 'grid grid-cols-3 gap-4';
                    itemDiv.innerHTML = `
                        <div>
                            <select name="items[][id]" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md" required>
                                <option value="">Select Item</option>
                                <% items.forEach(item => { %>
                                <option value="<%= item._id %>" data-price="<%= item.unitPrice %>" ${item.id === '<%= item._id %>' ? 'selected' : ''}><%= item.name %></option>
                                <% }); %>
                            </select>
                        </div>
                        <div>
                            <input type="number" name="items[][quantity]" value="${item.quantity}" placeholder="Quantity" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" required>
                        </div>
                        <div class="flex items-center">
                            <button type="button" onclick="this.parentElement.parentElement.remove()" class="text-red-600 hover:text-red-900">
                                Remove
                            </button>
                        </div>
                    `;
                    document.getElementById('orderItems').appendChild(itemDiv);
                });

                document.getElementById('orderForm').action = `/admin/inventory/orders/${orderId}`;
                document.getElementById('orderModal').classList.remove('hidden');
            });
    }

    function viewOrder(orderId) {
        window.location.href = `/admin/inventory/orders/${orderId}`;
    }

    function cancelOrder(orderId) {
        if (confirm('Are you sure you want to cancel this order?')) {
            fetch(`/admin/inventory/orders/${orderId}/cancel`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                if (response.ok) {
                    window.location.reload();
                }
            });
        }
    }

    // Filter Functions
    document.querySelectorAll('select[id^="filter"]').forEach(select => {
        select.addEventListener('change', function() {
            applyFilters();
        });
    });

    function applyFilters() {
        const supplier = document.getElementById('supplier').value;
        const status = document.getElementById('status').value;
        const dateRange = document.getElementById('dateRange').value;
        const sort = document.getElementById('sort').value;

        const queryParams = new URLSearchParams({
            supplier,
            status,
            dateRange,
            sort
        }).toString();

        window.location.href = `/admin/inventory/orders?${queryParams}`;
    }
</script>

<%- include('../../partials/footer') %>

================
File: src/views/admin/inventory/reports.ejs
================
<%- include('../../partials/header') %>
<%- include('../../partials/admin-nav') %>

<div class="min-h-screen bg-gray-100">
    <div class="py-6">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <!-- Header -->
            <div class="md:flex md:items-center md:justify-between">
                <div class="flex-1 min-w-0">
                    <h2 class="text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate">
                        Inventory Reports
                    </h2>
                </div>
                <div class="mt-4 flex md:mt-0 md:ml-4 space-x-2">
                    <button type="button" onclick="exportReport()" class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        <svg class="-ml-1 mr-2 h-5 w-5 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                        Export Report
                    </button>
                    <button type="button" onclick="printReport()" class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        <svg class="-ml-1 mr-2 h-5 w-5 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z" />
                        </svg>
                        Print Report
                    </button>
                </div>
            </div>

            <!-- Date Range Filter -->
            <div class="mt-8 bg-white shadow sm:rounded-lg">
                <div class="px-4 py-5 sm:p-6">
                    <div class="grid grid-cols-1 gap-4 sm:grid-cols-4">
                        <div>
                            <label for="startDate" class="block text-sm font-medium text-gray-700">Start Date</label>
                            <input type="date" id="startDate" name="startDate" value="<%= startDate %>" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                        </div>
                        <div>
                            <label for="endDate" class="block text-sm font-medium text-gray-700">End Date</label>
                            <input type="date" id="endDate" name="endDate" value="<%= endDate %>" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                        </div>
                        <div class="flex items-end">
                            <button type="button" onclick="applyDateFilter()" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                Apply Filter
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Summary Stats -->
            <div class="mt-8 grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4">
                <!-- Total Inventory Value -->
                <div class="bg-white overflow-hidden shadow rounded-lg">
                    <div class="p-5">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <svg class="h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                            </div>
                            <div class="ml-5 w-0 flex-1">
                                <dl>
                                    <dt class="text-sm font-medium text-gray-500 truncate">Total Inventory Value</dt>
                                    <dd class="flex items-baseline">
                                        <div class="text-2xl font-semibold text-gray-900">$<%= (stats.totalValue || 0).toLocaleString() %></div>
                                        <div class="ml-2 flex items-baseline text-sm font-semibold <%= (stats.valueChange >= 0 ? 'text-green-600' : 'text-red-600') %>">
                                            <%= (stats.valueChange >= 0 ? '+' : '') %><%= stats.valueChange %>%
                                        </div>
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Total Items -->
                <div class="bg-white overflow-hidden shadow rounded-lg">
                    <div class="p-5">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <svg class="h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />
                                </svg>
                            </div>
                            <div class="ml-5 w-0 flex-1">
                                <dl>
                                    <dt class="text-sm font-medium text-gray-500 truncate">Total Items</dt>
                                    <dd class="flex items-baseline">
                                        <div class="text-2xl font-semibold text-gray-900"><%= (stats.totalItems || 0).toLocaleString() %></div>
                                        <div class="ml-2 flex items-baseline text-sm font-semibold <%= (stats.itemsChange >= 0 ? 'text-green-600' : 'text-red-600') %>">
                                            <%= (stats.itemsChange >= 0 ? '+' : '') %><%= stats.itemsChange %>%
                                        </div>
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Low Stock Items -->
                <div class="bg-white overflow-hidden shadow rounded-lg">
                    <div class="p-5">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <svg class="h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                                </svg>
                            </div>
                            <div class="ml-5 w-0 flex-1">
                                <dl>
                                    <dt class="text-sm font-medium text-gray-500 truncate">Low Stock Items</dt>
                                    <dd class="flex items-baseline">
                                        <div class="text-2xl font-semibold text-gray-900"><%= (stats.lowStockItems || 0).toLocaleString() %></div>
                                        <div class="ml-2 flex items-baseline text-sm font-semibold <%= (stats.lowStockChange <= 0 ? 'text-green-600' : 'text-red-600') %>">
                                            <%= (stats.lowStockChange >= 0 ? '+' : '') %><%= stats.lowStockChange %>%
                                        </div>
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Order Value -->
                <div class="bg-white overflow-hidden shadow rounded-lg">
                    <div class="p-5">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <svg class="h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                                </svg>
                            </div>
                            <div class="ml-5 w-0 flex-1">
                                <dl>
                                    <dt class="text-sm font-medium text-gray-500 truncate">Order Value (Period)</dt>
                                    <dd class="flex items-baseline">
                                        <div class="text-2xl font-semibold text-gray-900">$<%= stats.orderValue.toLocaleString() %></div>
                                        <div class="ml-2 flex items-baseline text-sm font-semibold <%= stats.orderValueChange >= 0 ? 'text-green-600' : 'text-red-600' %>">
                                            <%= stats.orderValueChange >= 0 ? '+' : '' %><%= stats.orderValueChange %>%
                                        </div>
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Charts Section -->
            <div class="mt-8 grid grid-cols-1 gap-5 lg:grid-cols-2">
                <!-- Inventory Value Trend -->
                <div class="bg-white overflow-hidden shadow rounded-lg">
                    <div class="px-4 py-5 sm:p-6">
                        <h3 class="text-lg leading-6 font-medium text-gray-900">Inventory Value Trend</h3>
                        <div class="mt-4" style="height: 300px;">
                            <canvas id="inventoryValueChart"></canvas>
                        </div>
                    </div>
                </div>

                <!-- Category Distribution -->
                <div class="bg-white overflow-hidden shadow rounded-lg">
                    <div class="px-4 py-5 sm:p-6">
                        <h3 class="text-lg leading-6 font-medium text-gray-900">Category Distribution</h3>
                        <div class="mt-4" style="height: 300px;">
                            <canvas id="categoryDistributionChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Detailed Reports -->
            <div class="mt-8 grid grid-cols-1 gap-5">
                <!-- Low Stock Items -->
                <div class="bg-white shadow sm:rounded-lg">
                    <div class="px-4 py-5 sm:px-6">
                        <h3 class="text-lg leading-6 font-medium text-gray-900">Low Stock Items</h3>
                    </div>
                    <div class="border-t border-gray-200">
                        <div class="overflow-x-auto">
                            <table class="min-w-full divide-y divide-gray-200">
                                <thead class="bg-gray-50">
                                    <tr>
                                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Item</th>
                                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">SKU</th>
                                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Category</th>
                                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Current Stock</th>
                                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Min Stock</th>
                                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                                    </tr>
                                </thead>
                                <tbody class="bg-white divide-y divide-gray-200">
                                    <% lowStockItems.forEach(item => { %>
                                    <tr>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                            <%= item.name %>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            <%= item.sku %>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            <%= item.category %>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            <%= item.currentStock %>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            <%= item.minStock %>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <span class="inline-flex rounded-full px-2 text-xs font-semibold leading-5 <%= item.currentStock === 0 ? 'bg-red-100 text-red-800' : 'bg-yellow-100 text-yellow-800' %>">
                                                <%= item.currentStock === 0 ? 'Out of Stock' : 'Low Stock' %>
                                            </span>
                                        </td>
                                    </tr>
                                    <% }); %>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    // Initialize charts
    document.addEventListener('DOMContentLoaded', function() {
        // Parse server-side data safely
        const serverData = JSON.parse('<%- JSON.stringify(charts || {}) %>');
        const inventoryValue = serverData.inventoryValue || {};
        const categoryDistribution = serverData.categoryDistribution || {};

        // Inventory Value Trend Chart
        const valueCtx = document.getElementById('inventoryValueChart').getContext('2d');
        new Chart(valueCtx, {
            type: 'line',
            data: {
                labels: inventoryValue.labels || [],
                datasets: [{
                    label: 'Inventory Value',
                    data: inventoryValue.data || [],
                    borderColor: 'rgb(79, 70, 229)',
                    tension: 0.1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function(value) {
                                return '$' + (value || 0).toLocaleString();
                            }
                        }
                    }
                }
            }
        });

        // Category Distribution Chart
        const categoryCtx = document.getElementById('categoryDistributionChart').getContext('2d');
        new Chart(categoryCtx, {
            type: 'doughnut',
            data: {
                labels: categoryDistribution.labels || [],
                datasets: [{
                    data: categoryDistribution.data || [],
                    backgroundColor: [
                        'rgb(79, 70, 229)',
                        'rgb(16, 185, 129)',
                        'rgb(245, 158, 11)',
                        'rgb(239, 68, 68)',
                        'rgb(107, 114, 128)',
                        'rgb(167, 139, 250)'
                    ]
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'right'
                    }
                }
            }
        });
    });

    // Filter functions
    function applyDateFilter() {
        const startDate = document.getElementById('startDate').value;
        const endDate = document.getElementById('endDate').value;
        window.location.href = `/admin/inventory/reports?startDate=${startDate}&endDate=${endDate}`;
    }

    // Export functions
    function exportReport() {
        const startDate = document.getElementById('startDate').value;
        const endDate = document.getElementById('endDate').value;
        window.location.href = `/admin/inventory/reports/export?startDate=${startDate}&endDate=${endDate}`;
    }

    function printReport() {
        window.print();
    }
</script>

<%- include('../../partials/footer') %>

================
File: src/views/admin/inventory/reports.hbs
================
{{> admin/header}}

<div class="container-fluid py-4">
    <!-- Report Filters -->
    <div class="card mb-4">
        <div class="card-body">
            <div class="row">
                <div class="col-md-3 mb-3">
                    <label class="form-label">Report Type</label>
                    <select id="reportType" class="form-select" onchange="changeReport()">
                        <option value="consumption">Consumption Report</option>
                        <option value="restock">Restock Schedule</option>
                        <option value="trends">Inventory Trends</option>
                        <option value="valuation">Inventory Valuation</option>
                    </select>
                </div>
                <div class="col-md-3 mb-3">
                    <label class="form-label">Hotel</label>
                    <select id="hotel" class="form-select" onchange="loadReport()">
                        <option value="">All Hotels</option>
                        {{#each hotels}}
                        <option value="{{this._id}}">{{this.name}}</option>
                        {{/each}}
                    </select>
                </div>
                <div class="col-md-3 mb-3">
                    <label class="form-label">Category</label>
                    <select id="category" class="form-select" onchange="loadReport()">
                        <option value="">All Categories</option>
                        <option value="amenities">Amenities</option>
                        <option value="cleaning">Cleaning Supplies</option>
                        <option value="linens">Linens</option>
                        <option value="toiletries">Toiletries</option>
                        <option value="food_beverage">Food & Beverage</option>
                        <option value="maintenance">Maintenance</option>
                        <option value="office">Office Supplies</option>
                        <option value="other">Other</option>
                    </select>
                </div>
                <div class="col-md-3 mb-3">
                    <label class="form-label">Date Range</label>
                    <select id="dateRange" class="form-select" onchange="loadReport()">
                        <option value="daily">Last 30 Days</option>
                        <option value="weekly">Last 7 Days</option>
                        <option value="monthly">Last Month</option>
                    </select>
                </div>
            </div>
        </div>
    </div>

    <!-- Report Content -->
    <div class="card">
        <div class="card-header">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="mb-0" id="reportTitle">Consumption Report</h5>
                <button class="btn btn-primary btn-sm" onclick="exportReport()">
                    <i class="fas fa-download me-2"></i>Export
                </button>
            </div>
        </div>
        <div class="card-body">
            <!-- Charts Container -->
            <div class="mb-4">
                <canvas id="reportChart" height="300"></canvas>
            </div>

            <!-- Report Table -->
            <div class="table-responsive">
                <table class="table align-items-center mb-0" id="reportTable">
                    <!-- Table content will be dynamically populated -->
                </table>
            </div>
        </div>
    </div>
</div>

{{#section 'scripts'}}
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
let currentChart = null;

async function loadReport() {
    const reportType = document.getElementById('reportType').value;
    const hotel = document.getElementById('hotel').value;
    const category = document.getElementById('category').value;
    const dateRange = document.getElementById('dateRange').value;

    try {
        const response = await fetch(`/admin/inventory/reports/${reportType}?hotel=${hotel}&category=${category}&period=${dateRange}`);
        const result = await response.json();

        if (result.success) {
            updateReportView(reportType, result.data);
        } else {
            alert(result.message || 'Error loading report');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error loading report');
    }
}

function updateReportView(type, data) {
    const title = document.getElementById('reportTitle');
    const table = document.getElementById('reportTable');
    
    // Update title
    title.textContent = {
        consumption: 'Consumption Report',
        restock: 'Restock Schedule',
        trends: 'Inventory Trends',
        valuation: 'Inventory Valuation'
    }[type];

    // Clear existing chart
    if (currentChart) {
        currentChart.destroy();
    }

    // Update chart based on report type
    switch (type) {
        case 'consumption':
            renderConsumptionChart(data);
            renderConsumptionTable(data);
            break;
        case 'restock':
            renderRestockChart(data);
            renderRestockTable(data);
            break;
        case 'trends':
            renderTrendsChart(data);
            renderTrendsTable(data);
            break;
        case 'valuation':
            renderValuationChart(data);
            renderValuationTable(data);
            break;
    }
}

function renderConsumptionChart(data) {
    const ctx = document.getElementById('reportChart').getContext('2d');
    
    const chartData = {
        labels: data.map(item => item._id.name),
        datasets: [{
            label: 'Quantity Consumed',
            data: data.map(item => item.totalQuantity),
            backgroundColor: 'rgba(54, 162, 235, 0.2)',
            borderColor: 'rgba(54, 162, 235, 1)',
            borderWidth: 1
        }]
    };

    currentChart = new Chart(ctx, {
        type: 'bar',
        data: chartData,
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
}

function renderConsumptionTable(data) {
    const table = document.getElementById('reportTable');
    
    table.innerHTML = `
        <thead>
            <tr>
                <th>Item</th>
                <th>Category</th>
                <th>Quantity Consumed</th>
                <th>Total Cost</th>
            </tr>
        </thead>
        <tbody>
            ${data.map(item => `
                <tr>
                    <td>${item._id.name}</td>
                    <td>${formatCategory(item._id.category)}</td>
                    <td>${item.totalQuantity}</td>
                    <td>$${item.totalCost.toFixed(2)}</td>
                </tr>
            `).join('')}
        </tbody>
    `;
}

function renderRestockChart(data) {
    const ctx = document.getElementById('reportChart').getContext('2d');
    
    const chartData = {
        labels: data.map(item => item.name),
        datasets: [{
            label: 'Current Stock',
            data: data.map(item => item.currentStock),
            backgroundColor: 'rgba(255, 99, 132, 0.2)',
            borderColor: 'rgba(255, 99, 132, 1)',
            borderWidth: 1
        }, {
            label: 'Reorder Point',
            data: data.map(item => item.reorderPoint),
            backgroundColor: 'rgba(255, 206, 86, 0.2)',
            borderColor: 'rgba(255, 206, 86, 1)',
            borderWidth: 1
        }]
    };

    currentChart = new Chart(ctx, {
        type: 'bar',
        data: chartData,
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
}

function renderRestockTable(data) {
    const table = document.getElementById('reportTable');
    
    table.innerHTML = `
        <thead>
            <tr>
                <th>Item</th>
                <th>Hotel</th>
                <th>Current Stock</th>
                <th>Reorder Point</th>
                <th>Suggested Reorder</th>
                <th>Estimated Cost</th>
                <th>Last Restocked</th>
            </tr>
        </thead>
        <tbody>
            ${data.map(item => `
                <tr>
                    <td>${item.name}</td>
                    <td>${item.hotel}</td>
                    <td>${item.currentStock}</td>
                    <td>${item.reorderPoint}</td>
                    <td>${item.suggestedReorder}</td>
                    <td>$${item.estimatedCost.toFixed(2)}</td>
                    <td>${item.lastRestocked ? new Date(item.lastRestocked).toLocaleDateString() : 'N/A'}</td>
                </tr>
            `).join('')}
        </tbody>
    `;
}

function renderTrendsChart(data) {
    const ctx = document.getElementById('reportChart').getContext('2d');
    
    // Group data by transaction type
    const groupedData = data.reduce((acc, item) => {
        const date = item._id.date;
        const type = item._id.type;
        if (!acc[type]) {
            acc[type] = {};
        }
        acc[type][date] = item.totalQuantity;
        return acc;
    }, {});

    // Get unique dates
    const dates = [...new Set(data.map(item => item._id.date))].sort();

    // Create datasets
    const datasets = Object.entries(groupedData).map(([type, values]) => ({
        label: formatTransactionType(type),
        data: dates.map(date => values[date] || 0),
        borderColor: getTransactionTypeColor(type),
        fill: false
    }));

    currentChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: dates,
            datasets: datasets
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
}

function renderTrendsTable(data) {
    const table = document.getElementById('reportTable');
    
    // Group data by date
    const groupedByDate = data.reduce((acc, item) => {
        const date = item._id.date;
        if (!acc[date]) {
            acc[date] = {};
        }
        acc[date][item._id.type] = item.totalQuantity;
        return acc;
    }, {});

    table.innerHTML = `
        <thead>
            <tr>
                <th>Date</th>
                <th>Restock</th>
                <th>Consumption</th>
                <th>Adjustment</th>
            </tr>
        </thead>
        <tbody>
            ${Object.entries(groupedByDate).map(([date, values]) => `
                <tr>
                    <td>${date}</td>
                    <td>${values.restock || 0}</td>
                    <td>${values.consumption || 0}</td>
                    <td>${values.adjustment || 0}</td>
                </tr>
            `).join('')}
        </tbody>
    `;
}

function formatCategory(category) {
    return category.split('_').map(word => 
        word.charAt(0).toUpperCase() + word.slice(1)
    ).join(' ');
}

function formatTransactionType(type) {
    return type.charAt(0).toUpperCase() + type.slice(1);
}

function getTransactionTypeColor(type) {
    const colors = {
        restock: 'rgb(75, 192, 192)',
        consumption: 'rgb(255, 99, 132)',
        adjustment: 'rgb(255, 206, 86)'
    };
    return colors[type] || 'rgb(201, 203, 207)';
}

async function exportReport() {
    const reportType = document.getElementById('reportType').value;
    const hotel = document.getElementById('hotel').value;
    const category = document.getElementById('category').value;
    
    const queryParams = new URLSearchParams({
        type: reportType,
        hotel,
        category
    }).toString();
    
    window.location.href = `/admin/inventory/export?${queryParams}`;
}

// Initial load
loadReport();
</script>
{{/section}}

================
File: src/views/admin/inventory/supplier-details.ejs
================
<%- include('../../partials/header') %>
<%- include('../../partials/admin-nav') %>

<div class="min-h-screen bg-gray-100">
    <div class="py-6">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <!-- Header -->
            <div class="md:flex md:items-center md:justify-between">
                <div class="flex-1 min-w-0">
                    <h2 class="text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate">
                        <%= supplier.name %>
                    </h2>
                    <p class="mt-1 text-sm text-gray-500">
                        Supplier ID: <%= supplier._id %>
                    </p>
                </div>
                <div class="mt-4 flex md:mt-0 md:ml-4 space-x-2">
                    <button type="button" onclick="editSupplier('<%= supplier._id %>')" class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        Edit Supplier
                    </button>
                    <button type="button" onclick="createOrder('<%= supplier._id %>')" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        Create Order
                    </button>
                </div>
            </div>

            <!-- Supplier Details -->
            <div class="mt-8 max-w-3xl mx-auto grid grid-cols-1 gap-6 sm:px-6 lg:max-w-7xl lg:grid-flow-col-dense lg:grid-cols-3">
                <!-- Main Content -->
                <div class="space-y-6 lg:col-start-1 lg:col-span-2">
                    <!-- Basic Information -->
                    <section aria-labelledby="basic-info-title" class="bg-white shadow sm:rounded-lg">
                        <div class="px-4 py-5 sm:px-6">
                            <h2 id="basic-info-title" class="text-lg leading-6 font-medium text-gray-900">Basic Information</h2>
                        </div>
                        <div class="border-t border-gray-200 px-4 py-5 sm:px-6">
                            <dl class="grid grid-cols-1 gap-x-4 gap-y-8 sm:grid-cols-2">
                                <div class="sm:col-span-1">
                                    <dt class="text-sm font-medium text-gray-500">Contact Person</dt>
                                    <dd class="mt-1 text-sm text-gray-900"><%= supplier.contact %></dd>
                                </div>
                                <div class="sm:col-span-1">
                                    <dt class="text-sm font-medium text-gray-500">Email</dt>
                                    <dd class="mt-1 text-sm text-gray-900"><%= supplier.email %></dd>
                                </div>
                                <div class="sm:col-span-1">
                                    <dt class="text-sm font-medium text-gray-500">Phone</dt>
                                    <dd class="mt-1 text-sm text-gray-900"><%= supplier.phone %></dd>
                                </div>
                                <div class="sm:col-span-2">
                                    <dt class="text-sm font-medium text-gray-500">Address</dt>
                                    <dd class="mt-1 text-sm text-gray-900"><%= supplier.address %></dd>
                                </div>
                                <div class="sm:col-span-2">
                                    <dt class="text-sm font-medium text-gray-500">Notes</dt>
                                    <dd class="mt-1 text-sm text-gray-900"><%= supplier.notes || 'No notes available' %></dd>
                                </div>
                            </dl>
                        </div>
                    </section>

                    <!-- Recent Orders -->
                    <section aria-labelledby="recent-orders-title" class="bg-white shadow sm:rounded-lg">
                        <div class="px-4 py-5 sm:px-6">
                            <h2 id="recent-orders-title" class="text-lg leading-6 font-medium text-gray-900">Recent Orders</h2>
                        </div>
                        <div class="border-t border-gray-200">
                            <div class="overflow-x-auto">
                                <table class="min-w-full divide-y divide-gray-200">
                                    <thead class="bg-gray-50">
                                        <tr>
                                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Order ID</th>
                                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Items</th>
                                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Total</th>
                                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                                            <th scope="col" class="relative px-6 py-3">
                                                <span class="sr-only">View</span>
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody class="bg-white divide-y divide-gray-200">
                                        <% supplier.recentOrders.forEach(order => { %>
                                        <tr>
                                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                                <%= order.orderNumber %>
                                            </td>
                                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                <%= moment(order.createdAt).format('MMM D, YYYY') %>
                                            </td>
                                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                <%= order.items.length %> items
                                            </td>
                                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                $<%= order.totalValue.toLocaleString() %>
                                            </td>
                                            <td class="px-6 py-4 whitespace-nowrap">
                                                <span class="inline-flex rounded-full px-2 text-xs font-semibold leading-5 
                                                    <%= order.status === 'completed' ? 'bg-green-100 text-green-800' : 
                                                        order.status === 'cancelled' ? 'bg-red-100 text-red-800' :
                                                        order.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                                                        order.status === 'approved' ? 'bg-blue-100 text-blue-800' :
                                                        order.status === 'shipped' ? 'bg-purple-100 text-purple-800' :
                                                        'bg-gray-100 text-gray-800' %>">
                                                    <%= order.status.charAt(0).toUpperCase() + order.status.slice(1) %>
                                                </span>
                                            </td>
                                            <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                                <a href="/admin/inventory/orders/<%= order._id %>" class="text-indigo-600 hover:text-indigo-900">View</a>
                                            </td>
                                        </tr>
                                        <% }); %>
                                    </tbody>
                                </table>
                            </div>
                            <div class="bg-white px-4 py-3 border-t border-gray-200 text-right sm:px-6">
                                <a href="/admin/inventory/orders?supplier=<%= supplier._id %>" class="text-sm font-medium text-indigo-600 hover:text-indigo-500">
                                    View all orders <span aria-hidden="true">&rarr;</span>
                                </a>
                            </div>
                        </div>
                    </section>

                    <!-- Supplied Items -->
                    <section aria-labelledby="supplied-items-title" class="bg-white shadow sm:rounded-lg">
                        <div class="px-4 py-5 sm:px-6">
                            <h2 id="supplied-items-title" class="text-lg leading-6 font-medium text-gray-900">Supplied Items</h2>
                        </div>
                        <div class="border-t border-gray-200">
                            <div class="overflow-x-auto">
                                <table class="min-w-full divide-y divide-gray-200">
                                    <thead class="bg-gray-50">
                                        <tr>
                                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Item</th>
                                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">SKU</th>
                                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Category</th>
                                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Unit Price</th>
                                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Stock</th>
                                            <th scope="col" class="relative px-6 py-3">
                                                <span class="sr-only">View</span>
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody class="bg-white divide-y divide-gray-200">
                                        <% supplier.items.forEach(item => { %>
                                        <tr>
                                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                                <%= item.name %>
                                            </td>
                                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                <%= item.sku %>
                                            </td>
                                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                <%= item.category.name %>
                                            </td>
                                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                $<%= item.unitPrice.toFixed(2) %>
                                            </td>
                                            <td class="px-6 py-4 whitespace-nowrap">
                                                <span class="inline-flex rounded-full px-2 text-xs font-semibold leading-5 
                                                    <%= item.stock > item.minStock ? 'bg-green-100 text-green-800' : 
                                                        item.stock === 0 ? 'bg-red-100 text-red-800' : 
                                                        'bg-yellow-100 text-yellow-800' %>">
                                                    <%= item.stock %> <%= item.unit %>
                                                </span>
                                            </td>
                                            <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                                <a href="/admin/inventory/items/<%= item._id %>" class="text-indigo-600 hover:text-indigo-900">View</a>
                                            </td>
                                        </tr>
                                        <% }); %>
                                    </tbody>
                                </table>
                            </div>
                            <div class="bg-white px-4 py-3 border-t border-gray-200 text-right sm:px-6">
                                <a href="/admin/inventory?supplier=<%= supplier._id %>" class="text-sm font-medium text-indigo-600 hover:text-indigo-500">
                                    View all items <span aria-hidden="true">&rarr;</span>
                                </a>
                            </div>
                        </div>
                    </section>
                </div>

                <!-- Sidebar -->
                <div class="lg:col-start-3 lg:col-span-1">
                    <div class="space-y-6">
                        <!-- Stats Card -->
                        <section aria-labelledby="stats-title" class="bg-white shadow sm:rounded-lg">
                            <div class="px-4 py-5 sm:px-6">
                                <h2 id="stats-title" class="text-lg leading-6 font-medium text-gray-900">Statistics</h2>
                            </div>
                            <div class="border-t border-gray-200 px-4 py-5 sm:px-6">
                                <dl class="space-y-4">
                                    <div class="flex justify-between">
                                        <dt class="text-sm font-medium text-gray-500">Total Orders</dt>
                                        <dd class="text-sm font-semibold text-gray-900"><%= supplier.stats.totalOrders %></dd>
                                    </div>
                                    <div class="flex justify-between">
                                        <dt class="text-sm font-medium text-gray-500">Active Orders</dt>
                                        <dd class="text-sm font-semibold text-gray-900"><%= supplier.stats.activeOrders %></dd>
                                    </div>
                                    <div class="flex justify-between">
                                        <dt class="text-sm font-medium text-gray-500">Items Supplied</dt>
                                        <dd class="text-sm font-semibold text-gray-900"><%= supplier.stats.itemsSupplied %></dd>
                                    </div>
                                    <div class="flex justify-between">
                                        <dt class="text-sm font-medium text-gray-500">Total Value (YTD)</dt>
                                        <dd class="text-sm font-semibold text-gray-900">$<%= supplier.stats.ytdValue.toLocaleString() %></dd>
                                    </div>
                                    <div class="flex justify-between">
                                        <dt class="text-sm font-medium text-gray-500">Average Lead Time</dt>
                                        <dd class="text-sm font-semibold text-gray-900"><%= supplier.stats.avgLeadTime %> days</dd>
                                    </div>
                                    <div class="flex justify-between">
                                        <dt class="text-sm font-medium text-gray-500">Last Order</dt>
                                        <dd class="text-sm font-semibold text-gray-900"><%= moment(supplier.stats.lastOrderDate).format('MMM D, YYYY') %></dd>
                                    </div>
                                </dl>
                            </div>
                        </section>

                        <!-- Performance Card -->
                        <section aria-labelledby="performance-title" class="bg-white shadow sm:rounded-lg">
                            <div class="px-4 py-5 sm:px-6">
                                <h2 id="performance-title" class="text-lg leading-6 font-medium text-gray-900">Performance</h2>
                            </div>
                            <div class="border-t border-gray-200 px-4 py-5 sm:px-6">
                                <dl class="space-y-4">
                                    <div class="flex justify-between">
                                        <dt class="text-sm font-medium text-gray-500">On-Time Delivery</dt>
                                        <dd class="text-sm font-semibold text-gray-900"><%= supplier.performance.onTimeDelivery %>%</dd>
                                    </div>
                                    <div class="flex justify-between">
                                        <dt class="text-sm font-medium text-gray-500">Quality Rating</dt>
                                        <dd class="text-sm font-semibold text-gray-900"><%= supplier.performance.qualityRating %>/5</dd>
                                    </div>
                                    <div class="flex justify-between">
                                        <dt class="text-sm font-medium text-gray-500">Response Time</dt>
                                        <dd class="text-sm font-semibold text-gray-900"><%= supplier.performance.responseTime %> hours</dd>
                                    </div>
                                    <div class="flex justify-between">
                                        <dt class="text-sm font-medium text-gray-500">Order Accuracy</dt>
                                        <dd class="text-sm font-semibold text-gray-900"><%= supplier.performance.orderAccuracy %>%</dd>
                                    </div>
                                </dl>
                            </div>
                        </section>

                        <!-- Documents -->
                        <section aria-labelledby="documents-title" class="bg-white shadow sm:rounded-lg">
                            <div class="px-4 py-5 sm:px-6">
                                <h2 id="documents-title" class="text-lg leading-6 font-medium text-gray-900">Documents</h2>
                            </div>
                            <div class="border-t border-gray-200 px-4 py-5 sm:px-6">
                                <ul class="divide-y divide-gray-200">
                                    <% supplier.documents.forEach(doc => { %>
                                    <li class="py-3">
                                        <div class="flex items-center space-x-3">
                                            <svg class="h-5 w-5 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                                <path fill-rule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4z" clip-rule="evenodd" />
                                            </svg>
                                            <div class="flex-1 min-w-0">
                                                <p class="text-sm font-medium text-gray-900 truncate">
                                                    <%= doc.name %>
                                                </p>
                                                <p class="text-sm text-gray-500">
                                                    <%= moment(doc.uploadedAt).format('MMM D, YYYY') %>
                                                </p>
                                            </div>
                                            <div>
                                                <a href="<%= doc.url %>" class="inline-flex items-center shadow-sm px-2.5 py-0.5 border border-gray-300 text-sm leading-5 font-medium rounded-full text-gray-700 bg-white hover:bg-gray-50">
                                                    View
                                                </a>
                                            </div>
                                        </div>
                                    </li>
                                    <% }); %>
                                </ul>
                                <div class="mt-6">
                                    <button type="button" onclick="uploadDocument('<%= supplier._id %>')" class="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                        <svg class="-ml-0.5 mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                                        </svg>
                                        Upload Document
                                    </button>
                                </div>
                            </div>
                        </section>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    function editSupplier(supplierId) {
        window.location.href = `/admin/inventory/suppliers/${supplierId}/edit`;
    }

    function createOrder(supplierId) {
        window.location.href = `/admin/inventory/orders/new?supplier=${supplierId}`;
    }

    function uploadDocument(supplierId) {
        // Implement document upload functionality
        const input = document.createElement('input');
        input.type = 'file';
        input.onchange = (e) => {
            const file = e.target.files[0];
            const formData = new FormData();
            formData.append('document', file);

            fetch(`/admin/inventory/suppliers/${supplierId}/documents`, {
                method: 'POST',
                body: formData
            })
            .then(response => {
                if (response.ok) {
                    window.location.reload();
                }
            });
        };
        input.click();
    }
</script>

<%- include('../../partials/footer') %>

================
File: src/views/admin/inventory/suppliers.ejs
================
<%- include('../../partials/header') %>
<%- include('../../partials/admin-nav') %>

<div class="min-h-screen bg-gray-100">
    <div class="py-6">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <!-- Header -->
            <div class="md:flex md:items-center md:justify-between">
                <div class="flex-1 min-w-0">
                    <h2 class="text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate">
                        Suppliers
                    </h2>
                </div>
                <div class="mt-4 flex md:mt-0 md:ml-4">
                    <button type="button" onclick="showCreateSupplierModal()" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        Add Supplier
                    </button>
                </div>
            </div>

            <!-- Stats -->
            <div class="mt-8 grid grid-cols-1 gap-5 sm:grid-cols-4">
                <div class="bg-white overflow-hidden shadow rounded-lg">
                    <div class="p-5">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <svg class="h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                                </svg>
                            </div>
                            <div class="ml-5 w-0 flex-1">
                                <dl>
                                    <dt class="text-sm font-medium text-gray-500 truncate">Total Suppliers</dt>
                                    <dd class="flex items-baseline">
                                        <div class="text-2xl font-semibold text-gray-900"><%= stats.totalSuppliers %></div>
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="bg-white overflow-hidden shadow rounded-lg">
                    <div class="p-5">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <svg class="h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                                </svg>
                            </div>
                            <div class="ml-5 w-0 flex-1">
                                <dl>
                                    <dt class="text-sm font-medium text-gray-500 truncate">Active Orders</dt>
                                    <dd class="flex items-baseline">
                                        <div class="text-2xl font-semibold text-gray-900"><%= stats.activeOrders %></div>
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="bg-white overflow-hidden shadow rounded-lg">
                    <div class="p-5">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <svg class="h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />
                                </svg>
                            </div>
                            <div class="ml-5 w-0 flex-1">
                                <dl>
                                    <dt class="text-sm font-medium text-gray-500 truncate">Total Items</dt>
                                    <dd class="flex items-baseline">
                                        <div class="text-2xl font-semibold text-gray-900"><%= stats.totalItems %></div>
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="bg-white overflow-hidden shadow rounded-lg">
                    <div class="p-5">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <svg class="h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                            </div>
                            <div class="ml-5 w-0 flex-1">
                                <dl>
                                    <dt class="text-sm font-medium text-gray-500 truncate">Monthly Orders Value</dt>
                                    <dd class="flex items-baseline">
                                        <div class="text-2xl font-semibold text-gray-900">$<%= stats.monthlyOrdersValue.toLocaleString() %></div>
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Suppliers List -->
            <div class="mt-8 flex flex-col">
                <div class="-my-2 -mx-4 overflow-x-auto sm:-mx-6 lg:-mx-8">
                    <div class="inline-block min-w-full py-2 align-middle md:px-6 lg:px-8">
                        <div class="overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg">
                            <table class="min-w-full divide-y divide-gray-300">
                                <thead class="bg-gray-50">
                                    <tr>
                                        <th scope="col" class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6">Name</th>
                                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Contact</th>
                                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Email</th>
                                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Phone</th>
                                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Active Orders</th>
                                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Total Orders</th>
                                        <th scope="col" class="relative py-3.5 pl-3 pr-4 sm:pr-6">
                                            <span class="sr-only">Actions</span>
                                        </th>
                                    </tr>
                                </thead>
                                <tbody class="divide-y divide-gray-200 bg-white">
                                    <% suppliers.forEach(supplier => { %>
                                    <tr>
                                        <td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-6">
                                            <%= supplier.name %>
                                        </td>
                                        <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                            <%= supplier.contact %>
                                        </td>
                                        <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                            <%= supplier.email %>
                                        </td>
                                        <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                            <%= supplier.phone %>
                                        </td>
                                        <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                            <%= supplier.activeOrders %>
                                        </td>
                                        <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                            <%= supplier.totalOrders %>
                                        </td>
                                        <td class="relative whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-6">
                                            <button onclick="viewSupplier('<%= supplier._id %>')" class="text-indigo-600 hover:text-indigo-900 mr-3">View</button>
                                            <button onclick="editSupplier('<%= supplier._id %>')" class="text-blue-600 hover:text-blue-900 mr-3">Edit</button>
                                            <% if (!supplier.activeOrders) { %>
                                            <button onclick="deleteSupplier('<%= supplier._id %>')" class="text-red-600 hover:text-red-900">Delete</button>
                                            <% } %>
                                        </td>
                                    </tr>
                                    <% }); %>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create/Edit Supplier Modal -->
<div id="supplierModal" class="fixed z-10 inset-0 overflow-y-auto hidden" aria-labelledby="modal-title" role="dialog" aria-modal="true">
    <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
        <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
        <div class="inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full sm:p-6">
            <form id="supplierForm" method="POST">
                <div>
                    <div class="mt-3 text-center sm:mt-5">
                        <h3 class="text-lg leading-6 font-medium text-gray-900" id="modal-title">
                            Create Supplier
                        </h3>
                    </div>

                    <div class="mt-6">
                        <label for="name" class="block text-sm font-medium text-gray-700">Name</label>
                        <input type="text" name="name" id="name" required class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                    </div>

                    <div class="mt-6">
                        <label for="contact" class="block text-sm font-medium text-gray-700">Contact Person</label>
                        <input type="text" name="contact" id="contact" required class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                    </div>

                    <div class="mt-6">
                        <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
                        <input type="email" name="email" id="email" required class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                    </div>

                    <div class="mt-6">
                        <label for="phone" class="block text-sm font-medium text-gray-700">Phone</label>
                        <input type="tel" name="phone" id="phone" required class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                    </div>

                    <div class="mt-6">
                        <label for="address" class="block text-sm font-medium text-gray-700">Address</label>
                        <textarea name="address" id="address" rows="3" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"></textarea>
                    </div>

                    <div class="mt-6">
                        <label for="notes" class="block text-sm font-medium text-gray-700">Notes</label>
                        <textarea name="notes" id="notes" rows="3" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"></textarea>
                    </div>
                </div>

                <div class="mt-5 sm:mt-6 sm:grid sm:grid-cols-2 sm:gap-3 sm:grid-flow-row-dense">
                    <button type="submit" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-indigo-600 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:col-start-2 sm:text-sm">
                        Save
                    </button>
                    <button type="button" onclick="hideSupplierModal()" class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:col-start-1 sm:text-sm">
                        Cancel
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    function showCreateSupplierModal() {
        document.getElementById('modal-title').textContent = 'Create Supplier';
        document.getElementById('supplierForm').reset();
        document.getElementById('supplierForm').action = '/admin/inventory/suppliers';
        document.getElementById('supplierModal').classList.remove('hidden');
    }

    function editSupplier(supplierId) {
        fetch(`/admin/inventory/suppliers/${supplierId}`)
            .then(response => response.json())
            .then(supplier => {
                document.getElementById('modal-title').textContent = 'Edit Supplier';
                document.getElementById('name').value = supplier.name;
                document.getElementById('contact').value = supplier.contact;
                document.getElementById('email').value = supplier.email;
                document.getElementById('phone').value = supplier.phone;
                document.getElementById('address').value = supplier.address;
                document.getElementById('notes').value = supplier.notes;
                document.getElementById('supplierForm').action = `/admin/inventory/suppliers/${supplierId}`;
                document.getElementById('supplierModal').classList.remove('hidden');
            });
    }

    function hideSupplierModal() {
        document.getElementById('supplierModal').classList.add('hidden');
    }

    function viewSupplier(supplierId) {
        window.location.href = `/admin/inventory/suppliers/${supplierId}`;
    }

    function deleteSupplier(supplierId) {
        if (confirm('Are you sure you want to delete this supplier? This action cannot be undone.')) {
            fetch(`/admin/inventory/suppliers/${supplierId}`, {
                method: 'DELETE'
            })
            .then(response => {
                if (response.ok) {
                    window.location.reload();
                }
            });
        }
    }

    // Close modals when clicking outside
    window.onclick = function(event) {
        let modal = document.getElementById('supplierModal');
        if (event.target == modal) {
            hideSupplierModal();
        }
    }
</script>

<%- include('../../partials/footer') %>

================
File: src/views/admin/loyalty/dashboard.hbs
================
{{> admin/header}}
{{> admin/sidebar}}

<div class="main-content">
    <div class="container-fluid p-4">
        <!-- Page Header -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h1 class="h3 mb-0">Loyalty Program Management</h1>
                        <nav aria-label="breadcrumb">
                            <ol class="breadcrumb mb-0">
                                <li class="breadcrumb-item"><a href="/admin/dashboard">Dashboard</a></li>
                                <li class="breadcrumb-item active">Loyalty Program</li>
                            </ol>
                        </nav>
                    </div>
                    <div>
                        <button class="btn btn-primary me-2" data-bs-toggle="modal" data-bs-target="#createRewardModal">
                            <i class="fas fa-gift me-2"></i>Add New Reward
                        </button>
                        <button class="btn btn-outline-primary" data-bs-toggle="modal" data-bs-target="#promotionModal">
                            <i class="fas fa-bullhorn me-2"></i>Create Promotion
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Statistics Cards -->
        <div class="row g-3 mb-4">
            <div class="col-sm-6 col-xl-3">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex align-items-start justify-content-between">
                            <div>
                                <h6 class="text-muted mb-2">Total Members</h6>
                                <h4 class="mb-0">{{stats.totalMembers}}</h4>
                                <small class="text-success">
                                    <i class="fas fa-arrow-up me-1"></i>{{stats.memberGrowth}}% this month
                                </small>
                            </div>
                            <div class="avatar bg-light-primary">
                                <i class="fas fa-users text-primary"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-6 col-xl-3">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex align-items-start justify-content-between">
                            <div>
                                <h6 class="text-muted mb-2">Points Issued</h6>
                                <h4 class="mb-0">{{stats.totalPointsIssued}}</h4>
                                <small class="text-muted">Value: ${{stats.pointsValue}}</small>
                            </div>
                            <div class="avatar bg-light-success">
                                <i class="fas fa-star text-success"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-6 col-xl-3">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex align-items-start justify-content-between">
                            <div>
                                <h6 class="text-muted mb-2">Points Redeemed</h6>
                                <h4 class="mb-0">{{stats.totalPointsRedeemed}}</h4>
                                <small class="text-muted">{{stats.redemptionRate}}% redemption rate</small>
                            </div>
                            <div class="avatar bg-light-warning">
                                <i class="fas fa-exchange-alt text-warning"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-6 col-xl-3">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex align-items-start justify-content-between">
                            <div>
                                <h6 class="text-muted mb-2">Active Rewards</h6>
                                <h4 class="mb-0">{{stats.activeRewards}}</h4>
                                <small class="text-muted">{{stats.redeemedRewards}} redeemed</small>
                            </div>
                            <div class="avatar bg-light-info">
                                <i class="fas fa-gift text-info"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Tier Distribution Chart -->
        <div class="row mb-4">
            <div class="col-xl-8">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Member Tier Distribution</h5>
                    </div>
                    <div class="card-body">
                        <canvas id="tierDistributionChart" height="300"></canvas>
                    </div>
                </div>
            </div>
            <div class="col-xl-4">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Points Activity</h5>
                    </div>
                    <div class="card-body">
                        <canvas id="pointsActivityChart" height="300"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Member Tiers -->
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="card-title mb-0">Membership Tiers</h5>
            </div>
            <div class="card-body">
                <div class="row g-3">
                    {{#each tiers}}
                    <div class="col-md-3">
                        <div class="card bg-light border-0">
                            <div class="card-body text-center">
                                <div class="avatar avatar-lg bg-white mb-3">
                                    <i class="fas {{icon}} text-{{color}}"></i>
                                </div>
                                <h5 class="mb-2">{{name}}</h5>
                                <p class="text-muted small mb-3">{{description}}</p>
                                <div class="d-flex justify-content-between text-muted small">
                                    <span>{{memberCount}} members</span>
                                    <span>{{pointsRequired}} points</span>
                                </div>
                            </div>
                        </div>
                    </div>
                    {{/each}}
                </div>
            </div>
        </div>

        <!-- Active Rewards -->
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="card-title mb-0">Active Rewards</h5>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Reward</th>
                                <th>Points Required</th>
                                <th>Available For</th>
                                <th>Claimed</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            {{#each rewards}}
                            <tr>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div class="avatar me-2">
                                            <i class="fas {{icon}} text-{{color}}"></i>
                                        </div>
                                        <div>
                                            <h6 class="mb-0">{{name}}</h6>
                                            <small class="text-muted">{{description}}</small>
                                        </div>
                                    </div>
                                </td>
                                <td>{{pointsRequired}}</td>
                                <td>{{availableTiers}}</td>
                                <td>{{claimedCount}}/{{totalAvailable}}</td>
                                <td>
                                    <span class="badge bg-{{statusColor}}">{{status}}</span>
                                </td>
                                <td>
                                    <div class="dropdown">
                                        <button class="btn btn-link text-dark p-0" data-bs-toggle="dropdown">
                                            <i class="fas fa-ellipsis-v"></i>
                                        </button>
                                        <ul class="dropdown-menu dropdown-menu-end">
                                            <li><a class="dropdown-item" href="#" onclick="editReward('{{id}}')">
                                                <i class="fas fa-edit me-2"></i>Edit
                                            </a></li>
                                            <li><a class="dropdown-item" href="#" onclick="viewRewardStats('{{id}}')">
                                                <i class="fas fa-chart-bar me-2"></i>View Stats
                                            </a></li>
                                            <li><hr class="dropdown-divider"></li>
                                            <li><button class="dropdown-item text-danger" onclick="deactivateReward('{{id}}')">
                                                <i class="fas fa-trash-alt me-2"></i>Deactivate
                                            </button></li>
                                        </ul>
                                    </div>
                                </td>
                            </tr>
                            {{/each}}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Recent Activity -->
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">Recent Activity</h5>
            </div>
            <div class="card-body">
                <div class="timeline">
                    {{#each activities}}
                    <div class="timeline-item">
                        <div class="timeline-icon bg-{{type}}">
                            <i class="fas {{icon}}"></i>
                        </div>
                        <div class="timeline-content">
                            <h6 class="mb-1">{{title}}</h6>
                            <p class="text-muted mb-0">{{description}}</p>
                            <small class="text-muted">{{time}}</small>
                        </div>
                    </div>
                    {{/each}}
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create Reward Modal -->
<div class="modal fade" id="createRewardModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create New Reward</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="createRewardForm">
                    <div class="mb-3">
                        <label class="form-label">Reward Name</label>
                        <input type="text" class="form-control" name="name" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea class="form-control" name="description" rows="3" required></textarea>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Points Required</label>
                        <input type="number" class="form-control" name="pointsRequired" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Available For</label>
                        <select class="form-select" name="availableTiers" multiple required>
                            <option value="bronze">Bronze</option>
                            <option value="silver">Silver</option>
                            <option value="gold">Gold</option>
                            <option value="platinum">Platinum</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Total Available</label>
                        <input type="number" class="form-control" name="totalAvailable" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Expiry Date</label>
                        <input type="date" class="form-control" name="expiryDate" required>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="createReward()">Create Reward</button>
            </div>
        </div>
    </div>
</div>

<!-- Promotion Modal -->
<div class="modal fade" id="promotionModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create Promotion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="promotionForm">
                    <div class="mb-3">
                        <label class="form-label">Promotion Name</label>
                        <input type="text" class="form-control" name="name" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea class="form-control" name="description" rows="3" required></textarea>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Promotion Type</label>
                        <select class="form-select" name="type" required>
                            <option value="bonus_points">Bonus Points</option>
                            <option value="tier_upgrade">Tier Upgrade</option>
                            <option value="discount">Point Redemption Discount</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Target Tiers</label>
                        <select class="form-select" name="targetTiers" multiple required>
                            <option value="bronze">Bronze</option>
                            <option value="silver">Silver</option>
                            <option value="gold">Gold</option>
                            <option value="platinum">Platinum</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Start Date</label>
                        <input type="date" class="form-control" name="startDate" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">End Date</label>
                        <input type="date" class="form-control" name="endDate" required>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="createPromotion()">Create Promotion</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
// Initialize charts when the page loads
document.addEventListener('DOMContentLoaded', function() {
    // Tier Distribution Chart
    const tierCtx = document.getElementById('tierDistributionChart').getContext('2d');
    new Chart(tierCtx, {
        type: 'bar',
        data: {
            labels: ['Bronze', 'Silver', 'Gold', 'Platinum'],
            datasets: [{
                label: 'Members',
                data: [{{stats.bronzeMembers}}, {{stats.silverMembers}}, {{stats.goldMembers}}, {{stats.platinumMembers}}],
                backgroundColor: ['#CD7F32', '#C0C0C0', '#FFD700', '#E5E4E2']
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                }
            }
        }
    });

    // Points Activity Chart
    const pointsCtx = document.getElementById('pointsActivityChart').getContext('2d');
    new Chart(pointsCtx, {
        type: 'doughnut',
        data: {
            labels: ['Earned', 'Redeemed', 'Expired'],
            datasets: [{
                data: [{{stats.pointsEarned}}, {{stats.pointsRedeemed}}, {{stats.pointsExpired}}],
                backgroundColor: ['#28a745', '#17a2b8', '#dc3545']
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false
        }
    });
});

// Create new reward
async function createReward() {
    const form = document.getElementById('createRewardForm');
    const formData = new FormData(form);
    
    try {
        const response = await fetch('/admin/loyalty/rewards', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(Object.fromEntries(formData))
        });
        
        if (response.ok) {
            location.reload();
        } else {
            alert('Failed to create reward');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('An error occurred');
    }
}

// Create new promotion
async function createPromotion() {
    const form = document.getElementById('promotionForm');
    const formData = new FormData(form);
    
    try {
        const response = await fetch('/admin/loyalty/promotions', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(Object.fromEntries(formData))
        });
        
        if (response.ok) {
            location.reload();
        } else {
            alert('Failed to create promotion');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('An error occurred');
    }
}

// Edit reward
function editReward(id) {
    // Implementation
}

// View reward statistics
function viewRewardStats(id) {
    // Implementation
}

// Deactivate reward
async function deactivateReward(id) {
    if (!confirm('Are you sure you want to deactivate this reward?')) {
        return;
    }
    
    try {
        const response = await fetch(`/admin/loyalty/rewards/${id}`, {
            method: 'DELETE'
        });
        
        if (response.ok) {
            location.reload();
        } else {
            alert('Failed to deactivate reward');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('An error occurred');
    }
}
</script>

================
File: src/views/admin/loyalty/index.ejs
================
<%- include('../../partials/header') %>
<%- include('../../partials/admin-nav') %>

<div class="min-h-screen bg-gray-100">
    <div class="py-6">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <!-- Header -->
            <div class="md:flex md:items-center md:justify-between">
                <div class="flex-1 min-w-0">
                    <h2 class="text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate">
                        Loyalty Program Management
                    </h2>
                </div>
                <div class="mt-4 flex md:mt-0 md:ml-4">
                    <a href="/admin/loyalty/rewards/new" class="ml-3 inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        Add New Reward
                    </a>
                </div>
            </div>

            <!-- Tier Overview -->
            <div class="mt-8 bg-white shadow overflow-hidden sm:rounded-lg">
                <div class="px-4 py-5 sm:px-6">
                    <h3 class="text-lg leading-6 font-medium text-gray-900">
                        Membership Tiers
                    </h3>
                    <p class="mt-1 max-w-2xl text-sm text-gray-500">
                        Overview of loyalty program tiers and their benefits
                    </p>
                </div>
                <div class="border-t border-gray-200">
                    <div class="bg-gray-50 px-4 py-5 grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-4">
                        <% ['Bronze', 'Silver', 'Gold', 'Platinum'].forEach(tier => { %>
                        <div class="relative rounded-lg border border-gray-300 bg-white px-6 py-5 shadow-sm flex items-center space-x-3 hover:border-gray-400">
                            <div class="flex-shrink-0">
                                <div class="h-10 w-10 rounded-full flex items-center justify-center
                                    <%= tier === 'Bronze' ? 'bg-yellow-700' :
                                        tier === 'Silver' ? 'bg-gray-400' :
                                        tier === 'Gold' ? 'bg-yellow-500' :
                                        'bg-gray-800' %>">
                                    <svg class="h-6 w-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 3v4M3 5h4M6 17v4m-2-2h4m5-16l2.286 6.857L21 12l-5.714 2.143L13 21l-2.286-6.857L5 12l5.714-2.143L13 3z" />
                                    </svg>
                                </div>
                            </div>
                            <div class="flex-1 min-w-0">
                                <a href="/admin/loyalty/tiers/<%= tier.toLowerCase() %>" class="focus:outline-none">
                                    <p class="text-sm font-medium text-gray-900"><%= tier %></p>
                                    <p class="text-sm text-gray-500 truncate">
                                        <%= loyaltyStats[tier]?.count || 0 %> members
                                    </p>
                                </a>
                            </div>
                        </div>
                        <% }); %>
                    </div>
                </div>
            </div>

            <!-- Program Statistics -->
            <div class="mt-8 grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-3">
                <!-- Total Points -->
                <div class="bg-white overflow-hidden shadow rounded-lg">
                    <div class="p-5">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <svg class="h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                            </div>
                            <div class="ml-5 w-0 flex-1">
                                <dl>
                                    <dt class="text-sm font-medium text-gray-500 truncate">Total Points Issued</dt>
                                    <dd class="flex items-baseline">
                                        <div class="text-2xl font-semibold text-gray-900">
                                            <%= totalPoints.toLocaleString() %>
                                        </div>
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Points Redeemed -->
                <div class="bg-white overflow-hidden shadow rounded-lg">
                    <div class="p-5">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <svg class="h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 14l6-6m-5.5.5h.01m4.99 5h.01M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16l3.5-2 3.5 2 3.5-2 3.5 2zM10 8.5a.5.5 0 11-1 0 .5.5 0 011 0zm5 5a.5.5 0 11-1 0 .5.5 0 011 0z" />
                                </svg>
                            </div>
                            <div class="ml-5 w-0 flex-1">
                                <dl>
                                    <dt class="text-sm font-medium text-gray-500 truncate">Points Redeemed</dt>
                                    <dd class="flex items-baseline">
                                        <div class="text-2xl font-semibold text-gray-900">
                                            <%= pointsRedeemed.toLocaleString() %>
                                        </div>
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Active Rewards -->
                <div class="bg-white overflow-hidden shadow rounded-lg">
                    <div class="p-5">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <svg class="h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v13m0-13V6a2 2 0 112 2h-2zm0 0V5.5A2.5 2.5 0 109.5 8H12zm-7 4h14M5 12a2 2 0 110-4h14a2 2 0 110 4M5 12v7a2 2 0 002 2h10a2 2 0 002-2v-7" />
                                </svg>
                            </div>
                            <div class="ml-5 w-0 flex-1">
                                <dl>
                                    <dt class="text-sm font-medium text-gray-500 truncate">Active Rewards</dt>
                                    <dd class="flex items-baseline">
                                        <div class="text-2xl font-semibold text-gray-900">
                                            <%= activeRewards %>
                                        </div>
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Recent Activity -->
            <div class="mt-8 grid grid-cols-1 gap-5 lg:grid-cols-2">
                <!-- Recent Redemptions -->
                <div class="bg-white shadow sm:rounded-lg">
                    <div class="px-4 py-5 sm:p-6">
                        <h3 class="text-lg leading-6 font-medium text-gray-900">
                            Recent Redemptions
                        </h3>
                        <div class="mt-5">
                            <div class="flow-root">
                                <ul class="-my-5 divide-y divide-gray-200">
                                    <% recentRedemptions.forEach(redemption => { %>
                                    <li class="py-4">
                                        <div class="flex items-center space-x-4">
                                            <div class="flex-1 min-w-0">
                                                <p class="text-sm font-medium text-gray-900 truncate">
                                                    <%= redemption.user.name %>
                                                </p>
                                                <p class="text-sm text-gray-500 truncate">
                                                    <%= redemption.reward.name %> (<%= redemption.pointsCost %> points)
                                                </p>
                                            </div>
                                            <div class="text-sm text-gray-500">
                                                <%= moment(redemption.date).fromNow() %>
                                            </div>
                                        </div>
                                    </li>
                                    <% }); %>
                                </ul>
                            </div>
                            <div class="mt-6">
                                <a href="/admin/loyalty/redemptions" class="w-full flex justify-center items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                                    View all redemptions
                                </a>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Top Rewards -->
                <div class="bg-white shadow sm:rounded-lg">
                    <div class="px-4 py-5 sm:p-6">
                        <h3 class="text-lg leading-6 font-medium text-gray-900">
                            Popular Rewards
                        </h3>
                        <div class="mt-5">
                            <div class="flow-root">
                                <ul class="-my-5 divide-y divide-gray-200">
                                    <% topRewards.forEach(reward => { %>
                                    <li class="py-4">
                                        <div class="flex items-center space-x-4">
                                            <div class="flex-1 min-w-0">
                                                <p class="text-sm font-medium text-gray-900 truncate">
                                                    <%= reward.name %>
                                                </p>
                                                <p class="text-sm text-gray-500 truncate">
                                                    <%= reward.redemptions %> redemptions
                                                </p>
                                            </div>
                                            <div class="text-sm font-medium text-indigo-600">
                                                <%= reward.pointsCost %> points
                                            </div>
                                        </div>
                                    </li>
                                    <% }); %>
                                </ul>
                            </div>
                            <div class="mt-6">
                                <a href="/admin/loyalty/rewards" class="w-full flex justify-center items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                                    View all rewards
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Referral Program -->
            <div class="mt-8">
                <div class="bg-white shadow sm:rounded-lg">
                    <div class="px-4 py-5 sm:p-6">
                        <h3 class="text-lg leading-6 font-medium text-gray-900">
                            Referral Program Overview
                        </h3>
                        <div class="mt-5 grid grid-cols-1 gap-5 sm:grid-cols-3">
                            <div class="px-4 py-5 bg-gray-50 shadow rounded-lg overflow-hidden sm:p-6">
                                <dt class="text-sm font-medium text-gray-500 truncate">
                                    Total Referrals
                                </dt>
                                <dd class="mt-1 text-3xl font-semibold text-gray-900">
                                    <%= referralStats.total %>
                                </dd>
                            </div>
                            <div class="px-4 py-5 bg-gray-50 shadow rounded-lg overflow-hidden sm:p-6">
                                <dt class="text-sm font-medium text-gray-500 truncate">
                                    Successful Conversions
                                </dt>
                                <dd class="mt-1 text-3xl font-semibold text-gray-900">
                                    <%= referralStats.conversions %>
                                </dd>
                            </div>
                            <div class="px-4 py-5 bg-gray-50 shadow rounded-lg overflow-hidden sm:p-6">
                                <dt class="text-sm font-medium text-gray-500 truncate">
                                    Points Awarded
                                </dt>
                                <dd class="mt-1 text-3xl font-semibold text-gray-900">
                                    <%= referralStats.pointsAwarded.toLocaleString() %>
                                </dd>
                            </div>
                        </div>
                        <div class="mt-6">
                            <a href="/admin/loyalty/referrals" class="w-full flex justify-center items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                                View referral details
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<%- include('../../partials/footer') %>

================
File: src/views/admin/loyalty/referrals.ejs
================
<%- include('../../partials/header') %>
<%- include('../../partials/admin-nav') %>

<div class="min-h-screen bg-gray-100">
    <div class="py-6">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <!-- Header -->
            <div class="md:flex md:items-center md:justify-between">
                <div class="flex-1 min-w-0">
                    <h2 class="text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate">
                        Referral Program Management
                    </h2>
                </div>
                <div class="mt-4 flex md:mt-0 md:ml-4">
                    <button type="button" onclick="showConfigModal()" class="ml-3 inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        Configure Program
                    </button>
                </div>
            </div>

            <!-- Program Overview -->
            <div class="mt-8 bg-white shadow overflow-hidden sm:rounded-lg">
                <div class="px-4 py-5 sm:px-6">
                    <h3 class="text-lg leading-6 font-medium text-gray-900">
                        Program Overview
                    </h3>
                    <p class="mt-1 max-w-2xl text-sm text-gray-500">
                        Current referral program statistics and performance metrics
                    </p>
                </div>
                <div class="border-t border-gray-200">
                    <dl>
                        <div class="bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                            <dt class="text-sm font-medium text-gray-500">
                                Total Referrals
                            </dt>
                            <dd class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                                <%= stats.totalReferrals %>
                            </dd>
                        </div>
                        <div class="bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                            <dt class="text-sm font-medium text-gray-500">
                                Successful Conversions
                            </dt>
                            <dd class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                                <%= stats.conversions %> (<%= stats.conversionRate %>%)
                            </dd>
                        </div>
                        <div class="bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                            <dt class="text-sm font-medium text-gray-500">
                                Points Awarded
                            </dt>
                            <dd class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                                <%= stats.totalPointsAwarded.toLocaleString() %> points
                            </dd>
                        </div>
                        <div class="bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                            <dt class="text-sm font-medium text-gray-500">
                                Average Points per Referral
                            </dt>
                            <dd class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                                <%= stats.avgPointsPerReferral.toLocaleString() %> points
                            </dd>
                        </div>
                    </dl>
                </div>
            </div>

            <!-- Recent Referrals -->
            <div class="mt-8">
                <div class="sm:flex sm:items-center">
                    <div class="sm:flex-auto">
                        <h3 class="text-lg leading-6 font-medium text-gray-900">Recent Referrals</h3>
                        <p class="mt-2 text-sm text-gray-700">A list of all referrals including referrer and referee details.</p>
                    </div>
                </div>
                <div class="mt-4 flex flex-col">
                    <div class="-my-2 -mx-4 overflow-x-auto sm:-mx-6 lg:-mx-8">
                        <div class="inline-block min-w-full py-2 align-middle md:px-6 lg:px-8">
                            <div class="overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg">
                                <table class="min-w-full divide-y divide-gray-300">
                                    <thead class="bg-gray-50">
                                        <tr>
                                            <th scope="col" class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6">Referrer</th>
                                            <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Referee</th>
                                            <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Status</th>
                                            <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Points Awarded</th>
                                            <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Date</th>
                                        </tr>
                                    </thead>
                                    <tbody class="divide-y divide-gray-200 bg-white">
                                        <% referrals.forEach(referral => { %>
                                        <tr>
                                            <td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm sm:pl-6">
                                                <div class="flex items-center">
                                                    <div class="h-10 w-10 flex-shrink-0">
                                                        <img class="h-10 w-10 rounded-full" src="<%= referral.referrer.avatar || '/images/default-avatar.png' %>" alt="">
                                                    </div>
                                                    <div class="ml-4">
                                                        <div class="font-medium text-gray-900"><%= referral.referrer.name %></div>
                                                        <div class="text-gray-500"><%= referral.referrer.email %></div>
                                                    </div>
                                                </div>
                                            </td>
                                            <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                                <div class="text-gray-900"><%= referral.referee.name %></div>
                                                <div class="text-gray-500"><%= referral.referee.email %></div>
                                            </td>
                                            <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                                <span class="inline-flex rounded-full px-2 text-xs font-semibold leading-5 <%= referral.status === 'completed' ? 'bg-green-100 text-green-800' : referral.status === 'pending' ? 'bg-yellow-100 text-yellow-800' : 'bg-red-100 text-red-800' %>">
                                                    <%= referral.status.charAt(0).toUpperCase() + referral.status.slice(1) %>
                                                </span>
                                            </td>
                                            <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                                <%= referral.pointsAwarded ? referral.pointsAwarded.toLocaleString() : '-' %>
                                            </td>
                                            <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                                <%= moment(referral.date).format('MMM D, YYYY') %>
                                            </td>
                                        </tr>
                                        <% }); %>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Top Referrers -->
            <div class="mt-8">
                <div class="sm:flex sm:items-center">
                    <div class="sm:flex-auto">
                        <h3 class="text-lg leading-6 font-medium text-gray-900">Top Referrers</h3>
                        <p class="mt-2 text-sm text-gray-700">Members who have made the most successful referrals.</p>
                    </div>
                </div>
                <div class="mt-4 grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-3">
                    <% topReferrers.forEach(referrer => { %>
                    <div class="bg-white overflow-hidden shadow rounded-lg">
                        <div class="p-5">
                            <div class="flex items-center">
                                <div class="flex-shrink-0">
                                    <img class="h-12 w-12 rounded-full" src="<%= referrer.avatar || '/images/default-avatar.png' %>" alt="">
                                </div>
                                <div class="ml-5 w-0 flex-1">
                                    <dl>
                                        <dt class="text-sm font-medium text-gray-500 truncate"><%= referrer.name %></dt>
                                        <dd class="flex items-baseline">
                                            <div class="text-2xl font-semibold text-gray-900"><%= referrer.totalReferrals %></div>
                                            <div class="ml-2 flex items-baseline text-sm font-semibold text-green-600">
                                                <span class="sr-only">Earned</span>
                                                <%= referrer.totalPoints.toLocaleString() %> points
                                            </div>
                                        </dd>
                                    </dl>
                                </div>
                            </div>
                        </div>
                        <div class="bg-gray-50 px-5 py-3">
                            <div class="text-sm">
                                <a href="/admin/guests/<%= referrer._id %>" class="font-medium text-indigo-600 hover:text-indigo-900">View profile</a>
                            </div>
                        </div>
                    </div>
                    <% }); %>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Program Configuration Modal -->
<div id="configModal" class="fixed z-10 inset-0 overflow-y-auto hidden" aria-labelledby="modal-title" role="dialog" aria-modal="true">
    <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
        <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
        <div class="inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full sm:p-6">
            <form id="configForm" method="POST" action="/admin/loyalty/referrals/config">
                <div>
                    <div class="mt-3 text-center sm:mt-5">
                        <h3 class="text-lg leading-6 font-medium text-gray-900" id="modal-title">
                            Referral Program Configuration
                        </h3>
                        <div class="mt-2">
                            <div class="space-y-6">
                                <div>
                                    <label for="referrerPoints" class="block text-sm font-medium text-gray-700">Points for Referrer</label>
                                    <input type="number" name="referrerPoints" id="referrerPoints" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" required>
                                    <p class="mt-2 text-sm text-gray-500">Points awarded to the member who makes a successful referral</p>
                                </div>

                                <div>
                                    <label for="refereePoints" class="block text-sm font-medium text-gray-700">Points for Referee</label>
                                    <input type="number" name="refereePoints" id="refereePoints" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" required>
                                    <p class="mt-2 text-sm text-gray-500">Welcome points for the new member who joins through referral</p>
                                </div>

                                <div>
                                    <label for="minimumStay" class="block text-sm font-medium text-gray-700">Minimum Stay Requirement</label>
                                    <input type="number" name="minimumStay" id="minimumStay" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" required>
                                    <p class="mt-2 text-sm text-gray-500">Minimum nights the referred member must stay for a successful referral</p>
                                </div>

                                <div>
                                    <label for="expiryDays" class="block text-sm font-medium text-gray-700">Referral Link Expiry (Days)</label>
                                    <input type="number" name="expiryDays" id="expiryDays" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" required>
                                    <p class="mt-2 text-sm text-gray-500">Number of days before a referral link expires</p>
                                </div>

                                <div>
                                    <label for="maxReferrals" class="block text-sm font-medium text-gray-700">Maximum Referrals per Member</label>
                                    <input type="number" name="maxReferrals" id="maxReferrals" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" required>
                                    <p class="mt-2 text-sm text-gray-500">Maximum number of successful referrals allowed per member per month</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="mt-5 sm:mt-6 sm:grid sm:grid-cols-2 sm:gap-3 sm:grid-flow-row-dense">
                    <button type="submit" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-indigo-600 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:col-start-2 sm:text-sm">
                        Save Configuration
                    </button>
                    <button type="button" onclick="hideConfigModal()" class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:col-start-1 sm:text-sm">
                        Cancel
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    // Modal Functions
    function showConfigModal() {
        // Fetch current configuration
        fetch('/admin/loyalty/referrals/config')
            .then(response => response.json())
            .then(config => {
                document.getElementById('referrerPoints').value = config.referrerPoints;
                document.getElementById('refereePoints').value = config.refereePoints;
                document.getElementById('minimumStay').value = config.minimumStay;
                document.getElementById('expiryDays').value = config.expiryDays;
                document.getElementById('maxReferrals').value = config.maxReferrals;
                document.getElementById('configModal').classList.remove('hidden');
            });
    }

    function hideConfigModal() {
        document.getElementById('configModal').classList.add('hidden');
    }

    // Form submission
    document.getElementById('configForm').addEventListener('submit', function(e) {
        e.preventDefault();
        
        const formData = new FormData(this);
        const data = Object.fromEntries(formData.entries());

        fetch('/admin/loyalty/referrals/config', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
        .then(response => {
            if (response.ok) {
                window.location.reload();
            }
        });
    });
</script>

<%- include('../../partials/footer') %>

================
File: src/views/admin/loyalty/rewards.ejs
================
<%- include('../../partials/header') %>
<%- include('../../partials/admin-nav') %>

<div class="min-h-screen bg-gray-100">
    <div class="py-6">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <!-- Header -->
            <div class="md:flex md:items-center md:justify-between">
                <div class="flex-1 min-w-0">
                    <h2 class="text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate">
                        Rewards Catalog
                    </h2>
                </div>
                <div class="mt-4 flex md:mt-0 md:ml-4">
                    <button type="button" onclick="showAddRewardModal()" class="ml-3 inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        Add New Reward
                    </button>
                </div>
            </div>

            <!-- Filters -->
            <div class="mt-8 bg-white shadow sm:rounded-lg">
                <div class="px-4 py-5 sm:p-6">
                    <div class="grid grid-cols-1 gap-4 sm:grid-cols-4">
                        <div>
                            <label for="category" class="block text-sm font-medium text-gray-700">Category</label>
                            <select id="category" name="category" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                                <option value="">All Categories</option>
                                <option value="room_upgrade">Room Upgrades</option>
                                <option value="dining">Dining</option>
                                <option value="spa">Spa & Wellness</option>
                                <option value="experience">Experiences</option>
                                <option value="service">Services</option>
                            </select>
                        </div>

                        <div>
                            <label for="points" class="block text-sm font-medium text-gray-700">Points Range</label>
                            <select id="points" name="points" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                                <option value="">All Points</option>
                                <option value="0-1000">0 - 1,000 points</option>
                                <option value="1001-5000">1,001 - 5,000 points</option>
                                <option value="5001-10000">5,001 - 10,000 points</option>
                                <option value="10001+">10,001+ points</option>
                            </select>
                        </div>

                        <div>
                            <label for="status" class="block text-sm font-medium text-gray-700">Status</label>
                            <select id="status" name="status" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                                <option value="">All Status</option>
                                <option value="active">Active</option>
                                <option value="inactive">Inactive</option>
                                <option value="limited">Limited Time</option>
                            </select>
                        </div>

                        <div>
                            <label for="sort" class="block text-sm font-medium text-gray-700">Sort By</label>
                            <select id="sort" name="sort" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                                <option value="popular">Most Popular</option>
                                <option value="points_asc">Points: Low to High</option>
                                <option value="points_desc">Points: High to Low</option>
                                <option value="name">Name</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Rewards Grid -->
            <div class="mt-8 grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
                <% rewards.forEach(reward => { %>
                <div class="bg-white overflow-hidden shadow rounded-lg divide-y divide-gray-200">
                    <div class="p-6">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <img class="h-12 w-12 rounded-lg" src="<%= reward.image %>" alt="<%= reward.name %>">
                            </div>
                            <div class="ml-4">
                                <h3 class="text-lg font-medium text-gray-900">
                                    <%= reward.name %>
                                </h3>
                                <p class="text-sm text-gray-500">
                                    <%= reward.category %>
                                </p>
                            </div>
                        </div>
                        <div class="mt-4">
                            <p class="text-sm text-gray-500">
                                <%= reward.description %>
                            </p>
                        </div>
                        <div class="mt-6">
                            <div class="flex items-center justify-between">
                                <div class="flex items-center">
                                    <svg class="h-5 w-5 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
                                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                                    </svg>
                                    <span class="ml-2 text-sm text-gray-500">
                                        <%= reward.redemptions %> redemptions
                                    </span>
                                </div>
                                <div class="text-sm font-medium text-indigo-600">
                                    <%= reward.pointsCost.toLocaleString() %> points
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="px-6 py-4 bg-gray-50">
                        <div class="flex justify-between items-center">
                            <div class="flex items-center">
                                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium <%= reward.status === 'active' ? 'bg-green-100 text-green-800' : reward.status === 'limited' ? 'bg-yellow-100 text-yellow-800' : 'bg-red-100 text-red-800' %>">
                                    <%= reward.status.charAt(0).toUpperCase() + reward.status.slice(1) %>
                                </span>
                                <% if (reward.expiryDate) { %>
                                <span class="ml-2 text-xs text-gray-500">
                                    Expires: <%= moment(reward.expiryDate).format('MMM D, YYYY') %>
                                </span>
                                <% } %>
                            </div>
                            <div>
                                <button onclick="editReward('<%= reward._id %>')" class="text-indigo-600 hover:text-indigo-900 mr-3">
                                    Edit
                                </button>
                                <button onclick="toggleRewardStatus('<%= reward._id %>')" class="text-gray-600 hover:text-gray-900">
                                    <%= reward.status === 'active' ? 'Deactivate' : 'Activate' %>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                <% }); %>
            </div>
        </div>
    </div>
</div>

<!-- Add/Edit Reward Modal -->
<div id="rewardModal" class="fixed z-10 inset-0 overflow-y-auto hidden" aria-labelledby="modal-title" role="dialog" aria-modal="true">
    <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
        <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
        <div class="inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full sm:p-6">
            <form id="rewardForm" method="POST">
                <div>
                    <div class="mt-3 text-center sm:mt-5">
                        <h3 class="text-lg leading-6 font-medium text-gray-900" id="modal-title">
                            Add New Reward
                        </h3>
                        <div class="mt-2">
                            <div class="space-y-6">
                                <div>
                                    <label for="name" class="block text-sm font-medium text-gray-700">Name</label>
                                    <input type="text" name="name" id="name" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" required>
                                </div>

                                <div>
                                    <label for="description" class="block text-sm font-medium text-gray-700">Description</label>
                                    <textarea name="description" id="description" rows="3" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"></textarea>
                                </div>

                                <div>
                                    <label for="category" class="block text-sm font-medium text-gray-700">Category</label>
                                    <select name="category" id="category" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                                        <option value="room_upgrade">Room Upgrades</option>
                                        <option value="dining">Dining</option>
                                        <option value="spa">Spa & Wellness</option>
                                        <option value="experience">Experiences</option>
                                        <option value="service">Services</option>
                                    </select>
                                </div>

                                <div>
                                    <label for="pointsCost" class="block text-sm font-medium text-gray-700">Points Cost</label>
                                    <input type="number" name="pointsCost" id="pointsCost" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" required>
                                </div>

                                <div>
                                    <label for="image" class="block text-sm font-medium text-gray-700">Image URL</label>
                                    <input type="url" name="image" id="image" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                </div>

                                <div>
                                    <label for="status" class="block text-sm font-medium text-gray-700">Status</label>
                                    <select name="status" id="status" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                                        <option value="active">Active</option>
                                        <option value="inactive">Inactive</option>
                                        <option value="limited">Limited Time</option>
                                    </select>
                                </div>

                                <div>
                                    <label for="expiryDate" class="block text-sm font-medium text-gray-700">Expiry Date (Optional)</label>
                                    <input type="date" name="expiryDate" id="expiryDate" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="mt-5 sm:mt-6 sm:grid sm:grid-cols-2 sm:gap-3 sm:grid-flow-row-dense">
                    <button type="submit" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-indigo-600 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:col-start-2 sm:text-sm">
                        Save
                    </button>
                    <button type="button" onclick="hideRewardModal()" class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:col-start-1 sm:text-sm">
                        Cancel
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    // Modal Functions
    function showAddRewardModal() {
        document.getElementById('rewardModal').classList.remove('hidden');
        document.getElementById('modal-title').textContent = 'Add New Reward';
        document.getElementById('rewardForm').reset();
        document.getElementById('rewardForm').action = '/admin/loyalty/rewards';
    }

    function hideRewardModal() {
        document.getElementById('rewardModal').classList.add('hidden');
    }

    function editReward(rewardId) {
        // Fetch reward details and populate form
        fetch(`/admin/loyalty/rewards/${rewardId}`)
            .then(response => response.json())
            .then(reward => {
                document.getElementById('modal-title').textContent = 'Edit Reward';
                document.getElementById('name').value = reward.name;
                document.getElementById('description').value = reward.description;
                document.getElementById('category').value = reward.category;
                document.getElementById('pointsCost').value = reward.pointsCost;
                document.getElementById('image').value = reward.image;
                document.getElementById('status').value = reward.status;
                document.getElementById('expiryDate').value = reward.expiryDate ? reward.expiryDate.split('T')[0] : '';
                document.getElementById('rewardForm').action = `/admin/loyalty/rewards/${rewardId}`;
                document.getElementById('rewardModal').classList.remove('hidden');
            });
    }

    function toggleRewardStatus(rewardId) {
        if (confirm('Are you sure you want to change this reward\'s status?')) {
            fetch(`/admin/loyalty/rewards/${rewardId}/toggle-status`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                if (response.ok) {
                    window.location.reload();
                }
            });
        }
    }

    // Filter Functions
    document.querySelectorAll('select[id^="filter"]').forEach(select => {
        select.addEventListener('change', function() {
            applyFilters();
        });
    });

    function applyFilters() {
        const category = document.getElementById('category').value;
        const points = document.getElementById('points').value;
        const status = document.getElementById('status').value;
        const sort = document.getElementById('sort').value;

        const queryParams = new URLSearchParams({
            category,
            points,
            status,
            sort
        }).toString();

        window.location.href = `/admin/loyalty/rewards?${queryParams}`;
    }
</script>

<%- include('../../partials/footer') %>

================
File: src/views/admin/maintenance-details.hbs
================
{{> admin/header}}
{{> admin/sidebar}}

<div class="main-content">
    <div class="container-fluid">
        <!-- Breadcrumb -->
        <nav aria-label="breadcrumb" class="mb-4">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/admin/maintenance">Maintenance</a></li>
                <li class="breadcrumb-item active">Task Details</li>
            </ol>
        </nav>

        <!-- Task Details -->
        <div class="row">
            <div class="col-lg-8">
                <div class="card mb-4">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Task Information</h5>
                        <div>
                            <button class="btn btn-primary btn-sm" onclick="editTask('{{task._id}}')">
                                <i class="fas fa-edit"></i> Edit
                            </button>
                            <button class="btn btn-danger btn-sm ms-2" onclick="deleteTask('{{task._id}}')">
                                <i class="fas fa-trash"></i> Delete
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <h6>Location</h6>
                                <p>{{task.location.areaName}}</p>
                            </div>
                            <div class="col-md-6">
                                <h6>Status</h6>
                                <span class="badge bg-{{statusColor task.status}}">{{task.status}}</span>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <h6>Priority</h6>
                                <span class="badge bg-{{priorityColor task.priority}}">{{task.priority}}</span>
                            </div>
                            <div class="col-md-6">
                                <h6>Due Date</h6>
                                <p>{{formatDate task.scheduledFor}}</p>
                            </div>
                        </div>
                        <div class="mb-3">
                            <h6>Description</h6>
                            <p>{{task.description}}</p>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <h6>Assigned To</h6>
                                <p>{{task.assignedTo.name}}</p>
                            </div>
                            <div class="col-md-6">
                                <h6>Created By</h6>
                                <p>{{task.requestedBy.name}}</p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Task History -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">Task History</h5>
                    </div>
                    <div class="card-body">
                        <div class="timeline">
                            {{#each task.notes}}
                            <div class="timeline-item">
                                <div class="timeline-date">{{formatDate addedAt}}</div>
                                <div class="timeline-content">
                                    <p>{{text}}</p>
                                    <small class="text-muted">Added by {{addedBy.name}}</small>
                                </div>
                            </div>
                            {{/each}}
                        </div>
                    </div>
                </div>
            </div>

            <!-- Sidebar -->
            <div class="col-lg-4">
                <!-- Quick Actions -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">Quick Actions</h5>
                    </div>
                    <div class="card-body">
                        <form id="updateStatusForm">
                            <div class="mb-3">
                                <label class="form-label">Update Status</label>
                                <select class="form-select" id="newStatus">
                                    <option value="pending" {{#if (eq task.status 'pending')}}selected{{/if}}>Pending</option>
                                    <option value="in-progress" {{#if (eq task.status 'in-progress')}}selected{{/if}}>In Progress</option>
                                    <option value="completed" {{#if (eq task.status 'completed')}}selected{{/if}}>Completed</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Add Note</label>
                                <textarea class="form-control" id="newNote" rows="3"></textarea>
                            </div>
                            <button type="submit" class="btn btn-primary w-100">Update Task</button>
                        </form>
                    </div>
                </div>

                <!-- Related Tasks -->
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Related Tasks</h5>
                    </div>
                    <div class="card-body">
                        <div class="list-group list-group-flush">
                            {{#each relatedTasks}}
                            <a href="/admin/maintenance/{{_id}}" class="list-group-item list-group-item-action">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <h6 class="mb-1">{{location.areaName}}</h6>
                                        <small class="text-muted">{{formatDate scheduledFor}}</small>
                                    </div>
                                    <span class="badge bg-{{statusColor status}}">{{status}}</span>
                                </div>
                            </a>
                            {{/each}}
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Delete Maintenance Task</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this maintenance task? This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" onclick="confirmDelete()">Delete</button>
            </div>
        </div>
    </div>
</div>

<style>
.timeline {
    position: relative;
    padding: 20px 0;
}

.timeline-item {
    position: relative;
    padding-left: 40px;
    margin-bottom: 20px;
}

.timeline-item::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    bottom: -20px;
    width: 2px;
    background-color: #e9ecef;
}

.timeline-item::after {
    content: '';
    position: absolute;
    left: -4px;
    top: 0;
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background-color: #007bff;
}

.timeline-date {
    font-size: 0.875rem;
    color: #6c757d;
    margin-bottom: 5px;
}

.timeline-content {
    background-color: #f8f9fa;
    padding: 15px;
    border-radius: 4px;
}
</style>

<script>
let currentTaskId = '{{task._id}}';

$(document).ready(function() {
    // Handle status update form submission
    $('#updateStatusForm').on('submit', function(e) {
        e.preventDefault();
        
        const status = $('#newStatus').val();
        const note = $('#newNote').val();
        
        updateTask(status, note);
    });
});

function updateTask(status, note) {
    fetch(`/api/admin/maintenance/${currentTaskId}`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            status,
            notes: note
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            window.location.reload();
        } else {
            alert(data.message || 'Error updating task');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Error updating task');
    });
}

function deleteTask(id) {
    $('#deleteModal').modal('show');
}

function confirmDelete() {
    fetch(`/api/admin/maintenance/${currentTaskId}`, {
        method: 'DELETE'
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            window.location.href = '/admin/maintenance';
        } else {
            alert(data.message || 'Error deleting task');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Error deleting task');
    });
}

function editTask(id) {
    window.location.href = `/admin/maintenance/edit/${id}`;
}
</script>

================
File: src/views/admin/maintenance-edit.hbs
================
{{> admin/header}}
{{> admin/sidebar}}

<div class="main-content">
    <div class="container-fluid">
        <!-- Breadcrumb -->
        <nav aria-label="breadcrumb" class="mb-4">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/admin/maintenance">Maintenance</a></li>
                <li class="breadcrumb-item"><a href="/admin/maintenance/{{task._id}}">Task Details</a></li>
                <li class="breadcrumb-item active">Edit Task</li>
            </ol>
        </nav>

        <div class="row">
            <div class="col-lg-8">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Edit Maintenance Task</h5>
                    </div>
                    <div class="card-body">
                        <form id="editTaskForm">
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <label class="form-label">Location</label>
                                    <select class="form-select" id="location" required>
                                        <option value="">Select Location</option>
                                        {{#each locations}}
                                        <option value="{{this}}" {{#if (eq ../task.location.areaName this)}}selected{{/if}}>{{this}}</option>
                                        {{/each}}
                                    </select>
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">Priority</label>
                                    <select class="form-select" id="priority" required>
                                        <option value="low" {{#if (eq task.priority 'low')}}selected{{/if}}>Low</option>
                                        <option value="medium" {{#if (eq task.priority 'medium')}}selected{{/if}}>Medium</option>
                                        <option value="high" {{#if (eq task.priority 'high')}}selected{{/if}}>High</option>
                                        <option value="urgent" {{#if (eq task.priority 'urgent')}}selected{{/if}}>Urgent</option>
                                    </select>
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">Status</label>
                                    <select class="form-select" id="status" required>
                                        <option value="pending" {{#if (eq task.status 'pending')}}selected{{/if}}>Pending</option>
                                        <option value="in-progress" {{#if (eq task.status 'in-progress')}}selected{{/if}}>In Progress</option>
                                        <option value="completed" {{#if (eq task.status 'completed')}}selected{{/if}}>Completed</option>
                                    </select>
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">Due Date</label>
                                    <input type="date" class="form-control" id="dueDate" value="{{formatDateInput task.scheduledFor}}" required>
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">Assigned To</label>
                                    <select class="form-select" id="assignedTo" required>
                                        <option value="">Select Staff</option>
                                        {{#each staff}}
                                        <option value="{{_id}}" {{#if (eq ../task.assignedTo._id _id)}}selected{{/if}}>{{name}}</option>
                                        {{/each}}
                                    </select>
                                </div>
                                <div class="col-12">
                                    <label class="form-label">Description</label>
                                    <textarea class="form-control" id="description" rows="3" required>{{task.description}}</textarea>
                                </div>
                                <div class="col-12">
                                    <label class="form-label">Add Note</label>
                                    <textarea class="form-control" id="notes" rows="2" placeholder="Add a note about your changes"></textarea>
                                </div>
                                <div class="col-12">
                                    <button type="submit" class="btn btn-primary">Save Changes</button>
                                    <a href="/admin/maintenance/{{task._id}}" class="btn btn-secondary">Cancel</a>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

            <!-- Task History Sidebar -->
            <div class="col-lg-4">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Task History</h5>
                    </div>
                    <div class="card-body">
                        <div class="timeline">
                            {{#each task.notes}}
                            <div class="timeline-item">
                                <div class="timeline-date">{{formatDate addedAt}}</div>
                                <div class="timeline-content">
                                    <p>{{text}}</p>
                                    <small class="text-muted">Added by {{addedBy.name}}</small>
                                </div>
                            </div>
                            {{/each}}
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
.timeline {
    position: relative;
    padding: 20px 0;
}

.timeline-item {
    position: relative;
    padding-left: 40px;
    margin-bottom: 20px;
}

.timeline-item::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    bottom: -20px;
    width: 2px;
    background-color: #e9ecef;
}

.timeline-item::after {
    content: '';
    position: absolute;
    left: -4px;
    top: 0;
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background-color: #007bff;
}

.timeline-date {
    font-size: 0.875rem;
    color: #6c757d;
    margin-bottom: 5px;
}

.timeline-content {
    background-color: #f8f9fa;
    padding: 15px;
    border-radius: 4px;
}
</style>

<script>
$(document).ready(function() {
    // Initialize date picker
    flatpickr("#dueDate", {
        dateFormat: "Y-m-d",
        minDate: "today"
    });

    // Handle form submission
    $('#editTaskForm').on('submit', function(e) {
        e.preventDefault();
        
        const taskData = {
            location: $('#location').val(),
            priority: $('#priority').val(),
            status: $('#status').val(),
            dueDate: $('#dueDate').val(),
            assignedTo: $('#assignedTo').val(),
            description: $('#description').val(),
            notes: $('#notes').val()
        };

        updateTask(taskData);
    });
});

function updateTask(taskData) {
    fetch(`/api/admin/maintenance/{{task._id}}`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(taskData)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            window.location.href = `/admin/maintenance/{{task._id}}`;
        } else {
            alert(data.message || 'Error updating task');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Error updating task');
    });
}
</script>

================
File: src/views/admin/maintenance-report.hbs
================
{{> admin/header}}
{{> admin/sidebar}}

<div class="main-content">
    <div class="container-fluid">
        <!-- Breadcrumb -->
        <nav aria-label="breadcrumb" class="mb-4">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/admin/maintenance">Maintenance</a></li>
                <li class="breadcrumb-item active">Reports</li>
            </ol>
        </nav>

        <!-- Statistics Cards -->
        <div class="row">
            <div class="col-xl-3 col-md-6">
                <div class="card bg-primary text-white mb-4">
                    <div class="card-body">
                        <h4 class="mb-2">{{stats.total}}</h4>
                        <div class="d-flex justify-content-between align-items-center">
                            <div>Total Tasks</div>
                            <div class="d-flex align-items-center">
                                <i class="fas fa-tasks fa-2x"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-xl-3 col-md-6">
                <div class="card bg-warning text-white mb-4">
                    <div class="card-body">
                        <h4 class="mb-2">{{stats.pending}}</h4>
                        <div class="d-flex justify-content-between align-items-center">
                            <div>Pending Tasks</div>
                            <div class="d-flex align-items-center">
                                <i class="fas fa-clock fa-2x"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-xl-3 col-md-6">
                <div class="card bg-info text-white mb-4">
                    <div class="card-body">
                        <h4 class="mb-2">{{stats.inProgress}}</h4>
                        <div class="d-flex justify-content-between align-items-center">
                            <div>In Progress</div>
                            <div class="d-flex align-items-center">
                                <i class="fas fa-spinner fa-2x"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-xl-3 col-md-6">
                <div class="card bg-success text-white mb-4">
                    <div class="card-body">
                        <h4 class="mb-2">{{stats.completed}}</h4>
                        <div class="d-flex justify-content-between align-items-center">
                            <div>Completed Tasks</div>
                            <div class="d-flex align-items-center">
                                <i class="fas fa-check-circle fa-2x"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Charts Row -->
        <div class="row mb-4">
            <div class="col-xl-6">
                <div class="card h-100">
                    <div class="card-header">
                        <h5 class="mb-0">Tasks by Priority</h5>
                    </div>
                    <div class="card-body">
                        <canvas id="priorityChart"></canvas>
                    </div>
                </div>
            </div>
            <div class="col-xl-6">
                <div class="card h-100">
                    <div class="card-header">
                        <h5 class="mb-0">Tasks by Location</h5>
                    </div>
                    <div class="card-body">
                        <canvas id="locationChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Staff Performance -->
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="mb-0">Staff Performance</h5>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Staff Member</th>
                                <th>Assigned Tasks</th>
                                <th>Completed</th>
                                <th>In Progress</th>
                                <th>Pending</th>
                                <th>Average Completion Time</th>
                                <th>Performance Score</th>
                            </tr>
                        </thead>
                        <tbody>
                            {{#each staffPerformance}}
                            <tr>
                                <td>{{name}}</td>
                                <td>{{totalTasks}}</td>
                                <td>{{completed}}</td>
                                <td>{{inProgress}}</td>
                                <td>{{pending}}</td>
                                <td>{{avgCompletionTime}} days</td>
                                <td>
                                    <div class="progress">
                                        <div class="progress-bar bg-success" role="progressbar" 
                                             style="width: {{performanceScore}}%">
                                            {{performanceScore}}%
                                        </div>
                                    </div>
                                </td>
                            </tr>
                            {{/each}}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Monthly Trends -->
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">Monthly Trends</h5>
            </div>
            <div class="card-body">
                <canvas id="trendsChart"></canvas>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
$(document).ready(function() {
    // Priority Chart
    new Chart(document.getElementById('priorityChart'), {
        type: 'pie',
        data: {
            labels: ['Low', 'Medium', 'High', 'Urgent'],
            datasets: [{
                data: [
                    {{stats.priorityLow}},
                    {{stats.priorityMedium}},
                    {{stats.priorityHigh}},
                    {{stats.priorityUrgent}}
                ],
                backgroundColor: [
                    '#28a745',
                    '#ffc107',
                    '#fd7e14',
                    '#dc3545'
                ]
            }]
        }
    });

    // Location Chart
    new Chart(document.getElementById('locationChart'), {
        type: 'bar',
        data: {
            labels: {{{json locationStats.labels}}},
            datasets: [{
                label: 'Tasks by Location',
                data: {{{json locationStats.data}}},
                backgroundColor: '#007bff'
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });

    // Trends Chart
    new Chart(document.getElementById('trendsChart'), {
        type: 'line',
        data: {
            labels: {{{json monthlyTrends.labels}}},
            datasets: [{
                label: 'New Tasks',
                data: {{{json monthlyTrends.newTasks}}},
                borderColor: '#007bff',
                fill: false
            }, {
                label: 'Completed Tasks',
                data: {{{json monthlyTrends.completedTasks}}},
                borderColor: '#28a745',
                fill: false
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
});
</script>

================
File: src/views/admin/maintenance.hbs
================
{{> admin/header}}
{{> admin/sidebar}}

<div class="main-content">
    <div class="container-fluid">
        <!-- Page Header -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1 class="h3">Maintenance Management</h1>
            <div>
                <a href="/admin/maintenance/reports" class="btn btn-info me-2">
                    <i class="fas fa-chart-bar"></i> View Reports
                </a>
                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addMaintenanceModal">
                    <i class="fas fa-plus"></i> Add New Task
                </button>
            </div>
        </div>

        <!-- Filters -->
        <div class="card mb-4">
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-md-3">
                        <input type="text" id="searchInput" class="form-control" placeholder="Search tasks...">
                    </div>
                    <div class="col-md-2">
                        <select id="statusFilter" class="form-select">
                            <option value="">All Status</option>
                            <option value="pending">Pending</option>
                            <option value="in-progress">In Progress</option>
                            <option value="completed">Completed</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <select id="priorityFilter" class="form-select">
                            <option value="">All Priority</option>
                            <option value="low">Low</option>
                            <option value="medium">Medium</option>
                            <option value="high">High</option>
                            <option value="urgent">Urgent</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <select id="locationFilter" class="form-select">
                            <option value="">All Locations</option>
                            {{#each locations}}
                            <option value="{{this}}">{{this}}</option>
                            {{/each}}
                        </select>
                    </div>
                </div>
            </div>
        </div>

        <!-- Tasks Table -->
        <div class="card">
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Title</th>
                                <th>Location</th>
                                <th>Priority</th>
                                <th>Status</th>
                                <th>Due Date</th>
                                <th>Assigned To</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="maintenanceTableBody">
                            {{#each tasks}}
                            <tr>
                                <td>{{title}}</td>
                                <td>{{location.areaName}}</td>
                                <td><span class="badge bg-{{priorityColor priority}}">{{priority}}</span></td>
                                <td><span class="badge bg-{{statusColor status}}">{{status}}</span></td>
                                <td>{{formatDate scheduledFor}}</td>
                                <td>{{assignedTo.name}}</td>
                                <td>
                                    <div class="btn-group">
                                        <a href="/admin/maintenance/{{_id}}" class="btn btn-sm btn-info">
                                            <i class="fas fa-eye"></i>
                                        </a>
                                        <a href="/admin/maintenance/edit/{{_id}}" class="btn btn-sm btn-primary">
                                            <i class="fas fa-edit"></i>
                                        </a>
                                        <button class="btn btn-sm btn-danger" onclick="deleteTask('{{_id}}')">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                            {{/each}}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Maintenance Modal -->
<div class="modal fade" id="addMaintenanceModal" tabindex="-1" aria-labelledby="addMaintenanceModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addMaintenanceModalLabel">Add New Maintenance Task</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addMaintenanceForm">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label">Title</label>
                            <input type="text" class="form-control" name="title" required>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Location</label>
                            <select class="form-select" name="location" required>
                                <option value="">Select Location</option>
                                {{#each locations}}
                                <option value="{{this}}">{{this}}</option>
                                {{/each}}
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Priority</label>
                            <select class="form-select" name="priority" required>
                                <option value="low">Low</option>
                                <option value="medium" selected>Medium</option>
                                <option value="high">High</option>
                                <option value="urgent">Urgent</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Status</label>
                            <select class="form-select" name="status" required>
                                <option value="pending" selected>Pending</option>
                                <option value="in-progress">In Progress</option>
                                <option value="completed">Completed</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Due Date</label>
                            <input type="date" class="form-control datepicker" name="dueDate" required>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Assigned To</label>
                            <select class="form-select" name="assignedTo" required>
                                <option value="">Select Staff</option>
                                {{#each staff}}
                                <option value="{{_id}}">{{name}}</option>
                                {{/each}}
                            </select>
                        </div>
                        <div class="col-12">
                            <label class="form-label">Description</label>
                            <textarea class="form-control" name="description" rows="3" required></textarea>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="saveMaintenanceTask()">Save Task</button>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Initialize datepicker
    const datepickers = document.querySelectorAll('.datepicker');
    datepickers.forEach(dp => {
        dp.min = new Date().toISOString().split('T')[0];
    });

    // Save maintenance task
    window.saveMaintenanceTask = async function() {
        try {
            const form = document.getElementById('addMaintenanceForm');
            
            // Check form validity
            if (!form.checkValidity()) {
                form.reportValidity();
                return;
            }

            const formData = new FormData(form);
            const data = Object.fromEntries(formData.entries());

            // Convert dueDate to scheduledFor
            data.scheduledFor = data.dueDate;
            delete data.dueDate;

            // Log the data being sent
            console.log('Sending maintenance task data:', data);

            const response = await fetch('/admin/maintenance', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            });

            const result = await response.json();
            console.log('Server response:', result);

            if (result.success) {
                alert('Task created successfully!');
                const modal = bootstrap.Modal.getInstance(document.getElementById('addMaintenanceModal'));
                modal.hide();
                window.location.reload();
            } else {
                alert(result.message || 'Error creating task. Please try again.');
            }
        } catch (error) {
            console.error('Error creating task:', error);
            alert('Error creating task. Please check the console for details.');
        }
    };

    // Delete maintenance task
    window.deleteTask = async function(taskId) {
        if (confirm('Are you sure you want to delete this task?')) {
            try {
                const response = await fetch(`/admin/maintenance/${taskId}`, {
                    method: 'DELETE'
                });
                
                const result = await response.json();
                
                if (result.success) {
                    alert('Task deleted successfully!');
                    window.location.reload();
                } else {
                    alert(result.message || 'Error deleting task');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error deleting task. Please try again.');
            }
        }
    };

    // Handle search
    document.getElementById('searchInput').addEventListener('keyup', function() {
        const searchText = this.value.toLowerCase();
        const rows = document.querySelectorAll('#maintenanceTableBody tr');
        
        rows.forEach(row => {
            const text = row.textContent.toLowerCase();
            row.style.display = text.includes(searchText) ? '' : 'none';
        });
    });

    // Handle filters
    const filters = ['statusFilter', 'priorityFilter', 'locationFilter'];
    filters.forEach(filterId => {
        document.getElementById(filterId).addEventListener('change', function() {
            const status = document.getElementById('statusFilter').value;
            const priority = document.getElementById('priorityFilter').value;
            const location = document.getElementById('locationFilter').value;

            let url = '/admin/maintenance?';
            if (status) url += `status=${status}&`;
            if (priority) url += `priority=${priority}&`;
            if (location) url += `location=${location}&`;

            window.location.href = url.slice(0, -1);
        });
    });
});
</script>

================
File: src/views/admin/maintenance/dashboard.hbs
================
{{> admin/header title="Maintenance Dashboard"}}

<div class="container-fluid">
    <!-- Page Heading -->
    <div class="d-sm-flex align-items-center justify-content-between mb-4">
        <h1 class="h3 mb-0 text-gray-800">Maintenance Dashboard</h1>
        <div>
            <button class="btn btn-success" onclick="createWorkOrder()">
                <i class="fas fa-plus"></i> New Work Order
            </button>
            <button class="btn btn-primary" onclick="refreshDashboard()">
                <i class="fas fa-sync"></i> Refresh
            </button>
        </div>
    </div>

    <!-- Status Overview Cards -->
    <div class="row">
        <!-- Open Work Orders -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-primary shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                Open Work Orders</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800" id="openWorkOrders">
                                {{stats.openWorkOrders}}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-tools fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- In Progress -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-info shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-info text-uppercase mb-1">
                                In Progress</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800" id="inProgressCount">
                                {{stats.inProgressOrders}}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-clock fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Completed Today -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-success shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">
                                Completed Today</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800" id="completedCount">
                                {{stats.completedToday}}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-check-circle fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Pending Parts -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-warning shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">
                                Pending Parts</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800" id="pendingParts">
                                {{stats.pendingParts}}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-box fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Equipment Status Overview -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Equipment Status</h6>
                </div>
                <div class="card-body">
                    <div class="equipment-grid">
                        {{#each equipment}}
                        <div class="equipment-card {{status}}" onclick="showEquipmentDetails('{{id}}')">
                            <div class="equipment-icon">
                                <i class="{{icon}} fa-2x"></i>
                            </div>
                            <div class="equipment-info">
                                <div class="equipment-name">{{name}}</div>
                                <div class="equipment-location">{{location}}</div>
                                <div class="equipment-status">
                                    <span class="badge badge-{{statusColor status}}">{{status}}</span>
                                </div>
                                {{#if nextMaintenance}}
                                <div class="equipment-maintenance">
                                    Next Maintenance: {{formatDate nextMaintenance}}
                                </div>
                                {{/if}}
                            </div>
                        </div>
                        {{/each}}
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Work Orders -->
    <div class="row">
        <div class="col-12">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Work Orders</h6>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-bordered" id="workOrdersTable">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Equipment</th>
                                    <th>Issue</th>
                                    <th>Priority</th>
                                    <th>Status</th>
                                    <th>Assigned To</th>
                                    <th>Created</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="workOrdersList">
                                {{#each workOrders}}
                                <tr id="order-{{id}}">
                                    <td>{{id}}</td>
                                    <td>{{equipment.name}}</td>
                                    <td>{{issue}}</td>
                                    <td>
                                        <span class="badge badge-{{priorityColor priority}}">
                                            {{priority}}
                                        </span>
                                    </td>
                                    <td>
                                        <span class="badge badge-{{statusColor status}}">
                                            {{status}}
                                        </span>
                                    </td>
                                    <td>{{assignedTo}}</td>
                                    <td>{{formatTime createdAt}}</td>
                                    <td>
                                        <div class="btn-group">
                                            <button class="btn btn-info btn-sm" onclick="updateWorkOrder('{{id}}')">
                                                Update
                                            </button>
                                            <button class="btn btn-warning btn-sm" onclick="reassignWorkOrder('{{id}}')">
                                                Reassign
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Equipment Details Modal -->
<div class="modal fade" id="equipmentDetailsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Equipment Details</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="equipmentDetailsContent"></div>
            </div>
        </div>
    </div>
</div>

<!-- Create Work Order Modal -->
<div class="modal fade" id="createWorkOrderModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create Work Order</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="workOrderForm">
                    <div class="form-group">
                        <label>Equipment</label>
                        <select class="form-control" id="equipmentSelect" required>
                            {{#each equipment}}
                            <option value="{{id}}">{{name}} ({{location}})</option>
                            {{/each}}
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Issue Description</label>
                        <textarea class="form-control" id="issueDescription" required></textarea>
                    </div>
                    <div class="form-group">
                        <label>Priority</label>
                        <select class="form-control" id="prioritySelect">
                            <option value="low">Low</option>
                            <option value="medium">Medium</option>
                            <option value="high">High</option>
                            <option value="critical">Critical</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Assign To</label>
                        <select class="form-control" id="assigneeSelect">
                            {{#each staff}}
                            <option value="{{id}}">{{name}} ({{role}})</option>
                            {{/each}}
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Parts Required</label>
                        <div id="partsContainer">
                            <div class="input-group mb-2">
                                <select class="form-control part-select">
                                    {{#each parts}}
                                    <option value="{{id}}">{{name}} ({{stock}} in stock)</option>
                                    {{/each}}
                                </select>
                                <input type="number" class="form-control" placeholder="Quantity" min="1">
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-danger" onclick="removePart(this)">
                                        <i class="fas fa-minus"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                        <button type="button" class="btn btn-secondary btn-sm" onclick="addPart()">
                            <i class="fas fa-plus"></i> Add Part
                        </button>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="submitWorkOrder()">Create</button>
            </div>
        </div>
    </div>
</div>

<!-- WebSocket Integration -->
<script src="/js/websocket.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    initializeDataTables();
    setupWebSocket();
});

function initializeDataTables() {
    $('#workOrdersTable').DataTable({
        order: [[3, 'desc'], [6, 'desc']],
        pageLength: 25
    });
}

function setupWebSocket() {
    // Equipment status updates
    hotelWS.on('EQUIPMENT_STATUS_UPDATE', function(data) {
        const equipmentCard = document.querySelector(`[data-equipment-id="${data.id}"]`);
        if (equipmentCard) {
            equipmentCard.className = `equipment-card ${data.status}`;
            equipmentCard.querySelector('.equipment-status').innerHTML = 
                `<span class="badge badge-${getStatusColor(data.status)}">${data.status}</span>`;
            
            if (data.nextMaintenance) {
                equipmentCard.querySelector('.equipment-maintenance').textContent = 
                    `Next Maintenance: ${formatDate(data.nextMaintenance)}`;
            }
        }
        updateDashboardStats();
    });

    // Work order updates
    hotelWS.on('WORK_ORDER_UPDATE', function(data) {
        const table = $('#workOrdersTable').DataTable();
        const existingRow = table.row(`#order-${data.id}`);
        
        if (existingRow.length) {
            existingRow.remove();
        }
        
        if (data.status !== 'completed') {
            table.row.add([
                data.id,
                data.equipment.name,
                data.issue,
                `<span class="badge badge-${getPriorityColor(data.priority)}">${data.priority}</span>`,
                `<span class="badge badge-${getStatusColor(data.status)}">${data.status}</span>`,
                data.assignedTo,
                formatTime(data.createdAt),
                `<div class="btn-group">
                    <button class="btn btn-info btn-sm" onclick="updateWorkOrder('${data.id}')">
                        Update
                    </button>
                    <button class="btn btn-warning btn-sm" onclick="reassignWorkOrder('${data.id}')">
                        Reassign
                    </button>
                </div>`
            ]).draw(false);
        }
        
        updateDashboardStats();
    });
}

function updateDashboardStats() {
    fetch('/admin/maintenance/stats')
        .then(response => response.json())
        .then(stats => {
            document.getElementById('openWorkOrders').textContent = stats.openWorkOrders;
            document.getElementById('inProgressCount').textContent = stats.inProgressOrders;
            document.getElementById('completedCount').textContent = stats.completedToday;
            document.getElementById('pendingParts').textContent = stats.pendingParts;
        });
}

function showEquipmentDetails(equipmentId) {
    fetch(`/admin/maintenance/equipment/${equipmentId}`)
        .then(response => response.json())
        .then(data => {
            const content = document.getElementById('equipmentDetailsContent');
            content.innerHTML = `
                <div class="equipment-details">
                    <h4>${data.name}</h4>
                    <div class="row">
                        <div class="col-md-6">
                            <p><strong>Location:</strong> ${data.location}</p>
                            <p><strong>Status:</strong> ${data.status}</p>
                            <p><strong>Model:</strong> ${data.model}</p>
                            <p><strong>Serial Number:</strong> ${data.serialNumber}</p>
                        </div>
                        <div class="col-md-6">
                            <p><strong>Last Maintenance:</strong> ${formatDate(data.lastMaintenance)}</p>
                            <p><strong>Next Maintenance:</strong> ${formatDate(data.nextMaintenance)}</p>
                            <p><strong>Manufacturer:</strong> ${data.manufacturer}</p>
                            <p><strong>Installation Date:</strong> ${formatDate(data.installationDate)}</p>
                        </div>
                    </div>
                    <div class="mt-3">
                        <h5>Maintenance History</h5>
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Date</th>
                                        <th>Type</th>
                                        <th>Technician</th>
                                        <th>Notes</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${data.maintenanceHistory.map(h => `
                                        <tr>
                                            <td>${formatDate(h.date)}</td>
                                            <td>${h.type}</td>
                                            <td>${h.technician}</td>
                                            <td>${h.notes}</td>
                                        </tr>
                                    `).join('')}
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <div class="mt-3">
                        <button class="btn btn-primary" onclick="createWorkOrder('${data.id}')">
                            Create Work Order
                        </button>
                        <button class="btn btn-info" onclick="scheduleMaintenance('${data.id}')">
                            Schedule Maintenance
                        </button>
                    </div>
                </div>
            `;
            $('#equipmentDetailsModal').modal('show');
        });
}

function createWorkOrder(equipmentId = null) {
    $('#equipmentDetailsModal').modal('hide');
    if (equipmentId) {
        document.getElementById('equipmentSelect').value = equipmentId;
    }
    $('#createWorkOrderModal').modal('show');
}

function submitWorkOrder() {
    const formData = {
        equipmentId: document.getElementById('equipmentSelect').value,
        issue: document.getElementById('issueDescription').value,
        priority: document.getElementById('prioritySelect').value,
        assignedTo: document.getElementById('assigneeSelect').value,
        parts: Array.from(document.querySelectorAll('#partsContainer .input-group')).map(group => ({
            partId: group.querySelector('.part-select').value,
            quantity: parseInt(group.querySelector('input[type="number"]').value)
        })).filter(part => part.quantity > 0)
    };

    fetch('/admin/maintenance/work-orders', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
    }).then(response => response.json())
    .then(data => {
        if (data.success) {
            $('#createWorkOrderModal').modal('hide');
            Swal.fire('Success', 'Work order created successfully', 'success');
        } else {
            throw new Error(data.error);
        }
    }).catch(error => {
        Swal.fire('Error', error.message, 'error');
    });
}

function updateWorkOrder(orderId) {
    Swal.fire({
        title: 'Update Work Order Status',
        input: 'select',
        inputOptions: {
            'pending': 'Pending',
            'in_progress': 'In Progress',
            'parts_needed': 'Parts Needed',
            'completed': 'Completed',
            'cancelled': 'Cancelled'
        },
        inputPlaceholder: 'Select status',
        showCancelButton: true,
        inputValidator: (value) => {
            return new Promise((resolve) => {
                if (value) {
                    resolve()
                } else {
                    resolve('You need to select a status')
                }
            })
        }
    }).then((result) => {
        if (result.isConfirmed) {
            fetch(`/admin/maintenance/work-orders/${orderId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    status: result.value
                })
            }).then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire('Success', 'Work order updated successfully', 'success');
                } else {
                    throw new Error(data.error);
                }
            }).catch(error => {
                Swal.fire('Error', error.message, 'error');
            });
        }
    });
}

function reassignWorkOrder(orderId) {
    fetch('/admin/maintenance/staff')
        .then(response => response.json())
        .then(staff => {
            Swal.fire({
                title: 'Reassign Work Order',
                input: 'select',
                inputOptions: Object.fromEntries(
                    staff.map(s => [s.id, `${s.name} (${s.role})`])
                ),
                inputPlaceholder: 'Select staff member',
                showCancelButton: true,
                inputValidator: (value) => {
                    return new Promise((resolve) => {
                        if (value) {
                            resolve()
                        } else {
                            resolve('You need to select a staff member')
                        }
                    })
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(`/admin/maintenance/work-orders/${orderId}/reassign`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            staffId: result.value
                        })
                    }).then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire('Success', 'Work order reassigned successfully', 'success');
                        } else {
                            throw new Error(data.error);
                        }
                    }).catch(error => {
                        Swal.fire('Error', error.message, 'error');
                    });
                }
            });
        });
}

function scheduleMaintenance(equipmentId) {
    Swal.fire({
        title: 'Schedule Maintenance',
        html: `
            <div class="form-group">
                <label>Maintenance Type</label>
                <select class="form-control" id="maintenanceType">
                    <option value="routine">Routine Maintenance</option>
                    <option value="preventive">Preventive Maintenance</option>
                    <option value="calibration">Calibration</option>
                </select>
            </div>
            <div class="form-group">
                <label>Scheduled Date</label>
                <input type="date" class="form-control" id="maintenanceDate">
            </div>
            <div class="form-group">
                <label>Notes</label>
                <textarea class="form-control" id="maintenanceNotes"></textarea>
            </div>
        `,
        showCancelButton: true,
        confirmButtonText: 'Schedule',
        focusConfirm: false,
        preConfirm: () => {
            return {
                type: document.getElementById('maintenanceType').value,
                date: document.getElementById('maintenanceDate').value,
                notes: document.getElementById('maintenanceNotes').value
            }
        }
    }).then((result) => {
        if (result.isConfirmed) {
            fetch(`/admin/maintenance/equipment/${equipmentId}/schedule`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(result.value)
            }).then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire('Success', 'Maintenance scheduled successfully', 'success');
                    $('#equipmentDetailsModal').modal('hide');
                } else {
                    throw new Error(data.error);
                }
            }).catch(error => {
                Swal.fire('Error', error.message, 'error');
            });
        }
    });
}

function addPart() {
    const container = document.getElementById('partsContainer');
    const newPart = document.createElement('div');
    newPart.className = 'input-group mb-2';
    newPart.innerHTML = `
        <select class="form-control part-select">
            {{#each parts}}
            <option value="{{id}}">{{name}} ({{stock}} in stock)</option>
            {{/each}}
        </select>
        <input type="number" class="form-control" placeholder="Quantity" min="1">
        <div class="input-group-append">
            <button type="button" class="btn btn-danger" onclick="removePart(this)">
                <i class="fas fa-minus"></i>
            </button>
        </div>
    `;
    container.appendChild(newPart);
}

function removePart(button) {
    button.closest('.input-group').remove();
}

function refreshDashboard() {
    location.reload();
}

// Helper functions
function getPriorityColor(priority) {
    const colors = {
        low: 'info',
        medium: 'warning',
        high: 'danger',
        critical: 'dark'
    };
    return colors[priority] || 'secondary';
}

function getStatusColor(status) {
    const colors = {
        pending: 'warning',
        in_progress: 'info',
        completed: 'success',
        parts_needed: 'danger',
        cancelled: 'secondary'
    };
    return colors[status] || 'secondary';
}

function formatTime(timestamp) {
    return new Date(timestamp).toLocaleString();
}

function formatDate(date) {
    return new Date(date).toLocaleDateString();
}
</script>

<style>
.equipment-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1rem;
    padding: 1rem;
}

.equipment-card {
    border: 1px solid #e3e6f0;
    border-radius: 0.35rem;
    padding: 1rem;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 1rem;
}

.equipment-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15);
}

.equipment-card.operational {
    background-color: #d4edda;
    border-color: #c3e6cb;
}

.equipment-card.maintenance_needed {
    background-color: #fff3cd;
    border-color: #ffeeba;
}

.equipment-card.under_maintenance {
    background-color: #cce5ff;
    border-color: #b8daff;
}

.equipment-card.out_of_order {
    background-color: #f8d7da;
    border-color: #f5c6cb;
}

.equipment-icon {
    width: 50px;
    height: 50px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #4e73df;
}

.equipment-info {
    flex: 1;
}

.equipment-name {
    font-size: 1.1rem;
    font-weight: bold;
    margin-bottom: 0.25rem;
}

.equipment-location {
    font-size: 0.875rem;
    color: #858796;
    margin-bottom: 0.25rem;
}

.equipment-status {
    margin-bottom: 0.25rem;
}

.equipment-maintenance {
    font-size: 0.875rem;
    color: #858796;
}

.modal-body .table-sm td {
    padding: 0.3rem;
    font-size: 0.875rem;
}
</style>

{{> admin/footer}}

================
File: src/views/admin/maintenance/list.hbs
================
{{> admin/header}}

<div class="container-fluid py-4">
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h4 class="mb-0">Maintenance & Housekeeping Requests</h4>
        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addRequestModal">
            <i class="fas fa-plus me-2"></i>New Request
        </button>
    </div>

    <!-- Filters -->
    <div class="card mb-4">
        <div class="card-body">
            <form action="/admin/maintenance" method="GET" class="row g-3">
                <div class="col-md-2">
                    <label class="form-label">Type</label>
                    <select name="type" class="form-select">
                        <option value="">All Types</option>
                        <option value="housekeeping" {{#if (eq query.type "housekeeping")}}selected{{/if}}>Housekeeping</option>
                        <option value="maintenance" {{#if (eq query.type "maintenance")}}selected{{/if}}>Maintenance</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <label class="form-label">Service Type</label>
                    <select name="serviceType" class="form-select">
                        <option value="">All Services</option>
                        <option value="guest-request" {{#if (eq query.serviceType "guest-request")}}selected{{/if}}>Guest Request</option>
                        <option value="regular-service" {{#if (eq query.serviceType "regular-service")}}selected{{/if}}>Regular Service</option>
                        <option value="emergency" {{#if (eq query.serviceType "emergency")}}selected{{/if}}>Emergency</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <label class="form-label">Status</label>
                    <select name="status" class="form-select">
                        <option value="">All Status</option>
                        <option value="pending" {{#if (eq query.status "pending")}}selected{{/if}}>Pending</option>
                        <option value="in-progress" {{#if (eq query.status "in-progress")}}selected{{/if}}>In Progress</option>
                        <option value="completed" {{#if (eq query.status "completed")}}selected{{/if}}>Completed</option>
                        <option value="cancelled" {{#if (eq query.status "cancelled")}}selected{{/if}}>Cancelled</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <label class="form-label">Priority</label>
                    <select name="priority" class="form-select">
                        <option value="">All Priorities</option>
                        <option value="low" {{#if (eq query.priority "low")}}selected{{/if}}>Low</option>
                        <option value="medium" {{#if (eq query.priority "medium")}}selected{{/if}}>Medium</option>
                        <option value="high" {{#if (eq query.priority "high")}}selected{{/if}}>High</option>
                        <option value="urgent" {{#if (eq query.priority "urgent")}}selected{{/if}}>Urgent</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <label class="form-label">Hotel</label>
                    <select name="hotel" class="form-select">
                        <option value="">All Hotels</option>
                        {{#each hotels}}
                        <option value="{{this._id}}" {{#if (eq ../query.hotel this._id)}}selected{{/if}}>{{this.name}}</option>
                        {{/each}}
                    </select>
                </div>
                <div class="col-md-2 d-flex align-items-end">
                    <button type="submit" class="btn btn-primary w-100">
                        <i class="fas fa-filter me-2"></i>Apply Filters
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Requests List -->
    <div class="card">
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover align-middle mb-0">
                    <thead class="bg-light">
                        <tr>
                            <th class="border-0">ID</th>
                            <th class="border-0">Type</th>
                            <th class="border-0">Service</th>
                            <th class="border-0">Location</th>
                            <th class="border-0">Description</th>
                            <th class="border-0">Priority</th>
                            <th class="border-0">Status</th>
                            <th class="border-0">Requested</th>
                            <th class="border-0">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {{#each requests}}
                        <tr>
                            <td>{{this._id}}</td>
                            <td>
                                <span class="badge bg-{{#if (eq this.requestType 'maintenance')}}warning{{else}}info{{/if}}">
                                    {{this.requestType}}
                                </span>
                            </td>
                            <td>
                                <span class="badge bg-{{serviceTypeColor this.serviceType}}">
                                    {{formatServiceType this.serviceType}}
                                </span>
                            </td>
                            <td>
                                {{#if (eq this.location.type 'room')}}
                                Room {{this.location.room.number}}
                                {{else if (eq this.location.type 'public-area')}}
                                {{this.location.areaName}}
                                {{else}}
                                {{this.location.areaName}}
                                {{/if}}
                            </td>
                            <td>{{this.description}}</td>
                            <td>
                                {{#if (eq this.requestType 'maintenance')}}
                                <span class="badge bg-{{priorityColor this.priority}}">
                                    {{this.priority}}
                                </span>
                                {{else}}
                                -
                                {{/if}}
                            </td>
                            <td>
                                <span class="badge bg-{{statusColor this.status}}">
                                    {{this.status}}
                                </span>
                            </td>
                            <td>{{formatDate this.createdAt}}</td>
                            <td>
                                <button class="btn btn-sm btn-info" onclick="viewRequest('{{this._id}}')">
                                    <i class="fas fa-eye"></i>
                                </button>
                            </td>
                        </tr>
                        {{else}}
                        <tr>
                            <td colspan="9" class="text-center py-4">
                                No maintenance requests found
                            </td>
                        </tr>
                        {{/each}}
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Pagination -->
    {{#if pagination.totalPages}}
    <nav class="mt-4">
        <ul class="pagination justify-content-center">
            {{#if pagination.hasPrev}}
            <li class="page-item">
                <a class="page-link" href="{{getPaginationUrl (subtract pagination.page 1)}}">
                    <i class="fas fa-chevron-left"></i>
                </a>
            </li>
            {{/if}}
            
            <li class="page-item active">
                <span class="page-link">{{pagination.page}} of {{pagination.totalPages}}</span>
            </li>

            {{#if pagination.hasNext}}
            <li class="page-item">
                <a class="page-link" href="{{getPaginationUrl (add pagination.page 1)}}">
                    <i class="fas fa-chevron-right"></i>
                </a>
            </li>
            {{/if}}
        </ul>
    </nav>
    {{/if}}
</div>

<!-- Add Request Modal -->
<div class="modal fade" id="addRequestModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">New Maintenance Request</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="addRequestForm">
                    <div class="mb-3">
                        <label class="form-label">Request Type</label>
                        <select name="requestType" class="form-select" required>
                            <option value="housekeeping">Housekeeping</option>
                            <option value="maintenance">Maintenance</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Service Type</label>
                        <select name="serviceType" class="form-select" required>
                            <option value="guest-request">Guest Request</option>
                            <option value="regular-service">Regular Service</option>
                            <option value="emergency">Emergency</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Location Type</label>
                        <select name="locationType" class="form-select" required>
                            <option value="room">Room</option>
                            <option value="public-area">Public Area</option>
                            <option value="facility">Facility</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Hotel</label>
                        <select name="hotel" class="form-select" required>
                            <option value="">Select Hotel</option>
                            {{#each hotels}}
                            <option value="{{this._id}}">{{this.name}}</option>
                            {{/each}}
                        </select>
                    </div>
                    <div id="roomField" class="mb-3" style="display: none;">
                        <label class="form-label">Room</label>
                        <select name="room" class="form-select">
                            <option value="">Select Room</option>
                        </select>
                    </div>
                    <div id="publicAreaField" class="mb-3" style="display: none;">
                        <label class="form-label">Area Name</label>
                        <input type="text" name="areaName" class="form-control" placeholder="e.g. Lobby, Restaurant">
                    </div>
                    <div id="facilityField" class="mb-3" style="display: none;">
                        <label class="form-label">Facility Name</label>
                        <input type="text" name="facilityName" class="form-control" placeholder="e.g. Pool, Gym">
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea name="description" class="form-control" rows="3" required></textarea>
                    </div>
                    <div id="priorityField" class="mb-3" style="display: none;">
                        <label class="form-label">Priority</label>
                        <select name="priority" class="form-select">
                            <option value="low">Low</option>
                            <option value="medium">Medium</option>
                            <option value="high">High</option>
                            <option value="urgent">Urgent</option>
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="addRequest()">Create Request</button>
            </div>
        </div>
    </div>
</div>

<!-- View Request Modal -->
<div class="modal fade" id="viewRequestModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Maintenance Request Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <table class="table">
                    <tr>
                        <th>Request ID</th>
                        <td id="viewRequestId"></td>
                    </tr>
                    <tr>
                        <th>Request Type</th>
                        <td id="viewRequestType"></td>
                    </tr>
                    <tr>
                        <th>Location</th>
                        <td id="viewLocation"></td>
                    </tr>
                    <tr>
                        <th>Description</th>
                        <td id="viewDescription"></td>
                    </tr>
                    <tr>
                        <th>Status</th>
                        <td id="viewStatus"></td>
                    </tr>
                    <tr>
                        <th>Created At</th>
                        <td id="viewCreatedAt"></td>
                    </tr>
                    <tr id="viewPriorityRow">
                        <th>Priority</th>
                        <td id="viewPriority"></td>
                    </tr>
                    <tr id="viewServiceTypeRow">
                        <th>Service Type</th>
                        <td id="viewServiceType"></td>
                    </tr>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <div class="btn-group">
                    <button type="button" class="btn btn-warning" onclick="updateStatus('in-progress')">Mark In Progress</button>
                    <button type="button" class="btn btn-success" onclick="updateStatus('completed')">Mark Complete</button>
                    <button type="button" class="btn btn-danger" onclick="updateStatus('cancelled')">Cancel Request</button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Include maintenance.js -->
<script src="/js/maintenance.js"></script>

<script>
let currentRequestId = null;

async function loadRooms(hotelId) {
    if (!hotelId) return;
    
    try {
        const response = await fetch(`/api/hotels/${hotelId}/rooms`);
        const data = await response.json();
        
        const roomSelect = document.querySelector('select[name="room"]');
        roomSelect.innerHTML = '<option value="">Select Room</option>';
        
        data.rooms.forEach(room => {
            roomSelect.innerHTML += `<option value="${room._id}">Room ${room.number}</option>`;
        });

        // Also load guests for this hotel
        loadGuests(hotelId);
    } catch (error) {
        console.error('Error loading rooms:', error);
        alert('Error loading rooms');
    }
}

async function loadGuests(hotelId) {
    try {
        const response = await fetch(`/api/hotels/${hotelId}/current-guests`);
        const data = await response.json();
        
        const guestSelect = document.querySelector('select[name="guest"]');
        guestSelect.innerHTML = '<option value="">Select Guest</option>';
        
        data.guests.forEach(guest => {
            guestSelect.innerHTML += `<option value="${guest._id}">${guest.name} (Room ${guest.room.number})</option>`;
        });
    } catch (error) {
        console.error('Error loading guests:', error);
        alert('Error loading guests');
    }
}

async function addRequest() {
    const form = document.getElementById('addRequestForm');
    const formData = new FormData(form);
    
    try {
        const response = await fetch('/admin/maintenance', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(Object.fromEntries(formData))
        });
        
        const result = await response.json();
        
        if (!response.ok) {
            throw new Error(result.error || 'Error creating request');
        }
        
        location.reload();
    } catch (error) {
        console.error('Error adding request:', error);
        alert(error.message);
    }
}

async function viewRequest(id) {
    try {
        currentRequestId = id;
        const response = await fetch(`/admin/maintenance/${id}`);
        const data = await response.json();
        
        if (!data.request) throw new Error('Request not found');
        
        const request = data.request;
        const content = `
            <div class="row g-4">
                <div class="col-md-6">
                    <div class="card h-100">
                        <div class="card-body">
                            <h6 class="card-subtitle mb-3 text-muted">Request Information</h6>
                            <p class="mb-1"><strong>Type:</strong> ${request.requestType}</p>
                            <p class="mb-1"><strong>Service Type:</strong> ${formatServiceType(request.serviceType)}</p>
                            <p class="mb-1"><strong>Location:</strong> ${request.location.areaName || `Room ${request.location.room.number}`}</p>
                            <p class="mb-1"><strong>Hotel:</strong> ${request.hotel.name}</p>
                            <p class="mb-1"><strong>Priority:</strong> ${request.priority}</p>
                            <p class="mb-1"><strong>Status:</strong> ${request.status}</p>
                            <p class="mb-1"><strong>Requested By:</strong> ${request.requestedBy.name}</p>
                            <p class="mb-1"><strong>Created At:</strong> ${new Date(request.createdAt).toLocaleString()}</p>
                            <p class="mb-0"><strong>Description:</strong><br>${request.description}</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="card h-100">
                        <div class="card-body">
                            <h6 class="card-subtitle mb-3 text-muted">Assignment & Schedule</h6>
                            <p class="mb-1"><strong>Assigned To:</strong> ${request.assignedTo ? request.assignedTo.name : 'Not assigned'}</p>
                            <p class="mb-1"><strong>Scheduled For:</strong> ${request.scheduledFor ? new Date(request.scheduledFor).toLocaleString() : 'Not scheduled'}</p>
                            <p class="mb-0"><strong>Completed At:</strong> ${request.completedAt ? new Date(request.completedAt).toLocaleString() : 'Not completed'}</p>
                        </div>
                    </div>
                </div>
                <div class="col-12">
                    <div class="card">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h6 class="card-subtitle text-muted mb-0">Notes & Updates</h6>
                                <button class="btn btn-sm btn-outline-primary" onclick="addNote()">
                                    <i class="fas fa-plus me-1"></i>Add Note
                                </button>
                            </div>
                            ${request.notes.length ? `
                                <div class="timeline">
                                    ${request.notes.map(note => `
                                        <div class="timeline-item pb-3">
                                            <div class="d-flex justify-content-between mb-1">
                                                <small class="text-muted">${new Date(note.addedAt).toLocaleString()}</small>
                                                <small class="text-muted">by ${note.addedBy.name}</small>
                                            </div>
                                            <p class="mb-0">${note.text}</p>
                                        </div>
                                    `).join('')}
                                </div>
                            ` : '<p class="text-muted mb-0">No notes added yet</p>'}
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        document.getElementById('requestDetails').innerHTML = content;
        document.getElementById('completeBtn').style.display = 
            request.status === 'completed' ? 'none' : 'block';
            
        new bootstrap.Modal(document.getElementById('viewRequestModal')).show();
    } catch (error) {
        console.error('Error viewing request:', error);
        alert('Error loading request details');
    }
}

async function updateStatus(status) {
    if (!currentRequestId) return;
    
    try {
        const response = await fetch(`/admin/maintenance/${currentRequestId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ status })
        });
        
        const result = await response.json();
        
        if (!response.ok) {
            throw new Error(result.error || 'Error updating request');
        }
        
        location.reload();
    } catch (error) {
        console.error('Error updating request:', error);
        alert(error.message);
    }
}

async function addNote() {
    if (!currentRequestId) return;
    
    const note = prompt('Enter note:');
    if (!note) return;
    
    try {
        const response = await fetch(`/admin/maintenance/${currentRequestId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ note })
        });
        
        const result = await response.json();
        
        if (!response.ok) {
            throw new Error(result.error || 'Error adding note');
        }
        
        viewRequest(currentRequestId);
    } catch (error) {
        console.error('Error adding note:', error);
        alert(error.message);
    }
}

async function deleteRequest(id) {
    if (!confirm('Are you sure you want to delete this request?')) return;
    
    try {
        const response = await fetch(`/admin/maintenance/${id}`, {
            method: 'DELETE'
        });
        
        const result = await response.json();
        
        if (!response.ok) {
            throw new Error(result.error || 'Error deleting request');
        }
        
        location.reload();
    } catch (error) {
        console.error('Error deleting request:', error);
        alert(error.message);
    }
}

function toggleLocationFields(locationType) {
    const roomFields = document.getElementById('roomFields');
    const areaFields = document.getElementById('areaFields');
    
    if (locationType === 'room') {
        roomFields.style.display = 'block';
        areaFields.style.display = 'none';
    } else {
        roomFields.style.display = 'none';
        areaFields.style.display = 'block';
    }
}

function toggleScheduleFields(scheduleType) {
    const oneTimeSchedule = document.getElementById('oneTimeSchedule');
    const recurringSchedule = document.getElementById('recurringSchedule');
    
    if (scheduleType === 'once') {
        oneTimeSchedule.style.display = 'block';
        recurringSchedule.style.display = 'none';
    } else {
        oneTimeSchedule.style.display = 'none';
        recurringSchedule.style.display = 'block';
    }
}
</script>

<style>
.timeline {
    position: relative;
    padding-left: 1rem;
}

.timeline-item {
    position: relative;
    padding-left: 1.5rem;
    border-left: 2px solid #e9ecef;
}

.timeline-item:last-child {
    border-left-color: transparent;
}

.timeline-item::before {
    content: '';
    position: absolute;
    left: -5px;
    top: 0;
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: #0d6efd;
}
</style>

{{#section 'scripts'}}
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    // Initialize maintenance trends chart
    const ctx = document.getElementById('maintenance-trends-chart').getContext('2d');
    const trendData = {{{trendData}}};
    
    new Chart(ctx, {
        type: 'line',
        data: {
            labels: trendData.map(d => d.date),
            datasets: [
                {
                    label: 'Pending',
                    data: trendData.map(d => d.pending),
                    borderColor: '#ffc107',
                    backgroundColor: '#ffc10720',
                    tension: 0.4,
                    fill: true
                },
                {
                    label: 'In Progress',
                    data: trendData.map(d => d.inProgress),
                    borderColor: '#0dcaf0',
                    backgroundColor: '#0dcaf020',
                    tension: 0.4,
                    fill: true
                },
                {
                    label: 'Completed',
                    data: trendData.map(d => d.completed),
                    borderColor: '#198754',
                    backgroundColor: '#19875420',
                    tension: 0.4,
                    fill: true
                }
            ]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'top',
                },
                title: {
                    display: false
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        stepSize: 1
                    }
                }
            }
        }
    });
</script>
{{/section}}

================
File: src/views/admin/ota/list.hbs
================
{{#extend "admin-layout"}}
{{#content "content"}}
<div class="container-fluid px-4">
    <div class="d-flex justify-content-between align-items-center">
        <h1 class="mt-4">OTA Channels</h1>
        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addChannelModal">
            <i class="fas fa-plus"></i> Add New Channel
        </button>
    </div>

    <!-- Channel Cards -->
    <div class="row mt-4">
        {{#each channels}}
        <div class="col-xl-4 col-md-6">
            <div class="card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <div>
                        <img src="/images/ota/{{name}}.png" alt="{{name}}" class="ota-logo" width="24" height="24">
                        <span class="ms-2">{{name}}</span>
                    </div>
                    <div class="dropdown">
                        <button class="btn btn-link" data-bs-toggle="dropdown">
                            <i class="fas fa-ellipsis-v"></i>
                        </button>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" href="/admin/ota/{{_id}}/edit">
                                <i class="fas fa-edit"></i> Edit
                            </a></li>
                            <li><a class="dropdown-item" href="/admin/ota/{{_id}}/mappings">
                                <i class="fas fa-exchange-alt"></i> Room Mappings
                            </a></li>
                            <li><a class="dropdown-item text-danger" href="#" onclick="deleteChannel('{{_id}}')">
                                <i class="fas fa-trash"></i> Delete
                            </a></li>
                        </ul>
                    </div>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <div class="small text-muted">Status</div>
                        <div class="badge bg-{{statusColor isActive}}">
                            {{#if isActive}}Active{{else}}Inactive{{/if}}
                        </div>
                    </div>
                    <div class="mb-3">
                        <div class="small text-muted">Last Sync</div>
                        <div>{{formatTimeAgo lastSync.inventory}}</div>
                    </div>
                    <div class="mb-3">
                        <div class="small text-muted">Room Types Mapped</div>
                        <div>{{mappings.roomTypes.length}} rooms</div>
                    </div>
                    <div class="mb-3">
                        <div class="small text-muted">Recent Bookings (30 days)</div>
                        <div>{{stats.recentBookings}} bookings</div>
                    </div>
                </div>
                <div class="card-footer">
                    <div class="row text-center">
                        <div class="col">
                            <button class="btn btn-sm btn-outline-primary" onclick="syncChannel('{{_id}}')">
                                <i class="fas fa-sync"></i> Sync
                            </button>
                        </div>
                        <div class="col">
                            <button class="btn btn-sm btn-outline-info" onclick="viewLogs('{{_id}}')">
                                <i class="fas fa-list"></i> Logs
                            </button>
                        </div>
                        <div class="col">
                            <button class="btn btn-sm btn-outline-success" onclick="viewStats('{{_id}}')">
                                <i class="fas fa-chart-bar"></i> Stats
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        {{/each}}
    </div>
</div>

<!-- Add Channel Modal -->
<div class="modal fade" id="addChannelModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add New OTA Channel</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="addChannelForm" onsubmit="return addChannel(event)">
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Channel</label>
                        <select class="form-select" name="name" required>
                            <option value="">Select Channel</option>
                            <option value="booking.com">Booking.com</option>
                            <option value="airbnb">Airbnb</option>
                            <option value="expedia">Expedia</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">API Key</label>
                        <input type="text" class="form-control" name="apiKey" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">API Secret</label>
                        <input type="password" class="form-control" name="apiSecret" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Property ID</label>
                        <input type="text" class="form-control" name="propertyId" required>
                    </div>
                    <div class="mb-3">
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" name="syncSettings.syncInventory" checked>
                            <label class="form-check-label">Sync Inventory</label>
                        </div>
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" name="syncSettings.syncPrices" checked>
                            <label class="form-check-label">Sync Prices</label>
                        </div>
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" name="syncSettings.syncAvailability" checked>
                            <label class="form-check-label">Sync Availability</label>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Add Channel</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- View Logs Modal -->
<div class="modal fade" id="logsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Sync Logs</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="table-responsive">
                    <table class="table" id="logsTable">
                        <thead>
                            <tr>
                                <th>Type</th>
                                <th>Status</th>
                                <th>Message</th>
                                <th>Time</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- View Stats Modal -->
<div class="modal fade" id="statsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Channel Statistics</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6">
                        <canvas id="bookingsChart"></canvas>
                    </div>
                    <div class="col-md-6">
                        <canvas id="revenueChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
{{/content}}

{{#content "scripts"}}
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    async function addChannel(event) {
        event.preventDefault();
        const form = event.target;
        const formData = new FormData(form);
        
        try {
            const response = await fetch('/api/ota/channels', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(Object.fromEntries(formData))
            });
            
            if (response.ok) {
                location.reload();
            } else {
                const data = await response.json();
                alert(data.error || 'Failed to add channel');
            }
        } catch (error) {
            alert('Failed to add channel');
        }
    }

    async function syncChannel(channelId) {
        try {
            const response = await fetch(`/api/ota/channels/${channelId}/sync`, {
                method: 'POST'
            });
            
            if (response.ok) {
                alert('Sync initiated successfully');
            } else {
                const data = await response.json();
                alert(data.error || 'Failed to sync channel');
            }
        } catch (error) {
            alert('Failed to sync channel');
        }
    }

    async function viewLogs(channelId) {
        try {
            const response = await fetch(`/api/ota/channels/${channelId}/logs`);
            const data = await response.json();
            
            const tbody = document.querySelector('#logsTable tbody');
            tbody.innerHTML = data.logs.map(log => `
                <tr>
                    <td>${log.type}</td>
                    <td><span class="badge bg-${log.status === 'success' ? 'success' : 'danger'}">${log.status}</span></td>
                    <td>${log.message}</td>
                    <td>${new Date(log.timestamp).toLocaleString()}</td>
                </tr>
            `).join('');
            
            new bootstrap.Modal(document.getElementById('logsModal')).show();
        } catch (error) {
            alert('Failed to load logs');
        }
    }

    async function viewStats(channelId) {
        try {
            const response = await fetch(`/api/ota/channels/${channelId}/stats`);
            const data = await response.json();
            
            // Create bookings chart
            new Chart(document.getElementById('bookingsChart'), {
                type: 'line',
                data: {
                    labels: data.bookings.labels,
                    datasets: [{
                        label: 'Bookings',
                        data: data.bookings.data,
                        borderColor: '#36A2EB'
                    }]
                }
            });
            
            // Create revenue chart
            new Chart(document.getElementById('revenueChart'), {
                type: 'bar',
                data: {
                    labels: data.revenue.labels,
                    datasets: [{
                        label: 'Revenue',
                        data: data.revenue.data,
                        backgroundColor: '#FF6384'
                    }]
                }
            });
            
            new bootstrap.Modal(document.getElementById('statsModal')).show();
        } catch (error) {
            alert('Failed to load statistics');
        }
    }

    async function deleteChannel(channelId) {
        if (!confirm('Are you sure you want to delete this channel?')) {
            return;
        }
        
        try {
            const response = await fetch(`/api/ota/channels/${channelId}`, {
                method: 'DELETE'
            });
            
            if (response.ok) {
                location.reload();
            } else {
                const data = await response.json();
                alert(data.error || 'Failed to delete channel');
            }
        } catch (error) {
            alert('Failed to delete channel');
        }
    }
</script>
{{/content}}
{{/extend}}

================
File: src/views/admin/payments/list.hbs
================
{{> admin/header title="Payment Transactions"}}

<div class="container-fluid">
    <!-- Page Heading -->
    <div class="d-sm-flex align-items-center justify-content-between mb-4">
        <h1 class="h3 mb-0 text-gray-800">Payment Transactions</h1>
    </div>

    <!-- Filters -->
    <div class="card shadow mb-4">
        <div class="card-body">
            <form id="filterForm" class="row g-3">
                <div class="col-md-3">
                    <label class="form-label">Date Range</label>
                    <input type="text" class="form-control" id="dateRange">
                </div>
                <div class="col-md-3">
                    <label class="form-label">Payment Status</label>
                    <select class="form-select" id="paymentStatus">
                        <option value="">All</option>
                        <option value="completed">Completed</option>
                        <option value="pending">Pending</option>
                        <option value="failed">Failed</option>
                        <option value="refunded">Refunded</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Payment Method</label>
                    <select class="form-select" id="paymentMethod">
                        <option value="">All</option>
                        <option value="credit_card">Credit Card</option>
                        <option value="debit_card">Debit Card</option>
                        <option value="cash">Cash</option>
                        <option value="bank_transfer">Bank Transfer</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <label class="form-label">&nbsp;</label>
                    <button type="submit" class="btn btn-primary d-block">Apply Filters</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Payments Table -->
    <div class="card shadow mb-4">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered" id="paymentsTable" width="100%" cellspacing="0">
                    <thead>
                        <tr>
                            <th>Transaction ID</th>
                            <th>Date</th>
                            <th>Guest</th>
                            <th>Amount</th>
                            <th>Method</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {{#each payments}}
                        <tr>
                            <td>{{this.transactionId}}</td>
                            <td>{{formatDate this.createdAt}}</td>
                            <td>
                                {{#if this.guest}}
                                    <a href="/admin/guests/{{this.guest._id}}">{{this.guest.name}}</a>
                                {{else}}
                                    N/A
                                {{/if}}
                            </td>
                            <td>${{formatNumber this.amount}}</td>
                            <td>
                                <span class="badge bg-{{paymentMethodColor this.method}}">
                                    {{formatPaymentMethod this.method}}
                                </span>
                            </td>
                            <td>
                                <span class="badge bg-{{paymentStatusColor this.status}}">
                                    {{formatPaymentStatus this.status}}
                                </span>
                            </td>
                            <td>
                                <div class="btn-group">
                                    <a href="/admin/payments/{{this._id}}" class="btn btn-sm btn-info">
                                        <i class="fas fa-eye"></i>
                                    </a>
                                    {{#if (eq this.status 'completed')}}
                                    <button type="button" class="btn btn-sm btn-warning" onclick="showRefundModal('{{this._id}}')">
                                        <i class="fas fa-undo"></i>
                                    </button>
                                    {{/if}}
                                    <a href="/admin/payments/{{this._id}}/invoice" class="btn btn-sm btn-secondary">
                                        <i class="fas fa-file-invoice"></i>
                                    </a>
                                </div>
                            </td>
                        </tr>
                        {{/each}}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Refund Modal -->
<div class="modal fade" id="refundModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Process Refund</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="refundForm">
                    <input type="hidden" id="paymentId">
                    <div class="mb-3">
                        <label class="form-label">Refund Amount</label>
                        <input type="number" class="form-control" id="refundAmount" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Reason for Refund</label>
                        <textarea class="form-control" id="refundReason" required></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="processRefund()">Process Refund</button>
            </div>
        </div>
    </div>
</div>

<script>
// Initialize DataTable
$(document).ready(function() {
    $('#paymentsTable').DataTable();
    
    // Initialize daterangepicker
    $('#dateRange').daterangepicker({
        opens: 'left',
        autoUpdateInput: false,
        locale: {
            cancelLabel: 'Clear'
        }
    });
});

// Show refund modal
function showRefundModal(paymentId) {
    $('#paymentId').val(paymentId);
    $('#refundModal').modal('show');
}

// Process refund
async function processRefund() {
    const paymentId = $('#paymentId').val();
    const amount = $('#refundAmount').val();
    const reason = $('#refundReason').val();

    try {
        const response = await fetch(`/admin/payments/${paymentId}/refund`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ amount, reason })
        });

        if (!response.ok) throw new Error('Refund failed');

        $('#refundModal').modal('hide');
        location.reload();
    } catch (error) {
        alert('Error processing refund: ' + error.message);
    }
}
</script>

{{> admin/footer}}

================
File: src/views/admin/reports/financial.hbs
================
{{> admin/header title="Financial Reports"}}

<div class="container-fluid">
    <!-- Revenue Overview Card -->
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Revenue Overview</h6>
        </div>
        <div class="card-body">
            <div class="chart-area">
                <canvas id="revenueChart"></canvas>
            </div>
        </div>
    </div>

    <!-- Payment Methods Card -->
    <div class="row">
        <div class="col-xl-6 col-lg-6">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Payment Methods Distribution</h6>
                </div>
                <div class="card-body">
                    <div class="chart-pie">
                        <canvas id="paymentMethodsChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Revenue by Room Type -->
        <div class="col-xl-6 col-lg-6">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Revenue by Room Type</h6>
                </div>
                <div class="card-body">
                    <div class="chart-bar">
                        <canvas id="roomTypeRevenueChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
// Revenue Chart
const revenueCtx = document.getElementById('revenueChart').getContext('2d');
new Chart(revenueCtx, {
    type: 'line',
    data: {
        labels: {{{json revenue.map '_id'}}},
        datasets: [{
            label: 'Daily Revenue',
            data: {{{json revenue.map 'total'}}},
            borderColor: '#4e73df',
            backgroundColor: 'rgba(78, 115, 223, 0.05)',
            tension: 0.3
        }]
    },
    options: {
        maintainAspectRatio: false,
        plugins: {
            legend: {
                display: false
            }
        },
        scales: {
            y: {
                beginAtZero: true,
                grid: {
                    color: "rgb(234, 236, 244)",
                    zeroLineColor: "rgb(234, 236, 244)",
                    drawBorder: false
                },
                ticks: {
                    callback: function(value) {
                        return '$' + value;
                    }
                }
            },
            x: {
                grid: {
                    display: false,
                    drawBorder: false
                }
            }
        }
    }
});

// Payment Methods Chart
const paymentMethodsCtx = document.getElementById('paymentMethodsChart').getContext('2d');
new Chart(paymentMethodsCtx, {
    type: 'doughnut',
    data: {
        labels: {{{json paymentMethods.map '_id'}}},
        datasets: [{
            data: {{{json paymentMethods.map 'total'}}},
            backgroundColor: ['#4e73df', '#1cc88a', '#36b9cc', '#f6c23e'],
            hoverBackgroundColor: ['#2e59d9', '#17a673', '#2c9faf', '#dda20a'],
            hoverBorderColor: "rgba(234, 236, 244, 1)",
        }]
    },
    options: {
        maintainAspectRatio: false,
        plugins: {
            legend: {
                position: 'bottom'
            }
        },
        cutout: '70%'
    }
});
</script>

{{> admin/footer}}

================
File: src/views/admin/reports/guest.hbs
================
{{> admin/header title="Guest Analytics"}}

<div class="container-fluid">
    <!-- Page Heading -->
    <div class="d-sm-flex align-items-center justify-content-between mb-4">
        <h1 class="h3 mb-0 text-gray-800">Guest Analytics</h1>
        <div class="btn-group">
            <button class="btn btn-primary" onclick="exportReport('pdf')">
                <i class="fas fa-file-pdf"></i> Export PDF
            </button>
            <button class="btn btn-success" onclick="exportReport('excel')">
                <i class="fas fa-file-excel"></i> Export Excel
            </button>
        </div>
    </div>

    <!-- Filters -->
    <div class="card shadow mb-4">
        <div class="card-body">
            <form id="filterForm" class="row">
                <div class="col-md-3 mb-3">
                    <label class="form-label">Date Range</label>
                    <select class="form-select" id="dateRange" onchange="updateDateInputs()">
                        <option value="last30days">Last 30 Days</option>
                        <option value="last90days">Last 90 Days</option>
                        <option value="last6months">Last 6 Months</option>
                        <option value="lastYear">Last Year</option>
                        <option value="custom">Custom Range</option>
                    </select>
                </div>
                <div class="col-md-3 mb-3 date-inputs" style="display: none;">
                    <label class="form-label">Start Date</label>
                    <input type="date" class="form-control" id="startDate">
                </div>
                <div class="col-md-3 mb-3 date-inputs" style="display: none;">
                    <label class="form-label">End Date</label>
                    <input type="date" class="form-control" id="endDate">
                </div>
                <div class="col-md-3 mb-3">
                    <label class="form-label">Guest Type</label>
                    <select class="form-select" id="guestType">
                        <option value="">All Types</option>
                        <option value="leisure">Leisure</option>
                        <option value="business">Business</option>
                        <option value="group">Group</option>
                    </select>
                </div>
                <div class="col-12">
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-filter"></i> Apply Filters
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Overview Cards -->
    <div class="row">
        <!-- Total Guests -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-primary shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                Total Guests</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">{{stats.totalGuests}}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-users fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Average Length of Stay -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-success shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">
                                Average Stay (Nights)</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">{{stats.averageStay}}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-bed fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Return Rate -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-info shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-info text-uppercase mb-1">
                                Return Rate</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">{{stats.returnRate}}%</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-redo fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Average Spending -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-warning shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">
                                Average Spending</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">${{stats.averageSpending}}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-dollar-sign fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Guest Demographics -->
    <div class="row">
        <!-- Age Distribution -->
        <div class="col-xl-6 col-lg-6">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Age Distribution</h6>
                </div>
                <div class="card-body">
                    <div class="chart-pie">
                        <canvas id="ageDistributionChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Guest Type Distribution -->
        <div class="col-xl-6 col-lg-6">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Guest Type Distribution</h6>
                </div>
                <div class="card-body">
                    <div class="chart-pie">
                        <canvas id="guestTypeChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Booking Trends -->
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Booking Trends</h6>
        </div>
        <div class="card-body">
            <div class="chart-area">
                <canvas id="bookingTrendsChart"></canvas>
            </div>
        </div>
    </div>

    <!-- Guest Origin Map -->
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Guest Origin</h6>
        </div>
        <div class="card-body">
            <div id="guestOriginMap" style="height: 400px;"></div>
        </div>
    </div>

    <!-- Top Guests Table -->
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Top Guests</h6>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered" id="topGuestsTable" width="100%" cellspacing="0">
                    <thead>
                        <tr>
                            <th>Guest Name</th>
                            <th>Total Stays</th>
                            <th>Total Nights</th>
                            <th>Total Spending</th>
                            <th>Last Stay</th>
                            <th>Loyalty Tier</th>
                        </tr>
                    </thead>
                    <tbody>
                        {{#each topGuests}}
                        <tr>
                            <td>{{this.name}}</td>
                            <td>{{this.totalStays}}</td>
                            <td>{{this.totalNights}}</td>
                            <td>${{this.totalSpending}}</td>
                            <td>{{this.lastStay}}</td>
                            <td>
                                <span class="badge bg-{{this.loyaltyColor}}">{{this.loyaltyTier}}</span>
                            </td>
                        </tr>
                        {{/each}}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<script>
// Initialize DataTable
$(document).ready(function() {
    $('#topGuestsTable').DataTable();
    initializeCharts();
    initializeMap();
});

// Handle date range selection
function updateDateInputs() {
    const range = $('#dateRange').val();
    const dateInputs = $('.date-inputs');
    
    if (range === 'custom') {
        dateInputs.show();
    } else {
        dateInputs.hide();
    }
}

// Handle form submission
$('#filterForm').on('submit', async function(e) {
    e.preventDefault();
    
    const filters = {
        dateRange: $('#dateRange').val(),
        startDate: $('#startDate').val(),
        endDate: $('#endDate').val(),
        guestType: $('#guestType').val()
    };

    try {
        const response = await fetch('/admin/reports/guest/filter', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(filters)
        });

        if (!response.ok) throw new Error('Failed to fetch filtered data');

        const data = await response.json();
        updateCharts(data);
        updateStats(data);
        updateMap(data);
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to fetch filtered data: ' + error.message
        });
    }
});

// Initialize charts
function initializeCharts() {
    // Age Distribution Chart
    const ageCtx = document.getElementById('ageDistributionChart');
    new Chart(ageCtx, {
        type: 'doughnut',
        data: {
            labels: {{{json ageDistribution.labels}}},
            datasets: [{
                data: {{{json ageDistribution.data}}},
                backgroundColor: ['#4e73df', '#1cc88a', '#36b9cc', '#f6c23e', '#e74a3b'],
                hoverBackgroundColor: ['#2e59d9', '#17a673', '#2c9faf', '#dda20a', '#be2617'],
                hoverBorderColor: "rgba(234, 236, 244, 1)"
            }]
        },
        options: {
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'bottom'
                }
            }
        }
    });

    // Guest Type Chart
    const typeCtx = document.getElementById('guestTypeChart');
    new Chart(typeCtx, {
        type: 'doughnut',
        data: {
            labels: {{{json guestType.labels}}},
            datasets: [{
                data: {{{json guestType.data}}},
                backgroundColor: ['#4e73df', '#1cc88a', '#36b9cc'],
                hoverBackgroundColor: ['#2e59d9', '#17a673', '#2c9faf'],
                hoverBorderColor: "rgba(234, 236, 244, 1)"
            }]
        },
        options: {
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'bottom'
                }
            }
        }
    });

    // Booking Trends Chart
    const trendsCtx = document.getElementById('bookingTrendsChart');
    new Chart(trendsCtx, {
        type: 'line',
        data: {
            labels: {{{json bookingTrends.labels}}},
            datasets: [{
                label: 'Number of Bookings',
                data: {{{json bookingTrends.data}}},
                lineTension: 0.3,
                backgroundColor: "rgba(78, 115, 223, 0.05)",
                borderColor: "rgba(78, 115, 223, 1)",
                pointRadius: 3,
                pointBackgroundColor: "rgba(78, 115, 223, 1)",
                pointBorderColor: "rgba(78, 115, 223, 1)",
                pointHoverRadius: 3,
                pointHoverBackgroundColor: "rgba(78, 115, 223, 1)",
                pointHoverBorderColor: "rgba(78, 115, 223, 1)",
                pointHitRadius: 10,
                pointBorderWidth: 2
            }]
        },
        options: {
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
}

// Initialize map
function initializeMap() {
    const map = L.map('guestOriginMap').setView([0, 0], 2);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '© OpenStreetMap contributors'
    }).addTo(map);

    // Add markers for guest origins
    const guestOrigins = {{{json guestOrigins}}};
    guestOrigins.forEach(origin => {
        L.marker([origin.lat, origin.lng])
            .bindPopup(`<b>${origin.country}</b><br>Guests: ${origin.count}`)
            .addTo(map);
    });
}

// Update charts with new data
function updateCharts(data) {
    // Implementation depends on the structure of your filtered data
    // You'll need to update each chart with the new data
}

// Update statistics cards
function updateStats(data) {
    // Implementation depends on the structure of your filtered data
    // You'll need to update the statistics cards with the new data
}

// Update map
function updateMap(data) {
    // Implementation depends on the structure of your filtered data
    // You'll need to update the map markers with the new data
}

// Export report
async function exportReport(format) {
    const filters = {
        dateRange: $('#dateRange').val(),
        startDate: $('#startDate').val(),
        endDate: $('#endDate').val(),
        guestType: $('#guestType').val(),
        format
    };

    try {
        const response = await fetch('/admin/reports/guest/export', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(filters)
        });

        if (!response.ok) throw new Error('Failed to export report');

        // Handle file download
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `guest-analytics.${format}`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to export report: ' + error.message
        });
    }
}
</script>

{{> admin/footer}}

================
File: src/views/admin/reports/occupancy.hbs
================
{{> admin/header title="Occupancy Reports"}}

<div class="container-fluid">
    <!-- Page Heading -->
    <div class="d-sm-flex align-items-center justify-content-between mb-4">
        <h1 class="h3 mb-0 text-gray-800">Occupancy Reports</h1>
        <div class="btn-group">
            <button class="btn btn-primary" onclick="exportReport('pdf')">
                <i class="fas fa-file-pdf"></i> Export PDF
            </button>
            <button class="btn btn-success" onclick="exportReport('excel')">
                <i class="fas fa-file-excel"></i> Export Excel
            </button>
        </div>
    </div>

    <!-- Filters -->
    <div class="card shadow mb-4">
        <div class="card-body">
            <form id="filterForm" class="row">
                <div class="col-md-3 mb-3">
                    <label class="form-label">Date Range</label>
                    <select class="form-select" id="dateRange" onchange="updateDateInputs()">
                        <option value="today">Today</option>
                        <option value="yesterday">Yesterday</option>
                        <option value="last7days">Last 7 Days</option>
                        <option value="last30days">Last 30 Days</option>
                        <option value="thisMonth">This Month</option>
                        <option value="lastMonth">Last Month</option>
                        <option value="custom">Custom Range</option>
                    </select>
                </div>
                <div class="col-md-3 mb-3 date-inputs" style="display: none;">
                    <label class="form-label">Start Date</label>
                    <input type="date" class="form-control" id="startDate">
                </div>
                <div class="col-md-3 mb-3 date-inputs" style="display: none;">
                    <label class="form-label">End Date</label>
                    <input type="date" class="form-control" id="endDate">
                </div>
                <div class="col-md-3 mb-3">
                    <label class="form-label">Room Type</label>
                    <select class="form-select" id="roomType">
                        <option value="">All Types</option>
                        {{#each roomTypes}}
                        <option value="{{this._id}}">{{this.name}}</option>
                        {{/each}}
                    </select>
                </div>
                <div class="col-12">
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-filter"></i> Apply Filters
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Overview Cards -->
    <div class="row">
        <!-- Average Occupancy Rate -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-primary shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                Average Occupancy Rate</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">{{stats.averageOccupancy}}%</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-bed fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Peak Occupancy -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-success shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">
                                Peak Occupancy</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">{{stats.peakOccupancy}}%</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-chart-line fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Lowest Occupancy -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-warning shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">
                                Lowest Occupancy</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">{{stats.lowestOccupancy}}%</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-chart-area fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Revenue Impact -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-info shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-info text-uppercase mb-1">
                                Revenue Impact</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">${{stats.revenueImpact}}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-dollar-sign fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Occupancy Trend Chart -->
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Occupancy Trend</h6>
        </div>
        <div class="card-body">
            <div class="chart-area">
                <canvas id="occupancyTrendChart"></canvas>
            </div>
        </div>
    </div>

    <!-- Room Type Distribution -->
    <div class="row">
        <!-- Room Type Occupancy -->
        <div class="col-xl-8 col-lg-7">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Room Type Occupancy</h6>
                </div>
                <div class="card-body">
                    <div class="chart-bar">
                        <canvas id="roomTypeOccupancyChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Room Status Distribution -->
        <div class="col-xl-4 col-lg-5">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Room Status Distribution</h6>
                </div>
                <div class="card-body">
                    <div class="chart-pie">
                        <canvas id="roomStatusChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Detailed Statistics Table -->
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Detailed Statistics</h6>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered" id="statsTable" width="100%" cellspacing="0">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Room Type</th>
                            <th>Total Rooms</th>
                            <th>Occupied Rooms</th>
                            <th>Occupancy Rate</th>
                            <th>Revenue</th>
                        </tr>
                    </thead>
                    <tbody>
                        {{#each detailedStats}}
                        <tr>
                            <td>{{this.date}}</td>
                            <td>{{this.roomType}}</td>
                            <td>{{this.totalRooms}}</td>
                            <td>{{this.occupiedRooms}}</td>
                            <td>{{this.occupancyRate}}%</td>
                            <td>${{this.revenue}}</td>
                        </tr>
                        {{/each}}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<script>
// Initialize DataTable
$(document).ready(function() {
    $('#statsTable').DataTable();
    initializeCharts();
});

// Handle date range selection
function updateDateInputs() {
    const range = $('#dateRange').val();
    const dateInputs = $('.date-inputs');
    
    if (range === 'custom') {
        dateInputs.show();
    } else {
        dateInputs.hide();
    }
}

// Handle form submission
$('#filterForm').on('submit', async function(e) {
    e.preventDefault();
    
    const filters = {
        dateRange: $('#dateRange').val(),
        startDate: $('#startDate').val(),
        endDate: $('#endDate').val(),
        roomType: $('#roomType').val()
    };

    try {
        const response = await fetch('/admin/reports/occupancy/filter', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(filters)
        });

        if (!response.ok) throw new Error('Failed to fetch filtered data');

        const data = await response.json();
        updateCharts(data);
        updateStats(data);
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to fetch filtered data: ' + error.message
        });
    }
});

// Initialize charts
function initializeCharts() {
    // Occupancy Trend Chart
    const trendCtx = document.getElementById('occupancyTrendChart');
    new Chart(trendCtx, {
        type: 'line',
        data: {
            labels: {{{json occupancyTrend.labels}}},
            datasets: [{
                label: 'Occupancy Rate',
                data: {{{json occupancyTrend.data}}},
                lineTension: 0.3,
                backgroundColor: "rgba(78, 115, 223, 0.05)",
                borderColor: "rgba(78, 115, 223, 1)",
                pointRadius: 3,
                pointBackgroundColor: "rgba(78, 115, 223, 1)",
                pointBorderColor: "rgba(78, 115, 223, 1)",
                pointHoverRadius: 3,
                pointHoverBackgroundColor: "rgba(78, 115, 223, 1)",
                pointHoverBorderColor: "rgba(78, 115, 223, 1)",
                pointHitRadius: 10,
                pointBorderWidth: 2
            }]
        },
        options: {
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true,
                    max: 100,
                    ticks: {
                        callback: function(value) {
                            return value + '%';
                        }
                    }
                }
            }
        }
    });

    // Room Type Occupancy Chart
    const roomTypeCtx = document.getElementById('roomTypeOccupancyChart');
    new Chart(roomTypeCtx, {
        type: 'bar',
        data: {
            labels: {{{json roomTypeOccupancy.labels}}},
            datasets: [{
                label: 'Occupancy Rate',
                data: {{{json roomTypeOccupancy.data}}},
                backgroundColor: "rgba(78, 115, 223, 0.8)"
            }]
        },
        options: {
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true,
                    max: 100,
                    ticks: {
                        callback: function(value) {
                            return value + '%';
                        }
                    }
                }
            }
        }
    });

    // Room Status Chart
    const statusCtx = document.getElementById('roomStatusChart');
    new Chart(statusCtx, {
        type: 'doughnut',
        data: {
            labels: {{{json roomStatus.labels}}},
            datasets: [{
                data: {{{json roomStatus.data}}},
                backgroundColor: ['#4e73df', '#1cc88a', '#36b9cc'],
                hoverBackgroundColor: ['#2e59d9', '#17a673', '#2c9faf'],
                hoverBorderColor: "rgba(234, 236, 244, 1)"
            }]
        },
        options: {
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'bottom'
                }
            }
        }
    });
}

// Update charts with new data
function updateCharts(data) {
    // Implementation depends on the structure of your filtered data
    // You'll need to update each chart with the new data
}

// Update statistics cards
function updateStats(data) {
    // Implementation depends on the structure of your filtered data
    // You'll need to update the statistics cards with the new data
}

// Export report
async function exportReport(format) {
    const filters = {
        dateRange: $('#dateRange').val(),
        startDate: $('#startDate').val(),
        endDate: $('#endDate').val(),
        roomType: $('#roomType').val(),
        format
    };

    try {
        const response = await fetch('/admin/reports/occupancy/export', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(filters)
        });

        if (!response.ok) throw new Error('Failed to export report');

        // Handle file download
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `occupancy-report.${format}`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to export report: ' + error.message
        });
    }
}
</script>

{{> admin/footer}}

================
File: src/views/admin/reports/staff.hbs
================
{{> admin/header title="Staff Performance Reports"}}

<div class="container-fluid">
    <!-- Page Heading -->
    <div class="d-sm-flex align-items-center justify-content-between mb-4">
        <h1 class="h3 mb-0 text-gray-800">Staff Performance Reports</h1>
        <div class="btn-group">
            <button class="btn btn-primary" onclick="exportReport('pdf')">
                <i class="fas fa-file-pdf"></i> Export PDF
            </button>
            <button class="btn btn-success" onclick="exportReport('excel')">
                <i class="fas fa-file-excel"></i> Export Excel
            </button>
        </div>
    </div>

    <!-- Filters -->
    <div class="card shadow mb-4">
        <div class="card-body">
            <form id="filterForm" class="row">
                <div class="col-md-3 mb-3">
                    <label class="form-label">Date Range</label>
                    <select class="form-select" id="dateRange" onchange="updateDateInputs()">
                        <option value="thisWeek">This Week</option>
                        <option value="lastWeek">Last Week</option>
                        <option value="thisMonth">This Month</option>
                        <option value="lastMonth">Last Month</option>
                        <option value="custom">Custom Range</option>
                    </select>
                </div>
                <div class="col-md-3 mb-3 date-inputs" style="display: none;">
                    <label class="form-label">Start Date</label>
                    <input type="date" class="form-control" id="startDate">
                </div>
                <div class="col-md-3 mb-3 date-inputs" style="display: none;">
                    <label class="form-label">End Date</label>
                    <input type="date" class="form-control" id="endDate">
                </div>
                <div class="col-md-3 mb-3">
                    <label class="form-label">Department</label>
                    <select class="form-select" id="department">
                        <option value="">All Departments</option>
                        <option value="housekeeping">Housekeeping</option>
                        <option value="frontdesk">Front Desk</option>
                        <option value="maintenance">Maintenance</option>
                        <option value="restaurant">Restaurant</option>
                    </select>
                </div>
                <div class="col-12">
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-filter"></i> Apply Filters
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Overview Cards -->
    <div class="row">
        <!-- Tasks Completed -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-primary shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                Tasks Completed</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">{{stats.tasksCompleted}}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-tasks fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Average Response Time -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-success shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">
                                Avg Response Time</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">{{stats.avgResponseTime}} min</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-clock fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Guest Satisfaction -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-info shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-info text-uppercase mb-1">
                                Guest Satisfaction</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">{{stats.guestSatisfaction}}%</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-smile fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Staff Attendance -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-warning shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">
                                Staff Attendance</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">{{stats.attendance}}%</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-user-check fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Performance Charts -->
    <div class="row">
        <!-- Task Completion Trend -->
        <div class="col-xl-8 col-lg-7">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Task Completion Trend</h6>
                </div>
                <div class="card-body">
                    <div class="chart-area">
                        <canvas id="taskCompletionChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Department Performance -->
        <div class="col-xl-4 col-lg-5">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Department Performance</h6>
                </div>
                <div class="card-body">
                    <div class="chart-pie">
                        <canvas id="departmentPerformanceChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Response Time Analysis -->
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Response Time Analysis</h6>
        </div>
        <div class="card-body">
            <div class="chart-bar">
                <canvas id="responseTimeChart"></canvas>
            </div>
        </div>
    </div>

    <!-- Top Performers Table -->
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Top Performers</h6>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered" id="topPerformersTable" width="100%" cellspacing="0">
                    <thead>
                        <tr>
                            <th>Staff Name</th>
                            <th>Department</th>
                            <th>Tasks Completed</th>
                            <th>Avg Response Time</th>
                            <th>Guest Rating</th>
                            <th>Attendance</th>
                        </tr>
                    </thead>
                    <tbody>
                        {{#each topPerformers}}
                        <tr>
                            <td>{{this.name}}</td>
                            <td>{{this.department}}</td>
                            <td>{{this.tasksCompleted}}</td>
                            <td>{{this.avgResponseTime}} min</td>
                            <td>
                                <div class="progress">
                                    <div class="progress-bar bg-info" role="progressbar" style="width: {{this.guestRating}}%">
                                        {{this.guestRating}}%
                                    </div>
                                </div>
                            </td>
                            <td>{{this.attendance}}%</td>
                        </tr>
                        {{/each}}
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Training and Development -->
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Training and Development</h6>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered" id="trainingTable" width="100%" cellspacing="0">
                    <thead>
                        <tr>
                            <th>Staff Name</th>
                            <th>Department</th>
                            <th>Training Completed</th>
                            <th>Next Training</th>
                            <th>Skills to Improve</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {{#each trainingData}}
                        <tr>
                            <td>{{this.name}}</td>
                            <td>{{this.department}}</td>
                            <td>
                                {{#each this.completedTraining}}
                                <span class="badge bg-success">{{this}}</span>
                                {{/each}}
                            </td>
                            <td>{{this.nextTraining}}</td>
                            <td>
                                {{#each this.skillsToImprove}}
                                <span class="badge bg-warning">{{this}}</span>
                                {{/each}}
                            </td>
                            <td>
                                <button class="btn btn-sm btn-primary" onclick="scheduleTraining('{{this._id}}')">
                                    Schedule Training
                                </button>
                            </td>
                        </tr>
                        {{/each}}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<script>
// Initialize DataTables
$(document).ready(function() {
    $('#topPerformersTable').DataTable();
    $('#trainingTable').DataTable();
    initializeCharts();
});

// Handle date range selection
function updateDateInputs() {
    const range = $('#dateRange').val();
    const dateInputs = $('.date-inputs');
    
    if (range === 'custom') {
        dateInputs.show();
    } else {
        dateInputs.hide();
    }
}

// Handle form submission
$('#filterForm').on('submit', async function(e) {
    e.preventDefault();
    
    const filters = {
        dateRange: $('#dateRange').val(),
        startDate: $('#startDate').val(),
        endDate: $('#endDate').val(),
        department: $('#department').val()
    };

    try {
        const response = await fetch('/admin/reports/staff/filter', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(filters)
        });

        if (!response.ok) throw new Error('Failed to fetch filtered data');

        const data = await response.json();
        updateCharts(data);
        updateStats(data);
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to fetch filtered data: ' + error.message
        });
    }
});

// Initialize charts
function initializeCharts() {
    // Task Completion Trend Chart
    const taskCtx = document.getElementById('taskCompletionChart');
    new Chart(taskCtx, {
        type: 'line',
        data: {
            labels: {{{json taskCompletion.labels}}},
            datasets: [{
                label: 'Tasks Completed',
                data: {{{json taskCompletion.data}}},
                lineTension: 0.3,
                backgroundColor: "rgba(78, 115, 223, 0.05)",
                borderColor: "rgba(78, 115, 223, 1)",
                pointRadius: 3,
                pointBackgroundColor: "rgba(78, 115, 223, 1)",
                pointBorderColor: "rgba(78, 115, 223, 1)",
                pointHoverRadius: 3,
                pointHoverBackgroundColor: "rgba(78, 115, 223, 1)",
                pointHoverBorderColor: "rgba(78, 115, 223, 1)",
                pointHitRadius: 10,
                pointBorderWidth: 2
            }]
        },
        options: {
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });

    // Department Performance Chart
    const deptCtx = document.getElementById('departmentPerformanceChart');
    new Chart(deptCtx, {
        type: 'doughnut',
        data: {
            labels: {{{json departmentPerformance.labels}}},
            datasets: [{
                data: {{{json departmentPerformance.data}}},
                backgroundColor: ['#4e73df', '#1cc88a', '#36b9cc', '#f6c23e'],
                hoverBackgroundColor: ['#2e59d9', '#17a673', '#2c9faf', '#dda20a'],
                hoverBorderColor: "rgba(234, 236, 244, 1)"
            }]
        },
        options: {
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'bottom'
                }
            }
        }
    });

    // Response Time Chart
    const responseCtx = document.getElementById('responseTimeChart');
    new Chart(responseCtx, {
        type: 'bar',
        data: {
            labels: {{{json responseTime.labels}}},
            datasets: [{
                label: 'Average Response Time (minutes)',
                data: {{{json responseTime.data}}},
                backgroundColor: "rgba(78, 115, 223, 0.8)"
            }]
        },
        options: {
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
}

// Update charts with new data
function updateCharts(data) {
    // Implementation depends on the structure of your filtered data
    // You'll need to update each chart with the new data
}

// Update statistics cards
function updateStats(data) {
    // Implementation depends on the structure of your filtered data
    // You'll need to update the statistics cards with the new data
}

// Schedule training
async function scheduleTraining(staffId) {
    try {
        const { value: trainingDetails } = await Swal.fire({
            title: 'Schedule Training',
            html:
                '<div class="mb-3">' +
                '<label class="form-label">Training Type</label>' +
                '<select class="form-select" id="trainingType">' +
                '<option value="customer_service">Customer Service</option>' +
                '<option value="technical">Technical Skills</option>' +
                '<option value="safety">Safety & Security</option>' +
                '<option value="leadership">Leadership</option>' +
                '</select>' +
                '</div>' +
                '<div class="mb-3">' +
                '<label class="form-label">Training Date</label>' +
                '<input type="date" class="form-control" id="trainingDate">' +
                '</div>',
            focusConfirm: false,
            preConfirm: () => {
                return {
                    type: document.getElementById('trainingType').value,
                    date: document.getElementById('trainingDate').value
                }
            }
        });

        if (trainingDetails) {
            const response = await fetch(`/admin/staff/${staffId}/schedule-training`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(trainingDetails)
            });

            if (!response.ok) throw new Error('Failed to schedule training');

            Swal.fire({
                icon: 'success',
                title: 'Training Scheduled',
                text: 'The training has been scheduled successfully.'
            });
        }
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to schedule training: ' + error.message
        });
    }
}

// Export report
async function exportReport(format) {
    const filters = {
        dateRange: $('#dateRange').val(),
        startDate: $('#startDate').val(),
        endDate: $('#endDate').val(),
        department: $('#department').val(),
        format
    };

    try {
        const response = await fetch('/admin/reports/staff/export', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(filters)
        });

        if (!response.ok) throw new Error('Failed to export report');

        // Handle file download
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `staff-performance.${format}`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to export report: ' + error.message
        });
    }
}
</script>

{{> admin/footer}}

================
File: src/views/admin/rooms/edit.hbs
================
{{> admin/header}}

<div class="container-fluid">
    <div class="row">
        <div class="col-lg-8">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">
                        <i class="fas fa-edit me-2"></i>Edit Room Details
                    </h5>
                </div>
                <div class="card-body">
                    <form id="editRoomForm" onsubmit="updateRoom(event)">
                        <div class="row g-3">
                            <!-- Basic Information -->
                            <div class="col-md-6">
                                <label class="form-label">Room Number</label>
                                <input type="text" class="form-control" name="roomNumber" value="{{room.roomNumber}}" required>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Room Type</label>
                                <select class="form-select" name="roomType" required>
                                    <option value="standard" {{#if (eq room.roomType 'standard')}}selected{{/if}}>Standard</option>
                                    <option value="deluxe" {{#if (eq room.roomType 'deluxe')}}selected{{/if}}>Deluxe</option>
                                    <option value="suite" {{#if (eq room.roomType 'suite')}}selected{{/if}}>Suite</option>
                                </select>
                            </div>

                            <!-- Pricing and Capacity -->
                            <div class="col-md-6">
                                <label class="form-label">Price per Night ($)</label>
                                <input type="number" class="form-control" name="price" value="{{room.price}}" required min="0">
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Capacity (Guests)</label>
                                <input type="number" class="form-control" name="capacity" value="{{room.capacity}}" required min="1">
                            </div>

                            <!-- Status -->
                            <div class="col-md-6">
                                <label class="form-label">Status</label>
                                <select class="form-select" name="status" required>
                                    <option value="available" {{#if (eq room.status 'available')}}selected{{/if}}>Available</option>
                                    <option value="maintenance" {{#if (eq room.status 'maintenance')}}selected{{/if}}>Under Maintenance</option>
                                    <option value="inactive" {{#if (eq room.status 'inactive')}}selected{{/if}}>Inactive</option>
                                </select>
                            </div>

                            <!-- Amenities -->
                            <div class="col-12">
                                <label class="form-label">Amenities</label>
                                <div class="row g-3" id="amenitiesContainer">
                                    <div class="col-md-3">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" name="amenities" value="wifi" 
                                                {{#if (includes room.amenities 'wifi')}}checked{{/if}}>
                                            <label class="form-check-label">WiFi</label>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" name="amenities" value="tv" 
                                                {{#if (includes room.amenities 'tv')}}checked{{/if}}>
                                            <label class="form-check-label">TV</label>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" name="amenities" value="ac" 
                                                {{#if (includes room.amenities 'ac')}}checked{{/if}}>
                                            <label class="form-check-label">Air Conditioning</label>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" name="amenities" value="minibar" 
                                                {{#if (includes room.amenities 'minibar')}}checked{{/if}}>
                                            <label class="form-check-label">Minibar</label>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" name="amenities" value="safe" 
                                                {{#if (includes room.amenities 'safe')}}checked{{/if}}>
                                            <label class="form-check-label">Safe</label>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" name="amenities" value="balcony" 
                                                {{#if (includes room.amenities 'balcony')}}checked{{/if}}>
                                            <label class="form-check-label">Balcony</label>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="col-12">
                                <hr>
                                <div class="d-flex justify-content-between">
                                    <a href="/admin/rooms" class="btn btn-outline-secondary">
                                        <i class="fas fa-arrow-left me-2"></i>Back to Rooms
                                    </a>
                                    <div>
                                        <button type="button" class="btn btn-danger me-2" onclick="confirmDelete()">
                                            <i class="fas fa-trash me-2"></i>Delete Room
                                        </button>
                                        <button type="submit" class="btn btn-primary">
                                            <i class="fas fa-save me-2"></i>Save Changes
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Room Preview Card -->
        <div class="col-lg-4">
            <div class="card">
                <div class="card-header bg-info text-white">
                    <h5 class="mb-0">
                        <i class="fas fa-eye me-2"></i>Room Preview
                    </h5>
                </div>
                <div class="card-body">
                    <div class="text-center mb-4">
                        <div class="display-4 mb-2">Room {{room.roomNumber}}</div>
                        <span class="badge bg-primary">{{room.roomType}}</span>
                    </div>
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h5>Price per Night</h5>
                        <h4 class="text-primary">${{room.price}}</h4>
                    </div>
                    <div class="mb-3">
                        <h5>Capacity</h5>
                        <p><i class="fas fa-users me-2"></i>{{room.capacity}} guests</p>
                    </div>
                    <div class="mb-3">
                        <h5>Status</h5>
                        <span class="badge {{#if (eq room.status 'available')}}bg-success{{else}}bg-warning{{/if}}">
                            {{room.status}}
                        </span>
                    </div>
                    <div>
                        <h5>Amenities</h5>
                        <div class="d-flex flex-wrap gap-2">
                            {{#each room.amenities}}
                            <span class="badge bg-light text-dark">{{this}}</span>
                            {{/each}}
                        </div>
                    </div>
                </div>
            </div>

            <!-- Current Booking Info (if any) -->
            <div class="card mt-4">
                <div class="card-header bg-warning">
                    <h5 class="mb-0">
                        <i class="fas fa-calendar-check me-2"></i>Current Booking
                    </h5>
                </div>
                <div class="card-body" id="currentBookingInfo">
                    Loading...
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete Room {{room.roomNumber}}? This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" onclick="deleteRoom()">Delete Room</button>
            </div>
        </div>
    </div>
</div>

<script>
// Update room details
async function updateRoom(event) {
    event.preventDefault();
    const form = event.target;
    const formData = new FormData(form);
    
    // Get selected amenities
    const amenities = Array.from(form.querySelectorAll('input[name="amenities"]:checked')).map(cb => cb.value);

    const roomData = {
        roomNumber: formData.get('roomNumber'),
        roomType: formData.get('roomType'),
        price: parseFloat(formData.get('price')),
        capacity: parseInt(formData.get('capacity')),
        status: formData.get('status'),
        amenities
    };

    try {
        const response = await fetch('/admin/rooms/{{hotel._id}}/{{room._id}}', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(roomData)
        });

        const data = await response.json();

        if (data.success) {
            alert('Room updated successfully');
            window.location.href = '/admin/rooms';
        } else {
            alert(data.message || 'Error updating room');
        }
    } catch (error) {
        console.error('Error updating room:', error);
        alert('Error updating room');
    }
}

// Load current booking info
async function loadCurrentBooking() {
    try {
        const response = await fetch('/admin/rooms/{{hotel._id}}/{{room._id}}/availability');
        const data = await response.json();

        const bookingInfo = document.getElementById('currentBookingInfo');
        
        if (data.success && data.data.length > 0) {
            const booking = data.data[0];
            const checkIn = new Date(booking.checkIn).toLocaleDateString();
            const checkOut = new Date(booking.checkOut).toLocaleDateString();
            
            bookingInfo.innerHTML = `
                <div class="d-flex align-items-center mb-3">
                    <i class="fas fa-user-circle fa-2x me-2"></i>
                    <div>
                        <h6 class="mb-0">${booking.user.name}</h6>
                        <small class="text-muted">${booking.user.email}</small>
                    </div>
                </div>
                <div class="mb-2">
                    <i class="fas fa-calendar-alt me-2"></i>
                    ${checkIn} - ${checkOut}
                </div>
                <div>
                    <span class="badge bg-${booking.status === 'confirmed' ? 'success' : 'warning'}">
                        ${booking.status}
                    </span>
                </div>
            `;
        } else {
            bookingInfo.innerHTML = '<div class="alert alert-info mb-0">No current bookings</div>';
        }
    } catch (error) {
        console.error('Error loading current booking:', error);
        document.getElementById('currentBookingInfo').innerHTML = 
            '<div class="alert alert-danger mb-0">Error loading booking information</div>';
    }
}

// Delete room confirmation
function confirmDelete() {
    const modal = new bootstrap.Modal(document.getElementById('deleteModal'));
    modal.show();
}

// Delete room
async function deleteRoom() {
    try {
        const response = await fetch('/admin/rooms/{{hotel._id}}/{{room._id}}', {
            method: 'DELETE'
        });

        const data = await response.json();

        if (data.success) {
            alert('Room deleted successfully');
            window.location.href = '/admin/rooms';
        } else {
            alert(data.message || 'Error deleting room');
        }
    } catch (error) {
        console.error('Error deleting room:', error);
        alert('Error deleting room');
    }
}

// Load current booking on page load
loadCurrentBooking();
</script>

================
File: src/views/admin/rooms/list.hbs
================
{{> admin/header}}

<div class="container-fluid">
    <!-- Filters and Search -->
    <div class="card mb-4">
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-3">
                    <label class="form-label">Filter by Hotel</label>
                    <select class="form-select" id="hotelFilter">
                        <option value="">All Hotels</option>
                        {{#each hotels}}
                        <option value="{{_id}}">{{name}}</option>
                        {{/each}}
                    </select>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Room Type</label>
                    <select class="form-select" id="roomTypeFilter">
                        <option value="">All Types</option>
                        <option value="standard">Standard</option>
                        <option value="deluxe">Deluxe</option>
                        <option value="suite">Suite</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Availability</label>
                    <select class="form-select" id="availabilityFilter">
                        <option value="">All Status</option>
                        <option value="available">Available</option>
                        <option value="occupied">Occupied</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Search</label>
                    <input type="text" class="form-control" id="searchInput" placeholder="Search rooms...">
                </div>
            </div>
        </div>
    </div>

    <!-- Rooms Grid -->
    <div class="row g-4" id="roomsGrid">
        {{#each rooms}}
        <div class="col-xl-3 col-lg-4 col-md-6 room-card" 
             data-hotel="{{hotelId}}" 
             data-type="{{roomType}}" 
             data-available="{{isAvailable}}">
            <div class="card h-100">
                <div class="card-header bg-transparent d-flex justify-content-between align-items-center">
                    <h6 class="mb-0">Room {{roomNumber}}</h6>
                    <span class="badge {{#if isAvailable}}bg-success{{else}}bg-danger{{/if}}">
                        {{#if isAvailable}}Available{{else}}Occupied{{/if}}
                    </span>
                </div>
                <div class="card-body">
                    <div class="d-flex justify-content-between mb-3">
                        <div>
                            <h5 class="card-title">{{roomType}}</h5>
                            <p class="card-text text-muted">{{hotelName}}</p>
                        </div>
                        <div class="text-end">
                            <h5 class="text-primary">${{price}}</h5>
                            <small class="text-muted">per night</small>
                        </div>
                    </div>

                    <div class="mb-3">
                        <div class="d-flex align-items-center mb-2">
                            <i class="fas fa-users me-2"></i>
                            <span>Capacity: {{capacity}} guests</span>
                        </div>
                        <div class="d-flex align-items-center">
                            <i class="fas fa-bed me-2"></i>
                            <span>{{roomType}} Room</span>
                        </div>
                    </div>

                    {{#if amenities}}
                    <div class="mb-3">
                        <h6 class="mb-2">Amenities:</h6>
                        <div class="d-flex flex-wrap gap-2">
                            {{#each amenities}}
                            <span class="badge bg-light text-dark">{{this}}</span>
                            {{/each}}
                        </div>
                    </div>
                    {{/if}}

                    {{#unless isAvailable}}
                    <div class="alert alert-warning mb-3">
                        <small>
                            <i class="fas fa-clock me-1"></i>
                            Booked until: {{formatDate currentBooking.checkOut}}
                        </small>
                    </div>
                    {{/unless}}
                </div>
                <div class="card-footer bg-transparent border-top-0">
                    <div class="d-flex justify-content-between">
                        <button class="btn btn-outline-primary" onclick="viewAvailability('{{hotelId}}', '{{_id}}')">
                            <i class="fas fa-calendar me-1"></i>Availability
                        </button>
                        <a href="/admin/rooms/{{hotelId}}/{{_id}}/edit" class="btn btn-primary">
                            <i class="fas fa-edit me-1"></i>Edit
                        </a>
                    </div>
                </div>
            </div>
        </div>
        {{/each}}
    </div>
</div>

<!-- Availability Modal -->
<div class="modal fade" id="availabilityModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Room Availability</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div id="availabilityCalendar"></div>
                <div id="bookingsList" class="mt-3">
                    <h6>Upcoming Bookings</h6>
                    <div class="list-group" id="bookingsListContent"></div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
.room-card .card {
    transition: transform 0.2s;
}

.room-card .card:hover {
    transform: translateY(-5px);
}

.badge {
    padding: 0.5em 0.75em;
}

.amenities-list {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
}

.amenity-badge {
    font-size: 0.8rem;
    padding: 0.3rem 0.6rem;
    border-radius: 20px;
}
</style>

<script>
// Filter functionality
function filterRooms() {
    const hotelFilter = document.getElementById('hotelFilter').value;
    const typeFilter = document.getElementById('roomTypeFilter').value;
    const availabilityFilter = document.getElementById('availabilityFilter').value;
    const searchText = document.getElementById('searchInput').value.toLowerCase();

    document.querySelectorAll('.room-card').forEach(card => {
        const hotel = card.dataset.hotel;
        const type = card.dataset.type.toLowerCase();
        const available = card.dataset.available === 'true';
        const text = card.textContent.toLowerCase();

        let show = true;

        if (hotelFilter && hotel !== hotelFilter) show = false;
        if (typeFilter && type !== typeFilter) show = false;
        if (availabilityFilter === 'available' && !available) show = false;
        if (availabilityFilter === 'occupied' && available) show = false;
        if (searchText && !text.includes(searchText)) show = false;

        card.style.display = show ? '' : 'none';
    });
}

// Add event listeners to filters
document.getElementById('hotelFilter').addEventListener('change', filterRooms);
document.getElementById('roomTypeFilter').addEventListener('change', filterRooms);
document.getElementById('availabilityFilter').addEventListener('change', filterRooms);
document.getElementById('searchInput').addEventListener('input', filterRooms);

// View availability function
async function viewAvailability(hotelId, roomId) {
    try {
        const response = await fetch(`/admin/rooms/${hotelId}/${roomId}/availability`);
        const data = await response.json();

        if (data.success) {
            const bookingsListContent = document.getElementById('bookingsListContent');
            bookingsListContent.innerHTML = '';

            if (data.data.length === 0) {
                bookingsListContent.innerHTML = '<div class="alert alert-info">No upcoming bookings for this room.</div>';
            } else {
                data.data.forEach(booking => {
                    const checkIn = new Date(booking.checkIn).toLocaleDateString();
                    const checkOut = new Date(booking.checkOut).toLocaleDateString();
                    
                    bookingsListContent.innerHTML += `
                        <div class="list-group-item">
                            <div class="d-flex w-100 justify-content-between">
                                <h6 class="mb-1">${booking.user.name}</h6>
                                <small class="text-muted">${booking.status}</small>
                            </div>
                            <p class="mb-1">
                                <i class="fas fa-calendar-alt me-1"></i>
                                ${checkIn} - ${checkOut}
                            </p>
                            <small>
                                <i class="fas fa-envelope me-1"></i>
                                ${booking.user.email}
                            </small>
                        </div>
                    `;
                });
            }

            const modal = new bootstrap.Modal(document.getElementById('availabilityModal'));
            modal.show();
        }
    } catch (error) {
        console.error('Error fetching availability:', error);
        alert('Error fetching room availability');
    }
}
</script>

================
File: src/views/admin/rooms/status-dashboard.hbs
================
{{> admin/header title="Room Status Dashboard"}}

<div class="container-fluid">
    <!-- Room Status Statistics -->
    <div class="row mb-4">
        <div class="col-xl-2 col-md-4 mb-3">
            <div class="card border-left-primary shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">Total Rooms</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">{{stats.total}}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-door-closed fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-2 col-md-4 mb-3">
            <div class="card border-left-success shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">Occupied</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">{{stats.occupied}}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-bed fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-2 col-md-4 mb-3">
            <div class="card border-left-info shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-info text-uppercase mb-1">Vacant</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">{{stats.vacant}}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-door-open fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-2 col-md-4 mb-3">
            <div class="card border-left-warning shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">Dirty</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">{{stats.dirty}}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-broom fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-2 col-md-4 mb-3">
            <div class="card border-left-danger shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-danger text-uppercase mb-1">Maintenance</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">{{stats.maintenance}}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-tools fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-2 col-md-4 mb-3">
            <div class="card border-left-secondary shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-secondary text-uppercase mb-1">Out of Order</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">{{stats.outOfOrder}}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-ban fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Room Status Grid -->
    <div class="card shadow mb-4">
        <div class="card-header py-3 d-flex justify-content-between align-items-center">
            <h6 class="m-0 font-weight-bold text-primary">Room Status Overview</h6>
            <div class="btn-group">
                <button type="button" class="btn btn-success btn-sm" onclick="refreshStatus()">
                    <i class="fas fa-sync"></i> Refresh
                </button>
                <button type="button" class="btn btn-primary btn-sm" onclick="showUpgradeModal()">
                    <i class="fas fa-arrow-up"></i> Process Upgrade
                </button>
            </div>
        </div>
        <div class="card-body">
            {{#each roomsByFloor}}
            <div class="floor-section mb-4">
                <h5 class="mb-3">Floor {{@key}}</h5>
                <div class="row">
                    {{#each this}}
                    <div class="col-md-3 col-sm-6 mb-3">
                        <div class="card room-card h-100">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <h5 class="card-title mb-0">Room {{number}}</h5>
                                    <span class="badge bg-{{roomStatusColor status}}">{{formatRoomStatus status}}</span>
                                </div>
                                <p class="card-text">
                                    <strong>Type:</strong> {{type}}<br>
                                    {{#if currentBooking}}
                                    <strong>Guest:</strong> {{currentGuest.name}}<br>
                                    <strong>Check-out:</strong> {{formatDate currentBooking.checkOut}}<br>
                                    {{/if}}
                                    {{#if housekeepingStatus}}
                                    <strong>Housekeeping:</strong>
                                    <span class="badge bg-{{housekeepingStatusColor housekeepingStatus.status}}">
                                        {{formatHousekeepingStatus housekeepingStatus.status}}
                                    </span><br>
                                    {{#if housekeepingStatus.assignedTo}}
                                    <small>Assigned to: {{housekeepingStatus.assignedTo.name}}</small>
                                    {{/if}}
                                    {{/if}}
                                </p>
                                <div class="btn-group w-100">
                                    <button type="button" class="btn btn-sm btn-info" onclick="viewRoom('{{_id}}')">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                    <button type="button" class="btn btn-sm btn-primary" onclick="updateStatus('{{_id}}')">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button type="button" class="btn btn-sm btn-warning" onclick="reportIssue('{{_id}}')">
                                        <i class="fas fa-exclamation-triangle"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    {{/each}}
                </div>
            </div>
            {{/each}}
        </div>
    </div>
</div>

<!-- Update Status Modal -->
<div class="modal fade" id="updateStatusModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Update Room Status</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="updateStatusForm">
                    <div class="mb-3">
                        <label class="form-label">Status</label>
                        <select class="form-select" id="roomStatus" required>
                            <option value="vacant">Vacant</option>
                            <option value="occupied">Occupied</option>
                            <option value="dirty">Dirty</option>
                            <option value="maintenance">Maintenance</option>
                            <option value="out_of_order">Out of Order</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Notes</label>
                        <textarea class="form-control" id="statusNotes" rows="3"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="submitStatusUpdate()">Update Status</button>
            </div>
        </div>
    </div>
</div>

<!-- Room Upgrade Modal -->
<div class="modal fade" id="roomUpgradeModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Process Room Upgrade</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="upgradeForm">
                    <div class="mb-3">
                        <label class="form-label">Booking ID</label>
                        <input type="text" class="form-control" id="bookingId" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">New Room</label>
                        <select class="form-select" id="newRoomId" required>
                            <option value="">Select Room</option>
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="processUpgrade()">Process Upgrade</button>
            </div>
        </div>
    </div>
</div>

<!-- Report Issue Modal -->
<div class="modal fade" id="reportIssueModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Report Room Issue</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="issueForm">
                    <div class="mb-3">
                        <label class="form-label">Issue Type</label>
                        <select class="form-select" id="issueType" required>
                            <option value="maintenance">Maintenance Required</option>
                            <option value="housekeeping">Housekeeping Required</option>
                            <option value="damage">Room Damage</option>
                            <option value="amenity">Missing Amenities</option>
                            <option value="other">Other</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Priority</label>
                        <select class="form-select" id="issuePriority" required>
                            <option value="low">Low</option>
                            <option value="normal">Normal</option>
                            <option value="high">High</option>
                            <option value="urgent">Urgent</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea class="form-control" id="issueDescription" rows="3" required></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="submitIssue()">Submit Issue</button>
            </div>
        </div>
    </div>
</div>

<script>
let selectedRoomId = null;

function refreshStatus() {
    window.location.reload();
}

function viewRoom(roomId) {
    window.location.href = `/admin/rooms/${roomId}`;
}

function updateStatus(roomId) {
    selectedRoomId = roomId;
    $('#updateStatusModal').modal('show');
}

function showUpgradeModal() {
    loadAvailableRooms();
    $('#roomUpgradeModal').modal('show');
}

function reportIssue(roomId) {
    selectedRoomId = roomId;
    $('#reportIssueModal').modal('show');
}

async function submitStatusUpdate() {
    if (!selectedRoomId) return;

    const status = document.getElementById('roomStatus').value;
    const notes = document.getElementById('statusNotes').value;

    try {
        const response = await fetch(`/admin/rooms/${selectedRoomId}/status`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ status, notes })
        });

        const data = await response.json();
        if (data.success) {
            $('#updateStatusModal').modal('hide');
            showAlert('success', 'Room status updated successfully');
            setTimeout(() => window.location.reload(), 1500);
        } else {
            showAlert('error', data.message || 'Failed to update room status');
        }
    } catch (error) {
        console.error('Error updating room status:', error);
        showAlert('error', 'Failed to update room status');
    }
}

async function loadAvailableRooms() {
    try {
        const response = await fetch('/admin/rooms/available');
        const data = await response.json();
        
        if (data.success) {
            const select = document.getElementById('newRoomId');
            select.innerHTML = '<option value="">Select Room</option>';
            
            data.rooms.forEach(room => {
                const option = document.createElement('option');
                option.value = room._id;
                option.textContent = `${room.number} - ${room.type}`;
                select.appendChild(option);
            });
        }
    } catch (error) {
        console.error('Error loading available rooms:', error);
        showAlert('error', 'Failed to load available rooms');
    }
}

async function processUpgrade() {
    const bookingId = document.getElementById('bookingId').value;
    const newRoomId = document.getElementById('newRoomId').value;

    if (!bookingId || !newRoomId) {
        showAlert('error', 'Please fill in all fields');
        return;
    }

    try {
        const response = await fetch('/admin/rooms/upgrade', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ bookingId, newRoomId })
        });

        const data = await response.json();
        if (data.success) {
            $('#roomUpgradeModal').modal('hide');
            showAlert('success', 'Room upgrade processed successfully');
            setTimeout(() => window.location.reload(), 1500);
        } else {
            showAlert('error', data.message || 'Failed to process room upgrade');
        }
    } catch (error) {
        console.error('Error processing room upgrade:', error);
        showAlert('error', 'Failed to process room upgrade');
    }
}

async function submitIssue() {
    if (!selectedRoomId) return;

    const type = document.getElementById('issueType').value;
    const priority = document.getElementById('issuePriority').value;
    const description = document.getElementById('issueDescription').value;

    try {
        const response = await fetch(`/admin/rooms/${selectedRoomId}/issues`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ type, priority, description })
        });

        const data = await response.json();
        if (data.success) {
            $('#reportIssueModal').modal('hide');
            showAlert('success', 'Issue reported successfully');
            setTimeout(() => window.location.reload(), 1500);
        } else {
            showAlert('error', data.message || 'Failed to report issue');
        }
    } catch (error) {
        console.error('Error reporting issue:', error);
        showAlert('error', 'Failed to report issue');
    }
}
</script>

{{> admin/footer}}

================
File: src/views/admin/settings/hotel.hbs
================
{{> admin/header title="Hotel Settings"}}

<div class="container-fluid">
    <!-- Page Heading -->
    <div class="d-sm-flex align-items-center justify-content-between mb-4">
        <h1 class="h3 mb-0 text-gray-800">Hotel Settings</h1>
    </div>

    <!-- Hotel Settings Form -->
    <div class="card shadow mb-4">
        <div class="card-body">
            <form id="hotelSettingsForm">
                <!-- Basic Information -->
                <div class="mb-4">
                    <h5>Basic Information</h5>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Hotel Name</label>
                            <input type="text" class="form-control" id="hotelName" value="{{hotel.name}}" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Legal Name</label>
                            <input type="text" class="form-control" id="legalName" value="{{hotel.legalName}}" required>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Registration Number</label>
                            <input type="text" class="form-control" id="registrationNumber" value="{{hotel.registrationNumber}}">
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Tax ID</label>
                            <input type="text" class="form-control" id="taxId" value="{{hotel.taxId}}">
                        </div>
                    </div>
                </div>

                <!-- Contact Information -->
                <div class="mb-4">
                    <h5>Contact Information</h5>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Email</label>
                            <input type="email" class="form-control" id="email" value="{{hotel.email}}" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Phone</label>
                            <input type="tel" class="form-control" id="phone" value="{{hotel.phone}}" required>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12 mb-3">
                            <label class="form-label">Address</label>
                            <input type="text" class="form-control" id="address" value="{{hotel.address}}" required>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4 mb-3">
                            <label class="form-label">City</label>
                            <input type="text" class="form-control" id="city" value="{{hotel.city}}" required>
                        </div>
                        <div class="col-md-4 mb-3">
                            <label class="form-label">State/Province</label>
                            <input type="text" class="form-control" id="state" value="{{hotel.state}}" required>
                        </div>
                        <div class="col-md-4 mb-3">
                            <label class="form-label">Postal Code</label>
                            <input type="text" class="form-control" id="postalCode" value="{{hotel.postalCode}}" required>
                        </div>
                    </div>
                </div>

                <!-- Policies -->
                <div class="mb-4">
                    <h5>Policies</h5>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Check-in Time</label>
                            <input type="time" class="form-control" id="checkInTime" value="{{hotel.checkInTime}}" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Check-out Time</label>
                            <input type="time" class="form-control" id="checkOutTime" value="{{hotel.checkOutTime}}" required>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12 mb-3">
                            <label class="form-label">Cancellation Policy</label>
                            <textarea class="form-control" id="cancellationPolicy" rows="3">{{hotel.cancellationPolicy}}</textarea>
                        </div>
                    </div>
                </div>

                <!-- Payment Settings -->
                <div class="mb-4">
                    <h5>Payment Settings</h5>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Currency</label>
                            <select class="form-select" id="currency" required>
                                <option value="USD" {{#if (eq hotel.currency "USD")}}selected{{/if}}>USD</option>
                                <option value="EUR" {{#if (eq hotel.currency "EUR")}}selected{{/if}}>EUR</option>
                                <option value="GBP" {{#if (eq hotel.currency "GBP")}}selected{{/if}}>GBP</option>
                            </select>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Tax Rate (%)</label>
                            <input type="number" class="form-control" id="taxRate" value="{{hotel.taxRate}}" min="0" max="100" step="0.01" required>
                        </div>
                    </div>
                </div>

                <button type="submit" class="btn btn-primary">Save Changes</button>
            </form>
        </div>
    </div>
</div>

<script>
// Handle form submission
$('#hotelSettingsForm').on('submit', async function(e) {
    e.preventDefault();

    const hotelData = {
        name: $('#hotelName').val(),
        legalName: $('#legalName').val(),
        registrationNumber: $('#registrationNumber').val(),
        taxId: $('#taxId').val(),
        email: $('#email').val(),
        phone: $('#phone').val(),
        address: $('#address').val(),
        city: $('#city').val(),
        state: $('#state').val(),
        postalCode: $('#postalCode').val(),
        checkInTime: $('#checkInTime').val(),
        checkOutTime: $('#checkOutTime').val(),
        cancellationPolicy: $('#cancellationPolicy').val(),
        currency: $('#currency').val(),
        taxRate: parseFloat($('#taxRate').val())
    };

    try {
        const response = await fetch('/admin/settings/hotel', {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(hotelData)
        });

        if (!response.ok) throw new Error('Failed to update hotel settings');

        // Show success message
        Swal.fire({
            icon: 'success',
            title: 'Settings Updated',
            text: 'Hotel settings have been updated successfully.'
        });
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to update hotel settings: ' + error.message
        });
    }
});
</script>

{{> admin/footer}}

================
File: src/views/admin/settings/roles.hbs
================
{{> admin/header title="Role Management"}}

<div class="container-fluid">
    <!-- Page Heading -->
    <div class="d-sm-flex align-items-center justify-content-between mb-4">
        <h1 class="h3 mb-0 text-gray-800">Role Management</h1>
        <button class="btn btn-primary" onclick="showCreateRoleModal()">
            <i class="fas fa-plus"></i> Add New Role
        </button>
    </div>

    <!-- Roles Table -->
    <div class="card shadow mb-4">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered" id="rolesTable" width="100%" cellspacing="0">
                    <thead>
                        <tr>
                            <th>Role Name</th>
                            <th>Permissions</th>
                            <th>Users Count</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {{#each roles}}
                        <tr>
                            <td>{{this.name}}</td>
                            <td>
                                {{#each this.permissions}}
                                <span class="badge bg-info me-1">{{this}}</span>
                                {{/each}}
                            </td>
                            <td>{{this.usersCount}}</td>
                            <td>
                                <div class="btn-group">
                                    <button class="btn btn-sm btn-info" onclick="showEditRoleModal('{{this._id}}')">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    {{#unless this.isDefault}}
                                    <button class="btn btn-sm btn-danger" onclick="deleteRole('{{this._id}}')">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                    {{/unless}}
                                </div>
                            </td>
                        </tr>
                        {{/each}}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Create/Edit Role Modal -->
<div class="modal fade" id="roleModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="roleModalTitle">Add New Role</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="roleForm">
                    <input type="hidden" id="roleId">
                    <div class="mb-3">
                        <label class="form-label">Role Name</label>
                        <input type="text" class="form-control" id="roleName" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Permissions</label>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="manage_bookings" id="perm_bookings">
                            <label class="form-check-label">Manage Bookings</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="manage_guests" id="perm_guests">
                            <label class="form-check-label">Manage Guests</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="manage_rooms" id="perm_rooms">
                            <label class="form-check-label">Manage Rooms</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="manage_housekeeping" id="perm_housekeeping">
                            <label class="form-check-label">Manage Housekeeping</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="manage_inventory" id="perm_inventory">
                            <label class="form-check-label">Manage Inventory</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="manage_payments" id="perm_payments">
                            <label class="form-check-label">Manage Payments</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="manage_reports" id="perm_reports">
                            <label class="form-check-label">Access Reports</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="manage_settings" id="perm_settings">
                            <label class="form-check-label">Manage Settings</label>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="saveRole()">Save Role</button>
            </div>
        </div>
    </div>
</div>

<script>
// Initialize DataTable
$(document).ready(function() {
    $('#rolesTable').DataTable();
});

// Show create role modal
function showCreateRoleModal() {
    $('#roleModalTitle').text('Add New Role');
    $('#roleForm')[0].reset();
    $('#roleId').val('');
    $('#roleModal').modal('show');
}

// Show edit role modal
async function showEditRoleModal(roleId) {
    try {
        const response = await fetch(`/admin/settings/roles/${roleId}`);
        const role = await response.json();

        $('#roleModalTitle').text('Edit Role');
        $('#roleId').val(role._id);
        $('#roleName').val(role.name);

        // Reset all checkboxes
        $('input[type="checkbox"]').prop('checked', false);

        // Check permissions that the role has
        role.permissions.forEach(perm => {
            $(`#perm_${perm}`).prop('checked', true);
        });

        $('#roleModal').modal('show');
    } catch (error) {
        alert('Error fetching role details: ' + error.message);
    }
}

// Save role
async function saveRole() {
    const roleId = $('#roleId').val();
    const permissions = [];
    $('input[type="checkbox"]:checked').each(function() {
        permissions.push($(this).val());
    });

    const roleData = {
        name: $('#roleName').val(),
        permissions
    };

    try {
        const url = roleId ? `/admin/settings/roles/${roleId}` : '/admin/settings/roles';
        const method = roleId ? 'PUT' : 'POST';

        const response = await fetch(url, {
            method,
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(roleData)
        });

        if (!response.ok) throw new Error('Failed to save role');

        $('#roleModal').modal('hide');
        location.reload();
    } catch (error) {
        alert('Error saving role: ' + error.message);
    }
}

// Delete role
async function deleteRole(roleId) {
    if (!confirm('Are you sure you want to delete this role? Users with this role will need to be reassigned.')) return;

    try {
        const response = await fetch(`/admin/settings/roles/${roleId}`, {
            method: 'DELETE'
        });

        if (!response.ok) throw new Error('Failed to delete role');

        location.reload();
    } catch (error) {
        alert('Error deleting role: ' + error.message);
    }
}
</script>

{{> admin/footer}}

================
File: src/views/admin/settings/system.hbs
================
{{> admin/header title="System Settings"}}

<div class="container-fluid">
    <!-- Page Heading -->
    <div class="d-sm-flex align-items-center justify-content-between mb-4">
        <h1 class="h3 mb-0 text-gray-800">System Settings</h1>
    </div>

    <!-- System Settings Form -->
    <div class="card shadow mb-4">
        <div class="card-body">
            <form id="systemSettingsForm">
                <!-- Email Settings -->
                <div class="mb-4">
                    <h5>Email Settings</h5>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">SMTP Host</label>
                            <input type="text" class="form-control" id="smtpHost" value="{{settings.smtp.host}}" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">SMTP Port</label>
                            <input type="number" class="form-control" id="smtpPort" value="{{settings.smtp.port}}" required>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">SMTP Username</label>
                            <input type="text" class="form-control" id="smtpUsername" value="{{settings.smtp.username}}" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">SMTP Password</label>
                            <input type="password" class="form-control" id="smtpPassword" value="{{settings.smtp.password}}" required>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">From Email</label>
                            <input type="email" class="form-control" id="fromEmail" value="{{settings.smtp.fromEmail}}" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">From Name</label>
                            <input type="text" class="form-control" id="fromName" value="{{settings.smtp.fromName}}" required>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12">
                            <button type="button" class="btn btn-info" onclick="testEmailSettings()">
                                <i class="fas fa-paper-plane"></i> Test Email Settings
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Backup Settings -->
                <div class="mb-4">
                    <h5>Backup Settings</h5>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Backup Frequency</label>
                            <select class="form-select" id="backupFrequency">
                                <option value="daily" {{#if (eq settings.backup.frequency "daily")}}selected{{/if}}>Daily</option>
                                <option value="weekly" {{#if (eq settings.backup.frequency "weekly")}}selected{{/if}}>Weekly</option>
                                <option value="monthly" {{#if (eq settings.backup.frequency "monthly")}}selected{{/if}}>Monthly</option>
                            </select>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Retention Period (days)</label>
                            <input type="number" class="form-control" id="backupRetention" value="{{settings.backup.retention}}" min="1" required>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12">
                            <button type="button" class="btn btn-info" onclick="createBackup()">
                                <i class="fas fa-download"></i> Create Backup Now
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Security Settings -->
                <div class="mb-4">
                    <h5>Security Settings</h5>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Session Timeout (minutes)</label>
                            <input type="number" class="form-control" id="sessionTimeout" value="{{settings.security.sessionTimeout}}" min="5" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Password Expiry (days)</label>
                            <input type="number" class="form-control" id="passwordExpiry" value="{{settings.security.passwordExpiry}}" min="0">
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="twoFactorAuth" {{#if settings.security.twoFactorAuth}}checked{{/if}}>
                                <label class="form-check-label">Enable Two-Factor Authentication</label>
                            </div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="ipRestriction" {{#if settings.security.ipRestriction}}checked{{/if}}>
                                <label class="form-check-label">Enable IP Restriction</label>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Notification Settings -->
                <div class="mb-4">
                    <h5>Notification Settings</h5>
                    <div class="row">
                        <div class="col-12">
                            <div class="form-check mb-2">
                                <input class="form-check-input" type="checkbox" id="notifyBooking" {{#if settings.notifications.booking}}checked{{/if}}>
                                <label class="form-check-label">New Booking Notifications</label>
                            </div>
                            <div class="form-check mb-2">
                                <input class="form-check-input" type="checkbox" id="notifyCancellation" {{#if settings.notifications.cancellation}}checked{{/if}}>
                                <label class="form-check-label">Booking Cancellation Notifications</label>
                            </div>
                            <div class="form-check mb-2">
                                <input class="form-check-input" type="checkbox" id="notifyPayment" {{#if settings.notifications.payment}}checked{{/if}}>
                                <label class="form-check-label">Payment Notifications</label>
                            </div>
                            <div class="form-check mb-2">
                                <input class="form-check-input" type="checkbox" id="notifyLowInventory" {{#if settings.notifications.lowInventory}}checked{{/if}}>
                                <label class="form-check-label">Low Inventory Notifications</label>
                            </div>
                        </div>
                    </div>
                </div>

                <button type="submit" class="btn btn-primary">Save Changes</button>
            </form>
        </div>
    </div>
</div>

<script>
// Handle form submission
$('#systemSettingsForm').on('submit', async function(e) {
    e.preventDefault();

    const settingsData = {
        smtp: {
            host: $('#smtpHost').val(),
            port: parseInt($('#smtpPort').val()),
            username: $('#smtpUsername').val(),
            password: $('#smtpPassword').val(),
            fromEmail: $('#fromEmail').val(),
            fromName: $('#fromName').val()
        },
        backup: {
            frequency: $('#backupFrequency').val(),
            retention: parseInt($('#backupRetention').val())
        },
        security: {
            sessionTimeout: parseInt($('#sessionTimeout').val()),
            passwordExpiry: parseInt($('#passwordExpiry').val()),
            twoFactorAuth: $('#twoFactorAuth').is(':checked'),
            ipRestriction: $('#ipRestriction').is(':checked')
        },
        notifications: {
            booking: $('#notifyBooking').is(':checked'),
            cancellation: $('#notifyCancellation').is(':checked'),
            payment: $('#notifyPayment').is(':checked'),
            lowInventory: $('#notifyLowInventory').is(':checked')
        }
    };

    try {
        const response = await fetch('/admin/settings/system', {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(settingsData)
        });

        if (!response.ok) throw new Error('Failed to update system settings');

        // Show success message
        Swal.fire({
            icon: 'success',
            title: 'Settings Updated',
            text: 'System settings have been updated successfully.'
        });
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to update system settings: ' + error.message
        });
    }
});

// Test email settings
async function testEmailSettings() {
    const emailSettings = {
        host: $('#smtpHost').val(),
        port: parseInt($('#smtpPort').val()),
        username: $('#smtpUsername').val(),
        password: $('#smtpPassword').val(),
        fromEmail: $('#fromEmail').val(),
        fromName: $('#fromName').val()
    };

    try {
        const response = await fetch('/admin/settings/system/test-email', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(emailSettings)
        });

        if (!response.ok) throw new Error('Failed to test email settings');

        Swal.fire({
            icon: 'success',
            title: 'Test Email Sent',
            text: 'Please check your inbox for the test email.'
        });
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to test email settings: ' + error.message
        });
    }
}

// Create backup
async function createBackup() {
    try {
        const response = await fetch('/admin/settings/system/backup', {
            method: 'POST'
        });

        if (!response.ok) throw new Error('Failed to create backup');

        Swal.fire({
            icon: 'success',
            title: 'Backup Created',
            text: 'System backup has been created successfully.'
        });
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to create backup: ' + error.message
        });
    }
}
</script>

{{> admin/footer}}

================
File: src/views/admin/settings/users.hbs
================
{{> admin/header title="User Management"}}

<div class="container-fluid">
    <!-- Page Heading -->
    <div class="d-sm-flex align-items-center justify-content-between mb-4">
        <h1 class="h3 mb-0 text-gray-800">User Management</h1>
        <button class="btn btn-primary" onclick="showCreateUserModal()">
            <i class="fas fa-plus"></i> Add New User
        </button>
    </div>

    <!-- Users Table -->
    <div class="card shadow mb-4">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered" id="usersTable" width="100%" cellspacing="0">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Email</th>
                            <th>Role</th>
                            <th>Status</th>
                            <th>Last Login</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {{#each users}}
                        <tr>
                            <td>{{this.name}}</td>
                            <td>{{this.email}}</td>
                            <td>
                                <span class="badge bg-info">{{this.role.name}}</span>
                            </td>
                            <td>
                                <span class="badge bg-{{#if this.isActive}}success{{else}}danger{{/if}}">
                                    {{#if this.isActive}}Active{{else}}Inactive{{/if}}
                                </span>
                            </td>
                            <td>{{formatDate this.lastLogin}}</td>
                            <td>
                                <div class="btn-group">
                                    <button class="btn btn-sm btn-info" onclick="showEditUserModal('{{this._id}}')">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="btn btn-sm btn-warning" onclick="resetPassword('{{this._id}}')">
                                        <i class="fas fa-key"></i>
                                    </button>
                                    <button class="btn btn-sm btn-{{#if this.isActive}}danger{{else}}success{{/if}}"
                                            onclick="toggleUserStatus('{{this._id}}')">
                                        <i class="fas fa-{{#if this.isActive}}ban{{else}}check{{/if}}"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                        {{/each}}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Create/Edit User Modal -->
<div class="modal fade" id="userModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="userModalTitle">Add New User</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="userForm">
                    <input type="hidden" id="userId">
                    <div class="mb-3">
                        <label class="form-label">Name</label>
                        <input type="text" class="form-control" id="userName" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Email</label>
                        <input type="email" class="form-control" id="userEmail" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Password</label>
                        <input type="password" class="form-control" id="userPassword">
                        <small class="text-muted">Leave blank to keep current password when editing</small>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Role</label>
                        <select class="form-select" id="userRole" required>
                            {{#each roles}}
                            <option value="{{this._id}}">{{this.name}}</option>
                            {{/each}}
                        </select>
                    </div>
                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="userStatus" checked>
                            <label class="form-check-label">Active</label>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="saveUser()">Save User</button>
            </div>
        </div>
    </div>
</div>

<script>
// Initialize DataTable
$(document).ready(function() {
    $('#usersTable').DataTable();
});

// Show create user modal
function showCreateUserModal() {
    $('#userModalTitle').text('Add New User');
    $('#userForm')[0].reset();
    $('#userId').val('');
    $('#userModal').modal('show');
}

// Show edit user modal
async function showEditUserModal(userId) {
    try {
        const response = await fetch(`/admin/settings/users/${userId}`);
        const user = await response.json();

        $('#userModalTitle').text('Edit User');
        $('#userId').val(user._id);
        $('#userName').val(user.name);
        $('#userEmail').val(user.email);
        $('#userRole').val(user.role._id);
        $('#userStatus').prop('checked', user.isActive);
        $('#userPassword').val('');

        $('#userModal').modal('show');
    } catch (error) {
        alert('Error fetching user details: ' + error.message);
    }
}

// Save user
async function saveUser() {
    const userId = $('#userId').val();
    const userData = {
        name: $('#userName').val(),
        email: $('#userEmail').val(),
        password: $('#userPassword').val(),
        roleId: $('#userRole').val(),
        isActive: $('#userStatus').is(':checked')
    };

    try {
        const url = userId ? `/admin/settings/users/${userId}` : '/admin/settings/users';
        const method = userId ? 'PUT' : 'POST';

        const response = await fetch(url, {
            method,
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(userData)
        });

        if (!response.ok) throw new Error('Failed to save user');

        $('#userModal').modal('hide');
        location.reload();
    } catch (error) {
        alert('Error saving user: ' + error.message);
    }
}

// Reset password
async function resetPassword(userId) {
    if (!confirm('Are you sure you want to reset this user\'s password?')) return;

    try {
        const response = await fetch(`/admin/settings/users/${userId}/reset-password`, {
            method: 'POST'
        });

        if (!response.ok) throw new Error('Failed to reset password');

        alert('Password reset email has been sent to the user');
    } catch (error) {
        alert('Error resetting password: ' + error.message);
    }
}

// Toggle user status
async function toggleUserStatus(userId) {
    try {
        const response = await fetch(`/admin/settings/users/${userId}/toggle-status`, {
            method: 'POST'
        });

        if (!response.ok) throw new Error('Failed to toggle user status');

        location.reload();
    } catch (error) {
        alert('Error toggling user status: ' + error.message);
    }
}
</script>

{{> admin/footer}}

================
File: src/views/admin/upcoming-bookings.hbs
================
<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-success text-white">
                    <h4 class="mb-0">
                        <i class="fas fa-calendar-alt me-2"></i>Upcoming Bookings
                        <span class="badge bg-light text-success ms-2">{{bookings.length}}</span>
                    </h4>
                </div>
                <div class="card-body">
                    <!-- Search and Filter -->
                    <div class="row mb-4">
                        <div class="col-md-4">
                            <div class="input-group">
                                <input type="text" class="form-control" id="searchInput" 
                                       placeholder="Search by guest name..."
                                       value="{{searchQuery}}">
                                <button class="btn btn-outline-success" type="button" onclick="applyFilters()">
                                    <i class="fas fa-search"></i>
                                </button>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <select class="form-select" id="sortBy">
                                <option value="checkIn" {{#if (eq sortBy 'checkIn')}}selected{{/if}}>Sort by Check-in</option>
                                <option value="checkOut" {{#if (eq sortBy 'checkOut')}}selected{{/if}}>Sort by Check-out</option>
                                <option value="guestName" {{#if (eq sortBy 'guestName')}}selected{{/if}}>Sort by Guest Name</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <button class="btn btn-success w-100" onclick="refreshBookings()">
                                <i class="fas fa-sync-alt me-1"></i> Refresh
                            </button>
                        </div>
                    </div>

                    <!-- Bookings Grid -->
                    <div class="row">
                        {{#each bookings}}
                        <div class="col-md-6 col-lg-4 mb-4">
                            <div class="card h-100 border-success">
                                <div class="card-header bg-success text-white d-flex justify-content-between align-items-center">
                                    <h5 class="mb-0">Room {{room.number}}</h5>
                                    <span class="badge bg-light text-success">
                                        {{nights}} nights
                                    </span>
                                </div>
                                <div class="card-body">
                                    <div class="mb-3">
                                        <div class="d-flex justify-content-between align-items-start">
                                            <div>
                                                <h5 class="mb-1">{{user.name}}</h5>
                                                <small class="text-muted">{{user.email}}</small>
                                            </div>
                                            <span class="badge bg-info">
                                                <i class="fas fa-users me-1"></i>
                                                {{guests.adults}} adults{{#if guests.children}}, {{guests.children}} children{{/if}}
                                            </span>
                                        </div>
                                    </div>

                                    <div class="mb-3">
                                        <h6 class="mb-2">Hotel</h6>
                                        <p class="mb-1">{{hotel.name}}</p>
                                        <small class="text-muted">{{hotel.location}}</small>
                                    </div>

                                    <div class="mb-3">
                                        <h6 class="mb-2">Room Details</h6>
                                        <p class="mb-1">{{room.type}}</p>
                                        <small class="text-muted">Max Capacity: {{room.capacity}} persons</small>
                                    </div>

                                    <div class="mb-3">
                                        <h6 class="mb-2">Dates</h6>
                                        <div class="d-flex justify-content-between">
                                            <div>
                                                <small class="text-muted d-block">Check-in</small>
                                                <strong>{{formatDate checkIn}}</strong>
                                            </div>
                                            <div class="text-end">
                                                <small class="text-muted d-block">Check-out</small>
                                                <strong>{{formatDate checkOut}}</strong>
                                            </div>
                                        </div>
                                    </div>

                                    <div>
                                        <h6 class="mb-2">Price</h6>
                                        <h4 class="text-success mb-0">${{totalPrice}}</h4>
                                    </div>
                                </div>
                                <div class="card-footer bg-transparent">
                                    <div class="d-grid gap-2">
                                        <a href="/admin/bookings/{{_id}}" class="btn btn-outline-success">
                                            <i class="fas fa-eye me-1"></i> View Details
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                        {{else}}
                        <div class="col-12">
                            <div class="alert alert-info">
                                <i class="fas fa-info-circle me-2"></i>No upcoming bookings found.
                            </div>
                        </div>
                        {{/each}}
                    </div>

                    <!-- Pagination -->
                    <nav class="mt-4">
                        <ul class="pagination justify-content-center">
                            {{#if pagination.hasPrev}}
                            <li class="page-item">
                                <a class="page-link" href="?page={{pagination.prevPage}}">Previous</a>
                            </li>
                            {{else}}
                            <li class="page-item disabled">
                                <span class="page-link">Previous</span>
                            </li>
                            {{/if}}

                            <li class="page-item active">
                                <span class="page-link">{{pagination.page}} of {{pagination.totalPages}}</span>
                            </li>

                            {{#if pagination.hasNext}}
                            <li class="page-item">
                                <a class="page-link" href="?page={{pagination.nextPage}}">Next</a>
                            </li>
                            {{else}}
                            <li class="page-item disabled">
                                <span class="page-link">Next</span>
                            </li>
                            {{/if}}
                        </ul>
                    </nav>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
function applyFilters() {
    const search = document.getElementById('searchInput').value;
    const sortBy = document.getElementById('sortBy').value;
    
    let url = window.location.pathname + '?';
    if (search) url += `&search=${encodeURIComponent(search)}`;
    if (sortBy) url += `&sortBy=${encodeURIComponent(sortBy)}`;
    
    window.location.href = url;
}

function refreshBookings() {
    window.location.reload();
}
</script>

================
File: src/views/admin/user-details.hbs
================
<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>User Details</h2>
        <div>
            <a href="/admin/users" class="btn btn-outline-secondary">
                <i class="fas fa-arrow-left"></i> Back to Users
            </a>
        </div>
    </div>

    <div class="row">
        <!-- User Profile -->
        <div class="col-md-4">
            <div class="card mb-4">
                <div class="card-body text-center">
                    {{#if user.profileImage}}
                    <img src="{{user.profileImage}}" class="rounded-circle mb-3" width="150" height="150" alt="Profile">
                    {{else}}
                    <div class="bg-secondary rounded-circle mb-3 mx-auto d-flex align-items-center justify-content-center" style="width: 150px; height: 150px;">
                        <i class="fas fa-user fa-4x text-white"></i>
                    </div>
                    {{/if}}
                    <h5 class="card-title">{{user.name}}</h5>
                    <p class="text-muted">{{user.email}}</p>
                    <div class="mb-3">
                        <span class="badge {{#if user.isAdmin}}bg-danger{{else}}bg-info{{/if}} me-2">
                            {{#if user.isAdmin}}Admin{{else}}User{{/if}}
                        </span>
                        <span class="badge {{#if user.isActive}}bg-success{{else}}bg-danger{{/if}}">
                            {{#if user.isActive}}Active{{else}}Inactive{{/if}}
                        </span>
                    </div>
                    <p class="small text-muted">
                        Member since {{formatDate user.createdAt}}
                    </p>
                </div>
            </div>

            <!-- Actions -->
            {{#unless user.isAdmin}}
            <div class="card mb-4">
                <div class="card-body">
                    <h5 class="card-title">Actions</h5>
                    <div class="d-grid gap-2">
                        <button class="btn btn-outline-primary" onclick="toggleAdminRole('{{user._id}}')">
                            <i class="fas fa-user-shield"></i> Make Admin
                        </button>
                        <button class="btn btn-outline-{{#if user.isActive}}danger{{else}}success{{/if}}" 
                                onclick="toggleUserStatus('{{user._id}}')">
                            <i class="fas fa-power-off"></i> 
                            {{#if user.isActive}}Deactivate{{else}}Activate{{/if}} Account
                        </button>
                        <button class="btn btn-danger" onclick="deleteUser('{{user._id}}')">
                            <i class="fas fa-trash-alt"></i> Delete Account
                        </button>
                    </div>
                </div>
            </div>
            {{/unless}}
        </div>

        <div class="col-md-8">
            <!-- User Statistics -->
            <div class="card mb-4">
                <div class="card-body">
                    <h5 class="card-title">Statistics</h5>
                    <div class="row g-4">
                        <div class="col-md-4">
                            <div class="border rounded p-3 text-center">
                                <h3 class="mb-1">{{user.hotelCount}}</h3>
                                <p class="text-muted mb-0">Hotels Listed</p>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="border rounded p-3 text-center">
                                <h3 class="mb-1">{{user.bookingCount}}</h3>
                                <p class="text-muted mb-0">Total Bookings</p>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="border rounded p-3 text-center">
                                <h3 class="mb-1">{{user.reviewCount}}</h3>
                                <p class="text-muted mb-0">Reviews Given</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- User's Hotels -->
            {{#if user.hotels.length}}
            <div class="card mb-4">
                <div class="card-body">
                    <h5 class="card-title">Hotels</h5>
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Hotel Name</th>
                                    <th>Location</th>
                                    <th>Status</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{#each user.hotels}}
                                <tr>
                                    <td>{{name}}</td>
                                    <td>{{location}}</td>
                                    <td>
                                        <span class="badge {{#if isActive}}bg-success{{else}}bg-danger{{/if}}">
                                            {{#if isActive}}Active{{else}}Inactive{{/if}}
                                        </span>
                                    </td>
                                    <td>
                                        <a href="/admin/hotels/{{_id}}" class="btn btn-sm btn-outline-primary">
                                            View
                                        </a>
                                    </td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            {{/if}}

            <!-- Recent Bookings -->
            {{#if user.recentBookings.length}}
            <div class="card mb-4">
                <div class="card-body">
                    <h5 class="card-title">Recent Bookings</h5>
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Hotel</th>
                                    <th>Check In</th>
                                    <th>Check Out</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{#each user.recentBookings}}
                                <tr>
                                    <td>{{hotel.name}}</td>
                                    <td>{{formatDate checkIn}}</td>
                                    <td>{{formatDate checkOut}}</td>
                                    <td>
                                        <span class="badge bg-{{getStatusColor status}}">
                                            {{status}}
                                        </span>
                                    </td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            {{/if}}
        </div>
    </div>
</div>

<script>
async function toggleUserStatus(userId) {
    if (!confirm('Are you sure you want to change this user\'s status?')) {
        return;
    }

    try {
        const response = await fetch(`/api/admin/users/${userId}/toggle-status`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json'
            },
            credentials: 'include'
        });

        if (!response.ok) {
            throw new Error('Failed to toggle user status');
        }

        location.reload();
    } catch (error) {
        alert('Error toggling user status: ' + error.message);
    }
}

async function toggleAdminRole(userId) {
    if (!confirm('Are you sure you want to change this user\'s admin status?')) {
        return;
    }

    try {
        const response = await fetch(`/api/admin/users/${userId}/toggle-admin`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json'
            },
            credentials: 'include'
        });

        if (!response.ok) {
            throw new Error('Failed to toggle admin role');
        }

        location.reload();
    } catch (error) {
        alert('Error toggling admin role: ' + error.message);
    }
}

async function deleteUser(userId) {
    if (!confirm('Are you sure you want to delete this user? This action cannot be undone.')) {
        return;
    }

    try {
        const response = await fetch(`/api/admin/users/${userId}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            },
            credentials: 'include'
        });

        if (!response.ok) {
            throw new Error('Failed to delete user');
        }

        window.location.href = '/admin/users';
    } catch (error) {
        alert('Error deleting user: ' + error.message);
    }
}
</script>

================
File: src/views/admin/users.hbs
================
<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Manage Users</h2>
    </div>

    <!-- Search and Filter -->
    <div class="card mb-4">
        <div class="card-body">
            <form id="userFilterForm" class="row g-3">
                <div class="col-md-4">
                    <input type="text" class="form-control" id="searchQuery" placeholder="Search by name or email">
                </div>
                <div class="col-md-3">
                    <select class="form-select" id="roleFilter">
                        <option value="">All Roles</option>
                        <option value="user">User</option>
                        <option value="admin">Admin</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <select class="form-select" id="statusFilter">
                        <option value="">All Status</option>
                        <option value="active">Active</option>
                        <option value="inactive">Inactive</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <button type="submit" class="btn btn-primary w-100">Filter</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Users Table -->
    <div class="card">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead class="table-light">
                        <tr>
                            <th>Name</th>
                            <th>Email</th>
                            <th>Role</th>
                            <th>Status</th>
                            <th>Joined</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {{#each users}}
                        <tr>
                            <td>
                                <div class="d-flex align-items-center">
                                    {{#if profileImage}}
                                    <img src="{{profileImage}}" class="rounded-circle me-2" width="40" height="40" alt="Profile">
                                    {{else}}
                                    <div class="bg-secondary rounded-circle me-2 d-flex align-items-center justify-content-center" style="width: 40px; height: 40px;">
                                        <i class="fas fa-user text-white"></i>
                                    </div>
                                    {{/if}}
                                    <div>
                                        <div class="fw-bold">{{name}}</div>
                                    </div>
                                </div>
                            </td>
                            <td>{{email}}</td>
                            <td>
                                <span class="badge {{#if isAdmin}}bg-danger{{else}}bg-info{{/if}}">
                                    {{#if isAdmin}}Admin{{else}}User{{/if}}
                                </span>
                            </td>
                            <td>
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" 
                                           {{#if isActive}}checked{{/if}}
                                           onchange="toggleUserStatus('{{_id}}')"
                                           {{#if isAdmin}}disabled{{/if}}>
                                </div>
                            </td>
                            <td>{{formatDate createdAt}}</td>
                            <td>
                                <div class="dropdown">
                                    <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                        Actions
                                    </button>
                                    <ul class="dropdown-menu">
                                        <li>
                                            <a class="dropdown-item" href="/admin/users/{{_id}}">
                                                <i class="fas fa-eye me-2"></i>View Details
                                            </a>
                                        </li>
                                        {{#unless isAdmin}}
                                        <li>
                                            <button class="dropdown-item" onclick="toggleAdminRole('{{_id}}')">
                                                <i class="fas fa-user-shield me-2"></i>Make Admin
                                            </button>
                                        </li>
                                        <li><hr class="dropdown-divider"></li>
                                        <li>
                                            <button class="dropdown-item text-danger" onclick="deleteUser('{{_id}}')">
                                                <i class="fas fa-trash-alt me-2"></i>Delete User
                                            </button>
                                        </li>
                                        {{/unless}}
                                    </ul>
                                </div>
                            </td>
                        </tr>
                        {{/each}}
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            {{#if pagination}}
            <nav class="mt-4">
                <ul class="pagination justify-content-center">
                    <li class="page-item {{#unless pagination.hasPrevPage}}disabled{{/unless}}">
                        <a class="page-link" href="?page={{pagination.prevPage}}&limit={{pagination.limit}}">Previous</a>
                    </li>
                    {{#each pagination.pages}}
                    <li class="page-item {{#if isCurrent}}active{{/if}}">
                        <a class="page-link" href="?page={{page}}&limit={{../pagination.limit}}">{{page}}</a>
                    </li>
                    {{/each}}
                    <li class="page-item {{#unless pagination.hasNextPage}}disabled{{/unless}}">
                        <a class="page-link" href="?page={{pagination.nextPage}}&limit={{pagination.limit}}">Next</a>
                    </li>
                </ul>
            </nav>
            {{/if}}
        </div>
    </div>
</div>

<script>
async function toggleUserStatus(userId) {
    try {
        const response = await fetch(`/api/admin/users/${userId}/toggle-status`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json'
            },
            credentials: 'include'
        });

        if (!response.ok) {
            throw new Error('Failed to toggle user status');
        }

        // Optionally refresh the page or update the UI
        location.reload();
    } catch (error) {
        alert('Error toggling user status: ' + error.message);
    }
}

async function toggleAdminRole(userId) {
    if (!confirm('Are you sure you want to change this user\'s admin status?')) {
        return;
    }

    try {
        const response = await fetch(`/api/admin/users/${userId}/toggle-admin`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json'
            },
            credentials: 'include'
        });

        if (!response.ok) {
            throw new Error('Failed to toggle admin role');
        }

        location.reload();
    } catch (error) {
        alert('Error toggling admin role: ' + error.message);
    }
}

async function deleteUser(userId) {
    if (!confirm('Are you sure you want to delete this user? This action cannot be undone.')) {
        return;
    }

    try {
        const response = await fetch(`/api/admin/users/${userId}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            },
            credentials: 'include'
        });

        if (!response.ok) {
            throw new Error('Failed to delete user');
        }

        location.reload();
    } catch (error) {
        alert('Error deleting user: ' + error.message);
    }
}

// Filter form handling
document.getElementById('userFilterForm').addEventListener('submit', (e) => {
    e.preventDefault();
    const searchQuery = document.getElementById('searchQuery').value;
    const roleFilter = document.getElementById('roleFilter').value;
    const statusFilter = document.getElementById('statusFilter').value;

    const params = new URLSearchParams(window.location.search);
    if (searchQuery) params.set('search', searchQuery);
    if (roleFilter) params.set('role', roleFilter);
    if (statusFilter) params.set('status', statusFilter);
    
    window.location.href = `${window.location.pathname}?${params.toString()}`;
});
</script>

================
File: src/views/auth/forgot-password.hbs
================
<div class="row justify-content-center mt-5">
    <div class="col-md-6 col-lg-4">
        <div class="card shadow">
            <div class="card-header bg-primary text-white text-center py-3">
                <h3 class="mb-0">Forgot Password</h3>
            </div>
            <div class="card-body p-4">
                {{#if error}}
                <div class="alert alert-danger" role="alert">
                    {{error}}
                </div>
                {{/if}}
                
                {{#if success}}
                <div class="alert alert-success" role="alert">
                    {{success}}
                </div>
                {{/if}}
                
                <form action="/auth/forgot-password" method="POST" class="needs-validation" novalidate>
                    <div class="mb-3">
                        <label for="email" class="form-label">Email address</label>
                        <input type="email" class="form-control" id="email" name="email" required>
                        <div class="invalid-feedback">
                            Please enter a valid email address.
                        </div>
                        <small class="form-text text-muted">
                            Enter your email address and we'll send you a link to reset your password.
                        </small>
                    </div>

                    <div class="d-grid gap-2">
                        <button type="submit" class="btn btn-primary">Send Reset Link</button>
                        <a href="/auth/login" class="btn btn-outline-secondary">Back to Login</a>
                    </div>
                </form>

                <div class="text-center mt-3">
                    <a href="/auth/register" class="btn btn-outline-primary btn-sm">Create Admin Account</a>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
// Form validation
(function () {
    'use strict'
    var forms = document.querySelectorAll('.needs-validation')
    Array.prototype.slice.call(forms).forEach(function (form) {
        form.addEventListener('submit', function (event) {
            if (!form.checkValidity()) {
                event.preventDefault()
                event.stopPropagation()
            }
            form.classList.add('was-validated')
        }, false)
    })
})()
</script>

================
File: src/views/auth/login.hbs
================
<div class="row justify-content-center mt-5">
    <div class="col-md-6 col-lg-4">
        <div class="card shadow">
            <div class="card-header bg-primary text-white text-center py-3">
                <h3 class="mb-0">Admin Login</h3>
            </div>
            <div class="card-body p-4">
                {{#if error}}
                <div class="alert alert-danger" role="alert">
                    {{error}}
                </div>
                {{/if}}
                
                {{#if success}}
                <div class="alert alert-success" role="alert">
                    {{success}}
                </div>
                {{/if}}
                
                <form id="loginForm" method="POST" action="/auth/login" class="needs-validation" novalidate>
                    <div class="mb-3">
                        <label for="email" class="form-label">Email address</label>
                        <input type="email" class="form-control" id="email" name="email" required>
                        <div class="invalid-feedback">
                            Please enter a valid email address.
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="password" class="form-label">Password</label>
                        <input type="password" class="form-control" id="password" name="password" required>
                        <div class="invalid-feedback">
                            Please enter your password.
                        </div>
                    </div>

                    <div class="mb-3 form-check">
                        <input type="checkbox" class="form-check-input" id="rememberMe" name="rememberMe">
                        <label class="form-check-label" for="rememberMe">Remember me</label>
                    </div>

                    <div class="alert alert-danger d-none" id="errorAlert" role="alert"></div>

                    <div class="d-grid">
                        <button type="submit" class="btn btn-primary">Sign In</button>
                    </div>
                </form>

                <div class="text-center mt-3">
                    <div class="mb-2">
                        <a href="/auth/forgot-password" class="text-decoration-none">Forgot Password?</a>
                    </div>
                    <div>
                        <a href="/auth/register" class="btn btn-outline-primary btn-sm">Create Admin Account</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
document.getElementById('loginForm').addEventListener('submit', function(e) {
    e.preventDefault();

    const formData = new FormData(e.target);
    const data = {
        email: formData.get('email'),
        password: formData.get('password'),
        rememberMe: formData.get('rememberMe') === 'on'
    };

    // Submit form
    fetch('/auth/login', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        },
        body: JSON.stringify(data)
    })
    .then(response => {
        // Always try to parse JSON response
        return response.json().then(data => {
            if (!response.ok) {
                throw new Error(data.message || 'Login failed');
            }
            return data;
        });
    })
    .then(data => {
        // Store email if remember me is checked
        if (data.rememberMe) {
            localStorage.setItem('userEmail', data.email);
        } else {
            localStorage.removeItem('userEmail');
        }

        // Redirect based on role
        if (data.data.user.role === 'admin') {
            window.location.href = '/admin/dashboard';
        } else {
            window.location.href = '/';
        }
    })
    .catch(error => {
        const errorAlert = document.getElementById('errorAlert');
        errorAlert.textContent = error.message;
        errorAlert.classList.remove('d-none');
        
        setTimeout(() => {
            errorAlert.classList.add('d-none');
        }, 5000);
    });
});

// Check for remembered email
window.addEventListener('DOMContentLoaded', () => {
    const rememberedEmail = localStorage.getItem('userEmail');
    if (rememberedEmail) {
        document.getElementById('email').value = rememberedEmail;
        document.getElementById('rememberMe').checked = true;
    }
});
</script>

================
File: src/views/auth/register.hbs
================
<div class="row justify-content-center mt-5">
    <div class="col-md-6 col-lg-4">
        <div class="card shadow">
            <div class="card-header bg-primary text-white text-center py-3">
                <h3 class="mb-0">Create Admin Account</h3>
            </div>
            <div class="card-body p-4">
                {{#if error}}
                <div class="alert alert-danger" role="alert">
                    {{error}}
                </div>
                {{/if}}
                
                {{#if success}}
                <div class="alert alert-success" role="alert">
                    {{success}}
                </div>
                {{/if}}
                
                <div class="alert alert-danger d-none" id="errorAlert" role="alert"></div>
                
                <form id="registerForm" method="POST" action="/auth/register" class="needs-validation" novalidate>
                    <div class="mb-3">
                        <label for="name" class="form-label">Full Name</label>
                        <input type="text" class="form-control" id="name" name="name" required>
                        <div class="invalid-feedback">
                            Please enter your full name.
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="email" class="form-label">Email address</label>
                        <input type="email" class="form-control" id="email" name="email" required>
                        <div class="invalid-feedback">
                            Please enter a valid email address.
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="password" class="form-label">Password</label>
                        <input type="password" class="form-control" id="password" name="password" required minlength="6">
                        <div class="invalid-feedback">
                            Password must be at least 6 characters long.
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="confirmPassword" class="form-label">Confirm Password</label>
                        <input type="password" class="form-control" id="confirmPassword" name="confirmPassword" required>
                        <div class="invalid-feedback">
                            Passwords do not match.
                        </div>
                    </div>

                    <input type="hidden" name="role" value="admin">

                    <div class="d-grid gap-2">
                        <button type="submit" class="btn btn-primary">Create Account</button>
                        <a href="/auth/login" class="btn btn-outline-secondary">Back to Login</a>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
document.getElementById('registerForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    const name = formData.get('name');
    const email = formData.get('email');
    const password = formData.get('password');
    const confirmPassword = formData.get('confirmPassword');
    const role = formData.get('role');
    const errorAlert = document.getElementById('errorAlert');

    // Validate passwords match
    if (password !== confirmPassword) {
        errorAlert.textContent = 'Passwords do not match';
        errorAlert.classList.remove('d-none');
        return;
    }

    try {
        const response = await fetch('/auth/register', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                name,
                email,
                password,
                role
            })
        });

        if (!response.ok) {
            const data = await response.json();
            throw new Error(data.message || 'Registration failed');
        }

        // Registration successful
        window.location.href = '/auth/login?success=Account created successfully! Please log in.';
    } catch (error) {
        errorAlert.textContent = error.message;
        errorAlert.classList.remove('d-none');
        
        setTimeout(() => {
            errorAlert.classList.add('d-none');
        }, 5000);
    }
});
</script>

================
File: src/views/auth/reset-password.hbs
================
<div class="row justify-content-center mt-5">
    <div class="col-md-6 col-lg-4">
        <div class="card shadow">
            <div class="card-header bg-primary text-white text-center py-3">
                <h3 class="mb-0">Reset Password</h3>
            </div>
            <div class="card-body p-4">
                {{#if error}}
                <div class="alert alert-danger" role="alert">
                    {{error}}
                </div>
                {{/if}}
                
                {{#if success}}
                <div class="alert alert-success" role="alert">
                    {{success}}
                </div>
                {{/if}}
                
                <form action="/auth/reset-password/{{token}}" method="POST" class="needs-validation" novalidate>
                    <div class="mb-3">
                        <label for="password" class="form-label">New Password</label>
                        <input type="password" class="form-control" id="password" name="password" required minlength="6">
                        <div class="invalid-feedback">
                            Password must be at least 6 characters long.
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="confirmPassword" class="form-label">Confirm Password</label>
                        <input type="password" class="form-control" id="confirmPassword" name="confirmPassword" required>
                        <div class="invalid-feedback">
                            Passwords do not match.
                        </div>
                    </div>

                    <div class="d-grid gap-2">
                        <button type="submit" class="btn btn-primary">Reset Password</button>
                        <a href="/auth/login" class="btn btn-outline-secondary">Back to Login</a>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
// Form validation
(function () {
    'use strict'
    var forms = document.querySelectorAll('.needs-validation')
    Array.prototype.slice.call(forms).forEach(function (form) {
        form.addEventListener('submit', function (event) {
            const password = form.querySelector('#password')
            const confirmPassword = form.querySelector('#confirmPassword')
            
            if (password.value !== confirmPassword.value) {
                confirmPassword.setCustomValidity('Passwords do not match')
            } else {
                confirmPassword.setCustomValidity('')
            }

            if (!form.checkValidity()) {
                event.preventDefault()
                event.stopPropagation()
            }
            form.classList.add('was-validated')
        }, false)
    })
})()
</script>

================
File: src/views/bookings/create.hbs
================
<div class="container mt-4">
    <div class="row">
        <div class="col-md-8">
            <div class="card">
                <div class="card-body">
                    <h3 class="card-title">Book Your Stay</h3>
                    <form id="bookingForm">
                        <input type="hidden" id="hotelId" value="{{hotel._id}}">
                        <input type="hidden" id="roomId" value="{{room._id}}">

                        <!-- Dates -->
                        <div class="row mb-4">
                            <div class="col-md-6">
                                <label for="checkIn" class="form-label">Check In</label>
                                <input type="date" class="form-control" id="checkIn" required 
                                       min="{{today}}" onchange="updateMinCheckOut()">
                            </div>
                            <div class="col-md-6">
                                <label for="checkOut" class="form-label">Check Out</label>
                                <input type="date" class="form-control" id="checkOut" required>
                            </div>
                        </div>

                        <!-- Guests -->
                        <div class="row mb-4">
                            <div class="col-md-6">
                                <label for="adults" class="form-label">Adults</label>
                                <input type="number" class="form-control" id="adults" 
                                       min="1" max="{{room.capacity}}" value="1" required>
                            </div>
                            <div class="col-md-6">
                                <label for="children" class="form-label">Children</label>
                                <input type="number" class="form-control" id="children" 
                                       min="0" value="0">
                            </div>
                        </div>

                        <!-- Special Requests -->
                        <div class="mb-4">
                            <label for="specialRequests" class="form-label">Special Requests</label>
                            <textarea class="form-control" id="specialRequests" rows="3" 
                                    placeholder="Any special requests or preferences?"></textarea>
                        </div>

                        <button type="submit" class="btn btn-primary" id="submitBtn">
                            Confirm Booking
                        </button>
                    </form>
                </div>
            </div>
        </div>

        <!-- Booking Summary -->
        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <h4 class="card-title">Booking Summary</h4>
                    
                    <!-- Hotel Info -->
                    <div class="mb-4">
                        <h5>{{hotel.name}}</h5>
                        <p class="text-muted">{{hotel.location}}</p>
                    </div>

                    <!-- Room Info -->
                    <div class="mb-4">
                        <h6>{{room.type}}</h6>
                        <ul class="list-unstyled">
                            <li><i class="fas fa-user"></i> Max Capacity: {{room.capacity}} persons</li>
                            <li><i class="fas fa-bed"></i> {{room.beds}} bed(s)</li>
                            {{#each room.amenities}}
                            <li><i class="fas fa-check"></i> {{this}}</li>
                            {{/each}}
                        </ul>
                    </div>

                    <!-- Price Breakdown -->
                    <div class="card bg-light">
                        <div class="card-body">
                            <h6>Price Details</h6>
                            <div class="d-flex justify-content-between mb-2">
                                <span>Room Rate</span>
                                <span>${{room.price}}/night</span>
                            </div>
                            <div class="d-flex justify-content-between mb-2">
                                <span>Number of Nights</span>
                                <span id="numberOfNights">-</span>
                            </div>
                            <hr>
                            <div class="d-flex justify-content-between fw-bold">
                                <span>Total Price</span>
                                <span id="totalPrice">$0</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
const roomPrice = {{room.price}};

function updateMinCheckOut() {
    const checkIn = document.getElementById('checkIn');
    const checkOut = document.getElementById('checkOut');
    
    // Set minimum check-out date to day after check-in
    const minCheckOut = new Date(checkIn.value);
    minCheckOut.setDate(minCheckOut.getDate() + 1);
    checkOut.min = minCheckOut.toISOString().split('T')[0];
    
    // If current check-out date is before new minimum, update it
    if (new Date(checkOut.value) <= new Date(checkIn.value)) {
        checkOut.value = minCheckOut.toISOString().split('T')[0];
    }

    updatePriceBreakdown();
}

function updatePriceBreakdown() {
    const checkIn = new Date(document.getElementById('checkIn').value);
    const checkOut = new Date(document.getElementById('checkOut').value);

    if (checkIn && checkOut && checkOut > checkIn) {
        const nights = Math.ceil((checkOut - checkIn) / (1000 * 60 * 60 * 24));
        const total = nights * roomPrice;

        document.getElementById('numberOfNights').textContent = nights;
        document.getElementById('totalPrice').textContent = `$${total}`;
    } else {
        document.getElementById('numberOfNights').textContent = '-';
        document.getElementById('totalPrice').textContent = '$0';
    }
}

// Update price when dates change
document.getElementById('checkIn').addEventListener('change', updatePriceBreakdown);
document.getElementById('checkOut').addEventListener('change', updatePriceBreakdown);

document.getElementById('bookingForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const submitBtn = document.getElementById('submitBtn');
    submitBtn.disabled = true;
    submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Processing...';

    try {
        const response = await fetch('/api/bookings', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                hotelId: document.getElementById('hotelId').value,
                roomId: document.getElementById('roomId').value,
                checkIn: document.getElementById('checkIn').value,
                checkOut: document.getElementById('checkOut').value,
                guests: {
                    adults: parseInt(document.getElementById('adults').value),
                    children: parseInt(document.getElementById('children').value)
                },
                specialRequests: document.getElementById('specialRequests').value
            })
        });

        const result = await response.json();

        if (!response.ok) {
            throw new Error(result.message || 'Failed to create booking');
        }

        // Show success message and redirect
        alert('Booking created successfully!');
        window.location.href = `/bookings/${result.data._id}`;
    } catch (error) {
        alert('Error creating booking: ' + error.message);
        submitBtn.disabled = false;
        submitBtn.innerHTML = 'Confirm Booking';
    }
});
</script>

================
File: src/views/bookings/details.hbs
================
<div class="container mt-4">
    <div class="row">
        <div class="col-md-8">
            <!-- Booking Status Banner -->
            <div class="alert alert-{{getStatusColor booking.status}} d-flex justify-content-between align-items-center">
                <div>
                    <h5 class="alert-heading mb-1">Booking Status: {{booking.status}}</h5>
                    {{#if (eq booking.status 'confirmed')}}
                    <p class="mb-0">Your booking is confirmed. We look forward to hosting you!</p>
                    {{else if (eq booking.status 'pending')}}
                    <p class="mb-0">Your booking is being processed. We'll confirm it shortly.</p>
                    {{else if (eq booking.status 'cancelled')}}
                    <p class="mb-0">This booking has been cancelled.</p>
                    {{else if (eq booking.status 'completed')}}
                    <p class="mb-0">Thank you for staying with us!</p>
                    {{/if}}
                </div>
                {{#if (eq booking.status 'pending')}}
                <button class="btn btn-danger" onclick="cancelBooking('{{booking._id}}')">
                    Cancel Booking
                </button>
                {{/if}}
            </div>

            <!-- Booking Details -->
            <div class="card mb-4">
                <div class="card-body">
                    <h4 class="card-title">Booking Details</h4>
                    
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label">Check In</label>
                            <div class="form-control bg-light">{{formatDate booking.checkIn}}</div>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Check Out</label>
                            <div class="form-control bg-light">{{formatDate booking.checkOut}}</div>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Adults</label>
                            <div class="form-control bg-light">{{booking.guests.adults}}</div>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Children</label>
                            <div class="form-control bg-light">{{booking.guests.children}}</div>
                        </div>
                        {{#if booking.specialRequests}}
                        <div class="col-12">
                            <label class="form-label">Special Requests</label>
                            <div class="form-control bg-light" style="min-height: 60px;">
                                {{booking.specialRequests}}
                            </div>
                        </div>
                        {{/if}}
                    </div>
                </div>
            </div>

            <!-- Hotel Details -->
            <div class="card mb-4">
                <div class="card-body">
                    <h4 class="card-title">Hotel Information</h4>
                    
                    <div class="row">
                        <div class="col-md-4">
                            {{#if booking.hotel.images.[0]}}
                            <img src="{{booking.hotel.images.[0]}}" class="img-fluid rounded" alt="Hotel Image">
                            {{else}}
                            <div class="bg-secondary rounded" style="height: 150px;"></div>
                            {{/if}}
                        </div>
                        <div class="col-md-8">
                            <h5>{{booking.hotel.name}}</h5>
                            <p class="text-muted">{{booking.hotel.location}}</p>
                            <p>{{booking.hotel.description}}</p>
                            
                            <h6>Contact Information</h6>
                            <ul class="list-unstyled">
                                <li><i class="fas fa-phone me-2"></i>{{booking.hotel.phone}}</li>
                                <li><i class="fas fa-envelope me-2"></i>{{booking.hotel.email}}</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Room Details -->
            <div class="card">
                <div class="card-body">
                    <h4 class="card-title">Room Information</h4>
                    
                    <div class="row">
                        <div class="col-md-4">
                            {{#if booking.room.images.[0]}}
                            <img src="{{booking.room.images.[0]}}" class="img-fluid rounded" alt="Room Image">
                            {{else}}
                            <div class="bg-secondary rounded" style="height: 150px;"></div>
                            {{/if}}
                        </div>
                        <div class="col-md-8">
                            <h5>{{booking.room.type}}</h5>
                            <p>{{booking.room.description}}</p>
                            
                            <h6>Room Features</h6>
                            <ul class="list-unstyled row">
                                <li class="col-md-6"><i class="fas fa-user me-2"></i>Max Capacity: {{booking.room.capacity}} persons</li>
                                <li class="col-md-6"><i class="fas fa-bed me-2"></i>{{booking.room.beds}} bed(s)</li>
                                {{#each booking.room.amenities}}
                                <li class="col-md-6"><i class="fas fa-check me-2"></i>{{this}}</li>
                                {{/each}}
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Price Summary -->
        <div class="col-md-4">
            <div class="card sticky-top" style="top: 20px;">
                <div class="card-body">
                    <h4 class="card-title">Price Summary</h4>
                    
                    <div class="d-flex justify-content-between mb-2">
                        <span>Room Rate</span>
                        <span>${{booking.room.price}}/night</span>
                    </div>
                    <div class="d-flex justify-content-between mb-2">
                        <span>Number of Nights</span>
                        <span>{{booking.numberOfNights}}</span>
                    </div>
                    {{#if booking.taxes}}
                    <div class="d-flex justify-content-between mb-2">
                        <span>Taxes & Fees</span>
                        <span>${{booking.taxes}}</span>
                    </div>
                    {{/if}}
                    <hr>
                    <div class="d-flex justify-content-between fw-bold">
                        <span>Total Price</span>
                        <span>${{booking.totalPrice}}</span>
                    </div>

                    {{#if (eq booking.status 'confirmed')}}
                    <div class="mt-4">
                        <h6>Check-in Instructions</h6>
                        <ul class="list-unstyled">
                            <li><i class="fas fa-clock me-2"></i>Check-in time: 2:00 PM</li>
                            <li><i class="fas fa-id-card me-2"></i>Please bring a valid ID</li>
                            <li><i class="fas fa-credit-card me-2"></i>Credit card required for incidentals</li>
                        </ul>
                    </div>
                    {{/if}}

                    {{#if (eq booking.status 'pending')}}
                    <div class="mt-4">
                        <div class="alert alert-info mb-0">
                            <i class="fas fa-info-circle me-2"></i>
                            Your booking will be confirmed within 24 hours.
                        </div>
                    </div>
                    {{/if}}
                </div>
            </div>
        </div>
    </div>
</div>

<script>
async function cancelBooking(bookingId) {
    if (!confirm('Are you sure you want to cancel this booking?')) {
        return;
    }

    try {
        const response = await fetch(`/api/bookings/${bookingId}/status`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                status: 'cancelled',
                cancellationReason: 'Cancelled by user'
            })
        });

        if (!response.ok) {
            throw new Error('Failed to cancel booking');
        }

        location.reload();
    } catch (error) {
        alert('Error cancelling booking: ' + error.message);
    }
}
</script>

================
File: src/views/bookings/list.hbs
================
<div class="container mt-4">
    <h2>My Bookings</h2>

    <!-- Filters -->
    <div class="card mb-4">
        <div class="card-body">
            <form id="filterForm" class="row g-3">
                <div class="col-md-4">
                    <select class="form-select" id="statusFilter" onchange="this.form.submit()">
                        <option value="">All Bookings</option>
                        <option value="pending" {{#if (eq status 'pending')}}selected{{/if}}>Pending</option>
                        <option value="confirmed" {{#if (eq status 'confirmed')}}selected{{/if}}>Confirmed</option>
                        <option value="completed" {{#if (eq status 'completed')}}selected{{/if}}>Completed</option>
                        <option value="cancelled" {{#if (eq status 'cancelled')}}selected{{/if}}>Cancelled</option>
                    </select>
                </div>
            </form>
        </div>
    </div>

    {{#if bookings.length}}
    <div class="row">
        {{#each bookings}}
        <div class="col-md-6 mb-4">
            <div class="card h-100">
                {{#if hotel.images.[0]}}
                <img src="{{hotel.images.[0]}}" class="card-img-top" alt="Hotel Image" style="height: 200px; object-fit: cover;">
                {{else}}
                <div class="bg-secondary" style="height: 200px;"></div>
                {{/if}}
                
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-start mb-2">
                        <h5 class="card-title mb-0">{{hotel.name}}</h5>
                        <span class="badge bg-{{getStatusColor status}}">{{status}}</span>
                    </div>
                    
                    <p class="text-muted">{{hotel.location}}</p>
                    
                    <div class="mb-3">
                        <div><strong>Check In:</strong> {{formatDate checkIn}}</div>
                        <div><strong>Check Out:</strong> {{formatDate checkOut}}</div>
                        <div><strong>Guests:</strong> {{guests.adults}} adults{{#if guests.children}}, {{guests.children}} children{{/if}}</div>
                        <div><strong>Total Price:</strong> ${{totalPrice}}</div>
                    </div>

                    {{#if specialRequests}}
                    <div class="mb-3">
                        <strong>Special Requests:</strong>
                        <p class="mb-0">{{specialRequests}}</p>
                    </div>
                    {{/if}}

                    <div class="d-flex justify-content-between align-items-center">
                        <a href="/bookings/{{_id}}" class="btn btn-outline-primary">
                            View Details
                        </a>
                        
                        {{#if (eq status 'pending')}}
                        <button class="btn btn-danger" onclick="cancelBooking('{{_id}}')">
                            Cancel Booking
                        </button>
                        {{/if}}
                    </div>
                </div>
            </div>
        </div>
        {{/each}}
    </div>

    <!-- Pagination -->
    {{#if pagination}}
    <nav class="mt-4">
        <ul class="pagination justify-content-center">
            <li class="page-item {{#unless pagination.hasPrevPage}}disabled{{/unless}}">
                <a class="page-link" href="?page={{pagination.prevPage}}&status={{status}}">Previous</a>
            </li>
            {{#each pagination.pages}}
            <li class="page-item {{#if isCurrent}}active{{/if}}">
                <a class="page-link" href="?page={{page}}&status={{../status}}">{{page}}</a>
            </li>
            {{/each}}
            <li class="page-item {{#unless pagination.hasNextPage}}disabled{{/unless}}">
                <a class="page-link" href="?page={{pagination.nextPage}}&status={{status}}">Next</a>
            </li>
        </ul>
    </nav>
    {{/if}}

    {{else}}
    <div class="text-center py-5">
        <i class="fas fa-calendar-times fa-3x text-muted mb-3"></i>
        <h4>No bookings found</h4>
        <p class="text-muted">You haven't made any bookings yet.</p>
        <a href="/hotels" class="btn btn-primary">Browse Hotels</a>
    </div>
    {{/if}}
</div>

<script>
document.getElementById('statusFilter').addEventListener('change', function() {
    const status = this.value;
    const url = new URL(window.location.href);
    if (status) {
        url.searchParams.set('status', status);
    } else {
        url.searchParams.delete('status');
    }
    url.searchParams.delete('page');
    window.location.href = url.toString();
});

async function cancelBooking(bookingId) {
    if (!confirm('Are you sure you want to cancel this booking?')) {
        return;
    }

    try {
        const response = await fetch(`/api/bookings/${bookingId}/status`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                status: 'cancelled',
                cancellationReason: 'Cancelled by user'
            })
        });

        if (!response.ok) {
            throw new Error('Failed to cancel booking');
        }

        location.reload();
    } catch (error) {
        alert('Error cancelling booking: ' + error.message);
    }
}
</script>

================
File: src/views/emails/loyalty-points.hbs
================
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
        }
        .container {
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
        }
        .header {
            text-align: center;
            padding: 20px 0;
            background-color: #f8f9fa;
        }
        .points-card {
            background-color: #f8f9fa;
            padding: 20px;
            border-radius: 5px;
            margin: 20px 0;
            text-align: center;
        }
        .points-value {
            font-size: 36px;
            color: #007bff;
            margin: 10px 0;
        }
        .tier-progress {
            margin: 20px 0;
            padding: 15px;
            background-color: #fff;
            border-radius: 5px;
            border: 1px solid #ddd;
        }
        .progress-bar {
            height: 20px;
            background-color: #e9ecef;
            border-radius: 10px;
            overflow: hidden;
            margin: 10px 0;
        }
        .progress-fill {
            height: 100%;
            background-color: #007bff;
            transition: width 0.3s ease;
        }
        .footer {
            text-align: center;
            padding: 20px 0;
            font-size: 12px;
            color: #666;
        }
        .button {
            display: inline-block;
            padding: 10px 20px;
            background-color: #007bff;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            margin: 20px 0;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Points Update</h1>
        </div>
        
        <div class="content">
            <p>Dear {{guest.name}},</p>
            
            {{#if isEarned}}
            <p>Great news! You've earned points from your recent activity:</p>
            {{else}}
            <p>You've redeemed points for a reward:</p>
            {{/if}}
            
            <div class="points-card">
                {{#if isEarned}}
                <h3>Points Earned</h3>
                <div class="points-value">+{{points}}</div>
                {{else}}
                <h3>Points Redeemed</h3>
                <div class="points-value">-{{points}}</div>
                {{/if}}
                <p>{{description}}</p>
            </div>
            
            <div class="tier-progress">
                <h3>Your {{currentTier}} Status</h3>
                <p>Current Points Balance: <strong>{{totalPoints}}</strong></p>
                
                {{#if nextTier}}
                <p>Progress to {{nextTier}}:</p>
                <div class="progress-bar">
                    <div class="progress-fill" style="width: {{tierProgress}}%"></div>
                </div>
                <p>{{pointsToNextTier}} more points needed</p>
                {{else}}
                <p>Congratulations! You've reached our highest tier!</p>
                {{/if}}
            </div>
            
            {{#if isEarned}}
            <p>Ways to earn more points:</p>
            <ul>
                <li>Book direct for {{pointsMultiplier}}x points</li>
                <li>Refer friends and earn bonus points</li>
                <li>Participate in special promotions</li>
            </ul>
            {{else}}
            <p>Thank you for being a valued member. Enjoy your reward!</p>
            {{/if}}
            
            <div style="text-align: center;">
                <a href="{{dashboardUrl}}" class="button">View Your Account</a>
            </div>
        </div>
        
        <div class="footer">
            <p>This email was sent to {{guest.email}}. To update your email preferences, click <a href="{{preferencesUrl}}">here</a>.</p>
        </div>
    </div>
</body>
</html>

================
File: src/views/emails/loyalty-tier-upgrade.hbs
================
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
        }
        .container {
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
        }
        .header {
            text-align: center;
            padding: 20px 0;
            background-color: #f8f9fa;
        }
        .tier-badge {
            text-align: center;
            margin: 20px 0;
        }
        .tier-badge .icon {
            font-size: 48px;
            color: #007bff;
            margin-bottom: 10px;
        }
        .tier-badge .tier-name {
            font-size: 24px;
            font-weight: bold;
            color: #007bff;
        }
        .benefits {
            background-color: #f8f9fa;
            padding: 20px;
            border-radius: 5px;
            margin: 20px 0;
        }
        .benefit-item {
            display: flex;
            align-items: center;
            margin: 15px 0;
        }
        .benefit-icon {
            width: 30px;
            text-align: center;
            margin-right: 15px;
            color: #007bff;
        }
        .footer {
            text-align: center;
            padding: 20px 0;
            font-size: 12px;
            color: #666;
        }
        .button {
            display: inline-block;
            padding: 10px 20px;
            background-color: #007bff;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            margin: 20px 0;
        }
        .celebration {
            text-align: center;
            font-size: 24px;
            margin: 20px 0;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Congratulations on Your Tier Upgrade!</h1>
        </div>
        
        <div class="content">
            <p>Dear {{guest.name}},</p>
            
            <div class="celebration">
                🎉 Welcome to {{newTier}}! 🎉
            </div>
            
            <div class="tier-badge">
                <div class="icon">⭐</div>
                <div class="tier-name">{{newTier}} Member</div>
            </div>
            
            <p>We're thrilled to announce that you've been upgraded to our {{newTier}} tier! This upgrade reflects your loyalty and trust in our services.</p>
            
            <div class="benefits">
                <h3>Your Enhanced {{newTier}} Benefits:</h3>
                {{#each benefits}}
                <div class="benefit-item">
                    <div class="benefit-icon">✓</div>
                    <div>
                        <strong>{{name}}</strong>
                        <p>{{description}}</p>
                    </div>
                </div>
                {{/each}}
            </div>
            
            <p>As a {{newTier}} member, you now earn:</p>
            <ul>
                <li>{{pointsMultiplier}}x points for every dollar spent</li>
                <li>Priority access to room upgrades</li>
                <li>Extended late check-out privileges</li>
                <li>Exclusive {{newTier}} member events and offers</li>
            </ul>
            
            <p>Your current status:</p>
            <ul>
                <li>Total Points: <strong>{{totalPoints}}</strong></li>
                <li>Points earned this year: <strong>{{yearlyPoints}}</strong></li>
                <li>Available rewards: <strong>{{availableRewards}}</strong></li>
            </ul>
            
            <div style="text-align: center;">
                <p>Ready to explore your new benefits?</p>
                <a href="{{dashboardUrl}}" class="button">View Your Account</a>
            </div>
            
            <p>Thank you for your continued loyalty. We look forward to providing you with an even more exceptional experience!</p>
            
            <p>Best regards,<br>The Hotel Management Team</p>
        </div>
        
        <div class="footer">
            <p>This email was sent to {{guest.email}}. To update your email preferences, click <a href="{{preferencesUrl}}">here</a>.</p>
        </div>
    </div>
</body>
</html>

================
File: src/views/emails/loyalty-welcome.hbs
================
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
        }
        .container {
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
        }
        .header {
            text-align: center;
            padding: 20px 0;
            background-color: #f8f9fa;
        }
        .content {
            padding: 20px 0;
        }
        .benefits {
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
            margin: 20px 0;
        }
        .footer {
            text-align: center;
            padding: 20px 0;
            font-size: 12px;
            color: #666;
        }
        .button {
            display: inline-block;
            padding: 10px 20px;
            background-color: #007bff;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            margin: 20px 0;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Welcome to Our Loyalty Program!</h1>
        </div>
        
        <div class="content">
            <p>Dear {{guest.name}},</p>
            
            <p>Welcome to our exclusive loyalty program! We're thrilled to have you as a member of our {{tier}} tier.</p>
            
            <div class="benefits">
                <h3>Your {{tier}} Benefits:</h3>
                <ul>
                    {{#each benefits}}
                    <li>{{this.name}} - {{this.description}}</li>
                    {{/each}}
                </ul>
            </div>
            
            <p>Your current points balance: <strong>{{points}} points</strong></p>
            
            <p>Start earning points with every stay and enjoy exclusive benefits:</p>
            <ul>
                <li>Earn {{pointsMultiplier}}x points for every dollar spent</li>
                <li>Access to member-only rates and promotions</li>
                <li>Priority check-in and late check-out</li>
                <li>Special amenities during your stay</li>
            </ul>
            
            <a href="{{dashboardUrl}}" class="button">View Your Account</a>
            
            <p>Thank you for choosing us. We look forward to making your stays even more rewarding!</p>
        </div>
        
        <div class="footer">
            <p>This email was sent to {{guest.email}}. To update your email preferences, click <a href="{{preferencesUrl}}">here</a>.</p>
        </div>
    </div>
</body>
</html>

================
File: src/views/error.hbs
================
<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card border-danger">
                <div class="card-header bg-danger text-white">
                    <h4 class="mb-0">
                        <i class="fas fa-exclamation-circle me-2"></i>
                        Error Occurred
                    </h4>
                </div>
                <div class="card-body">
                    <h5 class="card-title">{{message}}</h5>
                    {{#if error}}
                    <div class="alert alert-danger mt-3">
                        <pre class="mb-0">{{error.message}}</pre>
                    </div>
                    {{/if}}
                    <div class="mt-4">
                        <a href="javascript:history.back()" class="btn btn-outline-secondary me-2">
                            <i class="fas fa-arrow-left me-1"></i>
                            Go Back
                        </a>
                        <a href="/" class="btn btn-primary">
                            <i class="fas fa-home me-1"></i>
                            Go to Home
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

================
File: src/views/guest/amenities.hbs
================
{{> guest/header}}

<div class="container-fluid py-4">
    <div class="row">
        <!-- Available Amenities -->
        <div class="col-12 col-xl-8 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Available Amenities & Supplies</h5>
                </div>
                <div class="card-body">
                    <div class="row" id="amenitiesList">
                        <!-- Amenities will be loaded here -->
                    </div>
                </div>
            </div>
        </div>

        <!-- Request Cart -->
        <div class="col-12 col-xl-4 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Your Request</h5>
                </div>
                <div class="card-body">
                    <div id="requestCart">
                        <!-- Cart items will be added here -->
                    </div>
                    <div class="mt-3">
                        <label class="form-label">Additional Notes</label>
                        <textarea id="requestNotes" class="form-control" rows="3" placeholder="Any special instructions..."></textarea>
                    </div>
                    <button class="btn btn-primary w-100 mt-3" onclick="submitRequest()">
                        Submit Request
                    </button>
                </div>
            </div>
        </div>

        <!-- Request History -->
        <div class="col-12 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Request History</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table align-items-center mb-0">
                            <thead>
                                <tr>
                                    <th>Request Date</th>
                                    <th>Items</th>
                                    <th>Status</th>
                                    <th>Delivery Date</th>
                                </tr>
                            </thead>
                            <tbody id="requestHistory">
                                <!-- Request history will be loaded here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add to Cart Modal -->
<div class="modal fade" id="addToCartModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalItemName"></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Quantity</label>
                    <input type="number" id="modalQuantity" class="form-control" min="1" value="1">
                </div>
                <div class="mb-3">
                    <label class="form-label">Notes</label>
                    <textarea id="modalNotes" class="form-control" rows="2" placeholder="Any specific requirements..."></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="addToCart()">Add to Request</button>
            </div>
        </div>
    </div>
</div>

{{#section 'scripts'}}
<script>
let availableAmenities = [];
let cartItems = [];
let selectedItem = null;

// Load available amenities
async function loadAmenities() {
    try {
        const response = await fetch('/guest/available-amenities');
        const result = await response.json();
        
        if (result.success) {
            availableAmenities = result.data;
            renderAmenities();
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error loading amenities');
    }
}

// Render amenities list
function renderAmenities() {
    const container = document.getElementById('amenitiesList');
    
    container.innerHTML = availableAmenities.map(item => `
        <div class="col-md-6 col-lg-4 mb-4">
            <div class="card h-100">
                ${item.image ? `
                    <img src="${item.image}" class="card-img-top" alt="${item.name}">
                ` : ''}
                <div class="card-body">
                    <h5 class="card-title">${item.name}</h5>
                    <p class="card-text">${item.description || ''}</p>
                    <button class="btn btn-primary" onclick="showAddToCartModal('${item._id}')">
                        Request
                    </button>
                </div>
            </div>
        </div>
    `).join('');
}

// Show add to cart modal
function showAddToCartModal(itemId) {
    selectedItem = availableAmenities.find(item => item._id === itemId);
    
    document.getElementById('modalItemName').textContent = selectedItem.name;
    document.getElementById('modalQuantity').value = '1';
    document.getElementById('modalNotes').value = '';
    
    new bootstrap.Modal(document.getElementById('addToCartModal')).show();
}

// Add item to cart
function addToCart() {
    const quantity = parseInt(document.getElementById('modalQuantity').value);
    const notes = document.getElementById('modalNotes').value;
    
    if (quantity < 1) {
        alert('Please enter a valid quantity');
        return;
    }
    
    cartItems.push({
        id: selectedItem._id,
        name: selectedItem.name,
        quantity,
        notes
    });
    
    bootstrap.Modal.getInstance(document.getElementById('addToCartModal')).hide();
    renderCart();
}

// Render cart
function renderCart() {
    const container = document.getElementById('requestCart');
    
    if (cartItems.length === 0) {
        container.innerHTML = '<p class="text-muted">No items added yet</p>';
        return;
    }
    
    container.innerHTML = cartItems.map((item, index) => `
        <div class="d-flex justify-content-between align-items-center mb-2">
            <div>
                <h6 class="mb-0">${item.name}</h6>
                <small class="text-muted">Qty: ${item.quantity}</small>
                ${item.notes ? `<br><small class="text-muted">Note: ${item.notes}</small>` : ''}
            </div>
            <button class="btn btn-sm btn-danger" onclick="removeFromCart(${index})">
                <i class="fas fa-times"></i>
            </button>
        </div>
    `).join('');
}

// Remove item from cart
function removeFromCart(index) {
    cartItems.splice(index, 1);
    renderCart();
}

// Submit request
async function submitRequest() {
    if (cartItems.length === 0) {
        alert('Please add items to your request');
        return;
    }
    
    try {
        const response = await fetch('/guest/amenity-request', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                items: cartItems,
                notes: document.getElementById('requestNotes').value
            })
        });
        
        const result = await response.json();
        
        if (result.success) {
            alert('Request submitted successfully');
            cartItems = [];
            document.getElementById('requestNotes').value = '';
            renderCart();
            loadRequestHistory();
        } else {
            alert(result.message || 'Error submitting request');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error submitting request');
    }
}

// Load request history
async function loadRequestHistory() {
    try {
        const response = await fetch('/guest/amenity-requests');
        const result = await response.json();
        
        if (result.success) {
            renderRequestHistory(result.data);
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error loading request history');
    }
}

// Render request history
function renderRequestHistory(requests) {
    const container = document.getElementById('requestHistory');
    
    container.innerHTML = requests.map(request => `
        <tr>
            <td>${new Date(request.requestDate).toLocaleDateString()}</td>
            <td>
                ${request.items.map(item => 
                    `${item.item.name} (${item.quantity} ${item.item.unit})`
                ).join(', ')}
            </td>
            <td>
                <span class="badge bg-${getStatusColor(request.status)}">
                    ${formatStatus(request.status)}
                </span>
            </td>
            <td>
                ${request.deliveryDate ? new Date(request.deliveryDate).toLocaleDateString() : 'Pending'}
            </td>
        </tr>
    `).join('');
}

function getStatusColor(status) {
    const colors = {
        pending: 'warning',
        approved: 'info',
        delivered: 'success',
        rejected: 'danger'
    };
    return colors[status] || 'secondary';
}

function formatStatus(status) {
    return status.charAt(0).toUpperCase() + status.slice(1);
}

// Initial load
loadAmenities();
loadRequestHistory();
</script>
{{/section}}

================
File: src/views/guest/bookings.hbs
================
{{> guest/header}}

<div class="container py-4">
    <!-- Booking Filters -->
    <div class="card mb-4">
        <div class="card-body">
            <form action="/guest/bookings" method="GET" class="row g-3">
                <div class="col-md-3">
                    <label class="form-label">Status</label>
                    <select name="status" class="form-select">
                        <option value="">All Status</option>
                        <option value="confirmed" {{#if (eq query.status "confirmed")}}selected{{/if}}>Confirmed</option>
                        <option value="checked-in" {{#if (eq query.status "checked-in")}}selected{{/if}}>Checked In</option>
                        <option value="completed" {{#if (eq query.status "completed")}}selected{{/if}}>Completed</option>
                        <option value="cancelled" {{#if (eq query.status "cancelled")}}selected{{/if}}>Cancelled</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Date Range</label>
                    <select name="dateRange" class="form-select">
                        <option value="">All Time</option>
                        <option value="upcoming" {{#if (eq query.dateRange "upcoming")}}selected{{/if}}>Upcoming</option>
                        <option value="past" {{#if (eq query.dateRange "past")}}selected{{/if}}>Past</option>
                        <option value="current" {{#if (eq query.dateRange "current")}}selected{{/if}}>Current</option>
                    </select>
                </div>
                <div class="col-md-4">
                    <label class="form-label">Hotel</label>
                    <input type="text" name="hotel" class="form-control" value="{{query.hotel}}" placeholder="Search by hotel name">
                </div>
                <div class="col-md-2 d-flex align-items-end">
                    <button type="submit" class="btn btn-primary w-100">
                        <i class="fas fa-filter me-2"></i>Apply Filters
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Bookings List -->
    <div class="card">
        <div class="card-body p-0">
            {{#if bookings.length}}
            <div class="table-responsive">
                <table class="table table-hover align-middle mb-0">
                    <thead class="bg-light">
                        <tr>
                            <th>Hotel</th>
                            <th>Room</th>
                            <th>Check-in</th>
                            <th>Check-out</th>
                            <th>Guests</th>
                            <th>Status</th>
                            <th>Amount</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {{#each bookings}}
                        <tr>
                            <td>
                                <div class="d-flex align-items-center">
                                    {{#if this.hotel.images.[0]}}
                                    <img src="{{this.hotel.images.[0]}}" class="rounded me-2" style="width: 40px; height: 40px; object-fit: cover;">
                                    {{/if}}
                                    <div>
                                        <h6 class="mb-0">{{this.hotel.name}}</h6>
                                        <small class="text-muted">{{this.hotel.location.city}}</small>
                                    </div>
                                </div>
                            </td>
                            <td>{{this.room.number}} - {{this.room.type}}</td>
                            <td>{{formatDate this.checkIn}}</td>
                            <td>{{formatDate this.checkOut}}</td>
                            <td>{{this.guests}}</td>
                            <td>
                                <span class="badge bg-{{statusColor this.status}}">{{this.status}}</span>
                            </td>
                            <td>${{formatNumber this.totalAmount}}</td>
                            <td>
                                <div class="dropdown">
                                    <button class="btn btn-sm btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                        Actions
                                    </button>
                                    <ul class="dropdown-menu">
                                        <li>
                                            <a class="dropdown-item" href="#" onclick="viewBooking('{{this._id}}')">
                                                <i class="fas fa-eye me-2"></i>View Details
                                            </a>
                                        </li>
                                        {{#if (eq this.status "confirmed")}}
                                        <li>
                                            <a class="dropdown-item" href="#" onclick="cancelBooking('{{this._id}}')">
                                                <i class="fas fa-times me-2"></i>Cancel Booking
                                            </a>
                                        </li>
                                        <li>
                                            <a class="dropdown-item" href="#" onclick="requestEarlyCheckIn('{{this._id}}')">
                                                <i class="fas fa-clock me-2"></i>Request Early Check-in
                                            </a>
                                        </li>
                                        {{/if}}
                                        {{#if (eq this.status "checked-in")}}
                                        <li>
                                            <a class="dropdown-item" href="#" onclick="requestLateCheckOut('{{this._id}}')">
                                                <i class="fas fa-clock me-2"></i>Request Late Check-out
                                            </a>
                                        </li>
                                        <li>
                                            <a class="dropdown-item" href="#" onclick="requestService('{{this._id}}')">
                                                <i class="fas fa-concierge-bell me-2"></i>Request Service
                                            </a>
                                        </li>
                                        {{/if}}
                                    </ul>
                                </div>
                            </td>
                        </tr>
                        {{/each}}
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            {{#if pagination.totalPages}}
            <div class="p-3 border-top">
                <nav>
                    <ul class="pagination justify-content-center mb-0">
                        {{#if pagination.hasPrev}}
                        <li class="page-item">
                            <a class="page-link" href="?page={{subtract pagination.page 1}}{{#if query.status}}&status={{query.status}}{{/if}}{{#if query.dateRange}}&dateRange={{query.dateRange}}{{/if}}{{#if query.hotel}}&hotel={{query.hotel}}{{/if}}">
                                Previous
                            </a>
                        </li>
                        {{/if}}
                        {{#if pagination.hasNext}}
                        <li class="page-item">
                            <a class="page-link" href="?page={{add pagination.page 1}}{{#if query.status}}&status={{query.status}}{{/if}}{{#if query.dateRange}}&dateRange={{query.dateRange}}{{/if}}{{#if query.hotel}}&hotel={{query.hotel}}{{/if}}">
                                Next
                            </a>
                        </li>
                        {{/if}}
                    </ul>
                </nav>
            </div>
            {{/if}}

            {{else}}
            <div class="text-center py-5">
                <div class="mb-3">
                    <i class="fas fa-calendar-times fa-3x text-muted"></i>
                </div>
                <h5>No Bookings Found</h5>
                <p class="text-muted mb-3">We couldn't find any bookings matching your criteria.</p>
                <a href="/search" class="btn btn-primary">
                    <i class="fas fa-search me-2"></i>Book a Stay
                </a>
            </div>
            {{/if}}
        </div>
    </div>
</div>

<!-- Timing Request Modal -->
<div class="modal fade" id="timingRequestModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Request Check-in/out Time</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="timingRequestForm">
                    <input type="hidden" name="bookingId">
                    <input type="hidden" name="type">
                    <div class="mb-3">
                        <label class="form-label">Preferred Time</label>
                        <input type="time" name="time" class="form-control" required>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="submitTimingRequest()">Submit Request</button>
            </div>
        </div>
    </div>
</div>

{{#section 'scripts'}}
<script>
function viewBooking(id) {
    // Implement booking details view
}

async function cancelBooking(id) {
    if (!confirm('Are you sure you want to cancel this booking?')) return;
    
    try {
        const response = await fetch(`/guest/bookings/${id}/cancel`, {
            method: 'PUT'
        });

        const result = await response.json();
        
        if (result.success) {
            location.reload();
        } else {
            alert(result.message || 'Error cancelling booking');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error cancelling booking');
    }
}

function requestEarlyCheckIn(id) {
    const form = document.getElementById('timingRequestForm');
    form.elements.bookingId.value = id;
    form.elements.type.value = 'early-checkin';
    form.elements.time.value = '10:00';
    
    const modal = new bootstrap.Modal(document.getElementById('timingRequestModal'));
    modal.show();
}

function requestLateCheckOut(id) {
    const form = document.getElementById('timingRequestForm');
    form.elements.bookingId.value = id;
    form.elements.type.value = 'late-checkout';
    form.elements.time.value = '14:00';
    
    const modal = new bootstrap.Modal(document.getElementById('timingRequestModal'));
    modal.show();
}

async function submitTimingRequest() {
    const form = document.getElementById('timingRequestForm');
    const { bookingId, type, time } = Object.fromEntries(new FormData(form));
    
    try {
        const response = await fetch(`/guest/bookings/${bookingId}/request-timing`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ type, time })
        });

        const result = await response.json();
        
        if (result.success) {
            location.reload();
        } else {
            alert(result.message || 'Error submitting request');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error submitting request');
    }
}

function requestService(id) {
    location.href = `/maintenance?booking=${id}`;
}
</script>
{{/section}}

================
File: src/views/guest/dashboard.hbs
================
{{> guest/header}}

<div class="container py-4">
    <div class="row">
        <!-- Current Booking -->
        <div class="col-lg-8 mb-4">
            <div class="card h-100">
                <div class="card-header">
                    <h5 class="mb-0">Current Stay</h5>
                </div>
                <div class="card-body">
                    {{#if currentBooking}}
                    <div class="row">
                        <div class="col-md-4">
                            {{#if currentBooking.hotel.images.[0]}}
                            <img src="{{currentBooking.hotel.images.[0]}}" class="img-fluid rounded" alt="{{currentBooking.hotel.name}}">
                            {{/if}}
                        </div>
                        <div class="col-md-8">
                            <h5>{{currentBooking.hotel.name}}</h5>
                            <p class="text-muted mb-2">Room {{currentBooking.room.number}} - {{currentBooking.room.type}}</p>
                            <div class="d-flex align-items-center mb-2">
                                <i class="fas fa-calendar-alt text-primary me-2"></i>
                                <span>{{formatDate currentBooking.checkIn}} - {{formatDate currentBooking.checkOut}}</span>
                            </div>
                            <div class="d-flex align-items-center mb-3">
                                <i class="fas fa-user-friends text-primary me-2"></i>
                                <span>{{currentBooking.guests}} Guests</span>
                            </div>
                            <div class="d-flex gap-2">
                                <button class="btn btn-primary btn-sm" onclick="requestService()">
                                    <i class="fas fa-concierge-bell me-2"></i>Request Service
                                </button>
                                <button class="btn btn-info btn-sm" onclick="viewRoomDetails()">
                                    <i class="fas fa-info-circle me-2"></i>Room Info
                                </button>
                            </div>
                        </div>
                    </div>
                    {{else}}
                    <p class="text-muted mb-0">No active stay at the moment.</p>
                    {{/if}}
                </div>
            </div>
        </div>

        <!-- Quick Actions -->
        <div class="col-lg-4 mb-4">
            <div class="card h-100">
                <div class="card-header">
                    <h5 class="mb-0">Quick Actions</h5>
                </div>
                <div class="card-body">
                    <div class="d-grid gap-2">
                        <a href="/guest/bookings" class="btn btn-outline-primary">
                            <i class="fas fa-calendar-check me-2"></i>My Bookings
                        </a>
                        <a href="/guest/profile" class="btn btn-outline-primary">
                            <i class="fas fa-user me-2"></i>My Profile
                        </a>
                        <a href="/maintenance" class="btn btn-outline-primary">
                            <i class="fas fa-tools me-2"></i>Maintenance Requests
                        </a>
                        <a href="/search" class="btn btn-outline-primary">
                            <i class="fas fa-search me-2"></i>Book New Stay
                        </a>
                    </div>
                </div>
            </div>
        </div>

        <!-- Upcoming Bookings -->
        <div class="col-12 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Upcoming Stays</h5>
                </div>
                <div class="card-body">
                    {{#if upcomingBookings.length}}
                    <div class="table-responsive">
                        <table class="table table-hover align-middle">
                            <thead>
                                <tr>
                                    <th>Hotel</th>
                                    <th>Room</th>
                                    <th>Check-in</th>
                                    <th>Check-out</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{#each upcomingBookings}}
                                <tr>
                                    <td>{{this.hotel.name}}</td>
                                    <td>{{this.room.number}} - {{this.room.type}}</td>
                                    <td>{{formatDate this.checkIn}}</td>
                                    <td>{{formatDate this.checkOut}}</td>
                                    <td>
                                        <span class="badge bg-success">{{this.status}}</span>
                                    </td>
                                    <td>
                                        <button class="btn btn-sm btn-danger" onclick="cancelBooking('{{this._id}}')">
                                            Cancel
                                        </button>
                                    </td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                    </div>
                    {{else}}
                    <p class="text-muted mb-0">No upcoming stays.</p>
                    {{/if}}
                </div>
            </div>
        </div>

        <!-- Active Requests -->
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Active Requests</h5>
                </div>
                <div class="card-body">
                    {{#if activeRequests.length}}
                    <div class="table-responsive">
                        <table class="table table-hover align-middle">
                            <thead>
                                <tr>
                                    <th>Type</th>
                                    <th>Description</th>
                                    <th>Status</th>
                                    <th>Created</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{#each activeRequests}}
                                <tr>
                                    <td>
                                        <span class="badge bg-{{serviceTypeColor this.serviceType}}">
                                            {{formatServiceType this.serviceType}}
                                        </span>
                                    </td>
                                    <td>{{this.description}}</td>
                                    <td>
                                        <span class="badge bg-{{statusColor this.status}}">
                                            {{this.status}}
                                        </span>
                                    </td>
                                    <td>{{formatDate this.createdAt}}</td>
                                    <td>
                                        <button class="btn btn-sm btn-info" onclick="viewRequest('{{this._id}}')">
                                            View
                                        </button>
                                    </td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                    </div>
                    {{else}}
                    <p class="text-muted mb-0">No active requests.</p>
                    {{/if}}
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Service Request Modal -->
<div class="modal fade" id="serviceRequestModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Request Service</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="serviceRequestForm">
                    <div class="mb-3">
                        <label class="form-label">Service Type</label>
                        <select name="type" class="form-select" required>
                            <option value="housekeeping">Housekeeping</option>
                            <option value="room-service">Room Service</option>
                            <option value="maintenance">Maintenance</option>
                            <option value="amenity">Additional Amenities</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea name="description" class="form-control" rows="3" required></textarea>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Preferred Time</label>
                        <input type="time" name="preferredTime" class="form-control">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="submitServiceRequest()">Submit Request</button>
            </div>
        </div>
    </div>
</div>

{{#section 'scripts'}}
<script>
function requestService() {
    const modal = new bootstrap.Modal(document.getElementById('serviceRequestModal'));
    modal.show();
}

async function submitServiceRequest() {
    const form = document.getElementById('serviceRequestForm');
    const formData = new FormData(form);
    
    try {
        const response = await fetch('/guest/services/request', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(Object.fromEntries(formData))
        });

        const result = await response.json();
        
        if (result.success) {
            location.reload();
        } else {
            alert(result.message || 'Error submitting request');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error submitting request');
    }
}

async function cancelBooking(id) {
    if (!confirm('Are you sure you want to cancel this booking?')) return;
    
    try {
        const response = await fetch(`/guest/bookings/${id}/cancel`, {
            method: 'PUT'
        });

        const result = await response.json();
        
        if (result.success) {
            location.reload();
        } else {
            alert(result.message || 'Error cancelling booking');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error cancelling booking');
    }
}

function viewRequest(id) {
    location.href = `/maintenance/request/${id}`;
}

function viewRoomDetails() {
    // Implement room details view
}
</script>
{{/section}}

================
File: src/views/guest/profile.hbs
================
{{> guest/header}}

<div class="container py-4">
    <div class="row">
        <!-- Profile Information -->
        <div class="col-lg-8 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Profile Information</h5>
                </div>
                <div class="card-body">
                    <form id="profileForm">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Full Name</label>
                                <input type="text" class="form-control" name="name" value="{{user.name}}" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Email Address</label>
                                <input type="email" class="form-control" name="email" value="{{user.email}}" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Phone Number</label>
                                <input type="tel" class="form-control" name="phone" value="{{user.phone}}">
                            </div>
                        </div>
                        <button type="button" class="btn btn-primary" onclick="updateProfile()">
                            <i class="fas fa-save me-2"></i>Save Changes
                        </button>
                    </form>
                </div>
            </div>
        </div>

        <!-- Change Password -->
        <div class="col-lg-4 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Change Password</h5>
                </div>
                <div class="card-body">
                    <form id="passwordForm">
                        <div class="mb-3">
                            <label class="form-label">Current Password</label>
                            <input type="password" class="form-control" name="currentPassword" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">New Password</label>
                            <input type="password" class="form-control" name="newPassword" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Confirm New Password</label>
                            <input type="password" class="form-control" name="confirmPassword" required>
                        </div>
                        <button type="button" class="btn btn-primary w-100" onclick="changePassword()">
                            <i class="fas fa-key me-2"></i>Update Password
                        </button>
                    </form>
                </div>
            </div>
        </div>

        <!-- Preferences -->
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Stay Preferences</h5>
                </div>
                <div class="card-body">
                    <form id="preferencesForm">
                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <label class="form-label">Room Type Preference</label>
                                <select class="form-select" name="roomPreference">
                                    <option value="">No Preference</option>
                                    <option value="standard" {{#if (eq user.preferences.roomType "standard")}}selected{{/if}}>Standard</option>
                                    <option value="deluxe" {{#if (eq user.preferences.roomType "deluxe")}}selected{{/if}}>Deluxe</option>
                                    <option value="suite" {{#if (eq user.preferences.roomType "suite")}}selected{{/if}}>Suite</option>
                                </select>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label">Bed Type Preference</label>
                                <select class="form-select" name="bedPreference">
                                    <option value="">No Preference</option>
                                    <option value="single" {{#if (eq user.preferences.bedType "single")}}selected{{/if}}>Single</option>
                                    <option value="double" {{#if (eq user.preferences.bedType "double")}}selected{{/if}}>Double</option>
                                    <option value="king" {{#if (eq user.preferences.bedType "king")}}selected{{/if}}>King</option>
                                </select>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label">Floor Preference</label>
                                <select class="form-select" name="floorPreference">
                                    <option value="">No Preference</option>
                                    <option value="low" {{#if (eq user.preferences.floor "low")}}selected{{/if}}>Lower Floor</option>
                                    <option value="middle" {{#if (eq user.preferences.floor "middle")}}selected{{/if}}>Middle Floor</option>
                                    <option value="high" {{#if (eq user.preferences.floor "high")}}selected{{/if}}>Higher Floor</option>
                                </select>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Special Requests</label>
                                <textarea class="form-control" name="specialRequests" rows="3">{{user.preferences.specialRequests}}</textarea>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Dietary Requirements</label>
                                <textarea class="form-control" name="dietaryRequirements" rows="3">{{user.preferences.dietaryRequirements}}</textarea>
                            </div>
                        </div>
                        <button type="button" class="btn btn-primary" onclick="updatePreferences()">
                            <i class="fas fa-save me-2"></i>Save Preferences
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

{{#section 'scripts'}}
<script>
async function updateProfile() {
    const form = document.getElementById('profileForm');
    const formData = new FormData(form);
    
    try {
        const response = await fetch('/guest/profile', {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(Object.fromEntries(formData))
        });

        const result = await response.json();
        
        if (result.success) {
            alert('Profile updated successfully');
            location.reload();
        } else {
            alert(result.message || 'Error updating profile');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error updating profile');
    }
}

async function changePassword() {
    const form = document.getElementById('passwordForm');
    const formData = new FormData(form);
    const data = Object.fromEntries(formData);
    
    if (data.newPassword !== data.confirmPassword) {
        alert('New passwords do not match');
        return;
    }
    
    try {
        const response = await fetch('/guest/change-password', {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                currentPassword: data.currentPassword,
                newPassword: data.newPassword
            })
        });

        const result = await response.json();
        
        if (result.success) {
            alert('Password changed successfully');
            form.reset();
        } else {
            alert(result.message || 'Error changing password');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error changing password');
    }
}

async function updatePreferences() {
    const form = document.getElementById('preferencesForm');
    const formData = new FormData(form);
    
    try {
        const response = await fetch('/guest/profile', {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                preferences: Object.fromEntries(formData)
            })
        });

        const result = await response.json();
        
        if (result.success) {
            alert('Preferences updated successfully');
            location.reload();
        } else {
            alert(result.message || 'Error updating preferences');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error updating preferences');
    }
}
</script>
{{/section}}

================
File: src/views/hotels/add.hbs
================
<div class="row">
    <div class="col-md-8 offset-md-2">
        <div class="card">
            <div class="card-header">
                <h3>Add New Hotel</h3>
            </div>
            <div class="card-body">
                <form id="addHotelForm" action="/api/admin/hotels" method="POST">
                    <!-- Basic Information -->
                    <div class="mb-4">
                        <h4>Basic Information</h4>
                        <div class="mb-3">
                            <label for="name" class="form-label">Hotel Name *</label>
                            <input type="text" class="form-control" id="name" name="name" required>
                        </div>
                        <div class="mb-3">
                            <label for="description" class="form-label">Description *</label>
                            <textarea class="form-control" id="description" name="description" rows="3" required></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="rating" class="form-label">Rating</label>
                            <input type="number" class="form-control" id="rating" name="rating" min="1" max="5" step="0.1">
                        </div>
                    </div>

                    <!-- Address -->
                    <div class="mb-4">
                        <h4>Address</h4>
                        <div class="mb-3">
                            <label for="street" class="form-label">Street *</label>
                            <input type="text" class="form-control" id="street" name="address.street" required>
                        </div>
                        <div class="mb-3">
                            <label for="city" class="form-label">City *</label>
                            <input type="text" class="form-control" id="city" name="address.city" required>
                        </div>
                        <div class="mb-3">
                            <label for="state" class="form-label">State *</label>
                            <input type="text" class="form-control" id="state" name="address.state" required>
                        </div>
                        <div class="mb-3">
                            <label for="country" class="form-label">Country *</label>
                            <input type="text" class="form-control" id="country" name="address.country" required>
                        </div>
                        <div class="mb-3">
                            <label for="zipCode" class="form-label">ZIP Code *</label>
                            <input type="text" class="form-control" id="zipCode" name="address.zipCode" required>
                        </div>
                    </div>

                    <!-- Contact Information -->
                    <div class="mb-4">
                        <h4>Contact Information</h4>
                        <div class="mb-3">
                            <label for="phone" class="form-label">Phone *</label>
                            <input type="tel" class="form-control" id="phone" name="contactInfo.phone" required>
                        </div>
                        <div class="mb-3">
                            <label for="email" class="form-label">Email *</label>
                            <input type="email" class="form-control" id="email" name="contactInfo.email" required>
                        </div>
                        <div class="mb-3">
                            <label for="website" class="form-label">Website</label>
                            <input type="url" class="form-control" id="website" name="contactInfo.website">
                        </div>
                    </div>

                    <!-- Policies -->
                    <div class="mb-4">
                        <h4>Policies</h4>
                        <div class="mb-3">
                            <label for="checkInTime" class="form-label">Check-in Time *</label>
                            <input type="time" class="form-control" id="checkInTime" name="policies.checkInTime" required>
                        </div>
                        <div class="mb-3">
                            <label for="checkOutTime" class="form-label">Check-out Time *</label>
                            <input type="time" class="form-control" id="checkOutTime" name="policies.checkOutTime" required>
                        </div>
                        <div class="mb-3">
                            <label for="cancellationPolicy" class="form-label">Cancellation Policy</label>
                            <textarea class="form-control" id="cancellationPolicy" name="policies.cancellationPolicy" rows="2"></textarea>
                        </div>
                    </div>

                    <!-- Amenities -->
                    <div class="mb-4">
                        <h4>Amenities</h4>
                        <div class="mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="amenities[]" value="wifi" id="wifi">
                                <label class="form-check-label" for="wifi">WiFi</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="amenities[]" value="parking" id="parking">
                                <label class="form-check-label" for="parking">Parking</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="amenities[]" value="pool" id="pool">
                                <label class="form-check-label" for="pool">Swimming Pool</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="amenities[]" value="gym" id="gym">
                                <label class="form-check-label" for="gym">Gym</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="amenities[]" value="restaurant" id="restaurant">
                                <label class="form-check-label" for="restaurant">Restaurant</label>
                            </div>
                        </div>
                    </div>

                    <div class="text-end">
                        <button type="submit" class="btn btn-primary">Add Hotel</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
document.getElementById('addHotelForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    const data = {
        name: formData.get('name'),
        description: formData.get('description'),
        rating: parseFloat(formData.get('rating')),
        address: {
            street: formData.get('address.street'),
            city: formData.get('address.city'),
            state: formData.get('address.state'),
            country: formData.get('address.country'),
            zipCode: formData.get('address.zipCode')
        },
        contactInfo: {
            phone: formData.get('contactInfo.phone'),
            email: formData.get('contactInfo.email'),
            website: formData.get('contactInfo.website')
        },
        policies: {
            checkInTime: formData.get('policies.checkInTime'),
            checkOutTime: formData.get('policies.checkOutTime'),
            cancellationPolicy: formData.get('policies.cancellationPolicy')
        },
        amenities: Array.from(formData.getAll('amenities[]'))
    };

    try {
        const response = await fetch('/api/admin/hotels', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            },
            body: JSON.stringify(data)
        });

        if (!response.ok) {
            throw new Error('Failed to add hotel');
        }

        const result = await response.json();
        alert('Hotel added successfully!');
        window.location.href = '/admin/hotels';
    } catch (error) {
        alert('Error adding hotel: ' + error.message);
    }
});
</script>

================
File: src/views/hotels/edit.hbs
================
<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Edit Hotel: {{hotel.name}}</h2>
        <div>
            <a href="/admin/hotels" class="btn btn-outline-secondary me-2">
                <i class="fas fa-arrow-left"></i> Back to List
            </a>
            <a href="/admin/hotels/{{hotel._id}}" class="btn btn-outline-primary">
                <i class="fas fa-eye"></i> View Details
            </a>
        </div>
    </div>

    <form id="editHotelForm" class="needs-validation" novalidate>
        <div class="row">
            <div class="col-md-8">
                <!-- Basic Information -->
                <div class="card mb-4">
                    <div class="card-body">
                        <h5 class="card-title">Basic Information</h5>
                        
                        <div class="mb-3">
                            <label for="name" class="form-label">Hotel Name</label>
                            <input type="text" class="form-control" id="name" name="name" value="{{hotel.name}}" required>
                        </div>

                        <div class="mb-3">
                            <label for="description" class="form-label">Description</label>
                            <textarea class="form-control" id="description" name="description" rows="4" required>{{hotel.description}}</textarea>
                        </div>

                        <div class="mb-3">
                            <label for="location" class="form-label">Location</label>
                            <input type="text" class="form-control" id="location" name="location" value="{{hotel.location}}" required>
                        </div>

                        <div class="mb-3">
                            <label for="pricePerNight" class="form-label">Price per Night</label>
                            <div class="input-group">
                                <span class="input-group-text">$</span>
                                <input type="number" class="form-control" id="pricePerNight" name="pricePerNight" value="{{hotel.pricePerNight}}" required>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Address -->
                <div class="card mb-4">
                    <div class="card-body">
                        <h5 class="card-title">Address</h5>
                        
                        <div class="mb-3">
                            <label for="street" class="form-label">Street</label>
                            <input type="text" class="form-control" id="street" name="address[street]" value="{{hotel.address.street}}">
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="city" class="form-label">City</label>
                                <input type="text" class="form-control" id="city" name="address[city]" value="{{hotel.address.city}}" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="state" class="form-label">State</label>
                                <input type="text" class="form-control" id="state" name="address[state]" value="{{hotel.address.state}}">
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="country" class="form-label">Country</label>
                                <input type="text" class="form-control" id="country" name="address[country]" value="{{hotel.address.country}}" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="zipCode" class="form-label">ZIP Code</label>
                                <input type="text" class="form-control" id="zipCode" name="address[zipCode]" value="{{hotel.address.zipCode}}">
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Images -->
                <div class="card mb-4">
                    <div class="card-body">
                        <h5 class="card-title">Images</h5>
                        <div class="mb-3">
                            <label for="images" class="form-label">Add Images</label>
                            <input type="file" class="form-control" id="images" name="images" multiple accept="image/*">
                        </div>
                        {{#if hotel.images.length}}
                        <div class="row g-3">
                            {{#each hotel.images}}
                            <div class="col-md-4">
                                <div class="position-relative">
                                    <img src="{{this}}" class="img-thumbnail" alt="Hotel Image">
                                    <button type="button" class="btn btn-danger btn-sm position-absolute top-0 end-0 m-2" 
                                            onclick="removeImage('{{@index}}')">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                            </div>
                            {{/each}}
                        </div>
                        {{/if}}
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <!-- Status -->
                <div class="card mb-4">
                    <div class="card-body">
                        <h5 class="card-title">Status</h5>
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="isActive" name="isActive" {{#if hotel.isActive}}checked{{/if}}>
                            <label class="form-check-label" for="isActive">Active</label>
                        </div>
                    </div>
                </div>

                <!-- Amenities -->
                <div class="card mb-4">
                    <div class="card-body">
                        <h5 class="card-title">Amenities</h5>
                        <div class="mb-3">
                            <input type="text" class="form-control" id="amenity" placeholder="Add amenity">
                            <div class="d-grid mt-2">
                                <button type="button" class="btn btn-outline-primary" onclick="addAmenity()">
                                    <i class="fas fa-plus"></i> Add
                                </button>
                            </div>
                        </div>
                        <div id="amenitiesList">
                            {{#each hotel.amenities}}
                            <div class="badge bg-info mb-1 me-1">
                                {{this}}
                                <button type="button" class="btn-close btn-close-white" onclick="removeAmenity(this)"></button>
                                <input type="hidden" name="amenities[]" value="{{this}}">
                            </div>
                            {{/each}}
                        </div>
                    </div>
                </div>

                <!-- Save Button -->
                <div class="d-grid">
                    <button type="submit" class="btn btn-primary btn-lg">
                        <i class="fas fa-save"></i> Save Changes
                    </button>
                </div>
            </div>
        </div>
    </form>
</div>

<script>
document.getElementById('editHotelForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    try {
        const formData = new FormData(e.target);
        
        const response = await fetch(`/api/admin/hotels/${hotelId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            credentials: 'include',
            body: JSON.stringify(Object.fromEntries(formData))
        });

        if (!response.ok) {
            throw new Error('Failed to update hotel');
        }

        window.location.href = `/admin/hotels/${hotelId}`;
    } catch (error) {
        alert('Error updating hotel: ' + error.message);
    }
});

function addAmenity() {
    const amenityInput = document.getElementById('amenity');
    const amenity = amenityInput.value.trim();
    
    if (!amenity) return;
    
    const amenitiesList = document.getElementById('amenitiesList');
    const badge = document.createElement('div');
    badge.className = 'badge bg-info mb-1 me-1';
    badge.innerHTML = `
        ${amenity}
        <button type="button" class="btn-close btn-close-white" onclick="removeAmenity(this)"></button>
        <input type="hidden" name="amenities[]" value="${amenity}">
    `;
    
    amenitiesList.appendChild(badge);
    amenityInput.value = '';
}

function removeAmenity(button) {
    button.closest('.badge').remove();
}

function removeImage(index) {
    if (!confirm('Are you sure you want to remove this image?')) return;
    
    // Here you would typically make an API call to remove the image
    // For now, just hide the image container
    const imageContainer = event.target.closest('.col-md-4');
    imageContainer.remove();
}
</script>

================
File: src/views/hotels/list.hbs
================
<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>{{title}}</h2>
        {{#if isAdmin}}
        <a href="/admin/hotels/add" class="btn btn-primary">
            <i class="fas fa-plus"></i> Add New Hotel
        </a>
        {{/if}}
    </div>

    {{#if hotels.length}}
    {{#if isAdmin}}
    <!-- Admin View -->
    <div class="table-responsive">
        <table class="table table-hover">
            <thead class="table-light">
                <tr>
                    <th>Name</th>
                    <th>Location</th>
                    <th>Owner</th>
                    <th>Price/Night</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                {{#each hotels}}
                <tr>
                    <td>
                        <div class="d-flex align-items-center">
                            {{#if images.[0]}}
                            <img src="{{images.[0]}}" alt="{{name}}" class="img-thumbnail me-2" style="width: 50px; height: 50px; object-fit: cover;">
                            {{else}}
                            <div class="bg-secondary me-2" style="width: 50px; height: 50px;"></div>
                            {{/if}}
                            <div>
                                <strong>{{name}}</strong>
                                <div class="small text-muted">{{description}}</div>
                            </div>
                        </div>
                    </td>
                    <td>{{location}}</td>
                    <td>
                        <div>{{owner.name}}</div>
                        <div class="small text-muted">{{owner.email}}</div>
                    </td>
                    <td>${{pricePerNight}}</td>
                    <td>
                        <span class="badge {{#if isActive}}bg-success{{else}}bg-danger{{/if}}">
                            {{#if isActive}}Active{{else}}Inactive{{/if}}
                        </span>
                    </td>
                    <td>
                        <div class="btn-group">
                            <button type="button" class="btn btn-sm btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown">
                                Actions
                            </button>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item" href="/admin/hotels/{{_id}}">View Details</a></li>
                                <li><a class="dropdown-item" href="/admin/hotels/{{_id}}/edit">Edit</a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li>
                                    <button class="dropdown-item text-danger" 
                                            onclick="toggleHotelStatus('{{_id}}', {{isActive}})">
                                        {{#if isActive}}Deactivate{{else}}Activate{{/if}}
                                    </button>
                                </li>
                            </ul>
                        </div>
                    </td>
                </tr>
                {{/each}}
            </tbody>
        </table>
    </div>
    {{else}}
    <!-- Public View -->
    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
        {{#each hotels}}
        <div class="col">
            <div class="card h-100 shadow-sm">
                {{#if images.[0]}}
                <img src="{{images.[0]}}" class="card-img-top" alt="{{name}}" style="height: 200px; object-fit: cover;">
                {{else}}
                <div class="bg-secondary" style="height: 200px;"></div>
                {{/if}}
                <div class="card-body">
                    <h5 class="card-title">{{name}}</h5>
                    <p class="card-text text-muted">{{location}}</p>
                    <p class="card-text">{{description}}</p>
                    <div class="d-flex justify-content-between align-items-center">
                        <span class="h5 mb-0">${{pricePerNight}}/night</span>
                        <a href="/admin/hotels/{{_id}}" class="btn btn-primary">View Details</a>
                    </div>
                </div>
            </div>
        </div>
        {{/each}}
    </div>
    {{/if}}
    {{else}}
    <div class="alert alert-info">
        <i class="fas fa-info-circle me-2"></i>
        No hotels found{{#if isAdmin}}. Click "Add New Hotel" to create one{{/if}}.
    </div>
    {{/if}}
</div>

{{#if isAdmin}}
<script>
async function toggleHotelStatus(hotelId, currentStatus) {
    if (!confirm(`Are you sure you want to ${currentStatus ? 'deactivate' : 'activate'} this hotel?`)) {
        return;
    }

    try {
        const response = await fetch(`/api/admin/hotels/${hotelId}/toggle-status`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json'
            },
            credentials: 'include'
        });

        if (!response.ok) {
            throw new Error('Failed to update hotel status');
        }

        // Reload the page to show updated status
        window.location.reload();
    } catch (error) {
        alert('Error updating hotel status: ' + error.message);
    }
}
</script>
{{/if}}

================
File: src/views/hotels/view.hbs
================
<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>{{hotel.name}}</h2>
        <div>
            <a href="/admin/hotels" class="btn btn-outline-secondary me-2">
                <i class="fas fa-arrow-left"></i> Back to List
            </a>
            <a href="/admin/hotels/{{hotel._id}}/edit" class="btn btn-primary">
                <i class="fas fa-edit"></i> Edit Hotel
            </a>
        </div>
    </div>

    <div class="row">
        <!-- Hotel Images -->
        <div class="col-md-6 mb-4">
            {{#if hotel.images.length}}
            <div id="hotelImages" class="carousel slide" data-bs-ride="carousel">
                <div class="carousel-inner">
                    {{#each hotel.images}}
                    <div class="carousel-item {{#if @first}}active{{/if}}">
                        <img src="{{this}}" class="d-block w-100" alt="Hotel Image" style="height: 400px; object-fit: cover;">
                    </div>
                    {{/each}}
                </div>
                {{#if hotel.images.[1]}}
                <button class="carousel-control-prev" type="button" data-bs-target="#hotelImages" data-bs-slide="prev">
                    <span class="carousel-control-prev-icon"></span>
                </button>
                <button class="carousel-control-next" type="button" data-bs-target="#hotelImages" data-bs-slide="next">
                    <span class="carousel-control-next-icon"></span>
                </button>
                {{/if}}
            </div>
            {{else}}
            <div class="bg-secondary w-100" style="height: 400px;"></div>
            {{/if}}
        </div>

        <!-- Hotel Details -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Hotel Information</h5>
                    <div class="mb-3">
                        <strong>Status:</strong>
                        <span class="badge {{#if hotel.isActive}}bg-success{{else}}bg-danger{{/if}} ms-2">
                            {{#if hotel.isActive}}Active{{else}}Inactive{{/if}}
                        </span>
                    </div>
                    <div class="mb-3">
                        <strong>Location:</strong>
                        <p class="mb-1">{{hotel.location}}</p>
                    </div>
                    <div class="mb-3">
                        <strong>Price per Night:</strong>
                        <p class="mb-1">${{hotel.pricePerNight}}</p>
                    </div>
                    <div class="mb-3">
                        <strong>Owner:</strong>
                        <p class="mb-1">{{hotel.owner.name}} ({{hotel.owner.email}})</p>
                    </div>
                    <div class="mb-3">
                        <strong>Description:</strong>
                        <p class="mb-1">{{hotel.description}}</p>
                    </div>
                </div>
            </div>

            <!-- Address Details -->
            <div class="card mt-4">
                <div class="card-body">
                    <h5 class="card-title">Address Details</h5>
                    <div class="mb-2">
                        {{#if hotel.address.street}}<p class="mb-1">{{hotel.address.street}}</p>{{/if}}
                        <p class="mb-1">
                            {{hotel.address.city}}{{#if hotel.address.state}}, {{hotel.address.state}}{{/if}}
                            {{#if hotel.address.zipCode}} - {{hotel.address.zipCode}}{{/if}}
                        </p>
                        <p class="mb-1">{{hotel.address.country}}</p>
                    </div>
                </div>
            </div>

            <!-- Amenities -->
            {{#if hotel.amenities.length}}
            <div class="card mt-4">
                <div class="card-body">
                    <h5 class="card-title">Amenities</h5>
                    <div class="row g-2">
                        {{#each hotel.amenities}}
                        <div class="col-auto">
                            <span class="badge bg-info">{{this}}</span>
                        </div>
                        {{/each}}
                    </div>
                </div>
            </div>
            {{/if}}
        </div>
    </div>

    <!-- Rooms Section -->
    {{#if hotel.rooms.length}}
    <div class="mt-5">
        <h3>Rooms</h3>
        <div class="table-responsive">
            <table class="table table-hover">
                <thead class="table-light">
                    <tr>
                        <th>Type</th>
                        <th>Capacity</th>
                        <th>Price</th>
                        <th>Status</th>
                        <th>Amenities</th>
                    </tr>
                </thead>
                <tbody>
                    {{#each hotel.rooms}}
                    <tr>
                        <td>{{type}}</td>
                        <td>{{capacity}} persons</td>
                        <td>${{price}}</td>
                        <td>
                            <span class="badge {{#if available}}bg-success{{else}}bg-danger{{/if}}">
                                {{#if available}}Available{{else}}Occupied{{/if}}
                            </span>
                        </td>
                        <td>
                            {{#each amenities}}
                            <span class="badge bg-info me-1">{{this}}</span>
                            {{/each}}
                        </td>
                    </tr>
                    {{/each}}
                </tbody>
            </table>
        </div>
    </div>
    {{/if}}
</div>

================
File: src/views/index.hbs
================
<div class="container mt-5">
    <div class="row mt-5">
        <div class="col-12">
            <h1 class="display-4 text-center">Welcome to Hotel Management System</h1>
            <p class="lead text-center">Your one-stop solution for hotel management and booking</p>
        </div>
        <div class="col-12">
            <h2 class="text-center mb-4">Our Featured Hotels</h2>
        </div>
        {{#each featuredHotels}}
        <div class="col-md-4 mb-4">
            <div class="card h-100">
                <img src="{{imageUrl}}" class="card-img-top" alt="{{name}}" onerror="this.src='/images/hotel-placeholder.jpg'">
                <div class="card-body">
                    <h5 class="card-title">{{name}}</h5>
                    <p class="card-text">{{description}}</p>
                    <div class="d-flex justify-content-between align-items-center">
                        <span class="text-primary">Starting from ${{startingPrice}}</span>
                        <a href="/hotels/{{_id}}" class="btn btn-outline-primary">View Details</a>
                    </div>
                </div>
            </div>
        </div>
        {{/each}}
    </div>

    <div class="row mt-5">
        <div class="col-md-8 offset-md-2">
            <div class="card">
                <div class="card-body">
                    <h3 class="card-title text-center mb-4">Find Your Perfect Stay</h3>
                    <form action="/search" method="GET">
                        <div class="row g-3">
                            <div class="col-md-6">
                                <label class="form-label">Check-in Date</label>
                                <input type="date" class="form-control" name="checkIn" required>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Check-out Date</label>
                                <input type="date" class="form-control" name="checkOut" required>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Guests</label>
                                <select class="form-select" name="guests" required>
                                    <option value="1">1 Guest</option>
                                    <option value="2">2 Guests</option>
                                    <option value="3">3 Guests</option>
                                    <option value="4">4 Guests</option>
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Room Type</label>
                                <select class="form-select" name="roomType">
                                    <option value="">Any Type</option>
                                    <option value="standard">Standard</option>
                                    <option value="deluxe">Deluxe</option>
                                    <option value="suite">Suite</option>
                                </select>
                            </div>
                            <div class="col-12 text-center">
                                <button type="submit" class="btn btn-primary btn-lg px-5">Search</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-5">
        <div class="col-12 text-center">
            <h2 class="mb-4">Why Choose Us</h2>
        </div>
        <div class="col-md-4 mb-4">
            <div class="text-center">
                <i class="fas fa-hotel fa-3x text-primary mb-3"></i>
                <h4>Best Hotels</h4>
                <p>Carefully selected hotels that meet our high standards of quality and service.</p>
            </div>
        </div>
        <div class="col-md-4 mb-4">
            <div class="text-center">
                <i class="fas fa-tag fa-3x text-primary mb-3"></i>
                <h4>Best Prices</h4>
                <p>Get the best deals and competitive prices for your stay.</p>
            </div>
        </div>
        <div class="col-md-4 mb-4">
            <div class="text-center">
                <i class="fas fa-headset fa-3x text-primary mb-3"></i>
                <h4>24/7 Support</h4>
                <p>Our support team is always available to help you with any queries.</p>
            </div>
        </div>
    </div>

    <div class="row mt-5 mb-5">
        <div class="col-md-6 offset-md-3">
            <div class="card bg-light">
                <div class="card-body text-center">
                    <h3>Subscribe to Our Newsletter</h3>
                    <p>Get the latest updates and special offers delivered directly to your inbox.</p>
                    <form class="row g-3" id="newsletterForm">
                        <div class="col-8">
                            <input type="email" class="form-control" placeholder="Enter your email">
                        </div>
                        <div class="col-4">
                            <button type="submit" class="btn btn-primary w-100">Subscribe</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

================
File: src/views/layouts/admin.hbs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{title}} - Hotel Admin</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    
    <!-- Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    
    <!-- Custom CSS -->
    <style>
        /* Admin Layout Styles */
        body {
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .wrapper {
            display: flex;
            width: 100%;
            align-items: stretch;
            flex: 1;
        }

        /* Main Content Styles */
        .main-content {
            width: calc(100% - 250px);
            min-height: 100vh;
            margin-left: 250px;
            transition: all 0.3s;
            background: #f8f9fa;
            padding: 20px;
            display: flex;
            flex-direction: column;
        }

        /* Card Styles */
        .card {
            border: none;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }

        .card-header {
            background-color: #fff;
            border-bottom: 1px solid #eee;
        }

        /* Avatar Styles */
        .avatar {
            width: 45px;
            height: 45px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 8px;
        }

        .bg-light-primary {
            background-color: rgba(13, 110, 253, 0.1);
        }

        .bg-light-success {
            background-color: rgba(25, 135, 84, 0.1);
        }

        .bg-light-info {
            background-color: rgba(13, 202, 240, 0.1);
        }

        .bg-light-warning {
            background-color: rgba(255, 193, 7, 0.1);
        }

        /* Table Styles */
        .table {
            margin-bottom: 0;
        }

        .table th {
            border-top: none;
            font-weight: 600;
        }

        /* Form Controls */
        .form-control:focus, .form-select:focus {
            border-color: #3498db;
            box-shadow: 0 0 0 0.25rem rgba(52, 152, 219, 0.25);
        }

        /* Button Styles */
        .btn-primary {
            background-color: #3498db;
            border-color: #3498db;
        }

        .btn-primary:hover {
            background-color: #2980b9;
            border-color: #2980b9;
        }

        /* Custom Scrollbar */
        ::-webkit-scrollbar {
            width: 5px;
        }

        ::-webkit-scrollbar-track {
            background: #f1f1f1;
        }

        ::-webkit-scrollbar-thumb {
            background: #888;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: #555;
        }

        /* Responsive Styles */
        @media (max-width: 768px) {
            .main-content {
                width: 100%;
                margin-left: 0;
            }
            .sidebar {
                margin-left: -250px;
            }
            .sidebar.active {
                margin-left: 0;
            }
            .main-content.active {
                margin-left: 250px;
                width: calc(100% - 250px);
            }
        }
    </style>
</head>
<body class="bg-light">
    <div class="wrapper">
        <!-- Sidebar -->
        {{> admin/sidebar}}

        <!-- Main Content -->
        <div class="main-content">
            <!-- Header -->
            {{> admin/header}}

            <!-- Page Content -->
            {{{body}}}

            <!-- Footer -->
            {{> admin/footer}}
        </div>
    </div>

    <!-- Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    
    <!-- Custom JavaScript -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Toggle Sidebar
            const sidebarToggle = document.getElementById('sidebarToggle');
            if (sidebarToggle) {
                sidebarToggle.addEventListener('click', function() {
                    document.getElementById('sidebar').classList.toggle('active');
                    document.querySelector('.main-content').classList.toggle('active');
                });
            }

            // Initialize tooltips
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });

            // Initialize popovers
            var popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
            var popoverList = popoverTriggerList.map(function (popoverTriggerEl) {
                return new bootstrap.Popover(popoverTriggerEl);
            });
        });
    </script>
</body>
</html>

================
File: src/views/layouts/auth.hbs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{title}} - Hotel Booking</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <!-- Custom CSS -->
    <style>
        body {
            background-color: #f8f9fa;
        }
        .navbar-brand {
            font-weight: bold;
        }
        .footer {
            margin-top: 3rem;
            padding: 1rem 0;
            background-color: #f8f9fa;
            border-top: 1px solid #dee2e6;
        }
    </style>
    <link href="/css/style.css" rel="stylesheet">
    {{{_sections.styles}}}
</head>
<body>
    <div class="container mt-4">
        {{{body}}}
    </div>

    <footer class="footer">
        <div class="container text-center">
            <span class="text-muted">© 2025 Hotel Booking. All rights reserved.</span>
        </div>
    </footer>

    <!-- Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <!-- Custom Scripts -->
    <script src="/js/main.js"></script>
    {{{_sections.scripts}}}
</body>
</html>

================
File: src/views/layouts/main.hbs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{title}} - Hotel Booking</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <!-- Custom CSS -->
    <style>
        .navbar-brand {
            font-weight: bold;
        }
        .table img {
            object-fit: cover;
        }
        .footer {
            margin-top: 3rem;
            padding: 1rem 0;
            background-color: #f8f9fa;
            border-top: 1px solid #dee2e6;
        }
    </style>
    <link href="/css/style.css" rel="stylesheet">
    {{{_sections.styles}}}
</head>
<body>
    {{> navbar}}
    
    <div class="container mt-4">
        {{{body}}}
    </div>

    <footer class="footer">
        <div class="container text-center">
            <span class="text-muted"> 2025 Hotel Booking. All rights reserved.</span>
        </div>
    </footer>

    <!-- Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <!-- Custom Scripts -->
    <script src="/js/main.js"></script>
    {{{_sections.scripts}}}
</body>
</html>

================
File: src/views/maintenance/my-requests.hbs
================
{{#if activeBooking}}
<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h4>My Maintenance Requests</h4>
        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#newRequestModal">
            <i class="fas fa-plus me-2"></i>New Request
        </button>
    </div>

    {{#if requests.length}}
    <div class="card">
        <div class="table-responsive">
            <table class="table table-hover align-middle mb-0">
                <thead class="bg-light">
                    <tr>
                        <th>ID</th>
                        <th>Type</th>
                        <th>Description</th>
                        <th>Status</th>
                        <th>Created</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {{#each requests}}
                    <tr>
                        <td>#{{this._id}}</td>
                        <td>
                            <span class="badge bg-{{serviceTypeColor this.serviceType}}">
                                {{formatServiceType this.serviceType}}
                            </span>
                        </td>
                        <td>{{this.description}}</td>
                        <td>
                            <span class="badge bg-{{statusColor this.status}}">
                                {{this.status}}
                            </span>
                        </td>
                        <td>{{formatDate this.createdAt}}</td>
                        <td>
                            <button class="btn btn-sm btn-info me-2" onclick="viewRequest('{{this._id}}')">
                                <i class="fas fa-eye"></i>
                            </button>
                            {{#if (eq this.status "pending")}}
                            <button class="btn btn-sm btn-danger" onclick="cancelRequest('{{this._id}}')">
                                <i class="fas fa-times"></i>
                            </button>
                            {{/if}}
                        </td>
                    </tr>
                    {{/each}}
                </tbody>
            </table>
        </div>
    </div>

    {{#if pagination.totalPages}}
    <nav class="mt-4">
        <ul class="pagination justify-content-center">
            {{#if pagination.hasPrev}}
            <li class="page-item">
                <a class="page-link" href="?page={{subtract pagination.page 1}}">Previous</a>
            </li>
            {{/if}}
            {{#if pagination.hasNext}}
            <li class="page-item">
                <a class="page-link" href="?page={{add pagination.page 1}}">Next</a>
            </li>
            {{/if}}
        </ul>
    </nav>
    {{/if}}

    {{else}}
    <div class="alert alert-info">
        No maintenance requests found. Create a new request using the button above.
    </div>
    {{/if}}
</div>

<!-- New Request Modal -->
<div class="modal fade" id="newRequestModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">New Maintenance Request</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="newRequestForm">
                    <div class="mb-3">
                        <label class="form-label">Service Type</label>
                        <select name="serviceType" class="form-select" required>
                            <option value="guest-request">Guest Request</option>
                            <option value="housekeeping">Housekeeping</option>
                            <option value="maintenance">Maintenance</option>
                            <option value="emergency">Emergency</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Priority</label>
                        <select name="priority" class="form-select" required>
                            <option value="low">Low</option>
                            <option value="medium">Medium</option>
                            <option value="high">High</option>
                            <option value="urgent">Urgent</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea name="description" class="form-control" rows="3" required></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="createRequest()">Submit</button>
            </div>
        </div>
    </div>
</div>

<!-- View Request Modal -->
<div class="modal fade" id="viewRequestModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Request Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div id="requestDetails"></div>
            </div>
        </div>
    </div>
</div>

{{else}}
<div class="container py-4">
    <div class="alert alert-warning">
        You must be checked in to create or view maintenance requests.
    </div>
</div>
{{/if}}

<script>
let currentRequestId = null;

async function createRequest() {
    const form = document.getElementById('newRequestForm');
    const formData = new FormData(form);
    const data = Object.fromEntries(formData);

    try {
        const response = await fetch('/maintenance/request', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });

        const result = await response.json();
        if (result.success) {
            location.reload();
        } else {
            alert(result.message || 'Error creating request');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error creating request');
    }
}

async function viewRequest(id) {
    try {
        const response = await fetch(`/maintenance/request/${id}`);
        const result = await response.json();
        
        if (result.success) {
            const request = result.data;
            const details = `
                <dl class="row">
                    <dt class="col-sm-4">Service Type</dt>
                    <dd class="col-sm-8">${request.serviceType}</dd>
                    
                    <dt class="col-sm-4">Priority</dt>
                    <dd class="col-sm-8">${request.priority}</dd>
                    
                    <dt class="col-sm-4">Status</dt>
                    <dd class="col-sm-8">${request.status}</dd>
                    
                    <dt class="col-sm-4">Description</dt>
                    <dd class="col-sm-8">${request.description}</dd>
                    
                    <dt class="col-sm-4">Created</dt>
                    <dd class="col-sm-8">${new Date(request.createdAt).toLocaleString()}</dd>
                </dl>
            `;
            
            document.getElementById('requestDetails').innerHTML = details;
            new bootstrap.Modal(document.getElementById('viewRequestModal')).show();
        } else {
            alert(result.message || 'Error fetching request details');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error fetching request details');
    }
}

async function cancelRequest(id) {
    if (!confirm('Are you sure you want to cancel this request?')) return;

    try {
        const response = await fetch(`/maintenance/request/${id}/cancel`, {
            method: 'PATCH'
        });
        
        const result = await response.json();
        if (result.success) {
            location.reload();
        } else {
            alert(result.message || 'Error cancelling request');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error cancelling request');
    }
}
</script>

================
File: src/views/partials/admin-nav.ejs
================
<!-- Top Navigation Bar -->
<nav class="bg-white shadow-sm">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between h-16">
            <div class="flex">
                <!-- Logo -->
                <div class="flex-shrink-0 flex items-center">
                    <a href="/admin/dashboard">
                        <img class="h-8 w-auto" src="/images/logo.png" alt="Hotel Management">
                    </a>
                </div>

                <!-- Primary Navigation -->
                <div class="hidden sm:ml-6 sm:flex sm:space-x-8">
                    <a href="/admin/dashboard" 
                       class="<%= path === '/admin/dashboard' ? 'border-indigo-500 text-gray-900' : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700' %> inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium">
                        Dashboard
                    </a>
                    
                    <!-- Bookings Dropdown -->
                    <div class="relative" x-data="{ open: false }">
                        <button @click="open = !open" @click.away="open = false" class="inline-flex items-center px-1 pt-1 text-sm font-medium text-gray-500 hover:text-gray-700">
                            <span>Bookings</span>
                            <svg class="ml-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                            </svg>
                        </button>
                        <div x-show="open" 
                             x-transition:enter="transition ease-out duration-100"
                             x-transition:enter-start="transform opacity-0 scale-95"
                             x-transition:enter-end="transform opacity-100 scale-100"
                             x-transition:leave="transition ease-in duration-75"
                             x-transition:leave-start="transform opacity-100 scale-100"
                             x-transition:leave-end="transform opacity-0 scale-95"
                             class="absolute z-10 mt-3 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5">
                            <div class="py-1">
                                <a href="/admin/bookings" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">All Bookings</a>
                                <a href="/admin/bookings/new" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">New Booking</a>
                                <a href="/admin/check-in" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Check-in</a>
                                <a href="/admin/check-out" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Check-out</a>
                            </div>
                        </div>
                    </div>

                    <!-- Hotels & Rooms -->
                    <div class="relative" x-data="{ open: false }">
                        <button @click="open = !open" @click.away="open = false" class="inline-flex items-center px-1 pt-1 text-sm font-medium text-gray-500 hover:text-gray-700">
                            <span>Properties</span>
                            <svg class="ml-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                            </svg>
                        </button>
                        <div x-show="open" 
                             x-transition:enter="transition ease-out duration-100"
                             x-transition:enter-start="transform opacity-0 scale-95"
                             x-transition:enter-end="transform opacity-100 scale-100"
                             x-transition:leave="transition ease-in duration-75"
                             x-transition:leave-start="transform opacity-100 scale-100"
                             x-transition:leave-end="transform opacity-0 scale-95"
                             class="absolute z-10 mt-3 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5">
                            <div class="py-1">
                                <a href="/admin/hotels" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Hotels</a>
                                <a href="/admin/rooms" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Rooms</a>
                                <a href="/admin/room-types" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Room Types</a>
                                <a href="/admin/amenities" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Amenities</a>
                            </div>
                        </div>
                    </div>

                    <!-- Guests & Loyalty -->
                    <div class="relative" x-data="{ open: false }">
                        <button @click="open = !open" @click.away="open = false" class="inline-flex items-center px-1 pt-1 text-sm font-medium text-gray-500 hover:text-gray-700">
                            <span>Guests</span>
                            <svg class="ml-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                            </svg>
                        </button>
                        <div x-show="open" 
                             x-transition:enter="transition ease-out duration-100"
                             x-transition:enter-start="transform opacity-0 scale-95"
                             x-transition:enter-end="transform opacity-100 scale-100"
                             x-transition:leave="transition ease-in duration-75"
                             x-transition:leave-start="transform opacity-100 scale-100"
                             x-transition:leave-end="transform opacity-0 scale-95"
                             class="absolute z-10 mt-3 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5">
                            <div class="py-1">
                                <a href="/admin/guests" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">All Guests</a>
                                <a href="/admin/guests/new" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">New Guest</a>
                                <div class="border-t border-gray-100"></div>
                                <a href="/admin/loyalty" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Loyalty Program</a>
                                <a href="/admin/loyalty/rewards" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Rewards Catalog</a>
                                <a href="/admin/loyalty/referrals" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Referral Program</a>
                            </div>
                        </div>
                    </div>

                    <!-- Operations -->
                    <div class="relative" x-data="{ open: false }">
                        <button @click="open = !open" @click.away="open = false" class="inline-flex items-center px-1 pt-1 text-sm font-medium text-gray-500 hover:text-gray-700">
                            <span>Operations</span>
                            <svg class="ml-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                            </svg>
                        </button>
                        <div x-show="open" 
                             x-transition:enter="transition ease-out duration-100"
                             x-transition:enter-start="transform opacity-0 scale-95"
                             x-transition:enter-end="transform opacity-100 scale-100"
                             x-transition:leave="transition ease-in duration-75"
                             x-transition:leave-start="transform opacity-100 scale-100"
                             x-transition:leave-end="transform opacity-0 scale-95"
                             class="absolute z-10 mt-3 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5">
                            <div class="py-1">
                                <a href="/admin/inventory" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Inventory</a>
                                <a href="/admin/maintenance" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Maintenance</a>
                                <a href="/admin/housekeeping" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Housekeeping</a>
                                <div class="border-t border-gray-100"></div>
                                <a href="/admin/suppliers" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Suppliers</a>
                                <a href="/admin/staff" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Staff</a>
                            </div>
                        </div>
                    </div>

                    <!-- Finance -->
                    <div class="relative" x-data="{ open: false }">
                        <button @click="open = !open" @click.away="open = false" class="inline-flex items-center px-1 pt-1 text-sm font-medium text-gray-500 hover:text-gray-700">
                            <span>Finance</span>
                            <svg class="ml-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                            </svg>
                        </button>
                        <div x-show="open" 
                             x-transition:enter="transition ease-out duration-100"
                             x-transition:enter-start="transform opacity-0 scale-95"
                             x-transition:enter-end="transform opacity-100 scale-100"
                             x-transition:leave="transition ease-in duration-75"
                             x-transition:leave-start="transform opacity-100 scale-100"
                             x-transition:leave-end="transform opacity-0 scale-95"
                             class="absolute z-10 mt-3 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5">
                            <div class="py-1">
                                <a href="/admin/invoices" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Invoices</a>
                                <a href="/admin/transactions" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Transactions</a>
                                <a href="/admin/reports/financial" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Financial Reports</a>
                            </div>
                        </div>
                    </div>

                    <!-- Reports -->
                    <div class="relative" x-data="{ open: false }">
                        <button @click="open = !open" @click.away="open = false" class="inline-flex items-center px-1 pt-1 text-sm font-medium text-gray-500 hover:text-gray-700">
                            <span>Reports</span>
                            <svg class="ml-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                            </svg>
                        </button>
                        <div x-show="open" 
                             x-transition:enter="transition ease-out duration-100"
                             x-transition:enter-start="transform opacity-0 scale-95"
                             x-transition:enter-end="transform opacity-100 scale-100"
                             x-transition:leave="transition ease-in duration-75"
                             x-transition:leave-start="transform opacity-100 scale-100"
                             x-transition:leave-end="transform opacity-0 scale-95"
                             class="absolute z-10 mt-3 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5">
                            <div class="py-1">
                                <a href="/admin/reports/occupancy" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Occupancy</a>
                                <a href="/admin/reports/revenue" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Revenue</a>
                                <a href="/admin/reports/guest" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Guest Analytics</a>
                                <a href="/admin/reports/loyalty" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Loyalty Program</a>
                                <a href="/admin/reports/inventory" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Inventory</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Right side -->
            <div class="hidden sm:ml-6 sm:flex sm:items-center">
                <!-- Notifications -->
                <button class="p-1 rounded-full text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                    <span class="sr-only">View notifications</span>
                    <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9" />
                    </svg>
                </button>

                <!-- Profile dropdown -->
                <div class="ml-3 relative" x-data="{ open: false }">
                    <div>
                        <button @click="open = !open" class="max-w-xs bg-white flex items-center text-sm rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500" id="user-menu-button">
                            <span class="sr-only">Open user menu</span>
                            <img class="h-8 w-8 rounded-full" src="<%= user.avatar || '/images/default-avatar.png' %>" alt="">
                        </button>
                    </div>
                    <div x-show="open" 
                         @click.away="open = false"
                         x-transition:enter="transition ease-out duration-100"
                         x-transition:enter-start="transform opacity-0 scale-95"
                         x-transition:enter-end="transform opacity-100 scale-100"
                         x-transition:leave="transition ease-in duration-75"
                         x-transition:leave-start="transform opacity-100 scale-100"
                         x-transition:leave-end="transform opacity-0 scale-95"
                         class="origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg py-1 bg-white ring-1 ring-black ring-opacity-5 focus:outline-none">
                        <a href="/admin/profile" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Your Profile</a>
                        <a href="/admin/settings" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Settings</a>
                        <form action="/auth/logout" method="POST">
                            <button type="submit" class="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Sign out</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</nav>

================
File: src/views/partials/admin/footer.hbs
================
<!-- Footer -->
<footer class="sticky-footer bg-white border-top">
    <div class="container-fluid py-4">
        <div class="row">
            <!-- Quick Links -->
            <div class="col-lg-3 col-md-6 mb-4 mb-lg-0">
                <h6 class="text-uppercase mb-3">Quick Links</h6>
                <ul class="list-unstyled mb-0">
                    <li class="mb-2">
                        <a href="/admin/dashboard" class="text-muted">Dashboard</a>
                    </li>
                    <li class="mb-2">
                        <a href="/admin/bookings/calendar" class="text-muted">Calendar</a>
                    </li>
                    <li class="mb-2">
                        <a href="/admin/reports" class="text-muted">Reports</a>
                    </li>
                    <li class="mb-2">
                        <a href="/admin/settings/hotel" class="text-muted">Settings</a>
                    </li>
                </ul>
            </div>

            <!-- Support -->
            <div class="col-lg-3 col-md-6 mb-4 mb-lg-0">
                <h6 class="text-uppercase mb-3">Support</h6>
                <ul class="list-unstyled mb-0">
                    <li class="mb-2">
                        <a href="/admin/help" class="text-muted">Help Center</a>
                    </li>
                    <li class="mb-2">
                        <a href="/admin/documentation" class="text-muted">Documentation</a>
                    </li>
                    <li class="mb-2">
                        <a href="/admin/contact-support" class="text-muted">Contact Support</a>
                    </li>
                    <li class="mb-2">
                        <a href="/admin/updates" class="text-muted">System Updates</a>
                    </li>
                </ul>
            </div>

            <!-- Stats Summary -->
            <div class="col-lg-3 col-md-6 mb-4 mb-lg-0">
                <h6 class="text-uppercase mb-3">Today's Summary</h6>
                <ul class="list-unstyled mb-0">
                    <li class="mb-2 text-muted">
                        <i class="fas fa-users me-2"></i>Active Guests: {{stats.activeGuests}}
                    </li>
                    <li class="mb-2 text-muted">
                        <i class="fas fa-calendar-check me-2"></i>Check-ins: {{stats.checkIns}}
                    </li>
                    <li class="mb-2 text-muted">
                        <i class="fas fa-calendar-times me-2"></i>Check-outs: {{stats.checkOuts}}
                    </li>
                    <li class="mb-2 text-muted">
                        <i class="fas fa-bed me-2"></i>Available Rooms: {{stats.availableRooms}}
                    </li>
                </ul>
            </div>

            <!-- System Info -->
            <div class="col-lg-3 col-md-6">
                <h6 class="text-uppercase mb-3">System Info</h6>
                <ul class="list-unstyled mb-0">
                    <li class="mb-2 text-muted">
                        <i class="fas fa-code-branch me-2"></i>Version: {{systemInfo.version}}
                    </li>
                    <li class="mb-2 text-muted">
                        <i class="fas fa-clock me-2"></i>Last Update: {{formatDate systemInfo.lastUpdate}}
                    </li>
                    <li class="mb-2 text-muted">
                        <i class="fas fa-server me-2"></i>Server Status: 
                        <span class="badge bg-success">Online</span>
                    </li>
                    <li class="mb-2">
                        <a href="/admin/system-status" class="text-primary">
                            <i class="fas fa-info-circle me-2"></i>View System Status
                        </a>
                    </li>
                </ul>
            </div>
        </div>

        <hr class="my-4">

        <!-- Bottom Footer -->
        <div class="row align-items-center">
            <div class="col-md-6 small">
                <span class="text-muted">Copyright &copy; Hotel Management System {{formatDate now 'YYYY'}}</span>
            </div>
            <div class="col-md-6 text-md-end small">
                <a href="/privacy-policy" class="text-muted me-3">Privacy Policy</a>
                <a href="/terms-of-service" class="text-muted">Terms of Service</a>
            </div>
        </div>
    </div>
</footer>

<!-- Scroll to Top Button-->
<a class="scroll-to-top rounded" href="#page-top">
    <i class="fas fa-angle-up"></i>
</a>

<!-- Logout Modal-->
<div class="modal fade" id="logoutModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Ready to Leave?</h5>
                <button class="btn-close" type="button" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">Select "Logout" below if you are ready to end your current session.</div>
            <div class="modal-footer">
                <button class="btn btn-secondary" type="button" data-bs-dismiss="modal">Cancel</button>
                <button class="btn btn-primary" onclick="handleLogout(event)">Logout</button>
            </div>
        </div>
    </div>
</div>

<style>
/* Footer Styles */
.sticky-footer {
    padding: 0;
    flex-shrink: 0;
    margin-top: auto;
    background-color: #fff;
}

.sticky-footer h6 {
    font-size: 0.875rem;
    font-weight: 600;
    color: #2c3e50;
}

.sticky-footer a {
    text-decoration: none;
    transition: color 0.2s ease;
}

.sticky-footer a:hover {
    color: #3498db !important;
}

/* Scroll to Top Button */
.scroll-to-top {
    position: fixed;
    right: 1rem;
    bottom: 1rem;
    display: none;
    width: 2.75rem;
    height: 2.75rem;
    text-align: center;
    color: #fff;
    background: rgba(52, 152, 219, 0.5);
    line-height: 46px;
    border-radius: 0.35rem;
    transition: all 0.3s ease-in-out;
    z-index: 1000;
}

.scroll-to-top:hover {
    background: rgba(52, 152, 219, 0.8);
    color: #fff;
    text-decoration: none;
}

.scroll-to-top i {
    font-weight: 800;
}

/* Stats Summary */
.stats-summary i {
    width: 20px;
    text-align: center;
}

/* System Info Badge */
.badge {
    padding: 0.35em 0.65em;
    font-size: 0.75em;
}

/* Responsive Adjustments */
@media (max-width: 768px) {
    .sticky-footer {
        text-align: center;
    }
    
    .text-md-end {
        text-align: center !important;
        margin-top: 1rem;
    }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Initialize tooltips
    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl);
    });

    // Initialize popovers
    var popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
    var popoverList = popoverTriggerList.map(function (popoverTriggerEl) {
        return new bootstrap.Popover(popoverTriggerEl);
    });

    // Scroll to top button visibility
    window.addEventListener('scroll', function() {
        var scrollToTop = document.querySelector('.scroll-to-top');
        if (window.pageYOffset > 100) {
            scrollToTop.style.display = 'block';
        } else {
            scrollToTop.style.display = 'none';
        }
    });

    // Smooth scroll to top
    document.querySelector('.scroll-to-top').addEventListener('click', function(e) {
        e.preventDefault();
        window.scrollTo({
            top: 0,
            behavior: 'smooth'
        });
    });

    // Update real-time stats
    function updateStats() {
        fetch('/api/admin/stats')
            .then(response => response.json())
            .then(data => {
                // Update stats in the footer
                Object.keys(data).forEach(key => {
                    const element = document.querySelector(`[data-stat="${key}"]`);
                    if (element) {
                        element.textContent = data[key];
                    }
                });
            })
            .catch(error => console.error('Error updating stats:', error));
    }

    // Update stats every 5 minutes
    setInterval(updateStats, 300000);
});
</script>

================
File: src/views/partials/admin/header.hbs
================
<!-- Top Navigation Bar -->
<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
        <!-- Sidebar Toggle -->
        <button id="sidebarToggle" class="btn btn-link text-light me-3">
            <i class="fas fa-bars"></i>
        </button>

        <!-- Brand -->
        <a class="navbar-brand" href="/admin/dashboard">
            <i class="fas fa-hotel me-2"></i>Hotel Admin
        </a>

        <!-- Search Bar -->
        <form class="d-none d-md-flex ms-4" style="flex: 0 1 500px;">
            <div class="input-group">
                <input type="search" class="form-control" placeholder="Search..." aria-label="Search">
                <button class="btn btn-outline-light" type="submit">
                    <i class="fas fa-search"></i>
                </button>
            </div>
        </form>

        <!-- Right Navigation -->
        <ul class="navbar-nav ms-auto">
            <!-- Quick Actions -->
            <li class="nav-item dropdown me-3">
                <a class="nav-link" href="#" id="quickActionsDropdown" role="button" data-bs-toggle="dropdown">
                    <i class="fas fa-bolt"></i>
                </a>
                <div class="dropdown-menu dropdown-menu-end">
                    <h6 class="dropdown-header">Quick Actions</h6>
                    <a class="dropdown-item" href="/admin/bookings/new">
                        <i class="fas fa-plus-circle me-2"></i>New Booking
                    </a>
                    <a class="dropdown-item" href="/admin/guests/new">
                        <i class="fas fa-user-plus me-2"></i>New Guest
                    </a>
                    <a class="dropdown-item" href="/admin/housekeeping/tasks/new">
                        <i class="fas fa-broom me-2"></i>New Housekeeping Task
                    </a>
                    <a class="dropdown-item" href="/admin/maintenance/new">
                        <i class="fas fa-tools me-2"></i>New Maintenance Request
                    </a>
                    <div class="dropdown-divider"></div>
                    <a class="dropdown-item" href="/admin/reports">
                        <i class="fas fa-chart-bar me-2"></i>View Reports
                    </a>
                </div>
            </li>

            <!-- Notifications -->
            <li class="nav-item dropdown me-3">
                <a class="nav-link" href="#" id="notificationsDropdown" role="button" data-bs-toggle="dropdown">
                    <i class="fas fa-bell"></i>
                    {{#if notifications.length}}
                        <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                            {{notifications.length}}
                        </span>
                    {{/if}}
                </a>
                <div class="dropdown-menu dropdown-menu-end" style="width: 300px;">
                    <h6 class="dropdown-header">Notifications</h6>
                    {{#if notifications.length}}
                        {{#each notifications}}
                            <a class="dropdown-item" href="{{this.link}}">
                                <div class="d-flex align-items-center">
                                    <div class="flex-shrink-0">
                                        <i class="{{this.icon}} fa-lg me-3"></i>
                                    </div>
                                    <div class="flex-grow-1">
                                        <div class="small text-muted">{{this.time}}</div>
                                        <div>{{this.message}}</div>
                                    </div>
                                </div>
                            </a>
                        {{/each}}
                        <div class="dropdown-divider"></div>
                        <a class="dropdown-item text-center small text-muted" href="/admin/notifications">
                            View all notifications
                        </a>
                    {{else}}
                        <div class="dropdown-item text-center text-muted">
                            No new notifications
                        </div>
                    {{/if}}
                </div>
            </li>

            <!-- User Menu -->
            <li class="nav-item dropdown">
                <a class="nav-link dropdown-toggle d-flex align-items-center" href="#" id="userDropdown" role="button" data-bs-toggle="dropdown">
                    {{#if user.avatar}}
                        <img src="{{user.avatar}}" class="rounded-circle me-2" width="32" height="32" alt="{{user.name}}">
                    {{else}}
                        <i class="fas fa-user-circle me-2"></i>
                    {{/if}}
                    <span>{{user.name}}</span>
                </a>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="/admin/profile">
                            <i class="fas fa-user-cog me-2"></i>Profile Settings
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="/admin/settings/hotel">
                            <i class="fas fa-hotel me-2"></i>Hotel Settings
                        </a>
                    </li>
                    <li><hr class="dropdown-divider"></li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="handleLogout(event)">
                            <i class="fas fa-sign-out-alt me-2"></i>Logout
                        </a>
                    </li>
                </ul>
            </li>
        </ul>
    </div>
</nav>

<!-- Breadcrumb & Page Title -->
<div class="bg-light border-bottom py-3 mb-4">
    <div class="container-fluid">
        <div class="row align-items-center">
            <div class="col">
                <!-- Breadcrumb -->
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb mb-0">
                        <li class="breadcrumb-item">
                            <a href="/admin/dashboard">
                                <i class="fas fa-home"></i>
                            </a>
                        </li>
                        {{#each breadcrumbs}}
                            {{#if this.link}}
                                <li class="breadcrumb-item">
                                    <a href="{{this.link}}">{{this.text}}</a>
                                </li>
                            {{else}}
                                <li class="breadcrumb-item active">{{this.text}}</li>
                            {{/if}}
                        {{/each}}
                    </ol>
                </nav>
            </div>
            
            <!-- Page Actions -->
            <div class="col-auto">
                <div class="btn-group" role="group">
                    {{#each pageActions}}
                        <a href="{{this.link}}" class="btn btn-{{this.style}} btn-sm">
                            <i class="{{this.icon}} me-1"></i>{{this.text}}
                        </a>
                    {{/each}}
                </div>
            </div>
        </div>

        <!-- Page Title -->
        <h1 class="h3 mt-2 mb-0">{{title}}</h1>
    </div>
</div>

<style>
/* Navbar Styles */
.navbar {
    padding: 0.5rem 1rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.navbar-dark {
    background-color: #2c3e50 !important;
}

/* Search Bar */
.navbar .form-control {
    background-color: rgba(255,255,255,0.1);
    border: none;
    color: #fff;
}

.navbar .form-control::placeholder {
    color: rgba(255,255,255,0.6);
}

.navbar .form-control:focus {
    background-color: rgba(255,255,255,0.2);
    box-shadow: none;
}

/* Notifications */
.dropdown-menu {
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
    border: none;
    padding: 0.5rem 0;
}

.dropdown-item {
    padding: 0.5rem 1rem;
}

.dropdown-item:hover {
    background-color: #f8f9fa;
}

.dropdown-item i {
    width: 1.25rem;
    text-align: center;
}

/* Breadcrumb Styles */
.breadcrumb {
    margin-bottom: 0;
    background: transparent;
}

.breadcrumb-item a {
    color: #6c757d;
    text-decoration: none;
}

.breadcrumb-item a:hover {
    color: #007bff;
}

/* Page Actions */
.btn-group .btn {
    padding: 0.375rem 0.75rem;
}

.btn-group .btn i {
    font-size: 0.875rem;
}

/* Responsive Adjustments */
@media (max-width: 768px) {
    .navbar form {
        display: none;
    }
    
    .breadcrumb {
        font-size: 0.875rem;
    }
    
    .h3 {
        font-size: 1.5rem;
    }
}
</style>

================
File: src/views/partials/admin/pagination.hbs
================
{{#if pagination}}
<nav aria-label="Page navigation">
    <ul class="pagination justify-content-center">
        {{#if pagination.hasPrevPage}}
        <li class="page-item">
            <a class="page-link" href="?page={{pagination.prevPage}}{{#if filters.source}}&source={{filters.source}}{{/if}}{{#if filters.status}}&status={{filters.status}}{{/if}}{{#if filters.startDate}}&startDate={{filters.startDate}}{{/if}}{{#if filters.endDate}}&endDate={{filters.endDate}}{{/if}}" aria-label="Previous">
                <span aria-hidden="true">&laquo;</span>
            </a>
        </li>
        {{else}}
        <li class="page-item disabled">
            <span class="page-link" aria-label="Previous">
                <span aria-hidden="true">&laquo;</span>
            </span>
        </li>
        {{/if}}

        {{#each pagination.pages}}
        <li class="page-item {{#if this.isCurrent}}active{{/if}}">
            {{#if this.isCurrent}}
            <span class="page-link">{{this.number}}</span>
            {{else}}
            <a class="page-link" href="?page={{this.number}}{{#if ../filters.source}}&source={{../filters.source}}{{/if}}{{#if ../filters.status}}&status={{../filters.status}}{{/if}}{{#if ../filters.startDate}}&startDate={{../filters.startDate}}{{/if}}{{#if ../filters.endDate}}&endDate={{../filters.endDate}}{{/if}}">{{this.number}}</a>
            {{/if}}
        </li>
        {{/each}}

        {{#if pagination.hasNextPage}}
        <li class="page-item">
            <a class="page-link" href="?page={{pagination.nextPage}}{{#if filters.source}}&source={{filters.source}}{{/if}}{{#if filters.status}}&status={{filters.status}}{{/if}}{{#if filters.startDate}}&startDate={{filters.startDate}}{{/if}}{{#if filters.endDate}}&endDate={{filters.endDate}}{{/if}}" aria-label="Next">
                <span aria-hidden="true">&raquo;</span>
            </a>
        </li>
        {{else}}
        <li class="page-item disabled">
            <span class="page-link" aria-label="Next">
                <span aria-hidden="true">&raquo;</span>
            </span>
        </li>
        {{/if}}
    </ul>

    {{#if pagination.total}}
    <div class="text-center mt-2">
        <small class="text-muted">
            Showing {{pagination.limit}} items per page. Total {{pagination.total}} items.
        </small>
    </div>
    {{/if}}
</nav>
{{/if}}

================
File: src/views/partials/admin/sidebar.hbs
================
<!-- Sidebar -->
<nav id="sidebar" class="sidebar">
    <div class="sidebar-header">
        <h3 class="mb-0">Hotel Admin</h3>
    </div>

    <ul class="list-unstyled components">
        <!-- Dashboard -->
        <li class="{{#if (eq active 'dashboard')}}active{{/if}}">
            <a href="/admin/dashboard" class="d-flex align-items-center">
                <i class="fas fa-tachometer-alt me-3"></i>
                <span>Dashboard</span>
            </a>
        </li>

        <!-- Bookings Section -->
        <li class="{{#if (eq activeGroup 'bookings')}}active{{/if}}">
            <a href="#bookingsSubmenu" data-bs-toggle="collapse" class="d-flex align-items-center justify-content-between">
                <div>
                    <i class="fas fa-calendar-check me-3"></i>
                    <span>Bookings</span>
                </div>
                <i class="fas fa-chevron-down"></i>
            </a>
            <ul class="collapse list-unstyled {{#if (eq activeGroup 'bookings')}}show{{/if}}" id="bookingsSubmenu">
                <li class="{{#if (eq active 'bookings-list')}}active{{/if}}">
                    <a href="/admin/bookings" class="d-flex align-items-center">
                        <i class="fas fa-list me-3"></i>
                        <span>All Bookings</span>
                    </a>
                </li>
                <li class="{{#if (eq active 'bookings-calendar')}}active{{/if}}">
                    <a href="/admin/bookings/calendar" class="d-flex align-items-center">
                        <i class="fas fa-calendar-alt me-3"></i>
                        <span>Calendar View</span>
                    </a>
                </li>
                <li class="{{#if (eq active 'check-in-out')}}active{{/if}}">
                    <a href="/admin/check-in-out" class="d-flex align-items-center">
                        <i class="fas fa-exchange-alt me-3"></i>
                        <span>Check-in/out</span>
                    </a>
                </li>
            </ul>
        </li>

        <!-- Rooms & Inventory -->
        <li class="{{#if (eq activeGroup 'rooms')}}active{{/if}}">
            <a href="#roomsSubmenu" data-bs-toggle="collapse" class="d-flex align-items-center justify-content-between">
                <div>
                    <i class="fas fa-bed me-3"></i>
                    <span>Rooms & Inventory</span>
                </div>
                <i class="fas fa-chevron-down"></i>
            </a>
            <ul class="collapse list-unstyled {{#if (eq activeGroup 'rooms')}}show{{/if}}" id="roomsSubmenu">
                <li class="{{#if (eq active 'rooms-list')}}active{{/if}}">
                    <a href="/admin/rooms" class="d-flex align-items-center">
                        <i class="fas fa-door-open me-3"></i>
                        <span>Room List</span>
                    </a>
                </li>
                <li class="{{#if (eq active 'room-types')}}active{{/if}}">
                    <a href="/admin/rooms/types" class="d-flex align-items-center">
                        <i class="fas fa-tags me-3"></i>
                        <span>Room Types</span>
                    </a>
                </li>
                <li class="{{#if (eq active 'inventory')}}active{{/if}}">
                    <a href="/admin/inventory" class="d-flex align-items-center">
                        <i class="fas fa-box me-3"></i>
                        <span>Inventory</span>
                    </a>
                </li>
            </ul>
        </li>

        <!-- Guest Management -->
        <li class="{{#if (eq activeGroup 'guests')}}active{{/if}}">
            <a href="#guestsSubmenu" data-bs-toggle="collapse" class="d-flex align-items-center justify-content-between">
                <div>
                    <i class="fas fa-users me-3"></i>
                    <span>Guests</span>
                </div>
                <i class="fas fa-chevron-down"></i>
            </a>
            <ul class="collapse list-unstyled {{#if (eq activeGroup 'guests')}}show{{/if}}" id="guestsSubmenu">
                <li class="{{#if (eq active 'guests-list')}}active{{/if}}">
                    <a href="/admin/guests" class="d-flex align-items-center">
                        <i class="fas fa-user-friends me-3"></i>
                        <span>Guest List</span>
                    </a>
                </li>
                <li class="{{#if (eq active 'guest-analytics')}}active{{/if}}">
                    <a href="/admin/guests/analytics" class="d-flex align-items-center">
                        <i class="fas fa-chart-pie me-3"></i>
                        <span>Guest Analytics</span>
                    </a>
                </li>
            </ul>
        </li>

        <!-- Loyalty Program -->
        <li class="{{#if (eq activeGroup 'loyalty')}}active{{/if}}">
            <a href="#loyaltySubmenu" data-bs-toggle="collapse" class="d-flex align-items-center justify-content-between">
                <div>
                    <i class="fas fa-gem me-3"></i>
                    <span>Loyalty Program</span>
                </div>
                <i class="fas fa-chevron-down"></i>
            </a>
            <ul class="collapse list-unstyled {{#if (eq activeGroup 'loyalty')}}show{{/if}}" id="loyaltySubmenu">
                <li class="{{#if (eq active 'loyalty-members')}}active{{/if}}">
                    <a href="/admin/loyalty/members" class="d-flex align-items-center">
                        <i class="fas fa-user-tag me-3"></i>
                        <span>Members</span>
                    </a>
                </li>
                <li class="{{#if (eq active 'loyalty-tiers')}}active{{/if}}">
                    <a href="/admin/loyalty/tiers" class="d-flex align-items-center">
                        <i class="fas fa-layer-group me-3"></i>
                        <span>Tiers</span>
                    </a>
                </li>
                <li class="{{#if (eq active 'loyalty-rewards')}}active{{/if}}">
                    <a href="/admin/loyalty/rewards" class="d-flex align-items-center">
                        <i class="fas fa-gift me-3"></i>
                        <span>Rewards</span>
                    </a>
                </li>
            </ul>
        </li>

        <!-- Housekeeping & Maintenance -->
        <li class="{{#if (eq activeGroup 'maintenance')}}active{{/if}}">
            <a href="#maintenanceSubmenu" data-bs-toggle="collapse" class="d-flex align-items-center justify-content-between">
                <div>
                    <i class="fas fa-tools me-3"></i>
                    <span>Operations</span>
                </div>
                <i class="fas fa-chevron-down"></i>
            </a>
            <ul class="collapse list-unstyled {{#if (eq activeGroup 'maintenance')}}show{{/if}}" id="maintenanceSubmenu">
                <li class="{{#if (eq active 'housekeeping')}}active{{/if}}">
                    <a href="/admin/housekeeping" class="d-flex align-items-center">
                        <i class="fas fa-broom me-3"></i>
                        <span>Housekeeping</span>
                    </a>
                </li>
                <li class="{{#if (eq active 'maintenance-requests')}}active{{/if}}">
                    <a href="/admin/maintenance" class="d-flex align-items-center">
                        <i class="fas fa-wrench me-3"></i>
                        <span>Maintenance</span>
                    </a>
                </li>
            </ul>
        </li>

        <!-- Channel Manager -->
        <li class="{{#if (eq activeGroup 'channel')}}active{{/if}}">
            <a href="#channelSubmenu" data-bs-toggle="collapse" class="d-flex align-items-center justify-content-between">
                <div>
                    <i class="fas fa-network-wired me-3"></i>
                    <span>Channel Manager</span>
                </div>
                <i class="fas fa-chevron-down"></i>
            </a>
            <ul class="collapse list-unstyled {{#if (eq activeGroup 'channel')}}show{{/if}}" id="channelSubmenu">
                <li class="{{#if (eq active 'channel-dashboard')}}active{{/if}}">
                    <a href="/admin/channel-manager" class="d-flex align-items-center">
                        <i class="fas fa-th-large me-3"></i>
                        <span>Dashboard</span>
                    </a>
                </li>
                <li class="{{#if (eq active 'channel-rates')}}active{{/if}}">
                    <a href="/admin/channel-manager/rates" class="d-flex align-items-center">
                        <i class="fas fa-dollar-sign me-3"></i>
                        <span>Rates</span>
                    </a>
                </li>
                <li class="{{#if (eq active 'channel-inventory')}}active{{/if}}">
                    <a href="/admin/channel-manager/inventory" class="d-flex align-items-center">
                        <i class="fas fa-warehouse me-3"></i>
                        <span>Inventory</span>
                    </a>
                </li>
            </ul>
        </li>

        <!-- Analytics -->
        <li class="{{#if (eq activeGroup 'analytics')}}active{{/if}}">
            <a href="#analyticsSubmenu" data-bs-toggle="collapse" class="d-flex align-items-center justify-content-between">
                <div>
                    <i class="fas fa-chart-line me-3"></i>
                    <span>Analytics</span>
                </div>
                <i class="fas fa-chevron-down"></i>
            </a>
            <ul class="collapse list-unstyled {{#if (eq activeGroup 'analytics')}}show{{/if}}" id="analyticsSubmenu">
                <li class="{{#if (eq active 'analytics-occupancy')}}active{{/if}}">
                    <a href="/admin/analytics/occupancy" class="d-flex align-items-center">
                        <i class="fas fa-bed me-3"></i>
                        <span>Occupancy</span>
                    </a>
                </li>
                <li class="{{#if (eq active 'analytics-revenue')}}active{{/if}}">
                    <a href="/admin/analytics/revenue" class="d-flex align-items-center">
                        <i class="fas fa-dollar-sign me-3"></i>
                        <span>Revenue</span>
                    </a>
                </li>
                <li class="{{#if (eq active 'analytics-guests')}}active{{/if}}">
                    <a href="/admin/analytics/guests" class="d-flex align-items-center">
                        <i class="fas fa-users me-3"></i>
                        <span>Guests</span>
                    </a>
                </li>
                <li class="{{#if (eq active 'analytics-staff')}}active{{/if}}">
                    <a href="/admin/analytics/staff" class="d-flex align-items-center">
                        <i class="fas fa-user-tie me-3"></i>
                        <span>Staff</span>
                    </a>
                </li>
            </ul>
        </li>

        <!-- Settings -->
        <li class="{{#if (eq activeGroup 'settings')}}active{{/if}}">
            <a href="#settingsSubmenu" data-bs-toggle="collapse" class="d-flex align-items-center justify-content-between">
                <div>
                    <i class="fas fa-cog me-3"></i>
                    <span>Settings</span>
                </div>
                <i class="fas fa-chevron-down"></i>
            </a>
            <ul class="collapse list-unstyled {{#if (eq activeGroup 'settings')}}show{{/if}}" id="settingsSubmenu">
                <li class="{{#if (eq active 'settings-hotel')}}active{{/if}}">
                    <a href="/admin/settings/hotel" class="d-flex align-items-center">
                        <i class="fas fa-hotel me-3"></i>
                        <span>Hotel Settings</span>
                    </a>
                </li>
                <li class="{{#if (eq active 'settings-roles')}}active{{/if}}">
                    <a href="/admin/settings/roles" class="d-flex align-items-center">
                        <i class="fas fa-user-shield me-3"></i>
                        <span>Roles</span>
                    </a>
                </li>
                <li class="{{#if (eq active 'settings-staff')}}active{{/if}}">
                    <a href="/admin/settings/staff" class="d-flex align-items-center">
                        <i class="fas fa-user-cog me-3"></i>
                        <span>Staff</span>
                    </a>
                </li>
            </ul>
        </li>
    </ul>

    <div class="sidebar-footer">
        <a href="/admin/profile" class="d-flex align-items-center mb-3 {{#if (eq active 'profile')}}active{{/if}}">
            <i class="fas fa-user-circle me-3"></i>
            <span>Profile</span>
        </a>
        <a href="#" onclick="handleLogout(event)" class="d-flex align-items-center text-danger">
            <i class="fas fa-sign-out-alt me-3"></i>
            <span>Logout</span>
        </a>
    </div>
</nav>

<style>
/* Sidebar Styles */
.sidebar {
    min-width: 250px;
    max-width: 250px;
    min-height: 100vh;
    background: #2c3e50;
    color: #fff;
    transition: all 0.3s;
    position: fixed;
    top: 0;
    left: 0;
    z-index: 1000;
    display: flex;
    flex-direction: column;
}

.sidebar-header {
    padding: 20px;
    background: #1a2634;
}

.sidebar-header h3 {
    color: #fff;
    font-size: 1.4rem;
}

.sidebar .components {
    padding: 20px 0;
    flex-grow: 1;
    overflow-y: auto;
}

.sidebar ul li a {
    padding: 12px 20px;
    display: flex;
    align-items: center;
    color: rgba(255, 255, 255, 0.8);
    text-decoration: none;
    transition: all 0.3s;
    font-size: 0.95rem;
}

.sidebar ul li a:hover,
.sidebar ul li.active > a {
    color: #fff;
    background: #3498db;
    text-decoration: none;
}

.sidebar ul.collapse {
    background: rgba(0, 0, 0, 0.1);
}

.sidebar ul.collapse li a {
    padding-left: 50px;
    font-size: 0.9rem;
}

.sidebar ul li a i {
    width: 20px;
    text-align: center;
}

.sidebar-footer {
    padding: 20px;
    border-top: 1px solid rgba(255, 255, 255, 0.1);
    margin-top: auto;
}

.sidebar-footer a {
    padding: 10px;
    color: rgba(255, 255, 255, 0.8);
    text-decoration: none;
    transition: all 0.3s;
    border-radius: 5px;
    font-size: 0.9rem;
}

.sidebar-footer a:hover,
.sidebar-footer a.active {
    color: #fff;
    background: rgba(255, 255, 255, 0.1);
}

/* Responsive Sidebar */
@media (max-width: 768px) {
    .sidebar {
        margin-left: -250px;
    }
    .sidebar.active {
        margin-left: 0;
    }
}

/* Custom Scrollbar for Sidebar */
.sidebar ::-webkit-scrollbar {
    width: 5px;
}

.sidebar ::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.1);
}

.sidebar ::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.2);
    border-radius: 3px;
}

.sidebar ::-webkit-scrollbar-thumb:hover {
    background: rgba(255, 255, 255, 0.3);
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Handle submenu state
    const currentPath = window.location.pathname;
    const submenus = document.querySelectorAll('.collapse');
    
    submenus.forEach(submenu => {
        const links = submenu.querySelectorAll('a');
        links.forEach(link => {
            if (currentPath === link.getAttribute('href')) {
                submenu.classList.add('show');
            }
        });
    });

    // Add hover effect to submenu items
    document.querySelectorAll('#sidebar .components li a').forEach(link => {
        link.addEventListener('mouseenter', function() {
            if (!this.parentElement.classList.contains('active')) {
                this.style.backgroundColor = 'rgba(52, 152, 219, 0.7)';
            }
        });
        link.addEventListener('mouseleave', function() {
            if (!this.parentElement.classList.contains('active')) {
                this.style.backgroundColor = '';
            }
        });
    });

    // Handle logout
    async function handleLogout(e) {
        e.preventDefault();
        try {
            const response = await fetch('/auth/logout', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (response.ok) {
                window.location.href = '/login';
            } else {
                throw new Error('Logout failed');
            }
        } catch (error) {
            console.error('Logout error:', error);
            alert('Failed to logout. Please try again.');
        }
    }

    // Attach logout handler
    document.querySelector('[onclick="handleLogout(event)"]').onclick = handleLogout;
});
</script>

================
File: src/views/partials/footer.ejs
================
<!-- Footer -->
<footer class="bg-white shadow-inner mt-8">
    <div class="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        <div class="grid grid-cols-1 md:grid-cols-4 gap-8">
            <!-- Quick Links -->
            <div>
                <h3 class="text-sm font-semibold text-gray-600 tracking-wider uppercase">Quick Links</h3>
                <ul class="mt-4 space-y-2">
                    <li>
                        <a href="/admin/dashboard" class="text-sm text-gray-500 hover:text-gray-900">Dashboard</a>
                    </li>
                    <li>
                        <a href="/admin/bookings" class="text-sm text-gray-500 hover:text-gray-900">Bookings</a>
                    </li>
                    <li>
                        <a href="/admin/guests" class="text-sm text-gray-500 hover:text-gray-900">Guests</a>
                    </li>
                    <li>
                        <a href="/admin/loyalty" class="text-sm text-gray-500 hover:text-gray-900">Loyalty Program</a>
                    </li>
                </ul>
            </div>

            <!-- Reports -->
            <div>
                <h3 class="text-sm font-semibold text-gray-600 tracking-wider uppercase">Reports</h3>
                <ul class="mt-4 space-y-2">
                    <li>
                        <a href="/admin/reports/occupancy" class="text-sm text-gray-500 hover:text-gray-900">Occupancy Reports</a>
                    </li>
                    <li>
                        <a href="/admin/reports/revenue" class="text-sm text-gray-500 hover:text-gray-900">Revenue Reports</a>
                    </li>
                    <li>
                        <a href="/admin/reports/guest" class="text-sm text-gray-500 hover:text-gray-900">Guest Analytics</a>
                    </li>
                    <li>
                        <a href="/admin/reports/loyalty" class="text-sm text-gray-500 hover:text-gray-900">Loyalty Reports</a>
                    </li>
                </ul>
            </div>

            <!-- Support -->
            <div>
                <h3 class="text-sm font-semibold text-gray-600 tracking-wider uppercase">Support</h3>
                <ul class="mt-4 space-y-2">
                    <li>
                        <a href="/admin/help" class="text-sm text-gray-500 hover:text-gray-900">Help Center</a>
                    </li>
                    <li>
                        <a href="/admin/documentation" class="text-sm text-gray-500 hover:text-gray-900">Documentation</a>
                    </li>
                    <li>
                        <a href="/admin/contact" class="text-sm text-gray-500 hover:text-gray-900">Contact Support</a>
                    </li>
                    <li>
                        <a href="/admin/feedback" class="text-sm text-gray-500 hover:text-gray-900">Submit Feedback</a>
                    </li>
                </ul>
            </div>

            <!-- Contact -->
            <div>
                <h3 class="text-sm font-semibold text-gray-600 tracking-wider uppercase">Contact</h3>
                <ul class="mt-4 space-y-2">
                    <li class="flex items-center text-sm text-gray-500">
                        <svg class="h-5 w-5 mr-2 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                        </svg>
                        support@hotelmanagement.com
                    </li>
                    <li class="flex items-center text-sm text-gray-500">
                        <svg class="h-5 w-5 mr-2 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                        </svg>
                        +1 (555) 123-4567
                    </li>
                </ul>
            </div>
        </div>

        <!-- Bottom Bar -->
        <div class="mt-8 border-t border-gray-200 pt-8">
            <div class="flex justify-between items-center">
                <p class="text-sm text-gray-400">&copy; <%= new Date().getFullYear() %> Hotel Management System. All rights reserved.</p>
                <div class="flex space-x-6">
                    <a href="/privacy" class="text-sm text-gray-400 hover:text-gray-500">Privacy Policy</a>
                    <a href="/terms" class="text-sm text-gray-400 hover:text-gray-500">Terms of Service</a>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script>
        // Handle active navigation items
        document.addEventListener('DOMContentLoaded', function() {
            const path = window.location.pathname;
            const navLinks = document.querySelectorAll('nav a');
            
            navLinks.forEach(link => {
                if (link.getAttribute('href') === path) {
                    link.classList.add('border-indigo-500', 'text-gray-900');
                    link.classList.remove('border-transparent', 'text-gray-500');
                }
            });
        });

        // Handle flash messages auto-hide
        const flashMessages = document.querySelectorAll('[role="alert"]');
        flashMessages.forEach(message => {
            setTimeout(() => {
                message.style.opacity = '0';
                setTimeout(() => message.remove(), 300);
            }, 5000);
        });

        // Handle loading states
        document.addEventListener('submit', function(e) {
            const form = e.target;
            const submitButton = form.querySelector('button[type="submit"]');
            if (submitButton) {
                const originalText = submitButton.innerHTML;
                submitButton.innerHTML = '<div class="loading mr-2"></div>Processing...';
                submitButton.disabled = true;

                // Reset button after form submission (success or error)
                setTimeout(() => {
                    submitButton.innerHTML = originalText;
                    submitButton.disabled = false;
                }, 5000);
            }
        });
    </script>
</body>
</html>

================
File: src/views/partials/footer.hbs
================
<footer class="footer mt-auto py-3 bg-light">
        <div class="container text-center">
            <span class="text-muted">© 2025 Hotel Booking. All rights reserved.</span>
        </div>
    </footer>

    <!-- Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    
    <!-- Logout Script -->
    <script>
    async function handleLogout(e) {
        e.preventDefault();
        try {
            const response = await fetch('/api/auth/logout', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                credentials: 'include'
            });

            if (!response.ok) {
                throw new Error('Logout failed');
            }

            // Redirect to login page
            window.location.href = '/login';
        } catch (error) {
            console.error('Logout error:', error);
            alert('Failed to logout. Please try again.');
        }
    }
    </script>
</body>
</html>

================
File: src/views/partials/guest/header.hbs
================
<nav class="navbar navbar-expand-lg navbar-light bg-white border-bottom">
    <div class="container">
        <a class="navbar-brand" href="/">
            <i class="fas fa-hotel text-primary me-2"></i>Hotel Booking
        </a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#guestNavbar">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="guestNavbar">
            <ul class="navbar-nav me-auto">
                <li class="nav-item">
                    <a class="nav-link {{#if (eq active 'dashboard')}}active{{/if}}" href="/guest/dashboard">
                        <i class="fas fa-columns me-2"></i>Dashboard
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link {{#if (eq active 'bookings')}}active{{/if}}" href="/guest/bookings">
                        <i class="fas fa-calendar-check me-2"></i>My Bookings
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link {{#if (eq active 'maintenance')}}active{{/if}}" href="/maintenance">
                        <i class="fas fa-tools me-2"></i>Maintenance
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/search">
                        <i class="fas fa-search me-2"></i>Book Now
                    </a>
                </li>
            </ul>
            <ul class="navbar-nav">
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" data-bs-toggle="dropdown">
                        <i class="fas fa-user-circle me-2"></i>{{user.name}}
                    </a>
                    <ul class="dropdown-menu dropdown-menu-end">
                        <li>
                            <a class="dropdown-item" href="/guest/profile">
                                <i class="fas fa-user me-2"></i>My Profile
                            </a>
                        </li>
                        <li><hr class="dropdown-divider"></li>
                        <li>
                            <a class="dropdown-item text-danger" href="/auth/logout">
                                <i class="fas fa-sign-out-alt me-2"></i>Logout
                            </a>
                        </li>
                    </ul>
                </li>
            </ul>
        </div>
    </div>
</nav>

================
File: src/views/partials/guest/nav.hbs
================
<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container">
        <a class="navbar-brand" href="/">
            <i class="fas fa-hotel me-2"></i>Hotel Booking
        </a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav me-auto">
                <li class="nav-item">
                    <a class="nav-link {{#if (eq active 'home')}}active{{/if}}" href="/">
                        <i class="fas fa-home me-1"></i>Home
                    </a>
                </li>
                {{#if user}}
                <li class="nav-item">
                    <a class="nav-link {{#if (eq active 'bookings')}}active{{/if}}" href="/bookings">
                        <i class="fas fa-calendar-check me-1"></i>My Bookings
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link {{#if (eq active 'maintenance')}}active{{/if}}" href="/maintenance">
                        <i class="fas fa-tools me-1"></i>Maintenance
                    </a>
                </li>
                {{/if}}
            </ul>
            <ul class="navbar-nav">
                {{#if user}}
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" id="userDropdown" role="button" data-bs-toggle="dropdown">
                        <i class="fas fa-user me-1"></i>{{user.name}}
                    </a>
                    <ul class="dropdown-menu dropdown-menu-end">
                        <li>
                            <a class="dropdown-item" href="/profile">
                                <i class="fas fa-user-circle me-2"></i>Profile
                            </a>
                        </li>
                        <li>
                            <hr class="dropdown-divider">
                        </li>
                        <li>
                            <a class="dropdown-item" href="/auth/logout">
                                <i class="fas fa-sign-out-alt me-2"></i>Logout
                            </a>
                        </li>
                    </ul>
                </li>
                {{else}}
                <li class="nav-item">
                    <a class="nav-link" href="/auth/login">
                        <i class="fas fa-sign-in-alt me-1"></i>Login
                    </a>
                </li>
                {{/if}}
            </ul>
        </div>
    </div>
</nav>

================
File: src/views/partials/header.ejs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %> | Hotel Management System</title>
    
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- Custom Styles -->
    <style>
        /* Custom scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }
        ::-webkit-scrollbar-track {
            background: #f1f1f1;
        }
        ::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 4px;
        }
        ::-webkit-scrollbar-thumb:hover {
            background: #555;
        }

        /* Fade in animation */
        .fade-in {
            animation: fadeIn 0.3s ease-in;
        }
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        /* Slide in animation */
        .slide-in {
            animation: slideIn 0.3s ease-out;
        }
        @keyframes slideIn {
            from { transform: translateY(-10px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        /* Loading spinner */
        .loading {
            border: 3px solid #f3f3f3;
            border-top: 3px solid #3498db;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>

    <!-- Alpine.js for interactivity -->
    <script defer src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"></script>
</head>
<body class="bg-gray-100">
    <!-- Flash Messages -->
    <% if (locals.messages && messages.error) { %>
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative fade-in" role="alert">
            <strong class="font-bold">Error!</strong>
            <span class="block sm:inline"><%= messages.error %></span>
        </div>
    <% } %>
    
    <% if (locals.messages && messages.success) { %>
        <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative fade-in" role="alert">
            <strong class="font-bold">Success!</strong>
            <span class="block sm:inline"><%= messages.success %></span>
        </div>
    <% } %>

    <!-- Main Content -->

================
File: src/views/partials/header.hbs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{title}} - Hotel Booking</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    
    <style>
        .navbar-brand {
            font-weight: bold;
        }
        .table img {
            object-fit: cover;
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container">
            <a class="navbar-brand" href="/">Hotel Booking</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="/">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/hotels">Hotels</a>
                    </li>
                    {{#if user}}
                        {{#if user.isAdmin}}
                            <li class="nav-item">
                                <a class="nav-link" href="/admin/hotels">Manage Hotels</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="/admin/dashboard">Dashboard</a>
                            </li>
                        {{/if}}
                    {{/if}}
                </ul>
                <ul class="navbar-nav">
                    {{#if user}}
                        <li class="nav-item">
                            <span class="nav-link">Welcome, {{user.name}}</span>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#" onclick="handleLogout(event)">Logout</a>
                        </li>
                    {{else}}
                        <li class="nav-item">
                            <a class="nav-link" href="/login">Login</a>
                        </li>
                    {{/if}}
                </ul>
            </div>
        </div>
    </nav>

================
File: src/views/partials/navbar.hbs
================
<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container">
        <a class="navbar-brand" href="/">Hotel Booking</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav me-auto">
                <li class="nav-item">
                    <a class="nav-link" href="/">Home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/hotels">Hotels</a>
                </li>
                {{#if user}}
                    {{#if user.isAdmin}}
                        <li class="nav-item">
                            <a class="nav-link" href="/admin/hotels">Manage Hotels</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/admin/dashboard">Dashboard</a>
                        </li>
                    {{/if}}
                {{/if}}
            </ul>
            <ul class="navbar-nav">
                {{#if user}}
                    <li class="nav-item">
                        <span class="nav-link">Welcome, {{user.name}}</span>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#" onclick="handleLogout(event)">Logout</a>
                    </li>
                {{else}}
                    <li class="nav-item">
                        <a class="nav-link" href="/login">Login</a>
                    </li>
                {{/if}}
            </ul>
        </div>
    </div>
</nav>

<script>
async function handleLogout(e) {
    e.preventDefault();
    try {
        const response = await fetch('/auth/logout', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            }
        });

        if (!response.ok) {
            throw new Error('Logout failed');
        }

        // Clear local storage
        localStorage.removeItem('token');
        localStorage.removeItem('userEmail');

        // Redirect to login page
        window.location.href = '/login';
    } catch (error) {
        console.error('Logout error:', error);
        alert('Failed to logout. Please try again.');
    }
}
</script>

================
File: views/admin/dashboard.hbs
================
{{> header}}

<div class="container-fluid py-4">
    <!-- Main Stats -->
    <div class="row">
        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Total Revenue</p>
                                <h5 class="font-weight-bolder">{{formatCurrency stats.totalRevenue}}</h5>
                                <p class="mb-0 text-sm">
                                    <span class="text-success text-sm font-weight-bolder">+{{stats.revenueGrowth}}%</span>
                                    vs last month
                                </p>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-primary shadow-primary text-center rounded-circle">
                                <i class="ni ni-money-coins text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Active Bookings</p>
                                <h5 class="font-weight-bolder">{{stats.activeBookings}}</h5>
                                <p class="mb-0 text-sm">
                                    <span class="text-success text-sm font-weight-bolder">{{stats.occupancyRate}}%</span>
                                    occupancy rate
                                </p>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-success shadow-success text-center rounded-circle">
                                <i class="ni ni-calendar-grid-58 text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Loyalty Members</p>
                                <h5 class="font-weight-bolder">{{stats.loyaltyMembers}}</h5>
                                <p class="mb-0 text-sm">
                                    <span class="text-success text-sm font-weight-bolder">+{{stats.newMembersThisMonth}}</span>
                                    this month
                                </p>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-warning shadow-warning text-center rounded-circle">
                                <i class="ni ni-trophy text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Guest Satisfaction</p>
                                <h5 class="font-weight-bolder">{{stats.satisfactionRate}}%</h5>
                                <p class="mb-0 text-sm">
                                    <span class="text-success text-sm font-weight-bolder">{{stats.reviewCount}}</span>
                                    reviews
                                </p>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-info shadow-info text-center rounded-circle">
                                <i class="ni ni-like-2 text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Loyalty Program Overview -->
    <div class="row">
        <div class="col-lg-7 mb-4">
            <div class="card">
                <div class="card-header pb-0">
                    <div class="d-flex justify-content-between">
                        <h6>Loyalty Program Overview</h6>
                        <a href="/admin/loyalty/dashboard" class="btn btn-primary btn-sm">View Details</a>
                    </div>
                </div>
                <div class="card-body p-3">
                    <div class="chart">
                        <canvas id="loyaltyTrendsChart" class="chart-canvas" height="300"></canvas>
                    </div>
                    <div class="row mt-4">
                        <div class="col-3">
                            <div class="d-flex px-2 py-1">
                                <div>
                                    <div class="icon icon-shape bg-primary-soft text-center rounded">
                                        <i class="ni ni-circle-08 text-primary text-lg opacity-10"></i>
                                    </div>
                                </div>
                                <div class="ms-3">
                                    <p class="text-xs mb-0">Bronze</p>
                                    <h6 class="font-weight-bolder mb-0">{{stats.bronzeMembers}}</h6>
                                </div>
                            </div>
                        </div>
                        <div class="col-3">
                            <div class="d-flex px-2 py-1">
                                <div>
                                    <div class="icon icon-shape bg-secondary-soft text-center rounded">
                                        <i class="ni ni-circle-08 text-secondary text-lg opacity-10"></i>
                                    </div>
                                </div>
                                <div class="ms-3">
                                    <p class="text-xs mb-0">Silver</p>
                                    <h6 class="font-weight-bolder mb-0">{{stats.silverMembers}}</h6>
                                </div>
                            </div>
                        </div>
                        <div class="col-3">
                            <div class="d-flex px-2 py-1">
                                <div>
                                    <div class="icon icon-shape bg-warning-soft text-center rounded">
                                        <i class="ni ni-circle-08 text-warning text-lg opacity-10"></i>
                                    </div>
                                </div>
                                <div class="ms-3">
                                    <p class="text-xs mb-0">Gold</p>
                                    <h6 class="font-weight-bolder mb-0">{{stats.goldMembers}}</h6>
                                </div>
                            </div>
                        </div>
                        <div class="col-3">
                            <div class="d-flex px-2 py-1">
                                <div>
                                    <div class="icon icon-shape bg-success-soft text-center rounded">
                                        <i class="ni ni-circle-08 text-success text-lg opacity-10"></i>
                                    </div>
                                </div>
                                <div class="ms-3">
                                    <p class="text-xs mb-0">Platinum</p>
                                    <h6 class="font-weight-bolder mb-0">{{stats.platinumMembers}}</h6>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Recent Loyalty Activity -->
        <div class="col-lg-5 mb-4">
            <div class="card">
                <div class="card-header pb-0">
                    <div class="d-flex justify-content-between">
                        <h6>Recent Loyalty Activity</h6>
                        <a href="/admin/loyalty/members" class="btn btn-primary btn-sm">View All</a>
                    </div>
                </div>
                <div class="card-body p-3">
                    <div class="timeline timeline-one-side">
                        {{#each recentLoyaltyActivity}}
                        <div class="timeline-block mb-3">
                            <span class="timeline-step">
                                <i class="ni {{icon}} text-{{color}}"></i>
                            </span>
                            <div class="timeline-content">
                                <h6 class="text-dark text-sm font-weight-bold mb-0">{{description}}</h6>
                                <p class="text-secondary font-weight-bold text-xs mt-1 mb-0">{{formatDateTime timestamp}}</p>
                            </div>
                        </div>
                        {{/each}}
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Recent Bookings -->
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header pb-0">
                    <div class="d-flex justify-content-between">
                        <h6>Recent Bookings</h6>
                        <a href="/admin/bookings" class="btn btn-primary btn-sm">View All</a>
                    </div>
                </div>
                <div class="card-body px-0 pt-0 pb-2">
                    <div class="table-responsive p-0">
                        <table class="table align-items-center mb-0">
                            <thead>
                                <tr>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Guest</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Room</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Check In</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Check Out</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Status</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Amount</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{#each recentBookings}}
                                <tr>
                                    <td>
                                        <div class="d-flex px-3 py-1">
                                            <div class="d-flex flex-column justify-content-center">
                                                <h6 class="mb-0 text-sm">{{guest.name}}</h6>
                                                <p class="text-xs text-secondary mb-0">{{guest.email}}</p>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">{{room.number}}</p>
                                        <p class="text-xs text-secondary mb-0">{{room.type}}</p>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">{{formatDate checkInDate}}</p>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">{{formatDate checkOutDate}}</p>
                                    </td>
                                    <td>
                                        <span class="badge badge-sm bg-gradient-{{statusColor status}}">{{status}}</span>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">{{formatCurrency totalAmount}}</p>
                                    </td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
// Initialize loyalty trends chart
const ctx = document.getElementById('loyaltyTrendsChart').getContext('2d');
new Chart(ctx, {
    type: 'line',
    data: {
        labels: {{{json loyaltyTrends.labels}}},
        datasets: [
            {
                label: 'Total Members',
                data: {{{json loyaltyTrends.totalMembers}}},
                borderColor: '#5e72e4',
                tension: 0.4,
                fill: false
            },
            {
                label: 'Points Awarded',
                data: {{{json loyaltyTrends.pointsAwarded}}},
                borderColor: '#2dce89',
                tension: 0.4,
                fill: false
            },
            {
                label: 'Rewards Redeemed',
                data: {{{json loyaltyTrends.rewardsRedeemed}}},
                borderColor: '#fb6340',
                tension: 0.4,
                fill: false
            }
        ]
    },
    options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
            legend: {
                position: 'top'
            }
        },
        scales: {
            y: {
                beginAtZero: true
            }
        }
    }
});
</script>

{{> footer}}

================
File: views/admin/housekeeping/tasks.hbs
================
{{> header}}

<div class="container-fluid py-4">
    <!-- Housekeeping Stats -->
    <div class="row">
        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Pending Tasks</p>
                                <h5 class="font-weight-bolder text-warning">{{stats.pending}}</h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-warning shadow-warning text-center rounded-circle">
                                <i class="ni ni-time-alarm text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">In Progress</p>
                                <h5 class="font-weight-bolder text-info">{{stats.inProgress}}</h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-info shadow-info text-center rounded-circle">
                                <i class="ni ni-user-run text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Completed Today</p>
                                <h5 class="font-weight-bolder text-success">{{stats.completedToday}}</h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-success shadow-success text-center rounded-circle">
                                <i class="ni ni-check-bold text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">High Priority</p>
                                <h5 class="font-weight-bolder text-danger">{{stats.highPriority}}</h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-danger shadow-danger text-center rounded-circle">
                                <i class="ni ni-notification-70 text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Task List -->
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header pb-0">
                    <div class="d-flex justify-content-between align-items-center">
                        <h6>Housekeeping Tasks</h6>
                        <button class="btn btn-primary btn-sm mb-0" data-bs-toggle="modal" data-bs-target="#newTaskModal">
                            <i class="fas fa-plus"></i> New Task
                        </button>
                    </div>
                    <!-- Filters -->
                    <div class="row mt-3">
                        <div class="col-md-3">
                            <select class="form-control" id="statusFilter" onchange="filterTasks()">
                                <option value="">All Statuses</option>
                                <option value="pending">Pending</option>
                                <option value="in-progress">In Progress</option>
                                <option value="completed">Completed</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <select class="form-control" id="priorityFilter" onchange="filterTasks()">
                                <option value="">All Priorities</option>
                                <option value="high">High</option>
                                <option value="normal">Normal</option>
                                <option value="low">Low</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <input type="text" class="form-control" id="roomFilter" placeholder="Room Number" onkeyup="filterTasks()">
                        </div>
                    </div>
                </div>
                <div class="card-body px-0 pt-0 pb-2">
                    <div class="table-responsive p-0">
                        <table class="table align-items-center mb-0">
                            <thead>
                                <tr>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Room</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Description</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Priority</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Status</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Assigned To</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Due</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{#each tasks}}
                                <tr>
                                    <td>
                                        <div class="d-flex px-3 py-1">
                                            <div class="d-flex flex-column justify-content-center">
                                                <h6 class="mb-0 text-sm">Room {{room.number}}</h6>
                                                <p class="text-xs text-secondary mb-0">{{room.type}}</p>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">{{description}}</p>
                                    </td>
                                    <td>
                                        <span class="badge badge-sm bg-gradient-{{priorityColor priority}}">{{priority}}</span>
                                    </td>
                                    <td>
                                        <span class="badge badge-sm bg-gradient-{{statusColor status}}">{{status}}</span>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">{{assignedTo.name}}</p>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">{{formatDateTime scheduledDate}}</p>
                                    </td>
                                    <td>
                                        <div class="btn-group">
                                            <button class="btn btn-link text-secondary mb-0" onclick="updateTaskStatus('{{_id}}', 'in-progress')">
                                                <i class="fas fa-play fa-fw"></i>
                                            </button>
                                            <button class="btn btn-link text-secondary mb-0" onclick="updateTaskStatus('{{_id}}', 'completed')">
                                                <i class="fas fa-check fa-fw"></i>
                                            </button>
                                            <button class="btn btn-link text-secondary mb-0" onclick="editTask('{{_id}}')">
                                                <i class="fas fa-edit fa-fw"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- New Task Modal -->
<div class="modal fade" id="newTaskModal" tabindex="-1" role="dialog" aria-labelledby="newTaskModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="newTaskModalLabel">New Housekeeping Task</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="newTaskForm">
                    <div class="form-group">
                        <label>Room</label>
                        <select class="form-control" name="roomId" required>
                            {{#each rooms}}
                            <option value="{{_id}}">Room {{number}} - {{type}}</option>
                            {{/each}}
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Description</label>
                        <textarea class="form-control" name="description" required></textarea>
                    </div>
                    <div class="form-group">
                        <label>Priority</label>
                        <select class="form-control" name="priority" required>
                            <option value="high">High</option>
                            <option value="normal" selected>Normal</option>
                            <option value="low">Low</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Scheduled Date</label>
                        <input type="datetime-local" class="form-control" name="scheduledDate" required>
                    </div>
                    <div class="form-group">
                        <label>Assign To</label>
                        <select class="form-control" name="assignedTo">
                            <option value="">Unassigned</option>
                            {{#each staff}}
                            <option value="{{_id}}">{{name}}</option>
                            {{/each}}
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="createTask()">Create Task</button>
            </div>
        </div>
    </div>
</div>

<script>
function filterTasks() {
    const status = document.getElementById('statusFilter').value;
    const priority = document.getElementById('priorityFilter').value;
    const room = document.getElementById('roomFilter').value;
    
    window.location.href = `/housekeeping/tasks?status=${status}&priority=${priority}&room=${room}`;
}

async function updateTaskStatus(taskId, status) {
    try {
        const response = await fetch(`/api/housekeeping/${taskId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ status })
        });

        if (response.ok) {
            window.location.reload();
        } else {
            alert('Error updating task status');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error updating task status');
    }
}

async function createTask() {
    try {
        const form = document.getElementById('newTaskForm');
        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());

        const response = await fetch('/api/housekeeping', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });

        if (response.ok) {
            window.location.reload();
        } else {
            alert('Error creating task');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error creating task');
    }
}

function editTask(taskId) {
    // Implement edit task functionality
}
</script>

{{> footer}}

================
File: views/admin/loyalty/dashboard.hbs
================
{{> header}}

<div class="container-fluid py-4">
    <!-- Statistics Cards -->
    <div class="row">
        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Total Members</p>
                                <h5 class="font-weight-bolder">{{stats.totalMembers}}</h5>
                                <p class="mb-0 text-sm">
                                    <span class="text-success text-sm font-weight-bolder">+{{stats.newMembersThisMonth}}</span>
                                    this month
                                </p>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-primary shadow-primary text-center rounded-circle">
                                <i class="ni ni-circle-08 text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Points Issued</p>
                                <h5 class="font-weight-bolder">{{stats.totalPointsIssued}}</h5>
                                <p class="mb-0 text-sm">
                                    <span class="text-success text-sm font-weight-bolder">{{stats.pointsIssuedThisMonth}}</span>
                                    this month
                                </p>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-success shadow-success text-center rounded-circle">
                                <i class="ni ni-money-coins text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Points Redeemed</p>
                                <h5 class="font-weight-bolder">{{stats.totalPointsRedeemed}}</h5>
                                <p class="mb-0 text-sm">
                                    <span class="text-danger text-sm font-weight-bolder">{{stats.pointsRedeemedThisMonth}}</span>
                                    this month
                                </p>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-warning shadow-warning text-center rounded-circle">
                                <i class="ni ni-cart text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Active Rewards</p>
                                <h5 class="font-weight-bolder">{{stats.activeRewards}}</h5>
                                <p class="mb-0 text-sm">
                                    <span class="text-success text-sm font-weight-bolder">{{stats.rewardsRedeemedThisMonth}}</span>
                                    redeemed this month
                                </p>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-info shadow-info text-center rounded-circle">
                                <i class="ni ni-trophy text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Tier Distribution Chart -->
    <div class="row mt-4">
        <div class="col-lg-7 mb-4">
            <div class="card">
                <div class="card-header pb-0">
                    <h6>Membership Tier Distribution</h6>
                </div>
                <div class="card-body">
                    <canvas id="tierDistributionChart" class="chart-canvas" height="300"></canvas>
                </div>
            </div>
        </div>

        <!-- Recent Activity -->
        <div class="col-lg-5 mb-4">
            <div class="card">
                <div class="card-header pb-0">
                    <h6>Recent Activity</h6>
                </div>
                <div class="card-body p-3">
                    <div class="timeline timeline-one-side">
                        {{#each recentActivity}}
                        <div class="timeline-block mb-3">
                            <span class="timeline-step">
                                <i class="ni {{icon}} text-{{color}}"></i>
                            </span>
                            <div class="timeline-content">
                                <h6 class="text-dark text-sm font-weight-bold mb-0">{{description}}</h6>
                                <p class="text-secondary font-weight-bold text-xs mt-1 mb-0">{{formatDate date}}</p>
                            </div>
                        </div>
                        {{/each}}
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Member List -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header pb-0">
                    <div class="d-flex justify-content-between align-items-center">
                        <h6>Loyalty Program Members</h6>
                        <div>
                            <button class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#adjustPointsModal">
                                Adjust Points
                            </button>
                            <button class="btn btn-success btn-sm" onclick="exportMemberData()">
                                Export Data
                            </button>
                        </div>
                    </div>
                </div>
                <div class="card-body px-0 pt-0 pb-2">
                    <div class="table-responsive p-0">
                        <table class="table align-items-center mb-0">
                            <thead>
                                <tr>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Member</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Tier</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Points</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Lifetime Points</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Member Since</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{#each members}}
                                <tr>
                                    <td>
                                        <div class="d-flex px-3 py-1">
                                            <div>
                                                <img src="{{profileImage}}" class="avatar me-3">
                                            </div>
                                            <div class="d-flex flex-column justify-content-center">
                                                <h6 class="mb-0 text-sm">{{name}}</h6>
                                                <p class="text-sm text-secondary mb-0">{{email}}</p>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <span class="badge badge-sm bg-gradient-{{tierColor membershipTier}}">
                                            {{membershipTier}}
                                        </span>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">{{points}}</p>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">{{lifetimePoints}}</p>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">{{formatDate memberSince}}</p>
                                    </td>
                                    <td>
                                        <button class="btn btn-link text-dark px-3 mb-0" 
                                                onclick="viewMemberDetails('{{_id}}')">
                                            <i class="fas fa-eye text-dark me-2"></i>View
                                        </button>
                                        <button class="btn btn-link text-primary px-3 mb-0"
                                                onclick="adjustPoints('{{_id}}', '{{name}}')">
                                            <i class="fas fa-plus text-primary me-2"></i>Points
                                        </button>
                                    </td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Adjust Points Modal -->
<div class="modal fade" id="adjustPointsModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Adjust Member Points</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="adjustPointsForm">
                    <input type="hidden" id="memberId" name="memberId">
                    <div class="form-group">
                        <label>Member Name</label>
                        <input type="text" id="memberName" class="form-control" readonly>
                    </div>
                    <div class="form-group">
                        <label>Points Adjustment</label>
                        <input type="number" name="points" class="form-control" required>
                    </div>
                    <div class="form-group">
                        <label>Reason</label>
                        <select name="reason" class="form-control" required>
                            <option value="bonus">Bonus Points</option>
                            <option value="correction">Point Correction</option>
                            <option value="compensation">Service Compensation</option>
                            <option value="promotion">Promotional Offer</option>
                            <option value="other">Other</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Notes</label>
                        <textarea name="notes" class="form-control" rows="3"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="submitPointsAdjustment()">Submit</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
// Initialize Charts
document.addEventListener('DOMContentLoaded', function() {
    // Tier Distribution Chart
    const ctx = document.getElementById('tierDistributionChart').getContext('2d');
    new Chart(ctx, {
        type: 'doughnut',
        data: {
            labels: ['Bronze', 'Silver', 'Gold', 'Platinum'],
            datasets: [{
                data: [{{stats.tierDistribution.bronze}}, 
                       {{stats.tierDistribution.silver}}, 
                       {{stats.tierDistribution.gold}}, 
                       {{stats.tierDistribution.platinum}}],
                backgroundColor: [
                    '#cd7f32',
                    '#c0c0c0',
                    '#ffd700',
                    '#e5e4e2'
                ]
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'bottom'
                }
            }
        }
    });
});

// Member Management Functions
function viewMemberDetails(memberId) {
    window.location.href = `/admin/loyalty/members/${memberId}`;
}

function adjustPoints(memberId, memberName) {
    document.getElementById('memberId').value = memberId;
    document.getElementById('memberName').value = memberName;
    new bootstrap.Modal(document.getElementById('adjustPointsModal')).show();
}

function submitPointsAdjustment() {
    const form = document.getElementById('adjustPointsForm');
    const formData = new FormData(form);
    const data = Object.fromEntries(formData.entries());

    fetch('/admin/loyalty/adjust-points', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert('Points adjusted successfully!');
            location.reload();
        } else {
            alert(data.message || 'Error adjusting points');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Error adjusting points');
    });
}

function exportMemberData() {
    window.location.href = '/admin/loyalty/export';
}
</script>

{{> footer}}

================
File: views/admin/loyalty/member-details.hbs
================
{{> header}}

<div class="container-fluid py-4">
    <!-- Member Profile Header -->
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-body">
                    <div class="row">
                        <div class="col-auto">
                            <div class="avatar avatar-xl position-relative">
                                <img src="{{member.userId.profileImage}}" class="w-100 border-radius-lg shadow-sm">
                            </div>
                        </div>
                        <div class="col-auto my-auto">
                            <div class="h-100">
                                <h5 class="mb-1">{{member.userId.name}}</h5>
                                <p class="mb-0 font-weight-bold text-sm">{{member.userId.email}}</p>
                            </div>
                        </div>
                        <div class="col-lg-4 col-md-6 my-sm-auto ms-sm-auto me-sm-0 mx-auto mt-3">
                            <div class="nav-wrapper position-relative end-0">
                                <button class="btn btn-primary btn-sm ms-auto" data-bs-toggle="modal" data-bs-target="#adjustPointsModal">
                                    Adjust Points
                                </button>
                                <button class="btn btn-info btn-sm ms-2" onclick="sendWelcomeEmail('{{member._id}}')">
                                    Send Welcome Email
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Member Stats -->
    <div class="row">
        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Current Points</p>
                                <h5 class="font-weight-bolder">{{member.points}}</h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-primary shadow-primary text-center rounded-circle">
                                <i class="ni ni-money-coins text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Lifetime Points</p>
                                <h5 class="font-weight-bolder">{{member.lifetimePoints}}</h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-success shadow-success text-center rounded-circle">
                                <i class="ni ni-trophy text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Referrals</p>
                                <h5 class="font-weight-bolder">{{member.referralCount}}</h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-warning shadow-warning text-center rounded-circle">
                                <i class="ni ni-favourite-28 text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Active Rewards</p>
                                <h5 class="font-weight-bolder">
                                    {{countActiveRewards member.rewards}}
                                </h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-info shadow-info text-center rounded-circle">
                                <i class="ni ni-box-2 text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Points History and Rewards -->
    <div class="row">
        <!-- Points History -->
        <div class="col-12 col-xl-8 mb-4">
            <div class="card">
                <div class="card-header pb-0">
                    <div class="d-flex justify-content-between">
                        <h6>Points History</h6>
                        <button class="btn btn-primary btn-sm mb-0" onclick="exportPointsHistory('{{member._id}}')">
                            Export History
                        </button>
                    </div>
                </div>
                <div class="card-body px-0 pt-0 pb-2">
                    <div class="table-responsive p-0">
                        <table class="table align-items-center mb-0">
                            <thead>
                                <tr>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Date</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Points</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Type</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Source</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Description</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{#each member.pointsHistory}}
                                <tr>
                                    <td>
                                        <div class="d-flex px-3 py-1">
                                            <div class="d-flex flex-column justify-content-center">
                                                <h6 class="mb-0 text-sm">{{formatDate date}}</h6>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0 {{#if (lt points 0)}}text-danger{{else}}text-success{{/if}}">
                                            {{#if (lt points 0)}}{{points}}{{else}}+{{points}}{{/if}}
                                        </p>
                                    </td>
                                    <td>
                                        <span class="badge badge-sm bg-gradient-success">{{type}}</span>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">{{source}}</p>
                                    </td>
                                    <td>
                                        <p class="text-sm text-secondary mb-0">{{description}}</p>
                                    </td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <!-- Member Preferences -->
        <div class="col-12 col-xl-4 mb-4">
            <div class="card">
                <div class="card-header pb-0">
                    <h6>Member Preferences</h6>
                </div>
                <div class="card-body">
                    <ul class="list-group">
                        <li class="list-group-item border-0 d-flex justify-content-between ps-0 mb-2 border-radius-lg">
                            <div class="d-flex align-items-center">
                                <div class="icon icon-shape icon-sm me-3 bg-gradient-dark shadow text-center">
                                    <i class="ni ni-box-2 text-white opacity-10"></i>
                                </div>
                                <div class="d-flex flex-column">
                                    <h6 class="mb-1 text-dark text-sm">Room Type</h6>
                                    <span class="text-xs">{{member.preferences.roomType}}</span>
                                </div>
                            </div>
                        </li>
                        <li class="list-group-item border-0 d-flex justify-content-between ps-0 mb-2 border-radius-lg">
                            <div class="d-flex align-items-center">
                                <div class="icon icon-shape icon-sm me-3 bg-gradient-dark shadow text-center">
                                    <i class="ni ni-building text-white opacity-10"></i>
                                </div>
                                <div class="d-flex flex-column">
                                    <h6 class="mb-1 text-dark text-sm">Floor Preference</h6>
                                    <span class="text-xs">{{member.preferences.floorPreference}}</span>
                                </div>
                            </div>
                        </li>
                        <li class="list-group-item border-0 d-flex justify-content-between ps-0 mb-2 border-radius-lg">
                            <div class="d-flex align-items-center">
                                <div class="icon icon-shape icon-sm me-3 bg-gradient-dark shadow text-center">
                                    <i class="ni ni-satisfied text-white opacity-10"></i>
                                </div>
                                <div class="d-flex flex-column">
                                    <h6 class="mb-1 text-dark text-sm">Pillow Type</h6>
                                    <span class="text-xs">{{member.preferences.pillowType}}</span>
                                </div>
                            </div>
                        </li>
                        <li class="list-group-item border-0 d-flex justify-content-between ps-0 mb-2 border-radius-lg">
                            <div class="d-flex align-items-center">
                                <div class="icon icon-shape icon-sm me-3 bg-gradient-dark shadow text-center">
                                    <i class="ni ni-delivery-fast text-white opacity-10"></i>
                                </div>
                                <div class="d-flex flex-column">
                                    <h6 class="mb-1 text-dark text-sm">Newspaper</h6>
                                    <span class="text-xs">{{member.preferences.newspaper}}</span>
                                </div>
                            </div>
                        </li>
                        <li class="list-group-item border-0 d-flex justify-content-between ps-0 mb-2 border-radius-lg">
                            <div class="d-flex align-items-center">
                                <div class="icon icon-shape icon-sm me-3 bg-gradient-dark shadow text-center">
                                    <i class="ni ni-notification-70 text-white opacity-10"></i>
                                </div>
                                <div class="d-flex flex-column">
                                    <h6 class="mb-1 text-dark text-sm">Special Requests</h6>
                                    <span class="text-xs">{{member.preferences.specialRequests}}</span>
                                </div>
                            </div>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>

    <!-- Rewards History -->
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header pb-0">
                    <h6>Rewards History</h6>
                </div>
                <div class="card-body px-0 pt-0 pb-2">
                    <div class="table-responsive p-0">
                        <table class="table align-items-center mb-0">
                            <thead>
                                <tr>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Reward</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Points Cost</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Status</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Expiry Date</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Redeemed At</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{#each member.rewards}}
                                <tr>
                                    <td>
                                        <div class="d-flex px-3 py-1">
                                            <div class="d-flex flex-column justify-content-center">
                                                <h6 class="mb-0 text-sm">{{name}}</h6>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">{{pointsCost}}</p>
                                    </td>
                                    <td>
                                        <span class="badge badge-sm bg-gradient-{{statusColor status}}">
                                            {{status}}
                                        </span>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">{{formatDate expiryDate}}</p>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">
                                            {{#if redeemedAt}}
                                                {{formatDate redeemedAt}}
                                            {{else}}
                                                -
                                            {{/if}}
                                        </p>
                                    </td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Adjust Points Modal -->
<div class="modal fade" id="adjustPointsModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Adjust Member Points</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="adjustPointsForm">
                    <input type="hidden" name="memberId" value="{{member._id}}">
                    <div class="form-group">
                        <label>Points Adjustment</label>
                        <input type="number" name="points" class="form-control" required>
                    </div>
                    <div class="form-group">
                        <label>Reason</label>
                        <select name="reason" class="form-control" required>
                            <option value="bonus">Bonus Points</option>
                            <option value="correction">Point Correction</option>
                            <option value="compensation">Service Compensation</option>
                            <option value="promotion">Promotional Offer</option>
                            <option value="other">Other</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Notes</label>
                        <textarea name="notes" class="form-control" rows="3"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="submitPointsAdjustment()">Submit</button>
            </div>
        </div>
    </div>
</div>

<script>
function submitPointsAdjustment() {
    const form = document.getElementById('adjustPointsForm');
    const formData = new FormData(form);
    const data = Object.fromEntries(formData.entries());

    fetch('/admin/loyalty/adjust-points', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert('Points adjusted successfully!');
            location.reload();
        } else {
            alert(data.message || 'Error adjusting points');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Error adjusting points');
    });
}

function exportPointsHistory(memberId) {
    window.location.href = `/admin/loyalty/members/${memberId}/export-history`;
}

function sendWelcomeEmail(memberId) {
    fetch(`/admin/loyalty/members/${memberId}/send-welcome`, {
        method: 'POST'
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert('Welcome email sent successfully!');
        } else {
            alert(data.message || 'Error sending welcome email');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Error sending welcome email');
    });
}
</script>

{{> footer}}

================
File: views/admin/loyalty/members.hbs
================
{{> header}}

<div class="container-fluid py-4">
    <!-- Member Statistics -->
    <div class="row">
        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Total Members</p>
                                <h5 class="font-weight-bolder">{{formatPoints stats.totalMembers}}</h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-primary shadow-primary text-center rounded-circle">
                                <i class="ni ni-single-02 text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Active Members</p>
                                <h5 class="font-weight-bolder">{{formatPoints stats.activeMembers}}</h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-success shadow-success text-center rounded-circle">
                                <i class="ni ni-check-bold text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Average Points</p>
                                <h5 class="font-weight-bolder">{{formatPoints stats.averagePoints}}</h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-warning shadow-warning text-center rounded-circle">
                                <i class="ni ni-money-coins text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">New This Month</p>
                                <h5 class="font-weight-bolder">{{stats.newMembersThisMonth}}</h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-info shadow-info text-center rounded-circle">
                                <i class="ni ni-chart-bar-32 text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Member Search and Filters -->
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header pb-0">
                    <div class="d-flex justify-content-between align-items-center">
                        <h6>Members</h6>
                        <div class="input-group w-50">
                            <span class="input-group-text"><i class="fas fa-search"></i></span>
                            <input type="text" class="form-control" id="memberSearch" placeholder="Search by name, email, or phone...">
                        </div>
                    </div>
                </div>
                <div class="card-body px-0 pt-0 pb-2">
                    <div class="table-responsive p-0">
                        <table class="table align-items-center mb-0">
                            <thead>
                                <tr>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Member</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Tier</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Points</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Join Date</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Status</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{#each members}}
                                <tr>
                                    <td>
                                        <div class="d-flex px-3 py-1">
                                            <div class="d-flex flex-column justify-content-center">
                                                <h6 class="mb-0 text-sm">{{name}}</h6>
                                                <p class="text-xs text-secondary mb-0">{{email}}</p>
                                                <p class="text-xs text-secondary mb-0">{{formatPhone phone}}</p>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <span class="badge" style="background-color: {{tier.color}}">
                                            {{tier.name}}
                                        </span>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">{{formatPoints points}}</p>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">{{formatDate joinDate}}</p>
                                    </td>
                                    <td>
                                        <span class="badge badge-sm bg-gradient-{{statusColor status}}">
                                            {{status}}
                                        </span>
                                    </td>
                                    <td>
                                        <button class="btn btn-link text-dark px-3 mb-0" onclick="viewMember('{{_id}}')">
                                            <i class="fas fa-eye text-dark me-2"></i>View
                                        </button>
                                        <button class="btn btn-link text-primary px-3 mb-0" onclick="adjustPoints('{{_id}}')">
                                            <i class="fas fa-coins text-primary me-2"></i>Points
                                        </button>
                                        <button class="btn btn-link text-{{#if isActive}}danger{{else}}success{{/if}} px-3 mb-0"
                                                onclick="toggleMemberStatus('{{_id}}')">
                                            <i class="fas fa-{{#if isActive}}times{{else}}check{{/if}} text-{{#if isActive}}danger{{else}}success{{/if}} me-2"></i>
                                            {{#if isActive}}Deactivate{{else}}Activate{{/if}}
                                        </button>
                                    </td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Member Growth Chart -->
    <div class="row mt-4">
        <div class="col-lg-7 mb-4">
            <div class="card">
                <div class="card-header pb-0">
                    <h6>Member Growth</h6>
                </div>
                <div class="card-body">
                    <canvas id="memberGrowthChart"></canvas>
                </div>
            </div>
        </div>

        <!-- Top Point Earners -->
        <div class="col-lg-5 mb-4">
            <div class="card">
                <div class="card-header pb-0">
                    <h6>Top Point Earners</h6>
                </div>
                <div class="card-body px-0 pt-0 pb-2">
                    <div class="table-responsive p-0" style="max-height: 400px; overflow-y: auto;">
                        <table class="table align-items-center mb-0">
                            <thead>
                                <tr>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Member</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Points</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Last Activity</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{#each topEarners}}
                                <tr>
                                    <td>
                                        <div class="d-flex px-3 py-1">
                                            <div class="d-flex flex-column justify-content-center">
                                                <h6 class="mb-0 text-sm">{{name}}</h6>
                                                <p class="text-xs text-secondary mb-0">{{email}}</p>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">{{formatPoints points}}</p>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">{{formatDate lastActivityDate}}</p>
                                    </td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Member Details Modal -->
<div class="modal fade" id="memberModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Member Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="memberDetails">
                <!-- Content will be loaded dynamically -->
            </div>
        </div>
    </div>
</div>

<!-- Adjust Points Modal -->
<div class="modal fade" id="pointsModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Adjust Points</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="pointsForm">
                    <input type="hidden" id="memberId" name="memberId">
                    <div class="form-group">
                        <label>Points Adjustment</label>
                        <input type="number" class="form-control" name="points" required>
                        <small class="text-muted">Enter a positive number to add points or a negative number to deduct points</small>
                    </div>
                    <div class="form-group mt-3">
                        <label>Reason</label>
                        <textarea class="form-control" name="reason" rows="3" required></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="savePointsAdjustment()">Save Changes</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
// Initialize member growth chart
const ctx = document.getElementById('memberGrowthChart').getContext('2d');
new Chart(ctx, {
    type: 'line',
    data: {
        labels: {{{json memberGrowth.labels}}},
        datasets: [
            {
                label: 'Total Members',
                data: {{{json memberGrowth.totalMembers}}},
                borderColor: '#5e72e4',
                tension: 0.4,
                fill: false
            },
            {
                label: 'Active Members',
                data: {{{json memberGrowth.activeMembers}}},
                borderColor: '#2dce89',
                tension: 0.4,
                fill: false
            }
        ]
    },
    options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
            legend: {
                position: 'top'
            }
        },
        scales: {
            y: {
                beginAtZero: true
            }
        }
    }
});

// Member search functionality
document.getElementById('memberSearch').addEventListener('input', function(e) {
    const searchTerm = e.target.value.toLowerCase();
    const rows = document.querySelectorAll('tbody tr');
    
    rows.forEach(row => {
        const name = row.querySelector('h6').textContent.toLowerCase();
        const email = row.querySelector('p').textContent.toLowerCase();
        const phone = row.querySelectorAll('p')[1].textContent.toLowerCase();
        
        if (name.includes(searchTerm) || email.includes(searchTerm) || phone.includes(searchTerm)) {
            row.style.display = '';
        } else {
            row.style.display = 'none';
        }
    });
});

function viewMember(memberId) {
    fetch(`/api/v1/loyalty/members/${memberId}`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const member = data.data;
                const details = `
                    <div class="row">
                        <div class="col-md-6">
                            <h6>Personal Information</h6>
                            <p><strong>Name:</strong> ${member.name}</p>
                            <p><strong>Email:</strong> ${member.email}</p>
                            <p><strong>Phone:</strong> ${member.phone}</p>
                            <p><strong>Join Date:</strong> ${formatDate(member.joinDate)}</p>
                        </div>
                        <div class="col-md-6">
                            <h6>Loyalty Status</h6>
                            <p><strong>Current Tier:</strong> <span class="badge" style="background-color: ${member.tier.color}">${member.tier.name}</span></p>
                            <p><strong>Points Balance:</strong> ${formatPoints(member.points)}</p>
                            <p><strong>Lifetime Points:</strong> ${formatPoints(member.lifetimePoints)}</p>
                        </div>
                    </div>
                    <div class="row mt-4">
                        <div class="col-12">
                            <h6>Recent Activity</h6>
                            <div class="table-responsive">
                                <table class="table align-items-center mb-0">
                                    <thead>
                                        <tr>
                                            <th>Date</th>
                                            <th>Activity</th>
                                            <th>Points</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        ${member.recentActivity.map(activity => `
                                            <tr>
                                                <td>${formatDate(activity.date)}</td>
                                                <td>${activity.description}</td>
                                                <td class="text-${activity.points >= 0 ? 'success' : 'danger'}">
                                                    ${activity.points >= 0 ? '+' : ''}${formatPoints(activity.points)}
                                                </td>
                                            </tr>
                                        `).join('')}
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                `;
                document.getElementById('memberDetails').innerHTML = details;
                new bootstrap.Modal(document.getElementById('memberModal')).show();
            }
        });
}

function adjustPoints(memberId) {
    document.getElementById('memberId').value = memberId;
    document.getElementById('pointsForm').reset();
    new bootstrap.Modal(document.getElementById('pointsModal')).show();
}

function savePointsAdjustment() {
    const form = document.getElementById('pointsForm');
    const formData = new FormData(form);
    
    const data = {
        memberId: formData.get('memberId'),
        points: parseInt(formData.get('points')),
        reason: formData.get('reason')
    };

    fetch('/api/v1/loyalty/adjust-points', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            location.reload();
        } else {
            alert(data.message || 'Error adjusting points');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Error adjusting points');
    });
}

function toggleMemberStatus(memberId) {
    if (!confirm('Are you sure you want to change this member\'s status?')) return;

    fetch(`/api/v1/loyalty/members/${memberId}/toggle-status`, {
        method: 'POST'
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            location.reload();
        } else {
            alert(data.message || 'Error toggling member status');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Error toggling member status');
    });
}

function formatDate(date) {
    return new Date(date).toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'short',
        day: 'numeric'
    });
}

function formatPoints(points) {
    return points.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
}
</script>

{{> footer}}

================
File: views/admin/loyalty/referrals.hbs
================
{{> header}}

<div class="container-fluid py-4">
    <!-- Referral Statistics -->
    <div class="row">
        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Total Referrals</p>
                                <h5 class="font-weight-bolder">{{stats.totalReferrals}}</h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-primary shadow-primary text-center rounded-circle">
                                <i class="ni ni-send text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Conversion Rate</p>
                                <h5 class="font-weight-bolder">{{stats.conversionRate}}%</h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-success shadow-success text-center rounded-circle">
                                <i class="ni ni-chart-bar-32 text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Points Awarded</p>
                                <h5 class="font-weight-bolder">{{stats.totalPointsAwarded}}</h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-warning shadow-warning text-center rounded-circle">
                                <i class="ni ni-money-coins text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Active Referrals</p>
                                <h5 class="font-weight-bolder">{{stats.activeReferrals}}</h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-info shadow-info text-center rounded-circle">
                                <i class="ni ni-active-40 text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Top Referrers -->
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header pb-0">
                    <h6>Top Referrers</h6>
                </div>
                <div class="card-body px-0 pt-0 pb-2">
                    <div class="table-responsive p-0">
                        <table class="table align-items-center mb-0">
                            <thead>
                                <tr>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Member</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Total Referrals</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Points Earned</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Conversion Rate</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{#each topReferrers}}
                                <tr>
                                    <td>
                                        <div class="d-flex px-3 py-1">
                                            <div class="d-flex flex-column justify-content-center">
                                                <h6 class="mb-0 text-sm">{{name}}</h6>
                                                <p class="text-xs text-secondary mb-0">{{email}}</p>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">{{totalReferrals}}</p>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">{{totalPoints}}</p>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">{{conversionRate}}%</p>
                                    </td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Monthly Trends -->
    <div class="row mt-4">
        <div class="col-lg-7 mb-4">
            <div class="card">
                <div class="card-header pb-0">
                    <h6>Monthly Referral Trends</h6>
                </div>
                <div class="card-body">
                    <canvas id="referralTrendsChart"></canvas>
                </div>
            </div>
        </div>

        <!-- Recent Referrals -->
        <div class="col-lg-5 mb-4">
            <div class="card">
                <div class="card-header pb-0 d-flex justify-content-between align-items-center">
                    <h6>Recent Referrals</h6>
                    <button class="btn btn-danger btn-sm" onclick="processExpiredReferrals()">
                        Process Expired
                    </button>
                </div>
                <div class="card-body px-0 pt-0 pb-2">
                    <div class="table-responsive p-0" style="max-height: 400px; overflow-y: auto;">
                        <table class="table align-items-center mb-0">
                            <thead>
                                <tr>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Referrer</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Code</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Status</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Expiry</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{#each recentReferrals}}
                                <tr>
                                    <td>
                                        <div class="d-flex px-3 py-1">
                                            <div class="d-flex flex-column justify-content-center">
                                                <h6 class="mb-0 text-sm">{{referrer.name}}</h6>
                                                <p class="text-xs text-secondary mb-0">{{referrer.email}}</p>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">{{code}}</p>
                                    </td>
                                    <td>
                                        <span class="badge badge-sm bg-gradient-{{statusColor status}}">
                                            {{status}}
                                        </span>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0 {{#if (isExpiringSoon expiryDate)}}text-danger{{/if}}">
                                            {{formatDate expiryDate}}
                                        </p>
                                    </td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Referral Settings -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h6>Referral Program Settings</h6>
                </div>
                <div class="card-body">
                    <form id="settingsForm" class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>Referrer Bonus Points</label>
                                <input type="number" class="form-control" name="referrerPoints" value="{{settings.referrerPoints}}" required>
                                <small class="text-muted">Points awarded to the referrer when a referred member completes their first booking</small>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>Referee Welcome Points</label>
                                <input type="number" class="form-control" name="refereePoints" value="{{settings.refereePoints}}" required>
                                <small class="text-muted">Points awarded to new members who join through a referral</small>
                            </div>
                        </div>
                        <div class="col-md-6 mt-3">
                            <div class="form-group">
                                <label>Referral Code Validity (Days)</label>
                                <input type="number" class="form-control" name="validityDays" value="{{settings.validityDays}}" required>
                                <small class="text-muted">Number of days before a referral code expires</small>
                            </div>
                        </div>
                        <div class="col-12 mt-4">
                            <button type="button" class="btn btn-primary" onclick="saveSettings()">Save Settings</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
// Initialize referral trends chart
const ctx = document.getElementById('referralTrendsChart').getContext('2d');
new Chart(ctx, {
    type: 'line',
    data: {
        labels: {{{json monthlyTrends.labels}}},
        datasets: [
            {
                label: 'Total Referrals',
                data: {{{json monthlyTrends.totalReferrals}}},
                borderColor: '#5e72e4',
                tension: 0.4,
                fill: false
            },
            {
                label: 'Completed Referrals',
                data: {{{json monthlyTrends.completedReferrals}}},
                borderColor: '#2dce89',
                tension: 0.4,
                fill: false
            }
        ]
    },
    options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
            legend: {
                position: 'top'
            }
        },
        scales: {
            y: {
                beginAtZero: true
            }
        }
    }
});

function processExpiredReferrals() {
    if (!confirm('Are you sure you want to process expired referrals?')) return;

    fetch('/api/v1/referrals/process-expired', {
        method: 'POST'
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert(data.message);
            location.reload();
        } else {
            alert(data.message || 'Error processing expired referrals');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Error processing expired referrals');
    });
}

function saveSettings() {
    const form = document.getElementById('settingsForm');
    const formData = new FormData(form);
    
    const data = {
        referrerPoints: parseInt(formData.get('referrerPoints')),
        refereePoints: parseInt(formData.get('refereePoints')),
        validityDays: parseInt(formData.get('validityDays'))
    };

    fetch('/api/v1/referrals/settings', {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert('Settings updated successfully!');
            location.reload();
        } else {
            alert(data.message || 'Error updating settings');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Error updating settings');
    });
}
</script>

{{> footer}}

================
File: views/admin/loyalty/rewards.hbs
================
{{> header}}

<div class="container-fluid py-4">
    <!-- Rewards Overview -->
    <div class="row">
        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Active Rewards</p>
                                <h5 class="font-weight-bolder">{{stats.activeRewards}}</h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-primary shadow-primary text-center rounded-circle">
                                <i class="ni ni-box-2 text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Total Redemptions</p>
                                <h5 class="font-weight-bolder">{{stats.totalRedemptions}}</h5>
                                <p class="mb-0 text-sm">
                                    <span class="text-success text-sm font-weight-bolder">{{stats.redemptionsThisMonth}}</span>
                                    this month
                                </p>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-success shadow-success text-center rounded-circle">
                                <i class="ni ni-cart text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Points Redeemed</p>
                                <h5 class="font-weight-bolder">{{stats.totalPointsRedeemed}}</h5>
                                <p class="mb-0 text-sm">
                                    <span class="text-success text-sm font-weight-bolder">{{stats.pointsRedeemedThisMonth}}</span>
                                    this month
                                </p>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-warning shadow-warning text-center rounded-circle">
                                <i class="ni ni-money-coins text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Avg. Satisfaction</p>
                                <h5 class="font-weight-bolder">{{stats.averageSatisfaction}}/5</h5>
                                <p class="mb-0 text-sm">
                                    <span class="text-success text-sm font-weight-bolder">+{{stats.satisfactionIncrease}}%</span>
                                    vs last month
                                </p>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-info shadow-info text-center rounded-circle">
                                <i class="ni ni-like-2 text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Rewards List -->
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header pb-0">
                    <div class="d-flex justify-content-between align-items-center">
                        <h6>Rewards Catalog</h6>
                        <button class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#addRewardModal">
                            Add New Reward
                        </button>
                    </div>
                </div>
                <div class="card-body px-0 pt-0 pb-2">
                    <div class="table-responsive p-0">
                        <table class="table align-items-center mb-0">
                            <thead>
                                <tr>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Reward</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Category</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Points Required</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Availability</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Redemptions</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{#each rewards}}
                                <tr>
                                    <td>
                                        <div class="d-flex px-3 py-1">
                                            <div>
                                                <img src="{{image}}" class="avatar me-3">
                                            </div>
                                            <div class="d-flex flex-column justify-content-center">
                                                <h6 class="mb-0 text-sm">{{name}}</h6>
                                                <p class="text-sm text-secondary mb-0">{{description}}</p>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <span class="badge badge-sm bg-gradient-{{categoryColor category}}">
                                            {{category}}
                                        </span>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">{{pointsRequired}}</p>
                                    </td>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            {{#if isActive}}
                                            <span class="badge badge-sm bg-gradient-success me-2">Active</span>
                                            {{else}}
                                            <span class="badge badge-sm bg-gradient-secondary me-2">Inactive</span>
                                            {{/if}}
                                            {{#if limitedQuantity}}
                                            <span class="text-xs">{{remainingQuantity}} left</span>
                                            {{else}}
                                            <span class="text-xs">Unlimited</span>
                                            {{/if}}
                                        </div>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">{{redemptionCount}}</p>
                                        <p class="text-xs text-secondary mb-0">Last: {{formatDate lastRedemption}}</p>
                                    </td>
                                    <td>
                                        <button class="btn btn-link text-dark px-3 mb-0" 
                                                onclick="editReward('{{_id}}')">
                                            <i class="fas fa-pencil-alt text-dark me-2"></i>Edit
                                        </button>
                                        <button class="btn btn-link text-danger px-3 mb-0"
                                                onclick="toggleReward('{{_id}}', {{isActive}})">
                                            {{#if isActive}}
                                            <i class="fas fa-times text-danger me-2"></i>Deactivate
                                            {{else}}
                                            <i class="fas fa-check text-success me-2"></i>Activate
                                            {{/if}}
                                        </button>
                                    </td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Redemption History -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header pb-0">
                    <div class="d-flex justify-content-between align-items-center">
                        <h6>Recent Redemptions</h6>
                        <button class="btn btn-info btn-sm" onclick="exportRedemptions()">
                            Export Data
                        </button>
                    </div>
                </div>
                <div class="card-body px-0 pt-0 pb-2">
                    <div class="table-responsive p-0">
                        <table class="table align-items-center mb-0">
                            <thead>
                                <tr>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Member</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Reward</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Points Used</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Date</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Status</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Rating</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{#each redemptions}}
                                <tr>
                                    <td>
                                        <div class="d-flex px-3 py-1">
                                            <div>
                                                <img src="{{member.profileImage}}" class="avatar me-3">
                                            </div>
                                            <div class="d-flex flex-column justify-content-center">
                                                <h6 class="mb-0 text-sm">{{member.name}}</h6>
                                                <p class="text-sm text-secondary mb-0">{{member.email}}</p>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">{{reward.name}}</p>
                                        <p class="text-xs text-secondary mb-0">{{reward.category}}</p>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">{{pointsUsed}}</p>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">{{formatDate date}}</p>
                                    </td>
                                    <td>
                                        <span class="badge badge-sm bg-gradient-{{statusColor status}}">
                                            {{status}}
                                        </span>
                                    </td>
                                    <td>
                                        {{#if rating}}
                                        <div class="d-flex align-items-center">
                                            <span class="text-sm font-weight-bold me-2">{{rating}}</span>
                                            <div class="rating-stars">
                                                {{#times rating}}
                                                <i class="fas fa-star text-warning"></i>
                                                {{/times}}
                                                {{#times (subtract 5 rating)}}
                                                <i class="far fa-star text-warning"></i>
                                                {{/times}}
                                            </div>
                                        </div>
                                        {{else}}
                                        <span class="text-xs text-secondary">Not rated</span>
                                        {{/if}}
                                    </td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add/Edit Reward Modal -->
<div class="modal fade" id="rewardModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="rewardModalTitle">Add New Reward</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="rewardForm">
                    <input type="hidden" id="rewardId" name="rewardId">
                    <div class="form-group">
                        <label>Reward Name</label>
                        <input type="text" name="name" class="form-control" required>
                    </div>
                    <div class="form-group">
                        <label>Description</label>
                        <textarea name="description" class="form-control" rows="3" required></textarea>
                    </div>
                    <div class="form-group">
                        <label>Category</label>
                        <select name="category" class="form-control" required>
                            <option value="room_upgrade">Room Upgrade</option>
                            <option value="dining">Dining</option>
                            <option value="spa">Spa & Wellness</option>
                            <option value="experience">Experience</option>
                            <option value="service">Service</option>
                            <option value="other">Other</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Points Required</label>
                        <input type="number" name="pointsRequired" class="form-control" required>
                    </div>
                    <div class="form-group">
                        <label>Image URL</label>
                        <input type="url" name="image" class="form-control">
                    </div>
                    <div class="form-group">
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" name="limitedQuantity" id="limitedQuantitySwitch">
                            <label class="form-check-label">Limited Quantity</label>
                        </div>
                    </div>
                    <div class="form-group" id="quantityGroup" style="display: none;">
                        <label>Available Quantity</label>
                        <input type="number" name="quantity" class="form-control">
                    </div>
                    <div class="form-group">
                        <label>Validity Period (days)</label>
                        <input type="number" name="validityPeriod" class="form-control" required>
                    </div>
                    <div class="form-group">
                        <label>Terms & Conditions</label>
                        <textarea name="terms" class="form-control" rows="3"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="saveReward()">Save Reward</button>
            </div>
        </div>
    </div>
</div>

<script>
// Form handling
document.getElementById('limitedQuantitySwitch').addEventListener('change', function() {
    document.getElementById('quantityGroup').style.display = this.checked ? 'block' : 'none';
});

// Reward management functions
function editReward(rewardId) {
    fetch(`/admin/loyalty/rewards/${rewardId}`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const reward = data.reward;
                document.getElementById('rewardModalTitle').textContent = 'Edit Reward';
                document.getElementById('rewardId').value = reward._id;
                
                const form = document.getElementById('rewardForm');
                form.name.value = reward.name;
                form.description.value = reward.description;
                form.category.value = reward.category;
                form.pointsRequired.value = reward.pointsRequired;
                form.image.value = reward.image;
                form.validityPeriod.value = reward.validityPeriod;
                form.terms.value = reward.terms;
                
                const limitedSwitch = document.getElementById('limitedQuantitySwitch');
                limitedSwitch.checked = reward.limitedQuantity;
                document.getElementById('quantityGroup').style.display = reward.limitedQuantity ? 'block' : 'none';
                if (reward.limitedQuantity) {
                    form.quantity.value = reward.quantity;
                }
                
                new bootstrap.Modal(document.getElementById('rewardModal')).show();
            } else {
                alert(data.message || 'Error loading reward details');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Error loading reward details');
        });
}

function saveReward() {
    const form = document.getElementById('rewardForm');
    const formData = new FormData(form);
    const data = Object.fromEntries(formData.entries());
    const rewardId = data.rewardId;
    
    const url = rewardId ? 
        `/admin/loyalty/rewards/${rewardId}` : 
        '/admin/loyalty/rewards';
        
    fetch(url, {
        method: rewardId ? 'PUT' : 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert('Reward saved successfully!');
            location.reload();
        } else {
            alert(data.message || 'Error saving reward');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Error saving reward');
    });
}

function toggleReward(rewardId, currentStatus) {
    const action = currentStatus ? 'deactivate' : 'activate';
    if (!confirm(`Are you sure you want to ${action} this reward?`)) return;
    
    fetch(`/admin/loyalty/rewards/${rewardId}/toggle`, {
        method: 'POST'
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            location.reload();
        } else {
            alert(data.message || `Error ${action}ing reward`);
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert(`Error ${action}ing reward`);
    });
}

function exportRedemptions() {
    window.location.href = '/admin/loyalty/rewards/export-redemptions';
}
</script>

{{> footer}}

================
File: views/admin/loyalty/tiers.hbs
================
{{> header}}

<div class="container-fluid py-4">
    <!-- Tier Statistics -->
    <div class="row">
        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Total Members</p>
                                <h5 class="font-weight-bolder">{{stats.totalMembers}}</h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-primary shadow-primary text-center rounded-circle">
                                <i class="ni ni-single-02 text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Upgrade Candidates</p>
                                <h5 class="font-weight-bolder">{{stats.upgradeCandidates}}</h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-success shadow-success text-center rounded-circle">
                                <i class="ni ni-trophy text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Average Points</p>
                                <h5 class="font-weight-bolder">{{stats.averagePoints}}</h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-warning shadow-warning text-center rounded-circle">
                                <i class="ni ni-money-coins text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Upgrades This Month</p>
                                <h5 class="font-weight-bolder">{{stats.monthlyUpgrades}}</h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-info shadow-info text-center rounded-circle">
                                <i class="ni ni-chart-bar-32 text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Tier Management -->
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header pb-0 d-flex justify-content-between align-items-center">
                    <h6>Membership Tiers</h6>
                    <button class="btn btn-primary btn-sm" onclick="showCreateTierModal()">
                        <i class="fas fa-plus"></i> Add Tier
                    </button>
                </div>
                <div class="card-body px-0 pt-0 pb-2">
                    <div class="table-responsive p-0">
                        <table class="table align-items-center mb-0">
                            <thead>
                                <tr>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Tier</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Points Required</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Multiplier</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Members</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Status</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{#each tiers}}
                                <tr>
                                    <td>
                                        <div class="d-flex px-3 py-1">
                                            <div>
                                                <i class="{{icon}} text-lg me-3" style="color: {{color}}"></i>
                                            </div>
                                            <div class="d-flex flex-column justify-content-center">
                                                <h6 class="mb-0 text-sm">{{name}}</h6>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">{{minimumPoints}}</p>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">{{pointsMultiplier}}x</p>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">{{memberCount}}</p>
                                    </td>
                                    <td>
                                        <span class="badge badge-sm bg-gradient-{{#if isActive}}success{{else}}danger{{/if}}">
                                            {{#if isActive}}Active{{else}}Inactive{{/if}}
                                        </span>
                                    </td>
                                    <td>
                                        <button class="btn btn-link text-dark px-3 mb-0" onclick="editTier('{{_id}}')">
                                            <i class="fas fa-pencil-alt text-dark me-2"></i>Edit
                                        </button>
                                        <button class="btn btn-link text-{{#if isActive}}danger{{else}}success{{/if}} px-3 mb-0"
                                                onclick="toggleTier('{{_id}}')">
                                            <i class="fas fa-{{#if isActive}}times{{else}}check{{/if}} text-{{#if isActive}}danger{{else}}success{{/if}} me-2"></i>
                                            {{#if isActive}}Deactivate{{else}}Activate{{/if}}
                                        </button>
                                    </td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Tier Distribution Chart -->
    <div class="row mt-4">
        <div class="col-lg-7 mb-4">
            <div class="card">
                <div class="card-header pb-0">
                    <h6>Member Distribution by Tier</h6>
                </div>
                <div class="card-body">
                    <canvas id="tierDistributionChart"></canvas>
                </div>
            </div>
        </div>

        <!-- Upgrade Candidates -->
        <div class="col-lg-5 mb-4">
            <div class="card">
                <div class="card-header pb-0 d-flex justify-content-between align-items-center">
                    <h6>Upgrade Candidates</h6>
                    <button class="btn btn-success btn-sm" onclick="processUpgrades()">
                        Process Upgrades
                    </button>
                </div>
                <div class="card-body px-0 pt-0 pb-2">
                    <div class="table-responsive p-0" style="max-height: 400px; overflow-y: auto;">
                        <table class="table align-items-center mb-0">
                            <thead>
                                <tr>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Member</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Current Tier</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Next Tier</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Points</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{#each upgradeCandidates}}
                                <tr>
                                    <td>
                                        <div class="d-flex px-3 py-1">
                                            <div class="d-flex flex-column justify-content-center">
                                                <h6 class="mb-0 text-sm">{{name}}</h6>
                                                <p class="text-xs text-secondary mb-0">{{email}}</p>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <span class="badge" style="background-color: {{currentTier.color}}">
                                            {{currentTier.name}}
                                        </span>
                                    </td>
                                    <td>
                                        <span class="badge" style="background-color: {{nextTier.color}}">
                                            {{nextTier.name}}
                                        </span>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">{{points}}</p>
                                    </td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create/Edit Tier Modal -->
<div class="modal fade" id="tierModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="tierModalTitle">Add New Tier</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="tierForm">
                    <input type="hidden" id="tierId" name="tierId">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>Tier Name</label>
                                <select class="form-control" name="name" id="tierName" required>
                                    <option value="Bronze">Bronze</option>
                                    <option value="Silver">Silver</option>
                                    <option value="Gold">Gold</option>
                                    <option value="Platinum">Platinum</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>Minimum Points</label>
                                <input type="number" class="form-control" name="minimumPoints" required>
                            </div>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>Points Multiplier</label>
                                <input type="number" class="form-control" name="pointsMultiplier" step="0.1" required>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>Upgrade Bonus Points</label>
                                <input type="number" class="form-control" name="upgradeBonusPoints" required>
                            </div>
                        </div>
                    </div>
                    <div class="form-group mt-3">
                        <label>Benefits</label>
                        <div id="benefitsContainer">
                            <div class="benefit-item d-flex mb-2">
                                <input type="text" class="form-control" name="benefits[]" required>
                                <button type="button" class="btn btn-danger ms-2" onclick="removeBenefit(this)">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </div>
                        <button type="button" class="btn btn-success btn-sm mt-2" onclick="addBenefit()">
                            <i class="fas fa-plus"></i> Add Benefit
                        </button>
                    </div>
                    <div class="row mt-3">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>Color</label>
                                <input type="color" class="form-control" name="color" required>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>Icon</label>
                                <select class="form-control" name="icon" required>
                                    <option value="fas fa-medal">Medal</option>
                                    <option value="fas fa-star">Star</option>
                                    <option value="fas fa-crown">Crown</option>
                                    <option value="fas fa-gem">Gem</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="saveTier()">Save Tier</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
// Initialize tier distribution chart
const ctx = document.getElementById('tierDistributionChart').getContext('2d');
new Chart(ctx, {
    type: 'doughnut',
    data: {
        labels: {{{json tierDistributionLabels}}},
        datasets: [{
            data: {{{json tierDistributionData}}},
            backgroundColor: {{{json tierColors}}},
            borderWidth: 0
        }]
    },
    options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
            legend: {
                position: 'right'
            }
        }
    }
});

// Tier management functions
function showCreateTierModal() {
    document.getElementById('tierModalTitle').textContent = 'Add New Tier';
    document.getElementById('tierForm').reset();
    document.getElementById('tierId').value = '';
    new bootstrap.Modal(document.getElementById('tierModal')).show();
}

function editTier(tierId) {
    fetch(`/api/v1/tiers/${tierId}`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const tier = data.data;
                document.getElementById('tierModalTitle').textContent = 'Edit Tier';
                document.getElementById('tierId').value = tier._id;
                document.getElementById('tierName').value = tier.name;
                document.querySelector('input[name="minimumPoints"]').value = tier.minimumPoints;
                document.querySelector('input[name="pointsMultiplier"]').value = tier.pointsMultiplier;
                document.querySelector('input[name="upgradeBonusPoints"]').value = tier.upgradeBonusPoints;
                document.querySelector('input[name="color"]').value = tier.color;
                document.querySelector('select[name="icon"]').value = tier.icon;

                // Clear and repopulate benefits
                const container = document.getElementById('benefitsContainer');
                container.innerHTML = '';
                tier.benefits.forEach(benefit => {
                    addBenefit(benefit);
                });

                new bootstrap.Modal(document.getElementById('tierModal')).show();
            }
        });
}

function toggleTier(tierId) {
    if (!confirm('Are you sure you want to change this tier\'s status?')) return;

    fetch(`/api/v1/tiers/${tierId}/toggle`, {
        method: 'POST'
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            location.reload();
        } else {
            alert(data.message || 'Error toggling tier status');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Error toggling tier status');
    });
}

function saveTier() {
    const form = document.getElementById('tierForm');
    const formData = new FormData(form);
    const tierId = formData.get('tierId');
    
    const data = {
        name: formData.get('name'),
        minimumPoints: parseInt(formData.get('minimumPoints')),
        pointsMultiplier: parseFloat(formData.get('pointsMultiplier')),
        upgradeBonusPoints: parseInt(formData.get('upgradeBonusPoints')),
        benefits: Array.from(formData.getAll('benefits[]')),
        color: formData.get('color'),
        icon: formData.get('icon')
    };

    const url = tierId ? `/api/v1/tiers/${tierId}` : '/api/v1/tiers';
    const method = tierId ? 'PUT' : 'POST';

    fetch(url, {
        method,
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            location.reload();
        } else {
            alert(data.message || 'Error saving tier');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Error saving tier');
    });
}

function addBenefit(value = '') {
    const container = document.getElementById('benefitsContainer');
    const div = document.createElement('div');
    div.className = 'benefit-item d-flex mb-2';
    div.innerHTML = `
        <input type="text" class="form-control" name="benefits[]" value="${value}" required>
        <button type="button" class="btn btn-danger ms-2" onclick="removeBenefit(this)">
            <i class="fas fa-times"></i>
        </button>
    `;
    container.appendChild(div);
}

function removeBenefit(button) {
    button.closest('.benefit-item').remove();
}

function processUpgrades() {
    if (!confirm('Are you sure you want to process tier upgrades?')) return;

    fetch('/api/v1/tiers/process-upgrades', {
        method: 'POST'
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert(`Processed ${data.data.length} tier upgrades successfully!`);
            location.reload();
        } else {
            alert(data.message || 'Error processing upgrades');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Error processing upgrades');
    });
}
</script>

{{> footer}}

================
File: views/admin/marketing/campaigns.hbs
================
{{> header}}

<div class="container-fluid py-4">
    <!-- Campaign Stats -->
    <div class="row">
        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Total Campaigns</p>
                                <h5 class="font-weight-bolder">{{stats.totalCampaigns}}</h5>
                                <p class="mb-0 text-sm">
                                    <span class="text-success text-sm font-weight-bolder">{{stats.activeCampaigns}}</span>
                                    active
                                </p>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-primary shadow-primary text-center rounded-circle">
                                <i class="ni ni-email-83 text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Open Rate</p>
                                <h5 class="font-weight-bolder">{{stats.openRate}}%</h5>
                                <p class="mb-0 text-sm">
                                    <span class="text-{{stats.openRateTrend.color}} text-sm font-weight-bolder">{{stats.openRateTrend.value}}%</span>
                                    vs avg
                                </p>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-success shadow-success text-center rounded-circle">
                                <i class="ni ni-send text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Click Rate</p>
                                <h5 class="font-weight-bolder">{{stats.clickRate}}%</h5>
                                <p class="mb-0 text-sm">
                                    <span class="text-{{stats.clickRateTrend.color}} text-sm font-weight-bolder">{{stats.clickRateTrend.value}}%</span>
                                    vs avg
                                </p>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-warning shadow-warning text-center rounded-circle">
                                <i class="ni ni-curved-next text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Total Recipients</p>
                                <h5 class="font-weight-bolder">{{stats.totalRecipients}}</h5>
                                <p class="mb-0 text-sm">
                                    <span class="text-success text-sm font-weight-bolder">{{stats.deliveryRate}}%</span>
                                    delivery rate
                                </p>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-info shadow-info text-center rounded-circle">
                                <i class="ni ni-world text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Campaigns List -->
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header pb-0">
                    <div class="d-flex justify-content-between align-items-center">
                        <h6>Email Campaigns</h6>
                        <button class="btn btn-primary btn-sm mb-0" data-bs-toggle="modal" data-bs-target="#newCampaignModal">
                            <i class="fas fa-plus"></i> New Campaign
                        </button>
                    </div>
                </div>
                <div class="card-body px-0 pt-0 pb-2">
                    <div class="table-responsive p-0">
                        <table class="table align-items-center mb-0">
                            <thead>
                                <tr>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Campaign</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Status</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Recipients</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Open Rate</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Click Rate</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Sent Date</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{#each campaigns}}
                                <tr>
                                    <td>
                                        <div class="d-flex px-3 py-1">
                                            <div class="d-flex flex-column justify-content-center">
                                                <h6 class="mb-0 text-sm">{{name}}</h6>
                                                <p class="text-xs text-secondary mb-0">{{subject}}</p>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <span class="badge badge-sm bg-gradient-{{statusColor status}}">{{status}}</span>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">{{recipientCount}}</p>
                                    </td>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <span class="text-sm font-weight-bold me-2">{{openRate}}%</span>
                                            <div class="progress" style="width: 100px">
                                                <div class="progress-bar bg-gradient-info" role="progressbar" 
                                                    aria-valuenow="{{openRate}}" aria-valuemin="0" aria-valuemax="100" 
                                                    style="width: {{openRate}}%">
                                                </div>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <span class="text-sm font-weight-bold me-2">{{clickRate}}%</span>
                                            <div class="progress" style="width: 100px">
                                                <div class="progress-bar bg-gradient-success" role="progressbar" 
                                                    aria-valuenow="{{clickRate}}" aria-valuemin="0" aria-valuemax="100" 
                                                    style="width: {{clickRate}}%">
                                                </div>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">{{formatDateTime sentAt}}</p>
                                    </td>
                                    <td>
                                        <div class="btn-group">
                                            <button class="btn btn-link text-secondary mb-0" onclick="viewCampaignStats('{{_id}}')">
                                                <i class="fas fa-chart-line fa-fw"></i>
                                            </button>
                                            <button class="btn btn-link text-secondary mb-0" onclick="duplicateCampaign('{{_id}}')">
                                                <i class="fas fa-copy fa-fw"></i>
                                            </button>
                                            {{#if (eq status "draft")}}
                                            <button class="btn btn-link text-secondary mb-0" onclick="editCampaign('{{_id}}')">
                                                <i class="fas fa-edit fa-fw"></i>
                                            </button>
                                            {{/if}}
                                        </div>
                                    </td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Performance Charts -->
    <div class="row">
        <div class="col-lg-7">
            <div class="card z-index-2">
                <div class="card-header pb-0">
                    <h6>Campaign Performance Trends</h6>
                </div>
                <div class="card-body p-3">
                    <div class="chart">
                        <canvas id="campaignChart" class="chart-canvas" height="300"></canvas>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-5">
            <div class="card">
                <div class="card-header pb-0">
                    <h6>Top Performing Campaigns</h6>
                </div>
                <div class="card-body p-3">
                    <div class="timeline timeline-one-side">
                        {{#each topCampaigns}}
                        <div class="timeline-block mb-3">
                            <span class="timeline-step">
                                <i class="ni ni-trophy text-success text-gradient"></i>
                            </span>
                            <div class="timeline-content">
                                <h6 class="text-dark text-sm font-weight-bold mb-0">{{name}}</h6>
                                <p class="text-secondary font-weight-bold text-xs mt-1 mb-0">
                                    {{openRate}}% open rate | {{clickRate}}% click rate
                                </p>
                            </div>
                        </div>
                        {{/each}}
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- New Campaign Modal -->
<div class="modal fade" id="newCampaignModal" tabindex="-1" role="dialog" aria-labelledby="newCampaignModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="newCampaignModalLabel">New Email Campaign</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="newCampaignForm">
                    <div class="form-group">
                        <label>Campaign Name</label>
                        <input type="text" class="form-control" name="name" required>
                    </div>
                    <div class="form-group">
                        <label>Subject Line</label>
                        <input type="text" class="form-control" name="subject" required>
                    </div>
                    <div class="form-group">
                        <label>Template</label>
                        <select class="form-control" name="template" required>
                            <option value="promotion">Promotion</option>
                            <option value="newsletter">Newsletter</option>
                            <option value="event">Event</option>
                            <option value="loyalty">Loyalty Program</option>
                            <option value="seasonal">Seasonal</option>
                            <option value="custom">Custom</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Target Audience</label>
                        <select class="form-control" name="targetAudience" required>
                            <option value="all_guests">All Guests</option>
                            <option value="loyalty_members">Loyalty Members</option>
                            <option value="recent_guests">Recent Guests</option>
                            <option value="inactive_guests">Inactive Guests</option>
                            <option value="custom">Custom Segment</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Content</label>
                        <textarea class="form-control" name="content" rows="10" required></textarea>
                    </div>
                    <div class="form-group">
                        <label>Schedule Send</label>
                        <input type="datetime-local" class="form-control" name="scheduledDate">
                        <small class="text-muted">Leave blank to send immediately</small>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-info" onclick="previewCampaign()">Preview</button>
                <button type="button" class="btn btn-primary" onclick="createCampaign()">Create Campaign</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
// Initialize campaign performance chart
const ctx = document.getElementById('campaignChart').getContext('2d');
new Chart(ctx, {
    type: 'line',
    data: {
        labels: {{{json chartData.labels}}},
        datasets: [
            {
                label: 'Open Rate',
                data: {{{json chartData.openRates}}},
                borderColor: '#5e72e4',
                tension: 0.4,
                fill: false
            },
            {
                label: 'Click Rate',
                data: {{{json chartData.clickRates}}},
                borderColor: '#2dce89',
                tension: 0.4,
                fill: false
            }
        ]
    },
    options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
            legend: {
                position: 'top'
            }
        },
        scales: {
            y: {
                beginAtZero: true,
                max: 100
            }
        }
    }
});

async function createCampaign() {
    try {
        const form = document.getElementById('newCampaignForm');
        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());

        const response = await fetch('/api/marketing/campaigns', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });

        if (response.ok) {
            window.location.reload();
        } else {
            alert('Error creating campaign');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error creating campaign');
    }
}

function previewCampaign() {
    // Implement campaign preview functionality
}

function viewCampaignStats(id) {
    // Implement campaign statistics view
}

function duplicateCampaign(id) {
    // Implement campaign duplication
}

function editCampaign(id) {
    // Implement campaign editing
}
</script>

{{> footer}}

================
File: views/admin/marketing/promotions.hbs
================
{{> header}}

<div class="container-fluid py-4">
    <!-- Marketing Stats -->
    <div class="row">
        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Active Promotions</p>
                                <h5 class="font-weight-bolder">{{stats.activePromotions}}</h5>
                                <p class="mb-0 text-sm">
                                    <span class="text-success text-sm font-weight-bolder">{{stats.redemptionRate}}%</span>
                                    redemption rate
                                </p>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-primary shadow-primary text-center rounded-circle">
                                <i class="ni ni-tag text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Total Revenue</p>
                                <h5 class="font-weight-bolder">{{formatCurrency stats.totalRevenue}}</h5>
                                <p class="mb-0 text-sm">
                                    <span class="text-success text-sm font-weight-bolder">{{stats.revenueGrowth}}%</span>
                                    vs last month
                                </p>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-success shadow-success text-center rounded-circle">
                                <i class="ni ni-money-coins text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Total Discounts</p>
                                <h5 class="font-weight-bolder">{{formatCurrency stats.totalDiscounts}}</h5>
                                <p class="mb-0 text-sm">
                                    <span class="text-success text-sm font-weight-bolder">{{stats.discountCount}}</span>
                                    redemptions
                                </p>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-warning shadow-warning text-center rounded-circle">
                                <i class="ni ni-chart-bar-32 text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Avg. Booking Value</p>
                                <h5 class="font-weight-bolder">{{formatCurrency stats.avgBookingValue}}</h5>
                                <p class="mb-0 text-sm">
                                    <span class="text-{{stats.avgValueTrend.color}} text-sm font-weight-bolder">{{stats.avgValueTrend.percentage}}%</span>
                                    vs baseline
                                </p>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-info shadow-info text-center rounded-circle">
                                <i class="ni ni-chart-line text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Promotions List -->
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header pb-0">
                    <div class="d-flex justify-content-between align-items-center">
                        <h6>Active Promotions</h6>
                        <button class="btn btn-primary btn-sm mb-0" data-bs-toggle="modal" data-bs-target="#newPromotionModal">
                            <i class="fas fa-plus"></i> New Promotion
                        </button>
                    </div>
                </div>
                <div class="card-body px-0 pt-0 pb-2">
                    <div class="table-responsive p-0">
                        <table class="table align-items-center mb-0">
                            <thead>
                                <tr>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Name</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Code</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Type</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Value</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Period</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Status</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Usage</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{#each promotions}}
                                <tr>
                                    <td>
                                        <div class="d-flex px-3 py-1">
                                            <div class="d-flex flex-column justify-content-center">
                                                <h6 class="mb-0 text-sm">{{name}}</h6>
                                                <p class="text-xs text-secondary mb-0">{{description}}</p>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">{{code}}</p>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">{{type}}</p>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">
                                            {{#if (eq type "percentage")}}
                                            {{value}}%
                                            {{else}}
                                            {{formatCurrency value}}
                                            {{/if}}
                                        </p>
                                    </td>
                                    <td>
                                        <p class="text-xs font-weight-bold mb-0">{{formatDate startDate}}</p>
                                        <p class="text-xs text-secondary mb-0">{{formatDate endDate}}</p>
                                    </td>
                                    <td>
                                        <span class="badge badge-sm bg-gradient-{{statusColor status}}">{{status}}</span>
                                    </td>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <span class="text-sm font-weight-bold me-2">{{redemptions.length}}</span>
                                            <div class="progress" style="width: 100px">
                                                <div class="progress-bar bg-gradient-info" role="progressbar" 
                                                    aria-valuenow="{{usagePercentage}}" aria-valuemin="0" aria-valuemax="100" 
                                                    style="width: {{usagePercentage}}%">
                                                </div>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="btn-group">
                                            <button class="btn btn-link text-secondary mb-0" onclick="editPromotion('{{_id}}')">
                                                <i class="fas fa-edit fa-fw"></i>
                                            </button>
                                            <button class="btn btn-link text-secondary mb-0" onclick="togglePromotion('{{_id}}', '{{status}}')">
                                                {{#if (eq status "active")}}
                                                <i class="fas fa-pause fa-fw"></i>
                                                {{else}}
                                                <i class="fas fa-play fa-fw"></i>
                                                {{/if}}
                                            </button>
                                            <button class="btn btn-link text-secondary mb-0" onclick="viewPromotionDetails('{{_id}}')">
                                                <i class="fas fa-info-circle fa-fw"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Performance Chart -->
    <div class="row">
        <div class="col-lg-7">
            <div class="card z-index-2">
                <div class="card-header pb-0">
                    <h6>Promotion Performance</h6>
                </div>
                <div class="card-body p-3">
                    <div class="chart">
                        <canvas id="promotionChart" class="chart-canvas" height="300"></canvas>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-5">
            <div class="card">
                <div class="card-header pb-0">
                    <h6>Top Performing Promotions</h6>
                </div>
                <div class="card-body p-3">
                    <div class="timeline timeline-one-side">
                        {{#each topPromotions}}
                        <div class="timeline-block mb-3">
                            <span class="timeline-step">
                                <i class="ni ni-trophy text-success text-gradient"></i>
                            </span>
                            <div class="timeline-content">
                                <h6 class="text-dark text-sm font-weight-bold mb-0">{{name}}</h6>
                                <p class="text-secondary font-weight-bold text-xs mt-1 mb-0">
                                    {{redemptions.length}} uses | {{formatCurrency totalRevenue}} revenue
                                </p>
                            </div>
                        </div>
                        {{/each}}
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- New Promotion Modal -->
<div class="modal fade" id="newPromotionModal" tabindex="-1" role="dialog" aria-labelledby="newPromotionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="newPromotionModalLabel">New Promotion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="newPromotionForm">
                    <div class="form-group">
                        <label>Name</label>
                        <input type="text" class="form-control" name="name" required>
                    </div>
                    <div class="form-group">
                        <label>Code</label>
                        <input type="text" class="form-control" name="code" required>
                    </div>
                    <div class="form-group">
                        <label>Type</label>
                        <select class="form-control" name="type" required onchange="updateValueLabel()">
                            <option value="percentage">Percentage Off</option>
                            <option value="fixed_amount">Fixed Amount</option>
                            <option value="free_night">Free Night</option>
                            <option value="room_upgrade">Room Upgrade</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label id="valueLabel">Value (%)</label>
                        <input type="number" class="form-control" name="value" required>
                    </div>
                    <div class="form-group">
                        <label>Minimum Booking Amount</label>
                        <input type="number" class="form-control" name="minBookingAmount">
                    </div>
                    <div class="form-group">
                        <label>Maximum Discount</label>
                        <input type="number" class="form-control" name="maxDiscount">
                    </div>
                    <div class="form-group">
                        <label>Start Date</label>
                        <input type="datetime-local" class="form-control" name="startDate" required>
                    </div>
                    <div class="form-group">
                        <label>End Date</label>
                        <input type="datetime-local" class="form-control" name="endDate" required>
                    </div>
                    <div class="form-group">
                        <label>Description</label>
                        <textarea class="form-control" name="description" required></textarea>
                    </div>
                    <div class="form-group">
                        <label>Terms & Conditions</label>
                        <textarea class="form-control" name="terms"></textarea>
                    </div>
                    <div class="form-group">
                        <label>Applicable Room Types</label>
                        <select class="form-control" name="applicableRoomTypes" multiple>
                            {{#each roomTypes}}
                            <option value="{{_id}}">{{name}}</option>
                            {{/each}}
                        </select>
                    </div>
                    <div class="form-group">
                        <label>User Type</label>
                        <select class="form-control" name="userType">
                            <option value="all">All Users</option>
                            <option value="new_users">New Users Only</option>
                            <option value="loyalty_members">Loyalty Members Only</option>
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="createPromotion()">Create Promotion</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
// Initialize promotion performance chart
const ctx = document.getElementById('promotionChart').getContext('2d');
new Chart(ctx, {
    type: 'line',
    data: {
        labels: {{{json chartData.labels}}},
        datasets: [
            {
                label: 'Revenue',
                data: {{{json chartData.revenue}}},
                borderColor: '#5e72e4',
                tension: 0.4,
                fill: false
            },
            {
                label: 'Redemptions',
                data: {{{json chartData.redemptions}}},
                borderColor: '#2dce89',
                tension: 0.4,
                fill: false
            }
        ]
    },
    options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
            legend: {
                position: 'top'
            }
        },
        scales: {
            y: {
                beginAtZero: true
            }
        }
    }
});

function updateValueLabel() {
    const type = document.querySelector('select[name="type"]').value;
    const label = document.getElementById('valueLabel');
    switch (type) {
        case 'percentage':
            label.textContent = 'Value (%)';
            break;
        case 'fixed_amount':
            label.textContent = 'Value ($)';
            break;
        case 'free_night':
            label.textContent = 'Minimum Nights Required';
            break;
        case 'room_upgrade':
            label.textContent = 'Upgrade Level';
            break;
    }
}

async function createPromotion() {
    try {
        const form = document.getElementById('newPromotionForm');
        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());

        const response = await fetch('/api/marketing/promotions', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });

        if (response.ok) {
            window.location.reload();
        } else {
            alert('Error creating promotion');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error creating promotion');
    }
}

async function togglePromotion(id, currentStatus) {
    try {
        const newStatus = currentStatus === 'active' ? 'disabled' : 'active';
        const response = await fetch(`/api/marketing/promotions/${id}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ status: newStatus })
        });

        if (response.ok) {
            window.location.reload();
        } else {
            alert('Error updating promotion status');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error updating promotion status');
    }
}

function editPromotion(id) {
    // Implement edit promotion functionality
}

function viewPromotionDetails(id) {
    // Implement view promotion details functionality
}
</script>

{{> footer}}

================
File: views/admin/partials/sidebar.hbs
================
<div class="sidenav bg-white navbar navbar-vertical navbar-expand-xs border-0 border-radius-xl my-3 fixed-start ms-4 " id="sidenav-main">
    <div class="sidenav-header">
        <i class="fas fa-times p-3 cursor-pointer text-secondary opacity-5 position-absolute end-0 top-0 d-none d-xl-none" aria-hidden="true" id="iconSidenav"></i>
        <a class="navbar-brand m-0" href="/admin/dashboard">
            <img src="/img/logo-ct-dark.png" class="navbar-brand-img h-100" alt="main_logo">
            <span class="ms-1 font-weight-bold">Hotel Admin</span>
        </a>
    </div>
    <hr class="horizontal dark mt-0">
    <div class="collapse navbar-collapse w-auto" id="sidenav-collapse-main">
        <ul class="navbar-nav">
            <li class="nav-item">
                <a class="nav-link {{#if (eq active 'dashboard')}}active{{/if}}" href="/admin/dashboard">
                    <div class="icon icon-shape icon-sm border-radius-md text-center me-2 d-flex align-items-center justify-content-center">
                        <i class="ni ni-tv-2 text-primary text-sm opacity-10"></i>
                    </div>
                    <span class="nav-link-text ms-1">Dashboard</span>
                </a>
            </li>

            <li class="nav-item">
                <a class="nav-link {{#if (eq active 'bookings')}}active{{/if}}" href="/admin/bookings">
                    <div class="icon icon-shape icon-sm border-radius-md text-center me-2 d-flex align-items-center justify-content-center">
                        <i class="ni ni-calendar-grid-58 text-warning text-sm opacity-10"></i>
                    </div>
                    <span class="nav-link-text ms-1">Bookings</span>
                </a>
            </li>

            <li class="nav-item">
                <a class="nav-link {{#if (eq active 'rooms')}}active{{/if}}" href="/admin/rooms">
                    <div class="icon icon-shape icon-sm border-radius-md text-center me-2 d-flex align-items-center justify-content-center">
                        <i class="ni ni-key-25 text-info text-sm opacity-10"></i>
                    </div>
                    <span class="nav-link-text ms-1">Rooms</span>
                </a>
            </li>

            <!-- Loyalty Program Section -->
            <li class="nav-item mt-3">
                <h6 class="ps-4 ms-2 text-uppercase text-xs font-weight-bolder opacity-6">Loyalty Program</h6>
            </li>
            
            <li class="nav-item">
                <a class="nav-link {{#if (eq active 'loyalty-tiers')}}active{{/if}}" href="/admin/loyalty/tiers">
                    <div class="icon icon-shape icon-sm border-radius-md text-center me-2 d-flex align-items-center justify-content-center">
                        <i class="ni ni-trophy text-success text-sm opacity-10"></i>
                    </div>
                    <span class="nav-link-text ms-1">Tiers</span>
                </a>
            </li>

            <li class="nav-item">
                <a class="nav-link {{#if (eq active 'loyalty-referrals')}}active{{/if}}" href="/admin/loyalty/referrals">
                    <div class="icon icon-shape icon-sm border-radius-md text-center me-2 d-flex align-items-center justify-content-center">
                        <i class="ni ni-send text-primary text-sm opacity-10"></i>
                    </div>
                    <span class="nav-link-text ms-1">Referrals</span>
                </a>
            </li>

            <li class="nav-item">
                <a class="nav-link {{#if (eq active 'loyalty-members')}}active{{/if}}" href="/admin/loyalty/members">
                    <div class="icon icon-shape icon-sm border-radius-md text-center me-2 d-flex align-items-center justify-content-center">
                        <i class="ni ni-single-02 text-dark text-sm opacity-10"></i>
                    </div>
                    <span class="nav-link-text ms-1">Members</span>
                </a>
            </li>

            <li class="nav-item">
                <a class="nav-link {{#if (eq active 'loyalty-rewards')}}active{{/if}}" href="/admin/loyalty/rewards">
                    <div class="icon icon-shape icon-sm border-radius-md text-center me-2 d-flex align-items-center justify-content-center">
                        <i class="ni ni-diamond text-warning text-sm opacity-10"></i>
                    </div>
                    <span class="nav-link-text ms-1">Rewards</span>
                </a>
            </li>

            <!-- Settings Section -->
            <li class="nav-item mt-3">
                <h6 class="ps-4 ms-2 text-uppercase text-xs font-weight-bolder opacity-6">Settings</h6>
            </li>

            <li class="nav-item">
                <a class="nav-link {{#if (eq active 'users')}}active{{/if}}" href="/admin/users">
                    <div class="icon icon-shape icon-sm border-radius-md text-center me-2 d-flex align-items-center justify-content-center">
                        <i class="ni ni-circle-08 text-info text-sm opacity-10"></i>
                    </div>
                    <span class="nav-link-text ms-1">Users</span>
                </a>
            </li>

            <li class="nav-item">
                <a class="nav-link {{#if (eq active 'settings')}}active{{/if}}" href="/admin/settings">
                    <div class="icon icon-shape icon-sm border-radius-md text-center me-2 d-flex align-items-center justify-content-center">
                        <i class="ni ni-settings text-dark text-sm opacity-10"></i>
                    </div>
                    <span class="nav-link-text ms-1">Settings</span>
                </a>
            </li>
        </ul>
    </div>
</div>

================
File: views/auth/login.hbs
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login - Hotel Management System</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #2563eb;
            --secondary-color: #1e40af;
            --accent-color: #60a5fa;
        }

        body {
            background: linear-gradient(135deg, #f3f4f6 0%, #e5e7eb 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .login-container {
            background: white;
            border-radius: 20px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            max-width: 1000px;
            width: 95%;
            margin: 2rem auto;
        }

        .row {
            margin: 0;
        }

        .login-image {
            background: linear-gradient(rgba(37, 99, 235, 0.9), rgba(30, 64, 175, 0.9)), 
                        url('/images/hotel-lobby.jpg');
            background-size: cover;
            background-position: center;
            padding: 3rem;
            color: white;
            display: flex;
            flex-direction: column;
            justify-content: center;
            min-height: 600px;
        }

        .login-image h1 {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 1rem;
        }

        .login-image p {
            font-size: 1.1rem;
            opacity: 0.9;
        }

        .login-form {
            padding: 3rem;
        }

        .welcome-text {
            margin-bottom: 2rem;
        }

        .welcome-text h2 {
            color: #1f2937;
            font-weight: 600;
        }

        .welcome-text p {
            color: #6b7280;
        }

        .form-floating {
            margin-bottom: 1.5rem;
        }

        .form-control {
            border-radius: 10px;
            padding: 1rem 0.75rem;
            border: 2px solid #e5e7eb;
            transition: all 0.3s ease;
        }

        .form-control:focus {
            border-color: var(--accent-color);
            box-shadow: 0 0 0 4px rgba(96, 165, 250, 0.1);
        }

        .btn-primary {
            background-color: var(--primary-color);
            border: none;
            border-radius: 10px;
            padding: 0.8rem;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .btn-primary:hover {
            background-color: var(--secondary-color);
            transform: translateY(-1px);
        }

        .form-check {
            margin: 1rem 0;
        }

        .form-check-input:checked {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
        }

        .forgot-password {
            color: var(--primary-color);
            text-decoration: none;
            font-weight: 500;
            transition: color 0.3s ease;
        }

        .forgot-password:hover {
            color: var(--secondary-color);
        }

        .social-login {
            margin-top: 2rem;
            text-align: center;
        }

        .social-login p {
            color: #6b7280;
            margin-bottom: 1rem;
        }

        .social-buttons {
            display: flex;
            gap: 1rem;
            justify-content: center;
        }

        .social-button {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            border: 2px solid #e5e7eb;
            color: #4b5563;
            transition: all 0.3s ease;
        }

        .social-button:hover {
            background-color: #f3f4f6;
            color: var(--primary-color);
            border-color: var(--primary-color);
        }

        .register-link {
            text-align: center;
            margin-top: 2rem;
            color: #6b7280;
        }

        .register-link a {
            color: var(--primary-color);
            text-decoration: none;
            font-weight: 500;
        }

        .register-link a:hover {
            color: var(--secondary-color);
        }

        @media (max-width: 768px) {
            .login-image {
                min-height: 300px;
                padding: 2rem;
            }

            .login-form {
                padding: 2rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="login-container">
            <div class="row">
                <div class="col-md-6 login-image">
                    <h1>Welcome to Hotel Management System</h1>
                    <p>Experience luxury and comfort at its finest. Login to access your dashboard and manage your hotel operations efficiently.</p>
                </div>
                <div class="col-md-6 login-form">
                    <div class="welcome-text">
                        <h2>Welcome Back!</h2>
                        <p>Please login to your account</p>
                    </div>

                    {{#if error}}
                    <div class="alert alert-danger" role="alert">
                        {{error}}
                    </div>
                    {{/if}}

                    <form action="/auth/login" method="POST">
                        <div class="form-floating">
                            <input type="email" class="form-control" id="email" name="email" placeholder="name@example.com" required>
                            <label for="email">Email address</label>
                        </div>
                        <div class="form-floating">
                            <input type="password" class="form-control" id="password" name="password" placeholder="Password" required>
                            <label for="password">Password</label>
                        </div>

                        <div class="d-flex justify-content-between align-items-center mb-4">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="remember" name="remember">
                                <label class="form-check-label" for="remember">
                                    Remember me
                                </label>
                            </div>
                            <a href="/auth/forgot-password" class="forgot-password">Forgot Password?</a>
                        </div>

                        <button type="submit" class="btn btn-primary w-100">Login</button>

                        <div class="social-login">
                            <p>Or continue with</p>
                            <div class="social-buttons">
                                <a href="#" class="social-button">
                                    <i class="fab fa-google"></i>
                                </a>
                                <a href="#" class="social-button">
                                    <i class="fab fa-facebook-f"></i>
                                </a>
                                <a href="#" class="social-button">
                                    <i class="fab fa-twitter"></i>
                                </a>
                            </div>
                        </div>

                        <div class="register-link">
                            Don't have an account? <a href="/auth/register">Sign up</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>

================
File: views/check-in-out/check-in.hbs
================
{{#if error}}
<div class="alert alert-danger">{{error}}</div>
{{/if}}

<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header pb-0">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Guest Check-In</h5>
                        <a href="/bookings" class="btn btn-secondary btn-sm">Back to Bookings</a>
                    </div>
                </div>
                <div class="card-body">
                    <form action="/check-in-out/check-in/{{booking._id}}" method="POST">
                        <!-- Booking Information -->
                        <div class="row mb-4">
                            <div class="col-md-12">
                                <h6 class="text-uppercase text-sm">Booking Information</h6>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-control-label">Booking Reference</label>
                                    <input type="text" class="form-control" value="{{booking.reference}}" disabled>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-control-label">Room Number</label>
                                    <input type="text" class="form-control" value="{{booking.roomId.number}}" disabled>
                                </div>
                            </div>
                        </div>

                        <!-- Guest Information -->
                        <div class="row mb-4">
                            <div class="col-md-12">
                                <h6 class="text-uppercase text-sm">Primary Guest Information</h6>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-control-label">Guest Name</label>
                                    <input type="text" class="form-control" value="{{booking.guestId.name}}" disabled>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-control-label">Email</label>
                                    <input type="email" class="form-control" value="{{booking.guestId.email}}" disabled>
                                </div>
                            </div>
                        </div>

                        <!-- Additional Guests -->
                        <div class="row mb-4">
                            <div class="col-md-12">
                                <h6 class="text-uppercase text-sm">Additional Guests</h6>
                                <div id="additionalGuests">
                                    <div class="row guest-entry mb-3">
                                        <div class="col-md-4">
                                            <div class="form-group">
                                                <label class="form-control-label">Name</label>
                                                <input type="text" name="additionalGuests[0][name]" class="form-control" required>
                                            </div>
                                        </div>
                                        <div class="col-md-4">
                                            <div class="form-group">
                                                <label class="form-control-label">ID Type</label>
                                                <select name="additionalGuests[0][idType]" class="form-control" required>
                                                    <option value="passport">Passport</option>
                                                    <option value="drivers_license">Driver's License</option>
                                                    <option value="national_id">National ID</option>
                                                </select>
                                            </div>
                                        </div>
                                        <div class="col-md-4">
                                            <div class="form-group">
                                                <label class="form-control-label">ID Number</label>
                                                <input type="text" name="additionalGuests[0][idNumber]" class="form-control" required>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <button type="button" class="btn btn-outline-primary btn-sm" onclick="addGuestEntry()">
                                    Add Another Guest
                                </button>
                            </div>
                        </div>

                        <!-- Vehicle Information -->
                        <div class="row mb-4">
                            <div class="col-md-12">
                                <h6 class="text-uppercase text-sm">Vehicle Information</h6>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-control-label">License Plate</label>
                                    <input type="text" name="vehicleInfo[plateNumber]" class="form-control">
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-control-label">Parking Spot</label>
                                    <input type="text" name="vehicleInfo[parkingSpot]" class="form-control">
                                </div>
                            </div>
                        </div>

                        <!-- Special Requests -->
                        <div class="row mb-4">
                            <div class="col-md-12">
                                <h6 class="text-uppercase text-sm">Special Requests</h6>
                                <div class="form-group">
                                    <textarea name="specialRequests" class="form-control" rows="3" placeholder="Enter any special requests..."></textarea>
                                </div>
                            </div>
                        </div>

                        <!-- Submit Button -->
                        <div class="row">
                            <div class="col-md-12">
                                <button type="submit" class="btn btn-primary">Complete Check-In</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
let guestCount = 1;

function addGuestEntry() {
    const guestHtml = `
        <div class="row guest-entry mb-3">
            <div class="col-md-4">
                <div class="form-group">
                    <label class="form-control-label">Name</label>
                    <input type="text" name="additionalGuests[${guestCount}][name]" class="form-control" required>
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    <label class="form-control-label">ID Type</label>
                    <select name="additionalGuests[${guestCount}][idType]" class="form-control" required>
                        <option value="passport">Passport</option>
                        <option value="drivers_license">Driver's License</option>
                        <option value="national_id">National ID</option>
                    </select>
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    <label class="form-control-label">ID Number</label>
                    <input type="text" name="additionalGuests[${guestCount}][idNumber]" class="form-control" required>
                </div>
            </div>
        </div>
    `;
    
    document.getElementById('additionalGuests').insertAdjacentHTML('beforeend', guestHtml);
    guestCount++;
}
</script>

================
File: views/check-in-out/check-out.hbs
================
{{#if error}}
<div class="alert alert-danger">{{error}}</div>
{{/if}}

<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header pb-0">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Guest Check-Out</h5>
                        <a href="/bookings" class="btn btn-secondary btn-sm">Back to Bookings</a>
                    </div>
                </div>
                <div class="card-body">
                    <form action="/check-in-out/check-out/{{checkInOut.bookingId._id}}" method="POST">
                        <!-- Booking Information -->
                        <div class="row mb-4">
                            <div class="col-md-12">
                                <h6 class="text-uppercase text-sm">Booking Information</h6>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-control-label">Booking Reference</label>
                                    <input type="text" class="form-control" value="{{checkInOut.bookingId.reference}}" disabled>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-control-label">Room Number</label>
                                    <input type="text" class="form-control" value="{{checkInOut.roomId.number}}" disabled>
                                </div>
                            </div>
                        </div>

                        <!-- Guest Information -->
                        <div class="row mb-4">
                            <div class="col-md-12">
                                <h6 class="text-uppercase text-sm">Guest Information</h6>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-control-label">Guest Name</label>
                                    <input type="text" class="form-control" value="{{checkInOut.guestId.name}}" disabled>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-control-label">Check-In Time</label>
                                    <input type="text" class="form-control" value="{{formatDate checkInOut.checkInTime}}" disabled>
                                </div>
                            </div>
                        </div>

                        <!-- Room Inspection -->
                        <div class="row mb-4">
                            <div class="col-md-12">
                                <h6 class="text-uppercase text-sm">Room Inspection</h6>
                            </div>
                            <div class="col-md-12">
                                <div class="form-check mb-3">
                                    <input class="form-check-input" type="checkbox" id="roomChecked" required>
                                    <label class="form-check-label" for="roomChecked">
                                        Room has been inspected for damages and inventory
                                    </label>
                                </div>
                                <div class="form-check mb-3">
                                    <input class="form-check-input" type="checkbox" id="keyReturned" required>
                                    <label class="form-check-label" for="keyReturned">
                                        Key card returned (Card #: {{checkInOut.keyCardNumber}})
                                    </label>
                                </div>
                            </div>
                        </div>

                        <!-- Additional Charges -->
                        <div class="row mb-4">
                            <div class="col-md-12">
                                <h6 class="text-uppercase text-sm">Additional Charges</h6>
                                <div id="additionalCharges">
                                    <div class="row charge-entry mb-3">
                                        <div class="col-md-6">
                                            <div class="form-group">
                                                <label class="form-control-label">Description</label>
                                                <input type="text" name="charges[0][description]" class="form-control">
                                            </div>
                                        </div>
                                        <div class="col-md-4">
                                            <div class="form-group">
                                                <label class="form-control-label">Amount</label>
                                                <input type="number" name="charges[0][amount]" class="form-control" step="0.01">
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <button type="button" class="btn btn-outline-primary btn-sm" onclick="addChargeEntry()">
                                    Add Additional Charge
                                </button>
                            </div>
                        </div>

                        <!-- Notes -->
                        <div class="row mb-4">
                            <div class="col-md-12">
                                <h6 class="text-uppercase text-sm">Check-Out Notes</h6>
                                <div class="form-group">
                                    <textarea name="notes" class="form-control" rows="3" placeholder="Enter any notes about the check-out process..."></textarea>
                                </div>
                            </div>
                        </div>

                        <!-- Submit Button -->
                        <div class="row">
                            <div class="col-md-12">
                                <button type="submit" class="btn btn-primary">Complete Check-Out</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
let chargeCount = 1;

function addChargeEntry() {
    const chargeHtml = `
        <div class="row charge-entry mb-3">
            <div class="col-md-6">
                <div class="form-group">
                    <label class="form-control-label">Description</label>
                    <input type="text" name="charges[${chargeCount}][description]" class="form-control">
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    <label class="form-control-label">Amount</label>
                    <input type="number" name="charges[${chargeCount}][amount]" class="form-control" step="0.01">
                </div>
            </div>
            <div class="col-md-2">
                <div class="form-group">
                    <label class="form-control-label">&nbsp;</label>
                    <button type="button" class="btn btn-danger btn-sm form-control" onclick="removeChargeEntry(this)">
                        Remove
                    </button>
                </div>
            </div>
        </div>
    `;
    
    document.getElementById('additionalCharges').insertAdjacentHTML('beforeend', chargeHtml);
    chargeCount++;
}

function removeChargeEntry(button) {
    button.closest('.charge-entry').remove();
}
</script>

================
File: views/emails/checkout.hbs
================
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
        }
        .header {
            background-color: #2563eb;
            color: white;
            padding: 20px;
            text-align: center;
            border-radius: 5px;
        }
        .content {
            padding: 20px;
            background: #f8f9fa;
            border-radius: 5px;
            margin: 20px 0;
        }
        .info-box {
            background: white;
            padding: 15px;
            border-radius: 5px;
            margin: 10px 0;
            border: 1px solid #dee2e6;
        }
        .footer {
            text-align: center;
            padding: 20px;
            font-size: 0.9em;
            color: #6c757d;
        }
        .button {
            display: inline-block;
            padding: 10px 20px;
            background-color: #2563eb;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            margin: 10px 0;
        }
        .survey-box {
            background: #e9ecef;
            padding: 15px;
            border-radius: 5px;
            margin: 20px 0;
            text-align: center;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>Thank You for Your Stay!</h1>
    </div>
    
    <div class="content">
        <p>Dear {{guestName}},</p>
        
        <p>Thank you for choosing our hotel for your stay. We hope you had a wonderful experience with us!</p>
        
        <div class="info-box">
            <h3>Stay Details:</h3>
            <p><strong>Booking Reference:</strong> {{bookingReference}}</p>
            <p><strong>Room Number:</strong> {{roomNumber}}</p>
            <p><strong>Check-in:</strong> {{checkInTime}}</p>
            <p><strong>Check-out:</strong> {{checkOutTime}}</p>
        </div>
        
        <div class="survey-box">
            <h3>Share Your Experience</h3>
            <p>We value your feedback! Please take a moment to rate your stay and help us improve our services.</p>
            <a href="{{hotelWebsite}}/feedback/{{bookingReference}}" class="button">Rate Your Stay</a>
        </div>
        
        <h3>Loyalty Program Update:</h3>
        <p>Points earned from this stay will be added to your account within 24 hours. Visit our website to check your updated points balance and redeem rewards.</p>
        
        <p>We look forward to welcoming you back on your next visit!</p>
    </div>
    
    <div class="footer">
        <p>For any inquiries about your stay or future bookings, please contact us at:</p>
        <p>Email: reservations@hotel.com | Phone: +1-234-567-8900</p>
        <p>© {{currentYear}} Hotel Management System. All rights reserved.</p>
    </div>
</body>
</html>

================
File: views/emails/housekeeping.hbs
================
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
        }
        .header {
            background-color: #dc3545;
            color: white;
            padding: 20px;
            text-align: center;
            border-radius: 5px;
        }
        .content {
            padding: 20px;
            background: #f8f9fa;
            border-radius: 5px;
            margin: 20px 0;
        }
        .info-box {
            background: white;
            padding: 15px;
            border-radius: 5px;
            margin: 10px 0;
            border: 1px solid #dee2e6;
        }
        .priority-high {
            background-color: #dc3545;
            color: white;
            padding: 5px 10px;
            border-radius: 3px;
            display: inline-block;
        }
        .priority-normal {
            background-color: #ffc107;
            color: black;
            padding: 5px 10px;
            border-radius: 3px;
            display: inline-block;
        }
        .button {
            display: inline-block;
            padding: 10px 20px;
            background-color: #0d6efd;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            margin: 10px 0;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>Room Cleaning Request</h1>
    </div>
    
    <div class="content">
        <div class="info-box">
            <h3>Room Details:</h3>
            <p><strong>Room Number:</strong> {{roomNumber}}</p>
            <p><strong>Cleaning Type:</strong> {{cleaningType}}</p>
            <p><strong>Priority:</strong> 
                {{#if (eq priority 'High')}}
                <span class="priority-high">High Priority</span>
                {{else}}
                <span class="priority-normal">Normal Priority</span>
                {{/if}}
            </p>
        </div>
        
        {{#if (eq cleaningType 'checkout')}}
        <div class="info-box">
            <h3>Checkout Cleaning Requirements:</h3>
            <ul>
                <li>Complete room sanitization</li>
                <li>Change all linens and towels</li>
                <li>Restock all amenities</li>
                <li>Deep clean bathroom</li>
                <li>Check and report any damages</li>
                <li>Verify all items in inventory checklist</li>
            </ul>
        </div>
        {{else}}
        <div class="info-box">
            <h3>Regular Cleaning Requirements:</h3>
            <ul>
                <li>Make bed and change towels if needed</li>
                <li>Clean bathroom and surfaces</li>
                <li>Empty trash bins</li>
                <li>Vacuum/sweep floors</li>
                <li>Restock basic amenities</li>
            </ul>
        </div>
        {{/if}}
        
        <p>Please mark the room as clean in the system once completed.</p>
        
        <a href="{{hotelWebsite}}/housekeeping/tasks" class="button">View Task Details</a>
    </div>
    
    <div class="footer" style="text-align: center; padding: 20px; font-size: 0.9em; color: #6c757d;">
        <p>This is an automated message from the Hotel Management System.</p>
        <p>© {{currentYear}} Hotel Management System. All rights reserved.</p>
    </div>
</body>
</html>

================
File: views/emails/loyalty-new-reward.hbs
================
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
        }
        .header {
            background-color: #28a745;
            color: white;
            padding: 20px;
            text-align: center;
            border-radius: 5px 5px 0 0;
        }
        .content {
            background-color: #f8f9fa;
            padding: 20px;
            border-radius: 0 0 5px 5px;
        }
        .reward-details {
            background-color: white;
            padding: 15px;
            margin: 20px 0;
            border-radius: 5px;
            border: 1px solid #dee2e6;
        }
        .points {
            font-size: 24px;
            color: #28a745;
            font-weight: bold;
        }
        .footer {
            text-align: center;
            margin-top: 20px;
            font-size: 12px;
            color: #6c757d;
        }
        .button {
            display: inline-block;
            padding: 10px 20px;
            background-color: #28a745;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            margin-top: 20px;
        }
        .highlight {
            background-color: #e8f5e9;
            padding: 10px;
            border-radius: 5px;
            margin: 10px 0;
        }
        .validity {
            font-size: 14px;
            color: #dc3545;
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <div class="header">
        <h2>New Reward Available!</h2>
    </div>
    
    <div class="content">
        <p>Dear {{name}},</p>
        
        <p>We're excited to announce a new reward that's now available in our loyalty program!</p>
        
        <div class="reward-details">
            <h3>{{rewardName}}</h3>
            <p>{{rewardDescription}}</p>
            
            <div class="highlight">
                <p><strong>Points Required:</strong> <span class="points">{{pointsRequired}}</span></p>
            </div>
            
            <p class="validity"><strong>Valid for:</strong> {{validityPeriod}} days after redemption</p>
        </div>

        <p>Don't miss out on this exciting opportunity! Visit our rewards catalog to learn more and redeem your points.</p>
        
        <div style="text-align: center;">
            <a href="{{dashboardUrl}}" class="button">View Reward Details</a>
        </div>

        <div class="footer">
            <p>This is an exclusive offer for our loyalty program members. Reward availability may be limited.</p>
            <p>Thank you for being a valued member of our loyalty program!</p>
        </div>
    </div>
</body>
</html>

================
File: views/emails/loyalty-redemption-cancelled.hbs
================
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
        }
        .header {
            background-color: #dc3545;
            color: white;
            padding: 20px;
            text-align: center;
            border-radius: 5px 5px 0 0;
        }
        .content {
            background-color: #f8f9fa;
            padding: 20px;
            border-radius: 0 0 5px 5px;
        }
        .points-details {
            background-color: white;
            padding: 15px;
            margin: 20px 0;
            border-radius: 5px;
            border: 1px solid #dee2e6;
        }
        .points {
            font-size: 24px;
            color: #28a745;
            font-weight: bold;
        }
        .footer {
            text-align: center;
            margin-top: 20px;
            font-size: 12px;
            color: #6c757d;
        }
        .button {
            display: inline-block;
            padding: 10px 20px;
            background-color: #28a745;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            margin-top: 20px;
        }
        .note {
            font-size: 14px;
            color: #6c757d;
            margin-top: 20px;
            padding: 10px;
            background-color: #f1f3f4;
            border-radius: 5px;
        }
    </style>
</head>
<body>
    <div class="header">
        <h2>Reward Redemption Cancelled</h2>
    </div>
    
    <div class="content">
        <p>Dear {{name}},</p>
        
        <p>Your reward redemption has been successfully cancelled as requested.</p>
        
        <div class="points-details">
            <h3>Cancellation Details:</h3>
            <p><strong>Cancelled Reward:</strong> {{rewardName}}</p>
            <p><strong>Points Refunded:</strong> <span class="points">{{pointsRefunded}}</span></p>
            <p><strong>Current Points Balance:</strong> {{currentPoints}}</p>
        </div>

        <p>The points have been returned to your account and are now available for future redemptions.</p>
        
        <div style="text-align: center;">
            <a href="{{dashboardUrl}}" class="button">View Available Rewards</a>
        </div>

        <div class="note">
            <p><strong>Note:</strong> You can browse our rewards catalog and redeem your points for other exciting rewards at any time.</p>
        </div>
        
        <div class="footer">
            <p>If you have any questions about the cancellation or would like to explore other rewards, please don't hesitate to contact our support team.</p>
            <p>Thank you for being a valued member of our loyalty program!</p>
        </div>
    </div>
</body>
</html>

================
File: views/emails/loyalty-redemption.hbs
================
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
        }
        .header {
            background-color: #1a73e8;
            color: white;
            padding: 20px;
            text-align: center;
            border-radius: 5px 5px 0 0;
        }
        .content {
            background-color: #f8f9fa;
            padding: 20px;
            border-radius: 0 0 5px 5px;
        }
        .reward-details {
            background-color: white;
            padding: 15px;
            margin: 20px 0;
            border-radius: 5px;
            border: 1px solid #dee2e6;
        }
        .points {
            font-size: 24px;
            color: #1a73e8;
            font-weight: bold;
        }
        .footer {
            text-align: center;
            margin-top: 20px;
            font-size: 12px;
            color: #6c757d;
        }
        .button {
            display: inline-block;
            padding: 10px 20px;
            background-color: #1a73e8;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            margin-top: 20px;
        }
        .terms {
            font-size: 12px;
            color: #6c757d;
            margin-top: 20px;
            padding: 10px;
            background-color: #f1f3f4;
            border-radius: 5px;
        }
    </style>
</head>
<body>
    <div class="header">
        <h2>Reward Redemption Confirmation</h2>
    </div>
    
    <div class="content">
        <p>Dear {{name}},</p>
        
        <p>Thank you for redeeming your loyalty points! Your reward has been successfully processed.</p>
        
        <div class="reward-details">
            <h3>Redemption Details:</h3>
            <p><strong>Reward:</strong> {{rewardName}}</p>
            <p><strong>Points Used:</strong> <span class="points">{{pointsUsed}}</span></p>
            <p><strong>Remaining Points Balance:</strong> {{remainingPoints}}</p>
            <p><strong>Redemption ID:</strong> {{redemptionId}}</p>
            <p><strong>Valid Until:</strong> {{formatDate expiryDate}}</p>
        </div>

        <p>You can view your redemption details and track its status in your loyalty dashboard.</p>
        
        <div style="text-align: center;">
            <a href="{{dashboardUrl}}" class="button">View Dashboard</a>
        </div>

        {{#if terms}}
        <div class="terms">
            <h4>Terms & Conditions:</h4>
            <p>{{terms}}</p>
        </div>
        {{/if}}
        
        <div class="footer">
            <p>If you have any questions about your redemption, please contact our support team.</p>
            <p>Thank you for being a valued member of our loyalty program!</p>
        </div>
    </div>
</body>
</html>

================
File: views/emails/loyalty-referral-expired.hbs
================
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
        }
        .header {
            background-color: #dc3545;
            color: white;
            padding: 20px;
            text-align: center;
            border-radius: 5px 5px 0 0;
        }
        .content {
            background-color: #f8f9fa;
            padding: 20px;
            border-radius: 0 0 5px 5px;
        }
        .code-details {
            background-color: white;
            padding: 15px;
            margin: 20px 0;
            border-radius: 5px;
            border: 1px solid #dee2e6;
        }
        .code {
            font-size: 24px;
            color: #dc3545;
            font-weight: bold;
            text-decoration: line-through;
        }
        .footer {
            text-align: center;
            margin-top: 20px;
            font-size: 12px;
            color: #6c757d;
        }
        .button {
            display: inline-block;
            padding: 10px 20px;
            background-color: #28a745;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            margin-top: 20px;
        }
        .note {
            font-size: 14px;
            color: #6c757d;
            margin-top: 20px;
            padding: 10px;
            background-color: #f1f3f4;
            border-radius: 5px;
        }
    </style>
</head>
<body>
    <div class="header">
        <h2>Referral Code Expired</h2>
    </div>
    
    <div class="content">
        <p>Dear {{name}},</p>
        
        <p>Your referral code has expired:</p>
        
        <div class="code-details">
            <h3>Expired Code:</h3>
            <p class="code">{{code}}</p>
        </div>

        <p>Don't worry! You can generate a new referral code anytime to continue earning bonus points.</p>
        
        <div style="text-align: center;">
            <a href="{{dashboardUrl}}" class="button">Generate New Code</a>
        </div>

        <div class="note">
            <p><strong>Tip:</strong> Share your referral code with friends and family as soon as you generate it to maximize your chances of earning bonus points!</p>
        </div>
        
        <div class="footer">
            <p>Thank you for being a valued member of our loyalty program!</p>
            <p>Keep referring and keep earning!</p>
        </div>
    </div>
</body>
</html>

================
File: views/emails/loyalty-referral-used.hbs
================
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
        }
        .header {
            background-color: #28a745;
            color: white;
            padding: 20px;
            text-align: center;
            border-radius: 5px 5px 0 0;
        }
        .content {
            background-color: #f8f9fa;
            padding: 20px;
            border-radius: 0 0 5px 5px;
        }
        .points-details {
            background-color: white;
            padding: 15px;
            margin: 20px 0;
            border-radius: 5px;
            border: 1px solid #dee2e6;
        }
        .points {
            font-size: 24px;
            color: #28a745;
            font-weight: bold;
        }
        .footer {
            text-align: center;
            margin-top: 20px;
            font-size: 12px;
            color: #6c757d;
        }
        .button {
            display: inline-block;
            padding: 10px 20px;
            background-color: #28a745;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            margin-top: 20px;
        }
        .note {
            font-size: 14px;
            color: #6c757d;
            margin-top: 20px;
            padding: 10px;
            background-color: #f1f3f4;
            border-radius: 5px;
        }
    </style>
</head>
<body>
    <div class="header">
        <h2>Your Referral Code Was Used!</h2>
    </div>
    
    <div class="content">
        <p>Dear {{name}},</p>
        
        <p>Great news! {{refereeName}} has just used your referral code to join our loyalty program.</p>
        
        <div class="points-details">
            <h3>Referral Details:</h3>
            <p>You'll receive <span class="points">{{points}} bonus points</span> once they complete their first booking!</p>
        </div>

        <p>Keep sharing your referral code with friends and family to earn more bonus points.</p>
        
        <div style="text-align: center;">
            <a href="{{dashboardUrl}}" class="button">View Your Referrals</a>
        </div>

        <div class="note">
            <p><strong>Note:</strong> Bonus points will be credited to your account after your friend's first booking is completed.</p>
        </div>
        
        <div class="footer">
            <p>Thank you for being a valued member of our loyalty program!</p>
            <p>Keep referring and keep earning!</p>
        </div>
    </div>
</body>
</html>

================
File: views/emails/loyalty-referral.hbs
================
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
        }
        .header {
            background-color: #4f46e5;
            color: white;
            padding: 20px;
            text-align: center;
            border-radius: 5px;
        }
        .content {
            padding: 20px;
            background: #f8f9fa;
            border-radius: 5px;
            margin: 20px 0;
        }
        .points-box {
            background: #4f46e5;
            color: white;
            padding: 15px;
            border-radius: 5px;
            margin: 20px 0;
            text-align: center;
        }
        .referral-stats {
            background: white;
            padding: 15px;
            border-radius: 5px;
            margin: 10px 0;
            border: 1px solid #dee2e6;
        }
        .rewards-box {
            background: #e9ecef;
            padding: 15px;
            border-radius: 5px;
            margin: 20px 0;
        }
        .button {
            display: inline-block;
            padding: 10px 20px;
            background-color: #4f46e5;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            margin: 10px 0;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>Referral Bonus Points Added!</h1>
    </div>
    
    <div class="content">
        <p>Dear {{name}},</p>
        
        <p>Great news! Someone you referred has joined our loyalty program.</p>
        
        <div class="points-box">
            <h2>{{points}} Bonus Points Added</h2>
            <p>Thank you for spreading the word about our hotel!</p>
        </div>
        
        <div class="referral-stats">
            <h3>Your Referral Impact:</h3>
            <ul>
                <li>Points earned from referrals: {{points}}</li>
                <li>Total successful referrals: {{referralCount}}</li>
            </ul>
        </div>
        
        <div class="rewards-box">
            <h3>What You Can Get With Your Points:</h3>
            <ul>
                <li>Room upgrade (10,000 points)</li>
                <li>Free night stay (25,000 points)</li>
                <li>Spa treatment (15,000 points)</li>
                <li>Airport transfer (8,000 points)</li>
            </ul>
        </div>
        
        <p>Keep referring and earning! Check your updated points balance:</p>
        <a href="{{hotelWebsite}}/loyalty/points" class="button">View My Points</a>
    </div>
    
    <div class="footer" style="text-align: center; padding: 20px; font-size: 0.9em; color: #6c757d;">
        <p>For any questions about your referral rewards, contact us at:</p>
        <p>Email: loyalty@hotel.com | Phone: +1-234-567-8900</p>
        <p>© {{currentYear}} Hotel Management System. All rights reserved.</p>
    </div>
</body>
</html>

================
File: views/emails/loyalty-reward.hbs
================
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
        }
        .header {
            background-color: #4f46e5;
            color: white;
            padding: 20px;
            text-align: center;
            border-radius: 5px;
        }
        .content {
            padding: 20px;
            background: #f8f9fa;
            border-radius: 5px;
            margin: 20px 0;
        }
        .reward-box {
            background: #4f46e5;
            color: white;
            padding: 15px;
            border-radius: 5px;
            margin: 20px 0;
            text-align: center;
        }
        .details-box {
            background: white;
            padding: 15px;
            border-radius: 5px;
            margin: 10px 0;
            border: 1px solid #dee2e6;
        }
        .expiry-box {
            background: #ffc107;
            color: black;
            padding: 15px;
            border-radius: 5px;
            margin: 20px 0;
            text-align: center;
        }
        .button {
            display: inline-block;
            padding: 10px 20px;
            background-color: #4f46e5;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            margin: 10px 0;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>Reward Redemption Confirmation</h1>
    </div>
    
    <div class="content">
        <p>Dear {{name}},</p>
        
        <p>Thank you for redeeming your loyalty points! Your reward has been successfully processed.</p>
        
        <div class="reward-box">
            <h2>{{rewardName}}</h2>
            <p>Your reward is now ready to use!</p>
        </div>
        
        <div class="details-box">
            <h3>Reward Details:</h3>
            <ul>
                <li><strong>Reward Type:</strong> {{rewardName}}</li>
                <li><strong>Status:</strong> Active</li>
                <li><strong>Expiry Date:</strong> {{formatDate expiryDate}}</li>
            </ul>
        </div>
        
        <div class="expiry-box">
            <h3>Important Notice</h3>
            <p>Please use your reward before {{formatDate expiryDate}} to avoid expiration.</p>
        </div>
        
        <p>To view all your rewards and track your points:</p>
        <a href="{{hotelWebsite}}/loyalty/rewards" class="button">View My Rewards</a>
        
        <p>Need help redeeming your reward? Our concierge team is here to assist you!</p>
    </div>
    
    <div class="footer" style="text-align: center; padding: 20px; font-size: 0.9em; color: #6c757d;">
        <p>For any questions about your reward, contact us at:</p>
        <p>Email: loyalty@hotel.com | Phone: +1-234-567-8900</p>
        <p>© {{currentYear}} Hotel Management System. All rights reserved.</p>
    </div>
</body>
</html>

================
File: views/emails/loyalty-tier-upgrade.hbs
================
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
        }
        .header {
            background-color: #6f42c1;
            color: white;
            padding: 20px;
            text-align: center;
            border-radius: 5px 5px 0 0;
        }
        .content {
            background-color: #f8f9fa;
            padding: 20px;
            border-radius: 0 0 5px 5px;
        }
        .upgrade-details {
            background-color: white;
            padding: 15px;
            margin: 20px 0;
            border-radius: 5px;
            border: 1px solid #dee2e6;
        }
        .tier {
            font-size: 24px;
            color: #6f42c1;
            font-weight: bold;
        }
        .points {
            font-size: 20px;
            color: #28a745;
            font-weight: bold;
        }
        .benefits {
            background-color: #f8f9fa;
            padding: 15px;
            margin: 15px 0;
            border-radius: 5px;
        }
        .benefit-item {
            margin: 10px 0;
            padding-left: 25px;
            position: relative;
        }
        .benefit-item:before {
            content: '✓';
            color: #28a745;
            position: absolute;
            left: 0;
        }
        .footer {
            text-align: center;
            margin-top: 20px;
            font-size: 12px;
            color: #6c757d;
        }
        .button {
            display: inline-block;
            padding: 10px 20px;
            background-color: #6f42c1;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            margin-top: 20px;
        }
        .confetti {
            text-align: center;
            font-size: 30px;
            margin: 20px 0;
        }
    </style>
</head>
<body>
    <div class="header">
        <h2>Congratulations on Your Tier Upgrade! 🎉</h2>
    </div>
    
    <div class="content">
        <div class="confetti">
            🎊 🌟 🎊
        </div>

        <p>Dear {{name}},</p>
        
        <p>Fantastic news! Your loyalty and continued support have earned you an upgrade to our <span class="tier">{{newTier}}</span> tier!</p>
        
        <div class="upgrade-details">
            <h3>Upgrade Details:</h3>
            <p>Previous Tier: {{oldTier}}</p>
            <p>New Tier: <span class="tier">{{newTier}}</span></p>
            {{#if bonusPoints}}
            <p>Upgrade Bonus: <span class="points">{{bonusPoints}} points</span></p>
            {{/if}}
        </div>

        <div class="benefits">
            <h3>Your New Benefits Include:</h3>
            {{#each benefits}}
            <div class="benefit-item">{{this}}</div>
            {{/each}}
        </div>

        <p>Visit your dashboard to explore all your new benefits and exclusive rewards!</p>
        
        <div style="text-align: center;">
            <a href="{{dashboardUrl}}" class="button">View Your Benefits</a>
        </div>
        
        <div class="footer">
            <p>Thank you for your continued loyalty!</p>
            <p>Keep enjoying the perks of being a valued {{newTier}} member.</p>
        </div>

        <div class="confetti">
            🎊 🌟 🎊
        </div>
    </div>
</body>
</html>

================
File: views/emails/loyalty-welcome.hbs
================
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
        }
        .header {
            background-color: #4f46e5;
            color: white;
            padding: 20px;
            text-align: center;
            border-radius: 5px;
        }
        .content {
            padding: 20px;
            background: #f8f9fa;
            border-radius: 5px;
            margin: 20px 0;
        }
        .tier-box {
            background: #4f46e5;
            color: white;
            padding: 15px;
            border-radius: 5px;
            margin: 20px 0;
            text-align: center;
        }
        .benefits-box {
            background: white;
            padding: 15px;
            border-radius: 5px;
            margin: 10px 0;
            border: 1px solid #dee2e6;
        }
        .referral-box {
            background: #e9ecef;
            padding: 15px;
            border-radius: 5px;
            margin: 20px 0;
            text-align: center;
        }
        .button {
            display: inline-block;
            padding: 10px 20px;
            background-color: #4f46e5;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            margin: 10px 0;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>Welcome to Our Loyalty Program!</h1>
    </div>
    
    <div class="content">
        <p>Dear {{name}},</p>
        
        <p>Welcome to our exclusive loyalty program! We're excited to have you join our community of valued guests.</p>
        
        <div class="tier-box">
            <h2>Your Current Tier: {{membershipTier}}</h2>
            <p>Start earning points with every stay and unlock amazing rewards!</p>
        </div>
        
        <div class="benefits-box">
            <h3>Your Benefits Include:</h3>
            <ul>
                <li>Earn points on every stay</li>
                <li>Room upgrades (subject to availability)</li>
                <li>Early check-in and late check-out options</li>
                <li>Special member-only rates</li>
                <li>Exclusive access to seasonal promotions</li>
            </ul>
        </div>
        
        <div class="referral-box">
            <h3>Share the Joy!</h3>
            <p>Invite your friends and family using your unique referral code:</p>
            <h2>{{referralCode}}</h2>
            <p>You'll earn 1,000 bonus points for each successful referral!</p>
        </div>
        
        <p>Download our mobile app to track your points, view rewards, and manage your preferences:</p>
        <a href="{{hotelWebsite}}/app" class="button">Download App</a>
        
        <p>We look forward to rewarding your loyalty and making your stays even more special!</p>
    </div>
    
    <div class="footer" style="text-align: center; padding: 20px; font-size: 0.9em; color: #6c757d;">
        <p>For any questions about our loyalty program, contact us at:</p>
        <p>Email: loyalty@hotel.com | Phone: +1-234-567-8900</p>
        <p>© {{currentYear}} Hotel Management System. All rights reserved.</p>
    </div>
</body>
</html>

================
File: views/emails/welcome.hbs
================
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
        }
        .header {
            background-color: #2563eb;
            color: white;
            padding: 20px;
            text-align: center;
            border-radius: 5px;
        }
        .content {
            padding: 20px;
            background: #f8f9fa;
            border-radius: 5px;
            margin: 20px 0;
        }
        .info-box {
            background: white;
            padding: 15px;
            border-radius: 5px;
            margin: 10px 0;
            border: 1px solid #dee2e6;
        }
        .footer {
            text-align: center;
            padding: 20px;
            font-size: 0.9em;
            color: #6c757d;
        }
        .button {
            display: inline-block;
            padding: 10px 20px;
            background-color: #2563eb;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            margin: 10px 0;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>Welcome to Our Hotel!</h1>
    </div>
    
    <div class="content">
        <p>Dear {{guestName}},</p>
        
        <p>Welcome to our hotel! We're delighted to have you as our guest. Your check-in has been completed successfully.</p>
        
        <div class="info-box">
            <h3>Your Stay Details:</h3>
            <p><strong>Room Number:</strong> {{roomNumber}}</p>
            <p><strong>Key Card Number:</strong> {{keyCardNumber}}</p>
            <p><strong>Check-in Time:</strong> {{checkInTime}}</p>
        </div>
        
        <h3>Important Information:</h3>
        <ul>
            <li>Breakfast is served from 6:30 AM to 10:30 AM</li>
            <li>WiFi Network: "Hotel_Guest"</li>
            <li>Room service is available 24/7</li>
            <li>Check-out time is 11:00 AM</li>
        </ul>
        
        <p>For any assistance during your stay, please dial '0' from your room phone to reach our front desk.</p>
        
        <a href="{{hotelWebsite}}/guest-services" class="button">View Guest Services</a>
    </div>
    
    <div class="footer">
        <p>Thank you for choosing our hotel. We wish you a pleasant stay!</p>
        <p>© {{currentYear}} Hotel Management System. All rights reserved.</p>
    </div>
</body>
</html>

================
File: views/loyalty/dashboard.hbs
================
{{> header}}

<div class="container-fluid py-4">
    <div class="row">
        <!-- Points Summary Card -->
        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Available Points</p>
                                <h5 class="font-weight-bolder">{{loyalty.points}}</h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-primary shadow-primary text-center rounded-circle">
                                <i class="ni ni-money-coins text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Membership Tier Card -->
        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Membership Tier</p>
                                <h5 class="font-weight-bolder">{{loyalty.membershipTier}}</h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-success shadow-success text-center rounded-circle">
                                <i class="ni ni-trophy text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Lifetime Points Card -->
        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Lifetime Points</p>
                                <h5 class="font-weight-bolder">{{loyalty.lifetimePoints}}</h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-warning shadow-warning text-center rounded-circle">
                                <i class="ni ni-chart-bar-32 text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Referral Count Card -->
        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Successful Referrals</p>
                                <h5 class="font-weight-bolder">{{loyalty.referralCount}}</h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-info shadow-info text-center rounded-circle">
                                <i class="ni ni-favourite-28 text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Points History -->
        <div class="col-12 col-xl-8 mb-4">
            <div class="card">
                <div class="card-header pb-0">
                    <div class="d-flex justify-content-between">
                        <h6>Points History</h6>
                        <button type="button" class="btn btn-primary btn-sm mb-0" onclick="exportPointsHistory()">Export</button>
                    </div>
                </div>
                <div class="card-body px-0 pt-0 pb-2">
                    <div class="table-responsive p-0">
                        <table class="table align-items-center mb-0">
                            <thead>
                                <tr>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Date</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Points</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Type</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Source</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Description</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{#each loyalty.pointsHistory}}
                                <tr>
                                    <td>
                                        <div class="d-flex px-3 py-1">
                                            <div class="d-flex flex-column justify-content-center">
                                                <h6 class="mb-0 text-sm">{{formatDate date}}</h6>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0 {{#if (lt points 0)}}text-danger{{else}}text-success{{/if}}">
                                            {{#if (lt points 0)}}{{points}}{{else}}+{{points}}{{/if}}
                                        </p>
                                    </td>
                                    <td>
                                        <span class="badge badge-sm bg-gradient-success">{{type}}</span>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">{{source}}</p>
                                    </td>
                                    <td>
                                        <p class="text-sm text-secondary mb-0">{{description}}</p>
                                    </td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <!-- Available Rewards -->
        <div class="col-12 col-xl-4 mb-4">
            <div class="card h-100">
                <div class="card-header pb-0">
                    <h6>Available Rewards</h6>
                </div>
                <div class="card-body p-3">
                    {{#each loyalty.rewards}}
                    {{#if (eq status 'available')}}
                    <div class="timeline timeline-one-side">
                        <div class="timeline-block mb-3">
                            <span class="timeline-step">
                                <i class="ni ni-gift-2 text-success text-gradient"></i>
                            </span>
                            <div class="timeline-content">
                                <h6 class="text-dark text-sm font-weight-bold mb-0">{{name}}</h6>
                                <p class="text-secondary font-weight-bold text-xs mt-1 mb-0">
                                    Expires: {{formatDate expiryDate}}
                                </p>
                                <button onclick="useReward('{{_id}}')" class="btn btn-link text-success text-sm mb-0 px-0">
                                    <i class="fas fa-arrow-right text-sm ms-1"></i> Use Reward
                                </button>
                            </div>
                        </div>
                    </div>
                    {{/if}}
                    {{/each}}
                </div>
            </div>
        </div>
    </div>

    <!-- Referral Section -->
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header pb-0">
                    <h6>Refer a Friend</h6>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>Your Referral Code</label>
                                <div class="input-group">
                                    <input type="text" class="form-control" value="{{loyalty.referralCode}}" id="referralCode" readonly>
                                    <button class="btn btn-outline-primary mb-0" onclick="copyReferralCode()">
                                        <i class="fas fa-copy"></i> Copy
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="alert alert-info mb-0">
                                <strong>Earn 1,000 points</strong> for each friend who joins using your referral code!
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
function copyReferralCode() {
    const referralCode = document.getElementById('referralCode');
    referralCode.select();
    document.execCommand('copy');
    alert('Referral code copied to clipboard!');
}

function exportPointsHistory() {
    // Implementation for exporting points history
    alert('Exporting points history...');
}

function useReward(rewardId) {
    if (confirm('Are you sure you want to use this reward?')) {
        window.location.href = `/loyalty/use-reward/${rewardId}`;
    }
}
</script>

{{> footer}}

================
File: views/loyalty/preferences.hbs
================
{{> header}}

<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header pb-0">
                    <h6>Stay Preferences</h6>
                    <p class="text-sm mb-0">
                        Customize your preferences to enhance your stay experience. These preferences will be automatically applied to your future bookings.
                    </p>
                </div>
                <div class="card-body">
                    <form action="/loyalty/preferences" method="POST">
                        <!-- Room Preferences -->
                        <div class="row">
                            <div class="col-md-12">
                                <h6 class="text-uppercase text-sm">Room Preferences</h6>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-control-label">Preferred Room Type</label>
                                    <select name="preferences[roomType]" class="form-control">
                                        <option value="">No Preference</option>
                                        <option value="standard" {{#if (eq loyalty.preferences.roomType 'standard')}}selected{{/if}}>Standard Room</option>
                                        <option value="deluxe" {{#if (eq loyalty.preferences.roomType 'deluxe')}}selected{{/if}}>Deluxe Room</option>
                                        <option value="suite" {{#if (eq loyalty.preferences.roomType 'suite')}}selected{{/if}}>Suite</option>
                                        <option value="executive" {{#if (eq loyalty.preferences.roomType 'executive')}}selected{{/if}}>Executive Room</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-control-label">Floor Preference</label>
                                    <select name="preferences[floorPreference]" class="form-control">
                                        <option value="">No Preference</option>
                                        <option value="low" {{#if (eq loyalty.preferences.floorPreference 'low')}}selected{{/if}}>Lower Floor</option>
                                        <option value="middle" {{#if (eq loyalty.preferences.floorPreference 'middle')}}selected{{/if}}>Middle Floor</option>
                                        <option value="high" {{#if (eq loyalty.preferences.floorPreference 'high')}}selected{{/if}}>Higher Floor</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <!-- Bed & Pillow Preferences -->
                        <div class="row">
                            <div class="col-md-12">
                                <h6 class="text-uppercase text-sm mt-4">Bed & Pillow Preferences</h6>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-control-label">Pillow Type</label>
                                    <select name="preferences[pillowType]" class="form-control">
                                        <option value="">No Preference</option>
                                        <option value="soft" {{#if (eq loyalty.preferences.pillowType 'soft')}}selected{{/if}}>Soft</option>
                                        <option value="medium" {{#if (eq loyalty.preferences.pillowType 'medium')}}selected{{/if}}>Medium</option>
                                        <option value="firm" {{#if (eq loyalty.preferences.pillowType 'firm')}}selected{{/if}}>Firm</option>
                                        <option value="memory_foam" {{#if (eq loyalty.preferences.pillowType 'memory_foam')}}selected{{/if}}>Memory Foam</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-control-label">Extra Pillows/Blankets</label>
                                    <div class="form-check form-switch">
                                        <input class="form-check-input" type="checkbox" name="preferences[extraPillows]" {{#if loyalty.preferences.extraPillows}}checked{{/if}}>
                                        <label class="form-check-label">Request extra pillows and blankets</label>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Dining Preferences -->
                        <div class="row">
                            <div class="col-md-12">
                                <h6 class="text-uppercase text-sm mt-4">Dining Preferences</h6>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-control-label">Dietary Restrictions</label>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="preferences[dietaryRestrictions][]" value="vegetarian" {{#if (includes loyalty.preferences.dietaryRestrictions 'vegetarian')}}checked{{/if}}>
                                        <label class="form-check-label">Vegetarian</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="preferences[dietaryRestrictions][]" value="vegan" {{#if (includes loyalty.preferences.dietaryRestrictions 'vegan')}}checked{{/if}}>
                                        <label class="form-check-label">Vegan</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="preferences[dietaryRestrictions][]" value="gluten_free" {{#if (includes loyalty.preferences.dietaryRestrictions 'gluten_free')}}checked{{/if}}>
                                        <label class="form-check-label">Gluten Free</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="preferences[dietaryRestrictions][]" value="dairy_free" {{#if (includes loyalty.preferences.dietaryRestrictions 'dairy_free')}}checked{{/if}}>
                                        <label class="form-check-label">Dairy Free</label>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-control-label">Newspaper Preference</label>
                                    <select name="preferences[newspaper]" class="form-control">
                                        <option value="">No Newspaper</option>
                                        <option value="local" {{#if (eq loyalty.preferences.newspaper 'local')}}selected{{/if}}>Local Newspaper</option>
                                        <option value="international" {{#if (eq loyalty.preferences.newspaper 'international')}}selected{{/if}}>International Newspaper</option>
                                        <option value="business" {{#if (eq loyalty.preferences.newspaper 'business')}}selected{{/if}}>Business News</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <!-- Special Requests -->
                        <div class="row">
                            <div class="col-md-12">
                                <h6 class="text-uppercase text-sm mt-4">Additional Preferences</h6>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group">
                                    <label class="form-control-label">Special Requests</label>
                                    <textarea name="preferences[specialRequests]" class="form-control" rows="3" placeholder="Enter any special requests or notes for your stays...">{{loyalty.preferences.specialRequests}}</textarea>
                                </div>
                            </div>
                        </div>

                        <!-- Submit Button -->
                        <div class="row mt-4">
                            <div class="col-md-12">
                                <button type="submit" class="btn btn-primary">Save Preferences</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Privacy Notice -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <h6>Privacy Notice</h6>
                    <p class="text-sm mb-0">
                        Your preferences are stored securely and will only be used to enhance your stay experience. 
                        You can update or remove these preferences at any time. For more information, please refer to our 
                        <a href="/privacy-policy">Privacy Policy</a>.
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
// Form validation and submission handling
document.querySelector('form').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    const data = {};
    
    for (let [key, value] of formData.entries()) {
        if (key.includes('[]')) {
            // Handle array values (checkboxes)
            const arrayKey = key.replace('[]', '');
            if (!data[arrayKey]) {
                data[arrayKey] = [];
            }
            data[arrayKey].push(value);
        } else {
            data[key] = value;
        }
    }

    fetch('/loyalty/preferences', {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert('Preferences saved successfully!');
            location.reload();
        } else {
            alert(data.message || 'Error saving preferences');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Error saving preferences');
    });
});
</script>

{{> footer}}

================
File: views/loyalty/redemptions.hbs
================
{{> header}}

<div class="container-fluid py-4">
    <!-- Points Summary -->
    <div class="row">
        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Available Points</p>
                                <h5 class="font-weight-bolder">{{member.points}}</h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-primary shadow-primary text-center rounded-circle">
                                <i class="ni ni-money-coins text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Active Rewards</p>
                                <h5 class="font-weight-bolder">{{activeRewardsCount}}</h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-success shadow-success text-center rounded-circle">
                                <i class="ni ni-box-2 text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Membership Tier</p>
                                <h5 class="font-weight-bolder">{{member.membershipTier}}</h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-warning shadow-warning text-center rounded-circle">
                                <i class="ni ni-trophy text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Total Redeemed</p>
                                <h5 class="font-weight-bolder">{{totalRedemptions}}</h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-info shadow-info text-center rounded-circle">
                                <i class="ni ni-cart text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Available Rewards -->
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header pb-0">
                    <h6>Available Rewards</h6>
                </div>
                <div class="card-body px-0 pt-0 pb-2">
                    <div class="row p-3">
                        {{#each availableRewards}}
                        <div class="col-xl-4 col-md-6 mb-4">
                            <div class="card">
                                {{#if image}}
                                <img src="{{image}}" class="card-img-top" alt="{{name}}">
                                {{/if}}
                                <div class="card-body">
                                    <h5 class="card-title">{{name}}</h5>
                                    <p class="card-text">{{description}}</p>
                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                        <span class="badge bg-gradient-{{categoryColor category}}">{{category}}</span>
                                        <span class="text-primary font-weight-bold">{{pointsRequired}} points</span>
                                    </div>
                                    {{#if limitedQuantity}}
                                    <p class="text-sm text-warning mb-3">Only {{remainingQuantity}} left!</p>
                                    {{/if}}
                                    <button class="btn btn-primary w-100" 
                                            onclick="redeemReward('{{_id}}')"
                                            {{#if (lt ../member.points pointsRequired)}}disabled{{/if}}>
                                        {{#if (lt ../member.points pointsRequired)}}
                                        Need {{subtract pointsRequired ../member.points}} more points
                                        {{else}}
                                        Redeem Now
                                        {{/if}}
                                    </button>
                                </div>
                            </div>
                        </div>
                        {{/each}}
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- My Redemptions -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header pb-0">
                    <h6>My Redemptions</h6>
                </div>
                <div class="card-body px-0 pt-0 pb-2">
                    <div class="table-responsive p-0">
                        <table class="table align-items-center mb-0">
                            <thead>
                                <tr>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Reward</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Points Used</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Date</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Status</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Expiry</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{#each redemptions}}
                                <tr>
                                    <td>
                                        <div class="d-flex px-3 py-1">
                                            <div>
                                                <img src="{{rewardId.image}}" class="avatar me-3">
                                            </div>
                                            <div class="d-flex flex-column justify-content-center">
                                                <h6 class="mb-0 text-sm">{{rewardId.name}}</h6>
                                                <p class="text-sm text-secondary mb-0">{{rewardId.category}}</p>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">{{pointsUsed}}</p>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">{{formatDate date}}</p>
                                    </td>
                                    <td>
                                        <span class="badge badge-sm bg-gradient-{{statusColor status}}">
                                            {{status}}
                                        </span>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0 {{#if (isExpiringSoon expiryDate)}}text-danger{{/if}}">
                                            {{formatDate expiryDate}}
                                        </p>
                                    </td>
                                    <td>
                                        {{#if (eq status 'pending')}}
                                        <button class="btn btn-link text-danger text-sm mb-0 px-3"
                                                onclick="cancelRedemption('{{_id}}')">
                                            <i class="fas fa-times text-danger me-2"></i>Cancel
                                        </button>
                                        {{/if}}
                                        {{#if (eq status 'completed')}}
                                        {{#unless rating}}
                                        <button class="btn btn-link text-primary text-sm mb-0 px-3"
                                                onclick="rateRedemption('{{_id}}')">
                                            <i class="fas fa-star text-primary me-2"></i>Rate
                                        </button>
                                        {{/unless}}
                                        {{/if}}
                                    </td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Rating Modal -->
<div class="modal fade" id="ratingModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Rate Your Experience</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="ratingForm">
                    <input type="hidden" id="redemptionId" name="redemptionId">
                    <div class="form-group">
                        <label>Rating</label>
                        <div class="rating-stars mb-3">
                            <i class="far fa-star star-rating" data-rating="1"></i>
                            <i class="far fa-star star-rating" data-rating="2"></i>
                            <i class="far fa-star star-rating" data-rating="3"></i>
                            <i class="far fa-star star-rating" data-rating="4"></i>
                            <i class="far fa-star star-rating" data-rating="5"></i>
                        </div>
                        <input type="hidden" name="rating" id="ratingInput" required>
                    </div>
                    <div class="form-group">
                        <label>Feedback (Optional)</label>
                        <textarea name="feedback" class="form-control" rows="3"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="submitRating()">Submit Rating</button>
            </div>
        </div>
    </div>
</div>

<script>
// Star rating handling
document.querySelectorAll('.star-rating').forEach(star => {
    star.addEventListener('mouseover', function() {
        const rating = this.dataset.rating;
        document.querySelectorAll('.star-rating').forEach(s => {
            if (s.dataset.rating <= rating) {
                s.classList.remove('far');
                s.classList.add('fas');
            } else {
                s.classList.remove('fas');
                s.classList.add('far');
            }
        });
    });

    star.addEventListener('click', function() {
        const rating = this.dataset.rating;
        document.getElementById('ratingInput').value = rating;
    });
});

document.querySelector('.rating-stars').addEventListener('mouseleave', function() {
    const rating = document.getElementById('ratingInput').value;
    document.querySelectorAll('.star-rating').forEach(s => {
        if (s.dataset.rating <= rating) {
            s.classList.remove('far');
            s.classList.add('fas');
        } else {
            s.classList.remove('fas');
            s.classList.add('far');
        }
    });
});

// Redemption functions
function redeemReward(rewardId) {
    if (!confirm('Are you sure you want to redeem this reward?')) return;

    fetch('/api/v1/redemptions/redeem', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ rewardId })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert('Reward redeemed successfully!');
            location.reload();
        } else {
            alert(data.message || 'Error redeeming reward');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Error redeeming reward');
    });
}

function cancelRedemption(redemptionId) {
    if (!confirm('Are you sure you want to cancel this redemption?')) return;

    fetch(`/api/v1/redemptions/${redemptionId}/cancel`, {
        method: 'POST'
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert('Redemption cancelled successfully!');
            location.reload();
        } else {
            alert(data.message || 'Error cancelling redemption');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Error cancelling redemption');
    });
}

function rateRedemption(redemptionId) {
    document.getElementById('redemptionId').value = redemptionId;
    document.getElementById('ratingInput').value = '';
    document.querySelectorAll('.star-rating').forEach(s => {
        s.classList.remove('fas');
        s.classList.add('far');
    });
    new bootstrap.Modal(document.getElementById('ratingModal')).show();
}

function submitRating() {
    const form = document.getElementById('ratingForm');
    const formData = new FormData(form);
    const redemptionId = formData.get('redemptionId');
    const data = {
        rating: parseInt(formData.get('rating')),
        feedback: formData.get('feedback')
    };

    if (!data.rating) {
        alert('Please select a rating');
        return;
    }

    fetch(`/api/v1/redemptions/${redemptionId}/rate`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert('Rating submitted successfully!');
            location.reload();
        } else {
            alert(data.message || 'Error submitting rating');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Error submitting rating');
    });
}
</script>

{{> footer}}

================
File: views/loyalty/referrals.hbs
================
{{> header}}

<div class="container-fluid py-4">
    <!-- Referral Summary -->
    <div class="row">
        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Total Referrals</p>
                                <h5 class="font-weight-bolder">{{stats.totalReferrals}}</h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-primary shadow-primary text-center rounded-circle">
                                <i class="ni ni-send text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Completed Referrals</p>
                                <h5 class="font-weight-bolder">{{stats.completedReferrals}}</h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-success shadow-success text-center rounded-circle">
                                <i class="ni ni-check-bold text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Points Earned</p>
                                <h5 class="font-weight-bolder">{{formatPoints stats.totalPointsEarned}}</h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-warning shadow-warning text-center rounded-circle">
                                <i class="ni ni-money-coins text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Pending Referrals</p>
                                <h5 class="font-weight-bolder">{{stats.pendingReferrals}}</h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-info shadow-info text-center rounded-circle">
                                <i class="ni ni-time-alarm text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Referral Code -->
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header pb-0">
                    <h6>Your Referral Code</h6>
                </div>
                <div class="card-body">
                    {{#if currentReferral}}
                    <div class="row align-items-center">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>Share this code with friends:</label>
                                <div class="input-group">
                                    <input type="text" class="form-control" id="referralCode" value="{{currentReferral.code}}" readonly>
                                    <button class="btn btn-outline-primary mb-0" onclick="copyReferralCode()">
                                        <i class="fas fa-copy"></i> Copy
                                    </button>
                                </div>
                            </div>
                            <small class="text-muted">Expires on {{formatDate currentReferral.expiryDate}}</small>
                        </div>
                        <div class="col-md-6">
                            <div class="text-end">
                                <button class="btn btn-primary" onclick="shareReferral()">
                                    <i class="fas fa-share-alt"></i> Share
                                </button>
                            </div>
                        </div>
                    </div>
                    {{else}}
                    <div class="text-center">
                        <p>You don't have an active referral code.</p>
                        <button class="btn btn-primary" onclick="generateReferralCode()">
                            <i class="fas fa-plus"></i> Generate Code
                        </button>
                    </div>
                    {{/if}}
                </div>
            </div>
        </div>
    </div>

    <!-- Referral Benefits -->
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-body">
                    <h5>Referral Program Benefits</h5>
                    <div class="row mt-4">
                        <div class="col-md-6">
                            <div class="card bg-gradient-primary">
                                <div class="card-body">
                                    <h5 class="text-white">For You (Referrer)</h5>
                                    <p class="text-white">Earn {{formatPoints settings.referrerPoints}} points for each successful referral!</p>
                                    <ul class="text-white">
                                        <li>Points awarded after friend's first booking</li>
                                        <li>No limit on number of referrals</li>
                                        <li>Track your referrals and earnings</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="card bg-gradient-info">
                                <div class="card-body">
                                    <h5 class="text-white">For Your Friends</h5>
                                    <p class="text-white">They get {{formatPoints settings.refereePoints}} welcome points!</p>
                                    <ul class="text-white">
                                        <li>Instant points upon joining</li>
                                        <li>Access to member-exclusive rates</li>
                                        <li>Special new member perks</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Referral History -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header pb-0">
                    <h6>Your Referral History</h6>
                </div>
                <div class="card-body px-0 pt-0 pb-2">
                    <div class="table-responsive p-0">
                        <table class="table align-items-center mb-0">
                            <thead>
                                <tr>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Referred Friend</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Code</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Date</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Status</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Points</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{#each referrals}}
                                <tr>
                                    <td>
                                        <div class="d-flex px-3 py-1">
                                            <div class="d-flex flex-column justify-content-center">
                                                {{#if refereeId}}
                                                <h6 class="mb-0 text-sm">{{refereeId.name}}</h6>
                                                <p class="text-xs text-secondary mb-0">{{refereeId.email}}</p>
                                                {{else}}
                                                <p class="text-xs text-muted mb-0">Pending</p>
                                                {{/if}}
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">{{code}}</p>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">{{formatDate createdAt}}</p>
                                    </td>
                                    <td>
                                        <span class="badge badge-sm bg-gradient-{{statusColor status}}">
                                            {{status}}
                                        </span>
                                    </td>
                                    <td>
                                        {{#if bonusPointsAwarded}}
                                        <p class="text-sm font-weight-bold mb-0 text-success">
                                            +{{formatPoints referrerPoints}}
                                        </p>
                                        {{else}}
                                        <p class="text-sm text-muted mb-0">Pending</p>
                                        {{/if}}
                                    </td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Share Modal -->
<div class="modal fade" id="shareModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Share Your Referral Code</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-4">
                    <p>Share this link with your friends:</p>
                    <div class="input-group">
                        <input type="text" class="form-control" id="referralLink" value="{{referralLink}}" readonly>
                        <button class="btn btn-outline-primary mb-0" onclick="copyReferralLink()">
                            <i class="fas fa-copy"></i> Copy
                        </button>
                    </div>
                </div>
                <div class="text-center">
                    <button class="btn btn-primary mx-2" onclick="shareViaEmail()">
                        <i class="fas fa-envelope"></i> Email
                    </button>
                    <button class="btn btn-info mx-2" onclick="shareViaWhatsApp()">
                        <i class="fab fa-whatsapp"></i> WhatsApp
                    </button>
                    <button class="btn btn-primary mx-2" onclick="shareViaFacebook()">
                        <i class="fab fa-facebook"></i> Facebook
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
function copyReferralCode() {
    const codeInput = document.getElementById('referralCode');
    codeInput.select();
    document.execCommand('copy');
    alert('Referral code copied to clipboard!');
}

function copyReferralLink() {
    const linkInput = document.getElementById('referralLink');
    linkInput.select();
    document.execCommand('copy');
    alert('Referral link copied to clipboard!');
}

function generateReferralCode() {
    fetch('/api/v1/referrals/generate', {
        method: 'POST'
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            location.reload();
        } else {
            alert(data.message || 'Error generating referral code');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Error generating referral code');
    });
}

function shareReferral() {
    new bootstrap.Modal(document.getElementById('shareModal')).show();
}

function shareViaEmail() {
    const subject = 'Join our Hotel Loyalty Program';
    const body = `Hi!\n\nI thought you might be interested in joining our hotel loyalty program. Use my referral code ${document.getElementById('referralCode').value} to get ${{{settings.refereePoints}}} bonus points when you join!\n\nSign up here: ${document.getElementById('referralLink').value}`;
    window.location.href = `mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
}

function shareViaWhatsApp() {
    const message = `Join our hotel loyalty program using my referral code ${document.getElementById('referralCode').value} and get ${{{settings.refereePoints}}} bonus points! Sign up here: ${document.getElementById('referralLink').value}`;
    window.open(`https://wa.me/?text=${encodeURIComponent(message)}`, '_blank');
}

function shareViaFacebook() {
    const url = document.getElementById('referralLink').value;
    window.open(`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}`, '_blank');
}
</script>

{{> footer}}

================
File: views/loyalty/rewards.hbs
================
{{> header}}

<div class="container-fluid py-4">
    <!-- Points Summary -->
    <div class="row">
        <div class="col-xl-3 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Your Points</p>
                                <h5 class="font-weight-bolder">{{loyalty.points}}</h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-primary shadow-primary text-center rounded-circle">
                                <i class="ni ni-money-coins text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Rewards Catalog -->
    <div class="row">
        <!-- Room Upgrades -->
        <div class="col-md-4 mb-4">
            <div class="card">
                <div class="card-header mx-4 p-3 text-center">
                    <div class="icon icon-shape icon-lg bg-gradient-primary shadow text-center border-radius-lg">
                        <i class="fas fa-hotel opacity-10"></i>
                    </div>
                </div>
                <div class="card-body pt-0 p-3 text-center">
                    <h6 class="text-center mb-0">Room Upgrade</h6>
                    <span class="text-xs">Upgrade to next room category</span>
                    <hr class="horizontal dark my-3">
                    <h5 class="mb-0">10,000 points</h5>
                    <button onclick="redeemReward('room_upgrade', 10000)" 
                            class="btn btn-primary btn-sm mt-3"
                            {{#if (lt loyalty.points 10000)}}disabled{{/if}}>
                        Redeem Now
                    </button>
                </div>
            </div>
        </div>

        <!-- Free Night Stay -->
        <div class="col-md-4 mb-4">
            <div class="card">
                <div class="card-header mx-4 p-3 text-center">
                    <div class="icon icon-shape icon-lg bg-gradient-success shadow text-center border-radius-lg">
                        <i class="fas fa-bed opacity-10"></i>
                    </div>
                </div>
                <div class="card-body pt-0 p-3 text-center">
                    <h6 class="text-center mb-0">Free Night Stay</h6>
                    <span class="text-xs">One night complimentary stay</span>
                    <hr class="horizontal dark my-3">
                    <h5 class="mb-0">25,000 points</h5>
                    <button onclick="redeemReward('free_night', 25000)" 
                            class="btn btn-primary btn-sm mt-3"
                            {{#if (lt loyalty.points 25000)}}disabled{{/if}}>
                        Redeem Now
                    </button>
                </div>
            </div>
        </div>

        <!-- Dining Voucher -->
        <div class="col-md-4 mb-4">
            <div class="card">
                <div class="card-header mx-4 p-3 text-center">
                    <div class="icon icon-shape icon-lg bg-gradient-warning shadow text-center border-radius-lg">
                        <i class="fas fa-utensils opacity-10"></i>
                    </div>
                </div>
                <div class="card-body pt-0 p-3 text-center">
                    <h6 class="text-center mb-0">Dining Voucher</h6>
                    <span class="text-xs">$50 dining credit</span>
                    <hr class="horizontal dark my-3">
                    <h5 class="mb-0">15,000 points</h5>
                    <button onclick="redeemReward('dining_voucher', 15000)" 
                            class="btn btn-primary btn-sm mt-3"
                            {{#if (lt loyalty.points 15000)}}disabled{{/if}}>
                        Redeem Now
                    </button>
                </div>
            </div>
        </div>

        <!-- Spa Treatment -->
        <div class="col-md-4 mb-4">
            <div class="card">
                <div class="card-header mx-4 p-3 text-center">
                    <div class="icon icon-shape icon-lg bg-gradient-info shadow text-center border-radius-lg">
                        <i class="fas fa-spa opacity-10"></i>
                    </div>
                </div>
                <div class="card-body pt-0 p-3 text-center">
                    <h6 class="text-center mb-0">Spa Treatment</h6>
                    <span class="text-xs">60-minute massage session</span>
                    <hr class="horizontal dark my-3">
                    <h5 class="mb-0">15,000 points</h5>
                    <button onclick="redeemReward('spa_voucher', 15000)" 
                            class="btn btn-primary btn-sm mt-3"
                            {{#if (lt loyalty.points 15000)}}disabled{{/if}}>
                        Redeem Now
                    </button>
                </div>
            </div>
        </div>

        <!-- Airport Transfer -->
        <div class="col-md-4 mb-4">
            <div class="card">
                <div class="card-header mx-4 p-3 text-center">
                    <div class="icon icon-shape icon-lg bg-gradient-danger shadow text-center border-radius-lg">
                        <i class="fas fa-car opacity-10"></i>
                    </div>
                </div>
                <div class="card-body pt-0 p-3 text-center">
                    <h6 class="text-center mb-0">Airport Transfer</h6>
                    <span class="text-xs">Complimentary airport pickup/drop</span>
                    <hr class="horizontal dark my-3">
                    <h5 class="mb-0">8,000 points</h5>
                    <button onclick="redeemReward('airport_transfer', 8000)" 
                            class="btn btn-primary btn-sm mt-3"
                            {{#if (lt loyalty.points 8000)}}disabled{{/if}}>
                        Redeem Now
                    </button>
                </div>
            </div>
        </div>

        <!-- Late Checkout -->
        <div class="col-md-4 mb-4">
            <div class="card">
                <div class="card-header mx-4 p-3 text-center">
                    <div class="icon icon-shape icon-lg bg-gradient-dark shadow text-center border-radius-lg">
                        <i class="fas fa-clock opacity-10"></i>
                    </div>
                </div>
                <div class="card-body pt-0 p-3 text-center">
                    <h6 class="text-center mb-0">Late Checkout</h6>
                    <span class="text-xs">Extended checkout until 4 PM</span>
                    <hr class="horizontal dark my-3">
                    <h5 class="mb-0">5,000 points</h5>
                    <button onclick="redeemReward('late_checkout', 5000)" 
                            class="btn btn-primary btn-sm mt-3"
                            {{#if (lt loyalty.points 5000)}}disabled{{/if}}>
                        Redeem Now
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Membership Tiers -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header pb-0">
                    <h6>Membership Tiers & Benefits</h6>
                </div>
                <div class="card-body px-0 pt-0 pb-2">
                    <div class="table-responsive p-0">
                        <table class="table align-items-center mb-0">
                            <thead>
                                <tr>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Tier</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Points Required</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Benefits</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>
                                        <div class="d-flex px-3 py-1">
                                            <div class="d-flex flex-column justify-content-center">
                                                <h6 class="mb-0 text-sm">Bronze</h6>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">0</p>
                                    </td>
                                    <td>
                                        <p class="text-sm text-secondary mb-0">
                                            • Basic point earning<br>
                                            • Member-only rates
                                        </p>
                                    </td>
                                    <td>
                                        {{#if (eq loyalty.membershipTier 'Bronze')}}
                                        <span class="badge badge-sm bg-gradient-success">Current</span>
                                        {{/if}}
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="d-flex px-3 py-1">
                                            <div class="d-flex flex-column justify-content-center">
                                                <h6 class="mb-0 text-sm">Silver</h6>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">10,000</p>
                                    </td>
                                    <td>
                                        <p class="text-sm text-secondary mb-0">
                                            • 10% bonus points<br>
                                            • Early check-in<br>
                                            • Welcome drink
                                        </p>
                                    </td>
                                    <td>
                                        {{#if (eq loyalty.membershipTier 'Silver')}}
                                        <span class="badge badge-sm bg-gradient-success">Current</span>
                                        {{/if}}
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="d-flex px-3 py-1">
                                            <div class="d-flex flex-column justify-content-center">
                                                <h6 class="mb-0 text-sm">Gold</h6>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">25,000</p>
                                    </td>
                                    <td>
                                        <p class="text-sm text-secondary mb-0">
                                            • 25% bonus points<br>
                                            • Room upgrades<br>
                                            • Late checkout<br>
                                            • Lounge access
                                        </p>
                                    </td>
                                    <td>
                                        {{#if (eq loyalty.membershipTier 'Gold')}}
                                        <span class="badge badge-sm bg-gradient-success">Current</span>
                                        {{/if}}
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="d-flex px-3 py-1">
                                            <div class="d-flex flex-column justify-content-center">
                                                <h6 class="mb-0 text-sm">Platinum</h6>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">50,000</p>
                                    </td>
                                    <td>
                                        <p class="text-sm text-secondary mb-0">
                                            • 50% bonus points<br>
                                            • Guaranteed upgrades<br>
                                            • Airport transfers<br>
                                            • Spa credits<br>
                                            • Personal concierge
                                        </p>
                                    </td>
                                    <td>
                                        {{#if (eq loyalty.membershipTier 'Platinum')}}
                                        <span class="badge badge-sm bg-gradient-success">Current</span>
                                        {{/if}}
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
function redeemReward(type, points) {
    if (confirm(`Are you sure you want to redeem this reward for ${points} points?`)) {
        fetch('/loyalty/redeem', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                rewardType: type,
                points: points
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('Reward redeemed successfully!');
                location.reload();
            } else {
                alert(data.message || 'Error redeeming reward');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Error redeeming reward');
        });
    }
}
</script>

{{> footer}}



================================================================
End of Codebase
================================================================
