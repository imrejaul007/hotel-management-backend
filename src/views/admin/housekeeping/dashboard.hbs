{{> admin/header title="Housekeeping Dashboard"}}

<div class="container-fluid">
    <!-- Page Heading -->
    <div class="d-sm-flex align-items-center justify-content-between mb-4">
        <h1 class="h3 mb-0 text-gray-800">Housekeeping Dashboard</h1>
        <div>
            <button class="btn btn-success" onclick="assignTasks()">
                <i class="fas fa-tasks"></i> Auto-Assign Tasks
            </button>
            <button class="btn btn-primary" onclick="refreshDashboard()">
                <i class="fas fa-sync"></i> Refresh
            </button>
        </div>
    </div>

    <!-- Task Overview Cards -->
    <div class="row">
        <!-- Pending Tasks -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-primary shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                Pending Tasks</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800" id="pendingTasksCount">
                                {{stats.pendingTasks}}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-clipboard-list fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- In Progress -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-info shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-info text-uppercase mb-1">
                                In Progress</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800" id="inProgressCount">
                                {{stats.inProgressTasks}}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-clock fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Completed Today -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-success shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">
                                Completed Today</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800" id="completedCount">
                                {{stats.completedToday}}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-check-circle fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Staff Available -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-warning shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">
                                Staff Available</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800" id="staffCount">
                                {{stats.availableStaff}}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-user-friends fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Room Status Grid -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow">
                <div class="card-header py-3 d-flex justify-content-between align-items-center">
                    <h6 class="m-0 font-weight-bold text-primary">Room Status Overview</h6>
                    <div class="btn-group">
                        <button class="btn btn-outline-primary btn-sm" onclick="filterRooms('all')">All</button>
                        <button class="btn btn-outline-warning btn-sm" onclick="filterRooms('dirty')">Dirty</button>
                        <button class="btn btn-outline-info btn-sm" onclick="filterRooms('cleaning')">Cleaning</button>
                        <button class="btn btn-outline-success btn-sm" onclick="filterRooms('clean')">Clean</button>
                        <button class="btn btn-outline-danger btn-sm" onclick="filterRooms('inspection')">Inspection</button>
                    </div>
                </div>
                <div class="card-body">
                    <div class="room-grid" id="roomGrid">
                        {{#each rooms}}
                        <div class="room-card {{status}}" id="room-{{number}}" onclick="showRoomDetails('{{id}}')">
                            <div class="room-number">{{number}}</div>
                            <div class="room-type">{{type}}</div>
                            <div class="room-status">{{status}}</div>
                            <div class="room-info">
                                {{#if assignedTo}}
                                <span class="badge badge-info">{{assignedTo}}</span>
                                {{/if}}
                                {{#if priority}}
                                <span class="badge badge-danger">Priority</span>
                                {{/if}}
                            </div>
                        </div>
                        {{/each}}
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Task List -->
    <div class="row">
        <div class="col-12">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Active Tasks</h6>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-bordered" id="tasksTable">
                            <thead>
                                <tr>
                                    <th>Room</th>
                                    <th>Task Type</th>
                                    <th>Priority</th>
                                    <th>Assigned To</th>
                                    <th>Status</th>
                                    <th>Time</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="tasksList">
                                {{#each tasks}}
                                <tr id="task-{{id}}">
                                    <td>{{roomNumber}}</td>
                                    <td>{{type}}</td>
                                    <td>
                                        <span class="badge badge-{{priorityColor priority}}">
                                            {{priority}}
                                        </span>
                                    </td>
                                    <td>{{assignedTo}}</td>
                                    <td>
                                        <span class="badge badge-{{statusColor status}}">
                                            {{status}}
                                        </span>
                                    </td>
                                    <td>{{formatTime createdAt}}</td>
                                    <td>
                                        <div class="btn-group">
                                            <button class="btn btn-info btn-sm" onclick="updateTaskStatus('{{id}}')">
                                                Update
                                            </button>
                                            <button class="btn btn-warning btn-sm" onclick="reassignTask('{{id}}')">
                                                Reassign
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Room Details Modal -->
<div class="modal fade" id="roomDetailsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Room Details</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="roomDetailsContent"></div>
            </div>
        </div>
    </div>
</div>

<!-- WebSocket Integration -->
<script src="/js/websocket.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    initializeDataTables();
    setupWebSocket();
});

function initializeDataTables() {
    $('#tasksTable').DataTable({
        order: [[2, 'desc'], [5, 'desc']],
        pageLength: 25
    });
}

function setupWebSocket() {
    // Room status updates
    hotelWS.on('ROOM_STATUS_UPDATE', function(data) {
        const roomCard = document.getElementById(`room-${data.roomNumber}`);
        if (roomCard) {
            roomCard.className = `room-card ${data.status}`;
            roomCard.querySelector('.room-status').textContent = data.status;
            
            // Update assigned staff if present
            const roomInfo = roomCard.querySelector('.room-info');
            if (data.assignedTo) {
                roomInfo.innerHTML = `<span class="badge badge-info">${data.assignedTo}</span>`;
            } else {
                roomInfo.innerHTML = '';
            }
        }

        // Update statistics
        updateDashboardStats();
    });

    // Task updates
    hotelWS.on('TASK_UPDATE', function(data) {
        const table = $('#tasksTable').DataTable();
        const existingRow = table.row(`#task-${data.id}`);
        
        if (existingRow.length) {
            existingRow.remove();
        }
        
        if (data.status !== 'completed') {
            table.row.add([
                data.roomNumber,
                data.type,
                `<span class="badge badge-${getPriorityColor(data.priority)}">${data.priority}</span>`,
                data.assignedTo,
                `<span class="badge badge-${getStatusColor(data.status)}">${data.status}</span>`,
                formatTime(data.createdAt),
                `<div class="btn-group">
                    <button class="btn btn-info btn-sm" onclick="updateTaskStatus('${data.id}')">
                        Update
                    </button>
                    <button class="btn btn-warning btn-sm" onclick="reassignTask('${data.id}')">
                        Reassign
                    </button>
                </div>`
            ]).draw(false);
        }

        // Update statistics
        updateDashboardStats();
    });
}

function updateDashboardStats() {
    fetch('/admin/housekeeping/stats')
        .then(response => response.json())
        .then(stats => {
            document.getElementById('pendingTasksCount').textContent = stats.pendingTasks;
            document.getElementById('inProgressCount').textContent = stats.inProgressTasks;
            document.getElementById('completedCount').textContent = stats.completedToday;
            document.getElementById('staffCount').textContent = stats.availableStaff;
        });
}

function filterRooms(status) {
    const rooms = document.querySelectorAll('.room-card');
    if (status === 'all') {
        rooms.forEach(room => room.style.display = 'block');
    } else {
        rooms.forEach(room => {
            room.style.display = room.classList.contains(status) ? 'block' : 'none';
        });
    }
}

function showRoomDetails(roomId) {
    fetch(`/admin/housekeeping/room/${roomId}`)
        .then(response => response.json())
        .then(data => {
            const content = document.getElementById('roomDetailsContent');
            content.innerHTML = `
                <div class="room-details">
                    <h4>Room ${data.number}</h4>
                    <div class="row">
                        <div class="col-md-6">
                            <p><strong>Type:</strong> ${data.type}</p>
                            <p><strong>Status:</strong> ${data.status}</p>
                            <p><strong>Last Cleaned:</strong> ${formatTime(data.lastCleaned)}</p>
                            <p><strong>Assigned To:</strong> ${data.assignedTo || 'Not assigned'}</p>
                        </div>
                        <div class="col-md-6">
                            <p><strong>Guest Status:</strong> ${data.guestStatus}</p>
                            <p><strong>Special Requests:</strong> ${data.specialRequests || 'None'}</p>
                            <p><strong>Notes:</strong> ${data.notes || 'None'}</p>
                        </div>
                    </div>
                    <div class="mt-3">
                        <button class="btn btn-primary" onclick="assignTask('${roomId}')">
                            Assign Task
                        </button>
                        <button class="btn btn-info" onclick="markInspection('${roomId}')">
                            Mark for Inspection
                        </button>
                        <button class="btn btn-success" onclick="markComplete('${roomId}')">
                            Mark Complete
                        </button>
                    </div>
                </div>
            `;
            $('#roomDetailsModal').modal('show');
        });
}

function assignTask(roomId) {
    fetch('/admin/housekeeping/staff')
        .then(response => response.json())
        .then(staff => {
            Swal.fire({
                title: 'Assign Task',
                html: `
                    <div class="form-group">
                        <label>Select Staff</label>
                        <select class="form-control" id="staffSelect">
                            ${staff.map(s => `<option value="${s.id}">${s.name}</option>`).join('')}
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Priority</label>
                        <select class="form-control" id="prioritySelect">
                            <option value="low">Low</option>
                            <option value="medium">Medium</option>
                            <option value="high">High</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Notes</label>
                        <textarea class="form-control" id="taskNotes"></textarea>
                    </div>
                `,
                showCancelButton: true,
                confirmButtonText: 'Assign',
                focusConfirm: false,
                preConfirm: () => {
                    return {
                        staffId: document.getElementById('staffSelect').value,
                        priority: document.getElementById('prioritySelect').value,
                        notes: document.getElementById('taskNotes').value
                    }
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(`/admin/housekeeping/assign-task`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            roomId,
                            ...result.value
                        })
                    }).then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire('Success', 'Task assigned successfully', 'success');
                            $('#roomDetailsModal').modal('hide');
                        } else {
                            throw new Error(data.error);
                        }
                    }).catch(error => {
                        Swal.fire('Error', error.message, 'error');
                    });
                }
            });
        });
}

function updateTaskStatus(taskId) {
    Swal.fire({
        title: 'Update Task Status',
        input: 'select',
        inputOptions: {
            'pending': 'Pending',
            'in_progress': 'In Progress',
            'completed': 'Completed',
            'delayed': 'Delayed'
        },
        inputPlaceholder: 'Select status',
        showCancelButton: true,
        inputValidator: (value) => {
            return new Promise((resolve) => {
                if (value) {
                    resolve()
                } else {
                    resolve('You need to select a status')
                }
            })
        }
    }).then((result) => {
        if (result.isConfirmed) {
            fetch(`/admin/housekeeping/update-task-status`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    taskId,
                    status: result.value
                })
            }).then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire('Success', 'Task status updated successfully', 'success');
                } else {
                    throw new Error(data.error);
                }
            }).catch(error => {
                Swal.fire('Error', error.message, 'error');
            });
        }
    });
}

function reassignTask(taskId) {
    fetch('/admin/housekeeping/staff')
        .then(response => response.json())
        .then(staff => {
            Swal.fire({
                title: 'Reassign Task',
                input: 'select',
                inputOptions: Object.fromEntries(
                    staff.map(s => [s.id, s.name])
                ),
                inputPlaceholder: 'Select staff member',
                showCancelButton: true,
                inputValidator: (value) => {
                    return new Promise((resolve) => {
                        if (value) {
                            resolve()
                        } else {
                            resolve('You need to select a staff member')
                        }
                    })
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(`/admin/housekeeping/reassign-task`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            taskId,
                            staffId: result.value
                        })
                    }).then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire('Success', 'Task reassigned successfully', 'success');
                        } else {
                            throw new Error(data.error);
                        }
                    }).catch(error => {
                        Swal.fire('Error', error.message, 'error');
                    });
                }
            });
        });
}

function assignTasks() {
    Swal.fire({
        title: 'Auto-Assign Tasks',
        text: 'This will automatically assign all pending tasks to available staff members. Continue?',
        icon: 'question',
        showCancelButton: true,
        confirmButtonText: 'Yes, assign tasks',
        cancelButtonText: 'No, cancel'
    }).then((result) => {
        if (result.isConfirmed) {
            fetch('/admin/housekeeping/auto-assign', {
                method: 'POST'
            }).then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire('Success', 'Tasks have been automatically assigned', 'success');
                } else {
                    throw new Error(data.error);
                }
            }).catch(error => {
                Swal.fire('Error', error.message, 'error');
            });
        }
    });
}

function refreshDashboard() {
    location.reload();
}

// Helper functions
function getPriorityColor(priority) {
    const colors = {
        low: 'info',
        medium: 'warning',
        high: 'danger'
    };
    return colors[priority] || 'secondary';
}

function getStatusColor(status) {
    const colors = {
        pending: 'warning',
        in_progress: 'info',
        completed: 'success',
        delayed: 'danger'
    };
    return colors[status] || 'secondary';
}

function formatTime(timestamp) {
    return new Date(timestamp).toLocaleString();
}
</script>

<style>
.room-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 1rem;
    padding: 1rem;
}

.room-card {
    border: 1px solid #e3e6f0;
    border-radius: 0.35rem;
    padding: 1rem;
    cursor: pointer;
    transition: all 0.3s ease;
}

.room-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15);
}

.room-card.dirty {
    background-color: #fff3cd;
    border-color: #ffeeba;
}

.room-card.cleaning {
    background-color: #cce5ff;
    border-color: #b8daff;
}

.room-card.clean {
    background-color: #d4edda;
    border-color: #c3e6cb;
}

.room-card.inspection {
    background-color: #f8d7da;
    border-color: #f5c6cb;
}

.room-number {
    font-size: 1.25rem;
    font-weight: bold;
    margin-bottom: 0.5rem;
}

.room-type {
    font-size: 0.875rem;
    color: #858796;
    margin-bottom: 0.5rem;
}

.room-status {
    font-size: 0.875rem;
    font-weight: 500;
    text-transform: capitalize;
    margin-bottom: 0.5rem;
}

.room-info {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
}
</style>

{{> admin/footer}}
