{{> admin/header}}

<div class="container-fluid py-4">
    <!-- Report Filters -->
    <div class="card mb-4">
        <div class="card-body">
            <div class="row">
                <div class="col-md-3 mb-3">
                    <label class="form-label">Report Type</label>
                    <select id="reportType" class="form-select" onchange="changeReport()">
                        <option value="consumption">Consumption Report</option>
                        <option value="restock">Restock Schedule</option>
                        <option value="trends">Inventory Trends</option>
                        <option value="valuation">Inventory Valuation</option>
                    </select>
                </div>
                <div class="col-md-3 mb-3">
                    <label class="form-label">Hotel</label>
                    <select id="hotel" class="form-select" onchange="loadReport()">
                        <option value="">All Hotels</option>
                        {{#each hotels}}
                        <option value="{{this._id}}">{{this.name}}</option>
                        {{/each}}
                    </select>
                </div>
                <div class="col-md-3 mb-3">
                    <label class="form-label">Category</label>
                    <select id="category" class="form-select" onchange="loadReport()">
                        <option value="">All Categories</option>
                        <option value="amenities">Amenities</option>
                        <option value="cleaning">Cleaning Supplies</option>
                        <option value="linens">Linens</option>
                        <option value="toiletries">Toiletries</option>
                        <option value="food_beverage">Food & Beverage</option>
                        <option value="maintenance">Maintenance</option>
                        <option value="office">Office Supplies</option>
                        <option value="other">Other</option>
                    </select>
                </div>
                <div class="col-md-3 mb-3">
                    <label class="form-label">Date Range</label>
                    <select id="dateRange" class="form-select" onchange="loadReport()">
                        <option value="daily">Last 30 Days</option>
                        <option value="weekly">Last 7 Days</option>
                        <option value="monthly">Last Month</option>
                    </select>
                </div>
            </div>
        </div>
    </div>

    <!-- Report Content -->
    <div class="card">
        <div class="card-header">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="mb-0" id="reportTitle">Consumption Report</h5>
                <button class="btn btn-primary btn-sm" onclick="exportReport()">
                    <i class="fas fa-download me-2"></i>Export
                </button>
            </div>
        </div>
        <div class="card-body">
            <!-- Charts Container -->
            <div class="mb-4">
                <canvas id="reportChart" height="300"></canvas>
            </div>

            <!-- Report Table -->
            <div class="table-responsive">
                <table class="table align-items-center mb-0" id="reportTable">
                    <!-- Table content will be dynamically populated -->
                </table>
            </div>
        </div>
    </div>
</div>

{{#section 'scripts'}}
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
let currentChart = null;

async function loadReport() {
    const reportType = document.getElementById('reportType').value;
    const hotel = document.getElementById('hotel').value;
    const category = document.getElementById('category').value;
    const dateRange = document.getElementById('dateRange').value;

    try {
        const response = await fetch(`/admin/inventory/reports/${reportType}?hotel=${hotel}&category=${category}&period=${dateRange}`);
        const result = await response.json();

        if (result.success) {
            updateReportView(reportType, result.data);
        } else {
            alert(result.message || 'Error loading report');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error loading report');
    }
}

function updateReportView(type, data) {
    const title = document.getElementById('reportTitle');
    const table = document.getElementById('reportTable');
    
    // Update title
    title.textContent = {
        consumption: 'Consumption Report',
        restock: 'Restock Schedule',
        trends: 'Inventory Trends',
        valuation: 'Inventory Valuation'
    }[type];

    // Clear existing chart
    if (currentChart) {
        currentChart.destroy();
    }

    // Update chart based on report type
    switch (type) {
        case 'consumption':
            renderConsumptionChart(data);
            renderConsumptionTable(data);
            break;
        case 'restock':
            renderRestockChart(data);
            renderRestockTable(data);
            break;
        case 'trends':
            renderTrendsChart(data);
            renderTrendsTable(data);
            break;
        case 'valuation':
            renderValuationChart(data);
            renderValuationTable(data);
            break;
    }
}

function renderConsumptionChart(data) {
    const ctx = document.getElementById('reportChart').getContext('2d');
    
    const chartData = {
        labels: data.map(item => item._id.name),
        datasets: [{
            label: 'Quantity Consumed',
            data: data.map(item => item.totalQuantity),
            backgroundColor: 'rgba(54, 162, 235, 0.2)',
            borderColor: 'rgba(54, 162, 235, 1)',
            borderWidth: 1
        }]
    };

    currentChart = new Chart(ctx, {
        type: 'bar',
        data: chartData,
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
}

function renderConsumptionTable(data) {
    const table = document.getElementById('reportTable');
    
    table.innerHTML = `
        <thead>
            <tr>
                <th>Item</th>
                <th>Category</th>
                <th>Quantity Consumed</th>
                <th>Total Cost</th>
            </tr>
        </thead>
        <tbody>
            ${data.map(item => `
                <tr>
                    <td>${item._id.name}</td>
                    <td>${formatCategory(item._id.category)}</td>
                    <td>${item.totalQuantity}</td>
                    <td>$${item.totalCost.toFixed(2)}</td>
                </tr>
            `).join('')}
        </tbody>
    `;
}

function renderRestockChart(data) {
    const ctx = document.getElementById('reportChart').getContext('2d');
    
    const chartData = {
        labels: data.map(item => item.name),
        datasets: [{
            label: 'Current Stock',
            data: data.map(item => item.currentStock),
            backgroundColor: 'rgba(255, 99, 132, 0.2)',
            borderColor: 'rgba(255, 99, 132, 1)',
            borderWidth: 1
        }, {
            label: 'Reorder Point',
            data: data.map(item => item.reorderPoint),
            backgroundColor: 'rgba(255, 206, 86, 0.2)',
            borderColor: 'rgba(255, 206, 86, 1)',
            borderWidth: 1
        }]
    };

    currentChart = new Chart(ctx, {
        type: 'bar',
        data: chartData,
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
}

function renderRestockTable(data) {
    const table = document.getElementById('reportTable');
    
    table.innerHTML = `
        <thead>
            <tr>
                <th>Item</th>
                <th>Hotel</th>
                <th>Current Stock</th>
                <th>Reorder Point</th>
                <th>Suggested Reorder</th>
                <th>Estimated Cost</th>
                <th>Last Restocked</th>
            </tr>
        </thead>
        <tbody>
            ${data.map(item => `
                <tr>
                    <td>${item.name}</td>
                    <td>${item.hotel}</td>
                    <td>${item.currentStock}</td>
                    <td>${item.reorderPoint}</td>
                    <td>${item.suggestedReorder}</td>
                    <td>$${item.estimatedCost.toFixed(2)}</td>
                    <td>${item.lastRestocked ? new Date(item.lastRestocked).toLocaleDateString() : 'N/A'}</td>
                </tr>
            `).join('')}
        </tbody>
    `;
}

function renderTrendsChart(data) {
    const ctx = document.getElementById('reportChart').getContext('2d');
    
    // Group data by transaction type
    const groupedData = data.reduce((acc, item) => {
        const date = item._id.date;
        const type = item._id.type;
        if (!acc[type]) {
            acc[type] = {};
        }
        acc[type][date] = item.totalQuantity;
        return acc;
    }, {});

    // Get unique dates
    const dates = [...new Set(data.map(item => item._id.date))].sort();

    // Create datasets
    const datasets = Object.entries(groupedData).map(([type, values]) => ({
        label: formatTransactionType(type),
        data: dates.map(date => values[date] || 0),
        borderColor: getTransactionTypeColor(type),
        fill: false
    }));

    currentChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: dates,
            datasets: datasets
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
}

function renderTrendsTable(data) {
    const table = document.getElementById('reportTable');
    
    // Group data by date
    const groupedByDate = data.reduce((acc, item) => {
        const date = item._id.date;
        if (!acc[date]) {
            acc[date] = {};
        }
        acc[date][item._id.type] = item.totalQuantity;
        return acc;
    }, {});

    table.innerHTML = `
        <thead>
            <tr>
                <th>Date</th>
                <th>Restock</th>
                <th>Consumption</th>
                <th>Adjustment</th>
            </tr>
        </thead>
        <tbody>
            ${Object.entries(groupedByDate).map(([date, values]) => `
                <tr>
                    <td>${date}</td>
                    <td>${values.restock || 0}</td>
                    <td>${values.consumption || 0}</td>
                    <td>${values.adjustment || 0}</td>
                </tr>
            `).join('')}
        </tbody>
    `;
}

function formatCategory(category) {
    return category.split('_').map(word => 
        word.charAt(0).toUpperCase() + word.slice(1)
    ).join(' ');
}

function formatTransactionType(type) {
    return type.charAt(0).toUpperCase() + type.slice(1);
}

function getTransactionTypeColor(type) {
    const colors = {
        restock: 'rgb(75, 192, 192)',
        consumption: 'rgb(255, 99, 132)',
        adjustment: 'rgb(255, 206, 86)'
    };
    return colors[type] || 'rgb(201, 203, 207)';
}

async function exportReport() {
    const reportType = document.getElementById('reportType').value;
    const hotel = document.getElementById('hotel').value;
    const category = document.getElementById('category').value;
    
    const queryParams = new URLSearchParams({
        type: reportType,
        hotel,
        category
    }).toString();
    
    window.location.href = `/admin/inventory/export?${queryParams}`;
}

// Initial load
loadReport();
</script>
{{/section}}
