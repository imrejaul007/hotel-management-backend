{{> admin/header}}

<div class="container-fluid py-4">
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h4 class="mb-0">Maintenance & Housekeeping Requests</h4>
        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addRequestModal">
            <i class="fas fa-plus me-2"></i>New Request
        </button>
    </div>

    <!-- Filters -->
    <div class="card mb-4">
        <div class="card-body">
            <form action="/admin/maintenance" method="GET" class="row g-3">
                <div class="col-md-2">
                    <label class="form-label">Type</label>
                    <select name="type" class="form-select">
                        <option value="">All Types</option>
                        <option value="housekeeping" {{#if (eq query.type "housekeeping")}}selected{{/if}}>Housekeeping</option>
                        <option value="maintenance" {{#if (eq query.type "maintenance")}}selected{{/if}}>Maintenance</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <label class="form-label">Service Type</label>
                    <select name="serviceType" class="form-select">
                        <option value="">All Services</option>
                        <option value="guest-request" {{#if (eq query.serviceType "guest-request")}}selected{{/if}}>Guest Request</option>
                        <option value="regular-service" {{#if (eq query.serviceType "regular-service")}}selected{{/if}}>Regular Service</option>
                        <option value="emergency" {{#if (eq query.serviceType "emergency")}}selected{{/if}}>Emergency</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <label class="form-label">Status</label>
                    <select name="status" class="form-select">
                        <option value="">All Status</option>
                        <option value="pending" {{#if (eq query.status "pending")}}selected{{/if}}>Pending</option>
                        <option value="in-progress" {{#if (eq query.status "in-progress")}}selected{{/if}}>In Progress</option>
                        <option value="completed" {{#if (eq query.status "completed")}}selected{{/if}}>Completed</option>
                        <option value="cancelled" {{#if (eq query.status "cancelled")}}selected{{/if}}>Cancelled</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <label class="form-label">Priority</label>
                    <select name="priority" class="form-select">
                        <option value="">All Priorities</option>
                        <option value="low" {{#if (eq query.priority "low")}}selected{{/if}}>Low</option>
                        <option value="medium" {{#if (eq query.priority "medium")}}selected{{/if}}>Medium</option>
                        <option value="high" {{#if (eq query.priority "high")}}selected{{/if}}>High</option>
                        <option value="urgent" {{#if (eq query.priority "urgent")}}selected{{/if}}>Urgent</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <label class="form-label">Hotel</label>
                    <select name="hotel" class="form-select">
                        <option value="">All Hotels</option>
                        {{#each hotels}}
                        <option value="{{this._id}}" {{#if (eq ../query.hotel this._id)}}selected{{/if}}>{{this.name}}</option>
                        {{/each}}
                    </select>
                </div>
                <div class="col-md-2 d-flex align-items-end">
                    <button type="submit" class="btn btn-primary w-100">
                        <i class="fas fa-filter me-2"></i>Apply Filters
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Requests List -->
    <div class="card">
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover align-middle mb-0">
                    <thead class="bg-light">
                        <tr>
                            <th class="border-0">ID</th>
                            <th class="border-0">Type</th>
                            <th class="border-0">Service</th>
                            <th class="border-0">Location</th>
                            <th class="border-0">Description</th>
                            <th class="border-0">Priority</th>
                            <th class="border-0">Status</th>
                            <th class="border-0">Requested</th>
                            <th class="border-0">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {{#each requests}}
                        <tr>
                            <td>{{this._id}}</td>
                            <td>
                                <span class="badge bg-{{#if (eq this.requestType 'maintenance')}}warning{{else}}info{{/if}}">
                                    {{this.requestType}}
                                </span>
                            </td>
                            <td>
                                <span class="badge bg-{{serviceTypeColor this.serviceType}}">
                                    {{formatServiceType this.serviceType}}
                                </span>
                            </td>
                            <td>
                                {{#if (eq this.location.type 'room')}}
                                Room {{this.location.room.number}}
                                {{else if (eq this.location.type 'public-area')}}
                                {{this.location.areaName}}
                                {{else}}
                                {{this.location.areaName}}
                                {{/if}}
                            </td>
                            <td>{{this.description}}</td>
                            <td>
                                {{#if (eq this.requestType 'maintenance')}}
                                <span class="badge bg-{{priorityColor this.priority}}">
                                    {{this.priority}}
                                </span>
                                {{else}}
                                -
                                {{/if}}
                            </td>
                            <td>
                                <span class="badge bg-{{statusColor this.status}}">
                                    {{this.status}}
                                </span>
                            </td>
                            <td>{{formatDate this.createdAt}}</td>
                            <td>
                                <button class="btn btn-sm btn-info" onclick="viewRequest('{{this._id}}')">
                                    <i class="fas fa-eye"></i>
                                </button>
                            </td>
                        </tr>
                        {{else}}
                        <tr>
                            <td colspan="9" class="text-center py-4">
                                No maintenance requests found
                            </td>
                        </tr>
                        {{/each}}
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Pagination -->
    {{#if pagination.totalPages}}
    <nav class="mt-4">
        <ul class="pagination justify-content-center">
            {{#if pagination.hasPrev}}
            <li class="page-item">
                <a class="page-link" href="{{getPaginationUrl (subtract pagination.page 1)}}">
                    <i class="fas fa-chevron-left"></i>
                </a>
            </li>
            {{/if}}
            
            <li class="page-item active">
                <span class="page-link">{{pagination.page}} of {{pagination.totalPages}}</span>
            </li>

            {{#if pagination.hasNext}}
            <li class="page-item">
                <a class="page-link" href="{{getPaginationUrl (add pagination.page 1)}}">
                    <i class="fas fa-chevron-right"></i>
                </a>
            </li>
            {{/if}}
        </ul>
    </nav>
    {{/if}}
</div>

<!-- Add Request Modal -->
<div class="modal fade" id="addRequestModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">New Maintenance Request</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="addRequestForm">
                    <div class="mb-3">
                        <label class="form-label">Request Type</label>
                        <select name="requestType" class="form-select" required>
                            <option value="housekeeping">Housekeeping</option>
                            <option value="maintenance">Maintenance</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Service Type</label>
                        <select name="serviceType" class="form-select" required>
                            <option value="guest-request">Guest Request</option>
                            <option value="regular-service">Regular Service</option>
                            <option value="emergency">Emergency</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Location Type</label>
                        <select name="locationType" class="form-select" required>
                            <option value="room">Room</option>
                            <option value="public-area">Public Area</option>
                            <option value="facility">Facility</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Hotel</label>
                        <select name="hotel" class="form-select" required>
                            <option value="">Select Hotel</option>
                            {{#each hotels}}
                            <option value="{{this._id}}">{{this.name}}</option>
                            {{/each}}
                        </select>
                    </div>
                    <div id="roomField" class="mb-3" style="display: none;">
                        <label class="form-label">Room</label>
                        <select name="room" class="form-select">
                            <option value="">Select Room</option>
                        </select>
                    </div>
                    <div id="publicAreaField" class="mb-3" style="display: none;">
                        <label class="form-label">Area Name</label>
                        <input type="text" name="areaName" class="form-control" placeholder="e.g. Lobby, Restaurant">
                    </div>
                    <div id="facilityField" class="mb-3" style="display: none;">
                        <label class="form-label">Facility Name</label>
                        <input type="text" name="facilityName" class="form-control" placeholder="e.g. Pool, Gym">
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea name="description" class="form-control" rows="3" required></textarea>
                    </div>
                    <div id="priorityField" class="mb-3" style="display: none;">
                        <label class="form-label">Priority</label>
                        <select name="priority" class="form-select">
                            <option value="low">Low</option>
                            <option value="medium">Medium</option>
                            <option value="high">High</option>
                            <option value="urgent">Urgent</option>
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="addRequest()">Create Request</button>
            </div>
        </div>
    </div>
</div>

<!-- View Request Modal -->
<div class="modal fade" id="viewRequestModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Maintenance Request Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <table class="table">
                    <tr>
                        <th>Request ID</th>
                        <td id="viewRequestId"></td>
                    </tr>
                    <tr>
                        <th>Request Type</th>
                        <td id="viewRequestType"></td>
                    </tr>
                    <tr>
                        <th>Location</th>
                        <td id="viewLocation"></td>
                    </tr>
                    <tr>
                        <th>Description</th>
                        <td id="viewDescription"></td>
                    </tr>
                    <tr>
                        <th>Status</th>
                        <td id="viewStatus"></td>
                    </tr>
                    <tr>
                        <th>Created At</th>
                        <td id="viewCreatedAt"></td>
                    </tr>
                    <tr id="viewPriorityRow">
                        <th>Priority</th>
                        <td id="viewPriority"></td>
                    </tr>
                    <tr id="viewServiceTypeRow">
                        <th>Service Type</th>
                        <td id="viewServiceType"></td>
                    </tr>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <div class="btn-group">
                    <button type="button" class="btn btn-warning" onclick="updateStatus('in-progress')">Mark In Progress</button>
                    <button type="button" class="btn btn-success" onclick="updateStatus('completed')">Mark Complete</button>
                    <button type="button" class="btn btn-danger" onclick="updateStatus('cancelled')">Cancel Request</button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Include maintenance.js -->
<script src="/js/maintenance.js"></script>

<script>
let currentRequestId = null;

async function loadRooms(hotelId) {
    if (!hotelId) return;
    
    try {
        const response = await fetch(`/api/hotels/${hotelId}/rooms`);
        const data = await response.json();
        
        const roomSelect = document.querySelector('select[name="room"]');
        roomSelect.innerHTML = '<option value="">Select Room</option>';
        
        data.rooms.forEach(room => {
            roomSelect.innerHTML += `<option value="${room._id}">Room ${room.number}</option>`;
        });

        // Also load guests for this hotel
        loadGuests(hotelId);
    } catch (error) {
        console.error('Error loading rooms:', error);
        alert('Error loading rooms');
    }
}

async function loadGuests(hotelId) {
    try {
        const response = await fetch(`/api/hotels/${hotelId}/current-guests`);
        const data = await response.json();
        
        const guestSelect = document.querySelector('select[name="guest"]');
        guestSelect.innerHTML = '<option value="">Select Guest</option>';
        
        data.guests.forEach(guest => {
            guestSelect.innerHTML += `<option value="${guest._id}">${guest.name} (Room ${guest.room.number})</option>`;
        });
    } catch (error) {
        console.error('Error loading guests:', error);
        alert('Error loading guests');
    }
}

async function addRequest() {
    const form = document.getElementById('addRequestForm');
    const formData = new FormData(form);
    
    try {
        const response = await fetch('/admin/maintenance', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(Object.fromEntries(formData))
        });
        
        const result = await response.json();
        
        if (!response.ok) {
            throw new Error(result.error || 'Error creating request');
        }
        
        location.reload();
    } catch (error) {
        console.error('Error adding request:', error);
        alert(error.message);
    }
}

async function viewRequest(id) {
    try {
        currentRequestId = id;
        const response = await fetch(`/admin/maintenance/${id}`);
        const data = await response.json();
        
        if (!data.request) throw new Error('Request not found');
        
        const request = data.request;
        const content = `
            <div class="row g-4">
                <div class="col-md-6">
                    <div class="card h-100">
                        <div class="card-body">
                            <h6 class="card-subtitle mb-3 text-muted">Request Information</h6>
                            <p class="mb-1"><strong>Type:</strong> ${request.requestType}</p>
                            <p class="mb-1"><strong>Service Type:</strong> ${formatServiceType(request.serviceType)}</p>
                            <p class="mb-1"><strong>Location:</strong> ${request.location.areaName || `Room ${request.location.room.number}`}</p>
                            <p class="mb-1"><strong>Hotel:</strong> ${request.hotel.name}</p>
                            <p class="mb-1"><strong>Priority:</strong> ${request.priority}</p>
                            <p class="mb-1"><strong>Status:</strong> ${request.status}</p>
                            <p class="mb-1"><strong>Requested By:</strong> ${request.requestedBy.name}</p>
                            <p class="mb-1"><strong>Created At:</strong> ${new Date(request.createdAt).toLocaleString()}</p>
                            <p class="mb-0"><strong>Description:</strong><br>${request.description}</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="card h-100">
                        <div class="card-body">
                            <h6 class="card-subtitle mb-3 text-muted">Assignment & Schedule</h6>
                            <p class="mb-1"><strong>Assigned To:</strong> ${request.assignedTo ? request.assignedTo.name : 'Not assigned'}</p>
                            <p class="mb-1"><strong>Scheduled For:</strong> ${request.scheduledFor ? new Date(request.scheduledFor).toLocaleString() : 'Not scheduled'}</p>
                            <p class="mb-0"><strong>Completed At:</strong> ${request.completedAt ? new Date(request.completedAt).toLocaleString() : 'Not completed'}</p>
                        </div>
                    </div>
                </div>
                <div class="col-12">
                    <div class="card">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h6 class="card-subtitle text-muted mb-0">Notes & Updates</h6>
                                <button class="btn btn-sm btn-outline-primary" onclick="addNote()">
                                    <i class="fas fa-plus me-1"></i>Add Note
                                </button>
                            </div>
                            ${request.notes.length ? `
                                <div class="timeline">
                                    ${request.notes.map(note => `
                                        <div class="timeline-item pb-3">
                                            <div class="d-flex justify-content-between mb-1">
                                                <small class="text-muted">${new Date(note.addedAt).toLocaleString()}</small>
                                                <small class="text-muted">by ${note.addedBy.name}</small>
                                            </div>
                                            <p class="mb-0">${note.text}</p>
                                        </div>
                                    `).join('')}
                                </div>
                            ` : '<p class="text-muted mb-0">No notes added yet</p>'}
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        document.getElementById('requestDetails').innerHTML = content;
        document.getElementById('completeBtn').style.display = 
            request.status === 'completed' ? 'none' : 'block';
            
        new bootstrap.Modal(document.getElementById('viewRequestModal')).show();
    } catch (error) {
        console.error('Error viewing request:', error);
        alert('Error loading request details');
    }
}

async function updateStatus(status) {
    if (!currentRequestId) return;
    
    try {
        const response = await fetch(`/admin/maintenance/${currentRequestId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ status })
        });
        
        const result = await response.json();
        
        if (!response.ok) {
            throw new Error(result.error || 'Error updating request');
        }
        
        location.reload();
    } catch (error) {
        console.error('Error updating request:', error);
        alert(error.message);
    }
}

async function addNote() {
    if (!currentRequestId) return;
    
    const note = prompt('Enter note:');
    if (!note) return;
    
    try {
        const response = await fetch(`/admin/maintenance/${currentRequestId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ note })
        });
        
        const result = await response.json();
        
        if (!response.ok) {
            throw new Error(result.error || 'Error adding note');
        }
        
        viewRequest(currentRequestId);
    } catch (error) {
        console.error('Error adding note:', error);
        alert(error.message);
    }
}

async function deleteRequest(id) {
    if (!confirm('Are you sure you want to delete this request?')) return;
    
    try {
        const response = await fetch(`/admin/maintenance/${id}`, {
            method: 'DELETE'
        });
        
        const result = await response.json();
        
        if (!response.ok) {
            throw new Error(result.error || 'Error deleting request');
        }
        
        location.reload();
    } catch (error) {
        console.error('Error deleting request:', error);
        alert(error.message);
    }
}

function toggleLocationFields(locationType) {
    const roomFields = document.getElementById('roomFields');
    const areaFields = document.getElementById('areaFields');
    
    if (locationType === 'room') {
        roomFields.style.display = 'block';
        areaFields.style.display = 'none';
    } else {
        roomFields.style.display = 'none';
        areaFields.style.display = 'block';
    }
}

function toggleScheduleFields(scheduleType) {
    const oneTimeSchedule = document.getElementById('oneTimeSchedule');
    const recurringSchedule = document.getElementById('recurringSchedule');
    
    if (scheduleType === 'once') {
        oneTimeSchedule.style.display = 'block';
        recurringSchedule.style.display = 'none';
    } else {
        oneTimeSchedule.style.display = 'none';
        recurringSchedule.style.display = 'block';
    }
}
</script>

<style>
.timeline {
    position: relative;
    padding-left: 1rem;
}

.timeline-item {
    position: relative;
    padding-left: 1.5rem;
    border-left: 2px solid #e9ecef;
}

.timeline-item:last-child {
    border-left-color: transparent;
}

.timeline-item::before {
    content: '';
    position: absolute;
    left: -5px;
    top: 0;
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: #0d6efd;
}
</style>

{{#section 'scripts'}}
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    // Initialize maintenance trends chart
    const ctx = document.getElementById('maintenance-trends-chart').getContext('2d');
    const trendData = {{{trendData}}};
    
    new Chart(ctx, {
        type: 'line',
        data: {
            labels: trendData.map(d => d.date),
            datasets: [
                {
                    label: 'Pending',
                    data: trendData.map(d => d.pending),
                    borderColor: '#ffc107',
                    backgroundColor: '#ffc10720',
                    tension: 0.4,
                    fill: true
                },
                {
                    label: 'In Progress',
                    data: trendData.map(d => d.inProgress),
                    borderColor: '#0dcaf0',
                    backgroundColor: '#0dcaf020',
                    tension: 0.4,
                    fill: true
                },
                {
                    label: 'Completed',
                    data: trendData.map(d => d.completed),
                    borderColor: '#198754',
                    backgroundColor: '#19875420',
                    tension: 0.4,
                    fill: true
                }
            ]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'top',
                },
                title: {
                    display: false
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        stepSize: 1
                    }
                }
            }
        }
    });
</script>
{{/section}}
